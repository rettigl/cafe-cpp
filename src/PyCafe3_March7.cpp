/* Generated by Cython 0.23.4 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/afs/psi.ch/intranet/Controls/cafe/CAFE/boost/boost_1_57_0/boost/multi_index_container.hpp",
            "/afs/psi.ch/intranet/Controls/cafe/CAFE/boost/boost_1_57_0/boost/smart_ptr/shared_ptr.hpp",
            "/afs/psi.ch/intranet/Controls/cafe/CAFE/cafe/cafe-1.3.0/include/PVCtrlHolder.h",
            "/afs/psi.ch/intranet/Controls/cafe/CAFE/cafe/cafe-1.3.0/include/PVDataHolder.h",
            "/afs/psi.ch/intranet/Controls/cafe/CAFE/cafe/cafe-1.3.0/include/PVGroup.h",
            "/afs/psi.ch/intranet/Controls/cafe/CAFE/cafe/cafe-1.3.0/include/cafe.h",
            "/afs/psi.ch/intranet/Controls/cafe/CAFE/cafe/cafe-1.3.0/include/cafeDataType.h",
            "/afs/psi.ch/intranet/Controls/cafe/CAFE/cafe/cafe-1.3.0/include/cafeEnum.h",
            "/afs/psi.ch/intranet/Controls/cafe/CAFE/cafe/cafe-1.3.0/include/caopCodes.h",
            "/afs/psi.ch/intranet/Controls/cafe/CAFE/cafe/cafe-1.3.0/include/channelRegalia.h",
            "/afs/psi.ch/intranet/Controls/cafe/CAFE/cafe/cafe-1.3.0/include/handleHelper.h",
            "/afs/psi.ch/intranet/Controls/cafe/CAFE/cafe/cafe-1.3.0/include/policies.h",
            "/afs/psi.ch/intranet/Controls/cafe/CAFE/cafe/cafe-1.3.0/include/statusCodes.h",
            "/opt/gfa/python-3.5/latest/include/python3.5m/Python.h",
            "/opt/gfa/python-3.5/latest/lib/python3.5/site-packages/numpy/core/include/numpy/arrayobject.h",
            "/opt/gfa/python-3.5/latest/lib/python3.5/site-packages/numpy/core/include/numpy/ufuncobject.h",
            "/usr/local/epics/base/include/cadef.h",
            "/usr/local/epics/base/include/caeventmask.h",
            "/usr/local/epics/base/include/db_access.h",
            "/usr/local/epics/base/include/epicsTime.h"
        ],
        "include_dirs": [
            "/opt/gfa/python-3.5/latest/include/python3.5m",
            "/usr/local/epics/base/include",
            "/usr/local/epics/base/include/os/Linux",
            "/afs/psi.ch/intranet/Controls/cafe/CAFE/boost/boost_1_57_0",
            "/afs/psi.ch/intranet/Controls/cafe/CAFE/boost/boost_1_57_0/boost",
            "/afs/psi.ch/intranet/Controls/cafe/CAFE/cafe/cafe-1.3.0/include",
            ".",
            "/opt/gfa/python-3.5/latest/lib/python3.5/site-packages/numpy/core/include"
        ],
        "language": "c++",
        "libraries": [
            "ca",
            "Com",
            "dl",
            "cafe"
        ],
        "library_dirs": [
            "/usr/local/epics/base/lib/SL6-x86_64",
            "/afs/psi.ch/intranet/Controls/cafe/CAFE/cafe/cafe-1.3.0/lib/SL6-x86_64",
            "/opt/gfa/python-3.5/latest/lib"
        ],
        "runtime_library_dirs": [
            "/usr/local/epics/base/lib/SL6-x86_64",
            "/afs/psi.ch/intranet/Controls/cafe/CAFE/cafe/cafe-1.3.0/lib/SL6-x86_64",
            "/opt/gfa/python-3.5/latest/lib"
        ]
    }
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_23_4"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
#define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__PyCafe
#define __PYX_HAVE_API__PyCafe
#include "string.h"
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include "boost/multi_index_container.hpp"
#include "boost/smart_ptr/shared_ptr.hpp"
#include "cadef.h"
#include "caeventmask.h"
#include "time.h"
#include "epicsTime.h"
#include "db_access.h"
#include "caopCodes.h"
#include "cafeDataType.h"
#include "cafeEnum.h"
#include "channelRegalia.h"
#include "handleHelper.h"
#include "policies.h"
#include "statusCodes.h"
#include "PVDataHolder.h"
#include "PVCtrlHolder.h"
#include "PVGroup.h"
#include "cafe.h"
#include "stdio.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "pythread.h"
#include "pystate.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 1
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING "ascii"
#define __Pyx_PyObject_FromString __Pyx_PyStr_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyStr_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "PyCafeDefs.pxi",
  "PyCafe.pyx",
  "__init__.pxd",
  "stringsource",
  "type.pxd",
};
struct __pyx_memoryview_obj;
typedef struct {
  struct __pyx_memoryview_obj *memview;
  char *data;
  Py_ssize_t shape[8];
  Py_ssize_t strides[8];
  Py_ssize_t suboffsets[8];
} __Pyx_memviewslice;

#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;

#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __pyx_atomic_int_type int
#if CYTHON_ATOMICS && __GNUC__ >= 4 && (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL >= 2)) &&\
                    !defined(__i386__)
    #define __pyx_atomic_incr_aligned(value, lock) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_aligned(value, lock) __sync_fetch_and_sub(value, 1)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER) && 0
    #include <Windows.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type LONG
    #define __pyx_atomic_incr_aligned(value, lock) InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#elif CYTHON_ATOMICS && (defined(__ICC) || defined(__INTEL_COMPILER)) && 0
    #define __pyx_atomic_incr_aligned(value, lock) _InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) _InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using Intel atomics"
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
typedef volatile __pyx_atomic_int_type __pyx_atomic_int;
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif


/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":725
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":726
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":727
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":728
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":732
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":733
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":734
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":735
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":739
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":740
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":749
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":750
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":751
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":754
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":755
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":757
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":761
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
struct __pyx_obj_6PyCafe__finalizer;
struct __pyx_obj_6PyCafe_CyCa;
struct __pyx_obj_6PyCafe_channelInfo;
struct __pyx_obj_6PyCafe__epicsTimeStampAsDate;
struct __pyx_obj_6PyCafe_pvctrl;
struct __pyx_obj_6PyCafe_pvdata;
struct __pyx_obj_6PyCafe_pvgroup;
struct __pyx_obj_6PyCafe_CyCafe;
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":764
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":765
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":766
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_6PyCafe_PVDataHolderToStruct;
struct __pyx_opt_args_6PyCafe_PVCtrlHolderToStruct;
struct __pyx_opt_args_6PyCafe_6CyCafe_checkForHandle;
struct __pyx_opt_args_6PyCafe_6CyCafe_checkForHandleList;
struct __pyx_opt_args_6PyCafe_6CyCafe_checkForGroupHandle;

/* "PyCafeDefs.pxi":118
 * cdef int PYCAFE_PRINT_LEVEL=PYCAFE_PRINT_MED
 * 
 * ctypedef 	shared_ptr[vector [double]] vdouble_ptr             # <<<<<<<<<<<<<<
 * ctypedef 	shared_ptr[vector [float]] vfloat_ptr
 * 
 */
typedef boost::shared_ptr<std::vector<double> >  __pyx_t_6PyCafe_vdouble_ptr;

/* "PyCafeDefs.pxi":119
 * 
 * ctypedef 	shared_ptr[vector [double]] vdouble_ptr
 * ctypedef 	shared_ptr[vector [float]] vfloat_ptr             # <<<<<<<<<<<<<<
 * 
 * cdef object py_cb = None
 */
typedef boost::shared_ptr<std::vector<float> >  __pyx_t_6PyCafe_vfloat_ptr;

/* "PyCafeDefs.pxi":681
 * #################################################################################
 * 
 * cdef pvdata	PVDataHolderToStruct(PVDataHolder pvd, dt=None):             # <<<<<<<<<<<<<<
 * 
 * 	#global p1
 */
struct __pyx_opt_args_6PyCafe_PVDataHolderToStruct {
  int __pyx_n;
  PyObject *dt;
};

/* "PyCafeDefs.pxi":756
 * #################################################################################
 * 
 * cdef pvctrl	PVCtrlHolderToStruct(PVCtrlHolder pvc, dt=None):             # <<<<<<<<<<<<<<
 * 
 * 	#global c1
 */
struct __pyx_opt_args_6PyCafe_PVCtrlHolderToStruct {
  int __pyx_n;
  PyObject *dt;
};

/* "PyCafe.pyx":437
 * 	##################################################################################
 * 	### Allow user to choose whether or not to open #####
 * 	cpdef checkForHandle(self, str pv, bint force=True):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int _handle=0;
 * 		_handle=self.hh.getHandleFromPV(pv)
 */
struct __pyx_opt_args_6PyCafe_6CyCafe_checkForHandle {
  int __pyx_n;
  int force;
};

/* "PyCafe.pyx":451
 * 
 * 	##################################################################################
 * 	cpdef checkForHandleList(self, list pvList, bint force=True):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int nToOpen=0
 */
struct __pyx_opt_args_6PyCafe_6CyCafe_checkForHandleList {
  int __pyx_n;
  int force;
};

/* "PyCafe.pyx":474
 * 
 * 	##################################################################################
 * 	cpdef checkForGroupHandle(self, str gName, bint force=True):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int _ghandle=0;
 * 		_ghandle=self.hh.getGroupHandleFromGroupName(gName)
 */
struct __pyx_opt_args_6PyCafe_6CyCafe_checkForGroupHandle {
  int __pyx_n;
  int force;
};

/* "PyCafeDefs.pxi":188
 * '''
 * #Correct memory management a la KWSmith p.190
 * cdef class _finalizer:             # <<<<<<<<<<<<<<
 * 	cdef void *_data
 * 	def __dealloc__(self):
 */
struct __pyx_obj_6PyCafe__finalizer {
  PyObject_HEAD
  void *_data;
};


/* "PyCafeDefs.pxi":201
 * 		return
 * 
 * cdef class CyCa:             # <<<<<<<<<<<<<<
 * 	cpdef readonly unsigned int CY_DBE_VALUE
 * 	cpdef readonly unsigned int CY_DBE_LOG
 */
struct __pyx_obj_6PyCafe_CyCa {
  PyObject_HEAD
  unsigned int CY_DBE_VALUE;
  unsigned int CY_DBE_LOG;
  unsigned int CY_DBE_ARCHIVE;
  unsigned int CY_DBE_ALARM;
  unsigned int CY_DBE_PROPERTY;
  unsigned int CY_DBR_PRIMITIVE;
  unsigned int CY_DBR_PLAIN;
  unsigned int CY_DBR_STS;
  unsigned int CY_DBR_TIME;
  unsigned int CY_DBR_GR;
  unsigned int CY_DBR_CTRL;
  unsigned int CY_DBR_PUT;
  unsigned int CY_DBR_STSACK;
  unsigned int CY_DBR_CLASS;
  unsigned int CY_DBR_NONE;
  unsigned int CY_DBR_STRING;
  unsigned int CY_DBR_SHORT;
  unsigned int CY_DBR_INT;
  unsigned int CY_DBR_FLOAT;
  unsigned int CY_DBR_ENUM;
  unsigned int CY_DBR_CHAR;
  unsigned int CY_DBR_LONG;
  unsigned int CY_DBR_DOUBLE;
  unsigned int CY_DBR_STS_STRING;
  unsigned int CY_DBR_STS_SHORT;
  unsigned int CY_DBR_STS_INT;
  unsigned int CY_DBR_STS_FLOAT;
  unsigned int CY_DBR_STS_ENUM;
  unsigned int CY_DBR_STS_CHAR;
  unsigned int CY_DBR_STS_LONG;
  unsigned int CY_DBR_STS_DOUBLE;
  unsigned int CY_DBR_TIME_STRING;
  unsigned int CY_DBR_TIME_SHORT;
  unsigned int CY_DBR_TIME_INT;
  unsigned int CY_DBR_TIME_FLOAT;
  unsigned int CY_DBR_TIME_ENUM;
  unsigned int CY_DBR_TIME_CHAR;
  unsigned int CY_DBR_TIME_LONG;
  unsigned int CY_DBR_TIME_DOUBLE;
  unsigned int CY_DBR_GR_STRING;
  unsigned int CY_DBR_GR_SHORT;
  unsigned int CY_DBR_GR_INT;
  unsigned int CY_DBR_GR_FLOAT;
  unsigned int CY_DBR_GR_ENUM;
  unsigned int CY_DBR_GR_CHAR;
  unsigned int CY_DBR_GR_LONG;
  unsigned int CY_DBR_GR_DOUBLE;
  unsigned int CY_DBR_CTRL_STRING;
  unsigned int CY_DBR_CTRL_SHORT;
  unsigned int CY_DBR_CTRL_INT;
  unsigned int CY_DBR_CTRL_FLOAT;
  unsigned int CY_DBR_CTRL_ENUM;
  unsigned int CY_DBR_CTRL_CHAR;
  unsigned int CY_DBR_CTRL_LONG;
  unsigned int CY_DBR_CTRL_DOUBLE;
};


/* "PyCafeDefs.pxi":318
 * 
 * 
 * cdef class channelInfo:             # <<<<<<<<<<<<<<
 * 	cdef readonly 	long  	  					channelID
 * 	cdef readonly   bint                connectFlag
 */
struct __pyx_obj_6PyCafe_channelInfo {
  PyObject_HEAD
  long channelID;
  int connectFlag;
  std::string hostName;
  unsigned int nelem;
  int dataType;
  unsigned short accessRead;
  unsigned short accessWrite;
  std::string className;
  int connectionState;
  int cafeConnectionState;
  std::string connectionStateAsString;
  std::string cafeConnectionStateAsString;
  CAFEDataTypeCode cdt;
  CAFEStatusCode csc;
  CAOPCodes caop;
};


/* "PyCafeDefs.pxi":367
 * 
 * ##################################################################################
 * cdef class _epicsTimeStampAsDate:             # <<<<<<<<<<<<<<
 * 	cdef epicsTime *_time
 * 	cdef local_tm_nano_sec local
 */
struct __pyx_obj_6PyCafe__epicsTimeStampAsDate {
  PyObject_HEAD
  epicsTime *_time;
  struct local_tm_nano_sec local;
  PyObject *etsDate;
};


/* "PyCafeDefs.pxi":395
 * 
 * ##################################################################################
 * cdef class pvctrl:             # <<<<<<<<<<<<<<
 * 	cdef readonly unsigned int nelem
 * 	cdef readonly int alarmStatus
 */
struct __pyx_obj_6PyCafe_pvctrl {
  PyObject_HEAD
  struct __pyx_vtabstruct_6PyCafe_pvctrl *__pyx_vtab;
  unsigned int nelem;
  int alarmStatus;
  int alarmSeverity;
  unsigned short precision;
  std::string units;
  unsigned short noEnumStrings;
  PyObject *enumStrings;
  PyObject *upperDisplayLimit;
  PyObject *lowerDisplayLimit;
  PyObject *upperAlarmLimit;
  PyObject *upperWarningLimit;
  PyObject *lowerWarningLimit;
  PyObject *lowerAlarmLimit;
  PyObject *upperControlLimit;
  PyObject *lowerControlLimit;
  PyObject *value;
  int status;
};


/* "PyCafeDefs.pxi":489
 * 
 * ##################################################################################
 * cdef class pvdata:             # <<<<<<<<<<<<<<
 * 	cdef readonly unsigned int nelem
 * 	cdef readonly int alarmStatus
 */
struct __pyx_obj_6PyCafe_pvdata {
  PyObject_HEAD
  struct __pyx_vtabstruct_6PyCafe_pvdata *__pyx_vtab;
  unsigned int nelem;
  int alarmStatus;
  int alarmSeverity;
  PyObject *ts;
  PyObject *tsDate;
  PyObject *value;
  int status;
};


/* "PyCafeDefs.pxi":558
 * 
 * ##################################################################################
 * cdef class pvgroup:             # <<<<<<<<<<<<<<
 * 	cdef readonly list pvdata
 * 	cdef readonly unsigned int npv
 */
struct __pyx_obj_6PyCafe_pvgroup {
  PyObject_HEAD
  struct __pyx_vtabstruct_6PyCafe_pvgroup *__pyx_vtab;
  PyObject *pvdata;
  unsigned int npv;
  std::string name;
  int groupStatus;
  unsigned int groupHandle;
};


/* "PyCafe.pyx":25
 * 
 * ##################################################################################
 * cdef class CyCafe:             # <<<<<<<<<<<<<<
 * 
 * 	cdef:
 */
struct __pyx_obj_6PyCafe_CyCafe {
  PyObject_HEAD
  struct __pyx_vtabstruct_6PyCafe_CyCafe *__pyx_vtab;
  CAFE *_c_cafe;
  double valFloat;
  std::string valStr;
  int valInt;
  std::vector<std::string>  vStr;
  std::vector<double>  vFloat;
  std::vector<dbr_long_t>  vInt;
  HandleHelper hh;
  CAFEStatus cs;
  CAFEStatusSeverity css;
  PyObject *pythonVersion;
};


/* "View.MemoryView":101
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_array_obj {
  PyObject_HEAD
  char *data;
  Py_ssize_t len;
  char *format;
  int ndim;
  Py_ssize_t *_shape;
  Py_ssize_t *_strides;
  Py_ssize_t itemsize;
  PyObject *mode;
  PyObject *_format;
  void (*callback_free_data)(void *);
  int free_data;
  int dtype_is_object;
};


/* "View.MemoryView":271
 * 
 * @cname('__pyx_MemviewEnum')
 * cdef class Enum(object):             # <<<<<<<<<<<<<<
 *     cdef object name
 *     def __init__(self, name):
 */
struct __pyx_MemviewEnum_obj {
  PyObject_HEAD
  PyObject *name;
};


/* "View.MemoryView":304
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */
struct __pyx_memoryview_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;
  PyObject *obj;
  PyObject *_size;
  PyObject *_array_interface;
  PyThread_type_lock lock;
  __pyx_atomic_int acquisition_count[2];
  __pyx_atomic_int *acquisition_count_aligned_p;
  Py_buffer view;
  int flags;
  int dtype_is_object;
  __Pyx_TypeInfo *typeinfo;
};


/* "View.MemoryView":923
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */
struct __pyx_memoryviewslice_obj {
  struct __pyx_memoryview_obj __pyx_base;
  __Pyx_memviewslice from_slice;
  PyObject *from_object;
  PyObject *(*to_object_func)(char *);
  int (*to_dtype_func)(char *, PyObject *);
};



/* "PyCafeDefs.pxi":395
 * 
 * ##################################################################################
 * cdef class pvctrl:             # <<<<<<<<<<<<<<
 * 	cdef readonly unsigned int nelem
 * 	cdef readonly int alarmStatus
 */

struct __pyx_vtabstruct_6PyCafe_pvctrl {
  PyObject *(*showPrint)(struct __pyx_obj_6PyCafe_pvctrl *, PyObject *);
};
static struct __pyx_vtabstruct_6PyCafe_pvctrl *__pyx_vtabptr_6PyCafe_pvctrl;


/* "PyCafeDefs.pxi":489
 * 
 * ##################################################################################
 * cdef class pvdata:             # <<<<<<<<<<<<<<
 * 	cdef readonly unsigned int nelem
 * 	cdef readonly int alarmStatus
 */

struct __pyx_vtabstruct_6PyCafe_pvdata {
  PyObject *(*showPrint)(struct __pyx_obj_6PyCafe_pvdata *, PyObject *);
};
static struct __pyx_vtabstruct_6PyCafe_pvdata *__pyx_vtabptr_6PyCafe_pvdata;


/* "PyCafeDefs.pxi":558
 * 
 * ##################################################################################
 * cdef class pvgroup:             # <<<<<<<<<<<<<<
 * 	cdef readonly list pvdata
 * 	cdef readonly unsigned int npv
 */

struct __pyx_vtabstruct_6PyCafe_pvgroup {
  PyObject *(*showPrint)(struct __pyx_obj_6PyCafe_pvgroup *, PyObject *, PyObject *);
};
static struct __pyx_vtabstruct_6PyCafe_pvgroup *__pyx_vtabptr_6PyCafe_pvgroup;


/* "PyCafe.pyx":25
 * 
 * ##################################################################################
 * cdef class CyCafe:             # <<<<<<<<<<<<<<
 * 
 * 	cdef:
 */

struct __pyx_vtabstruct_6PyCafe_CyCafe {
  PyObject *(*checkForHandle)(struct __pyx_obj_6PyCafe_CyCafe *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6PyCafe_6CyCafe_checkForHandle *__pyx_optional_args);
  PyObject *(*checkForHandleList)(struct __pyx_obj_6PyCafe_CyCafe *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6PyCafe_6CyCafe_checkForHandleList *__pyx_optional_args);
  PyObject *(*checkForGroupHandle)(struct __pyx_obj_6PyCafe_CyCafe *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6PyCafe_6CyCafe_checkForGroupHandle *__pyx_optional_args);
};
static struct __pyx_vtabstruct_6PyCafe_CyCafe *__pyx_vtabptr_6PyCafe_CyCafe;


/* "View.MemoryView":304
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

struct __pyx_vtabstruct_memoryview {
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);
};
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;


/* "View.MemoryView":923
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

struct __pyx_vtabstruct__memoryviewslice {
  struct __pyx_vtabstruct_memoryview __pyx_base;
};
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;

/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_EqObjC(op1, op2, intval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

#include <string.h>

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb);
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb);

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

static void __Pyx_RaiseBufferIndexError(int axis);

static CYTHON_INLINE int  __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);

#define __Pyx_BUF_MAX_NDIMS %(BUF_MAX_NDIMS)d
#define __Pyx_MEMVIEW_DIRECT   1
#define __Pyx_MEMVIEW_PTR      2
#define __Pyx_MEMVIEW_FULL     4
#define __Pyx_MEMVIEW_CONTIG   8
#define __Pyx_MEMVIEW_STRIDED  16
#define __Pyx_MEMVIEW_FOLLOW   32
#define __Pyx_IS_C_CONTIG 1
#define __Pyx_IS_F_CONTIG 2
static int __Pyx_init_memviewslice(
                struct __pyx_memoryview_obj *memview,
                int ndim,
                __Pyx_memviewslice *memviewslice,
                int memview_is_new_reference);
static CYTHON_INLINE int __pyx_add_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
static CYTHON_INLINE int __pyx_sub_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
#define __pyx_get_slice_count_pointer(memview) (memview->acquisition_count_aligned_p)
#define __pyx_get_slice_count(memview) (*__pyx_get_slice_count_pointer(memview))
#define __PYX_INC_MEMVIEW(slice, have_gil) __Pyx_INC_MEMVIEW(slice, have_gil, __LINE__)
#define __PYX_XDEC_MEMVIEW(slice, have_gil) __Pyx_XDEC_MEMVIEW(slice, have_gil, __LINE__)
static CYTHON_INLINE void __Pyx_INC_MEMVIEW(__Pyx_memviewslice *, int, int);
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *, int, int);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void);

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

#define __Pyx_PyDict_Clear(d) (PyDict_Clear(d), 0)

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t, Py_ssize_t);

#define UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *get_memview(PyObject *__pyx_v_self); /*proto*/
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *__pyx_memoryview_transpose(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview__get__base(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_shape(PyObject *__pyx_v_self); /*proto*/
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

static PyObject *__pyx_memoryview_get_strides(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_suboffsets(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_ndim(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_itemsize(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_nbytes(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_size(PyObject *__pyx_v_self); /*proto*/
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

static CYTHON_INLINE long __Pyx_div_long(long, long);

static PyObject *__pyx_memoryviewslice__get__base(PyObject *__pyx_v_self); /*proto*/
#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
#endif

static int __Pyx_SetVtable(PyObject *dict, void *vtable);

static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

static PyObject* __Pyx_patch_inspect(PyObject* module);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#include <new>

typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


static Py_ssize_t __Pyx_zeros[] = {0, 0, 0, 0, 0, 0, 0, 0};
static Py_ssize_t __Pyx_minusones[] = {-1, -1, -1, -1, -1, -1, -1, -1};

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE DBR_TYPE __Pyx_PyInt_As_DBR_TYPE(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_short(unsigned short value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_short(short value);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_DBR_TYPE(DBR_TYPE value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_CAFE_CFT_STATE(CAFE_CFT_STATE value);

static PyObject *__pyx_memview_get_int(const char *itemp);
static int __pyx_memview_set_int(const char *itemp, PyObject *obj);

static PyObject *__pyx_memview_get_double(const char *itemp);
static int __pyx_memview_set_double(const char *itemp, PyObject *obj);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_dbr_long_t(dbr_long_t value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_char(unsigned char value);

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

static CYTHON_INLINE dbr_long_t __Pyx_PyInt_As_dbr_long_t(PyObject *);

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if (defined(_WIN32) || defined(__clang__)) && defined(__cplusplus) && CYTHON_CCOMPLEX
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice *mvs,
                                        char order, int ndim);

static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);

static CYTHON_INLINE PyObject *__pyx_capsule_create(void *p, const char *sig);

static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

struct __pyx_typeinfo_string {
    char string[3];
};
static struct __pyx_typeinfo_string __Pyx_TypeInfoToFormat(__Pyx_TypeInfo *type);

static int __pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b);

static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj);

static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dc_int(PyObject *);

static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dc_double(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name);

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_6PyCafe_6pvctrl_showPrint(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self, PyObject *__pyx_v_nelem); /* proto*/
static PyObject *__pyx_f_6PyCafe_6pvdata_showPrint(struct __pyx_obj_6PyCafe_pvdata *__pyx_v_self, PyObject *__pyx_v_nelem); /* proto*/
static PyObject *__pyx_f_6PyCafe_7pvgroup_showPrint(struct __pyx_obj_6PyCafe_pvgroup *__pyx_v_self, PyObject *__pyx_v_npv, PyObject *__pyx_v_grouplist); /* proto*/
static PyObject *__pyx_f_6PyCafe_6CyCafe_checkForHandle(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_pv, int __pyx_skip_dispatch, struct __pyx_opt_args_6PyCafe_6CyCafe_checkForHandle *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_6PyCafe_6CyCafe_checkForHandleList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_pvList, int __pyx_skip_dispatch, struct __pyx_opt_args_6PyCafe_6CyCafe_checkForHandleList *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_6PyCafe_6CyCafe_checkForGroupHandle(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_gName, int __pyx_skip_dispatch, struct __pyx_opt_args_6PyCafe_6CyCafe_checkForGroupHandle *__pyx_optional_args); /* proto*/
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto*/
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'cython.view' */
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/
static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *, PyObject *); /*proto*/

/* Module declarations from 'PyCafe' */
static PyTypeObject *__pyx_ptype_6PyCafe__finalizer = 0;
static PyTypeObject *__pyx_ptype_6PyCafe_CyCa = 0;
static PyTypeObject *__pyx_ptype_6PyCafe_channelInfo = 0;
static PyTypeObject *__pyx_ptype_6PyCafe__epicsTimeStampAsDate = 0;
static PyTypeObject *__pyx_ptype_6PyCafe_pvctrl = 0;
static PyTypeObject *__pyx_ptype_6PyCafe_pvdata = 0;
static PyTypeObject *__pyx_ptype_6PyCafe_pvgroup = 0;
static PyTypeObject *__pyx_ptype_6PyCafe_CyCafe = 0;
static PyTypeObject *__pyx_array_type = 0;
static PyTypeObject *__pyx_MemviewEnum_type = 0;
static PyTypeObject *__pyx_memoryview_type = 0;
static PyTypeObject *__pyx_memoryviewslice_type = 0;
static int __pyx_v_6PyCafe_PYCAFE_PRINT_HIGH;
static int __pyx_v_6PyCafe_PYCAFE_PRINT_MED;
static int __pyx_v_6PyCafe_PYCAFE_PRINT_LOW;
static int __pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL;
static PyObject *__pyx_v_6PyCafe_py_cb = 0;
static PyObject *__pyx_v_6PyCafe_py_cb_handle = 0;
static PyObject *__pyx_v_6PyCafe_py_cb_ctrl = 0;
static PyObject *__pyx_v_6PyCafe_monDictGlobal = 0;
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static void __pyx_f_6PyCafe_py_cb_wrapper(PVDataHolder, unsigned int, std::string); /*proto*/
static void __pyx_f_6PyCafe_py_cb_ctrl_wrapper(PVCtrlHolder, unsigned int, std::string); /*proto*/
static void __pyx_f_6PyCafe_py_cb_handle_wrapper(unsigned int); /*proto*/
static void __pyx_f_6PyCafe_py_cb_handle_monid_wrapper(unsigned int, unsigned long); /*proto*/
static void __pyx_f_6PyCafe_set_base(PyArrayObject *, void *); /*proto*/
static PyObject *__pyx_f_6PyCafe_getMatchedDataType(PyObject *, PyObject *); /*proto*/
static struct __pyx_obj_6PyCafe_pvdata *__pyx_f_6PyCafe_PVDataHolderToStruct(PVDataHolder, struct __pyx_opt_args_6PyCafe_PVDataHolderToStruct *__pyx_optional_args); /*proto*/
static struct __pyx_obj_6PyCafe_pvctrl *__pyx_f_6PyCafe_PVCtrlHolderToStruct(PVCtrlHolder, struct __pyx_opt_args_6PyCafe_PVCtrlHolderToStruct *__pyx_optional_args); /*proto*/
static struct __pyx_obj_6PyCafe_channelInfo *__pyx_f_6PyCafe_channelRegaliaToStruct(ChannelRegalia); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/
static void *__pyx_align_pointer(void *, size_t); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static PyObject *assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, char *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, char *); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static struct epicsTimeStamp __pyx_convert__from_py_epicsTimeStamp(PyObject *); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_unsigned_int(const std::vector<unsigned int>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(const std::vector<std::string>  &); /*proto*/
static std::vector<std::string>  __pyx_convert_vector_from_py_std_3a__3a_string(PyObject *); /*proto*/
static PyObject *__pyx_format_from_typeinfo(__Pyx_TypeInfo *); /*proto*/
static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_dbr_long_t(const std::vector<dbr_long_t>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double>  &); /*proto*/
static std::vector<char const *>  __pyx_convert_vector_from_py_char__const___2a_(PyObject *); /*proto*/
static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_int = { "int", NULL, sizeof(int), { 0 }, 0, IS_UNSIGNED(int) ? 'U' : 'I', IS_UNSIGNED(int), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_double = { "double", NULL, sizeof(double), { 0 }, 0, 'R', 0, 0 };
#define __Pyx_MODULE_NAME "PyCafe"
int __pyx_module_is_main_PyCafe = 0;

/* Implementation of 'PyCafe' */
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_Exception;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_Ellipsis;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_KeyError;
static char __pyx_k_B[] = "B";
static char __pyx_k_H[] = "H";
static char __pyx_k_I[] = "I";
static char __pyx_k_L[] = "L";
static char __pyx_k_O[] = "O";
static char __pyx_k_Q[] = "Q";
static char __pyx_k_T[] = "T{";
  static char __pyx_k_b[] = "b";
  static char __pyx_k_c[] = "c";
  static char __pyx_k_d[] = "[%d]";
  static char __pyx_k_f[] = "f";
  static char __pyx_k_g[] = "g";
  static char __pyx_k_h[] = "h";
  static char __pyx_k_i[] = "i";
  static char __pyx_k_l[] = "l";
  static char __pyx_k_q[] = "q";
  static char __pyx_k_s[] = "[%s]";
  static char __pyx_k_PV[] = "PV            =";
  static char __pyx_k_Zd[] = "Zd";
  static char __pyx_k_Zf[] = "Zf";
  static char __pyx_k_Zg[] = "Zg";
  static char __pyx_k_cb[] = "cb";
  static char __pyx_k_dt[] = "dt";
  static char __pyx_k_id[] = "id";
  static char __pyx_k_np[] = "np";
  static char __pyx_k_pv[] = "pv";
  static char __pyx_k_ts[] = "ts";
  static char __pyx_k__85[] = "";
  static char __pyx_k__98[] = "!!";
  static char __pyx_k__99[] = "---------------------------------";
  static char __pyx_k_d_2[] = "d";
  static char __pyx_k_dbr[] = "dbr";
  static char __pyx_k_get[] = "get";
  static char __pyx_k_has[] = "has";
  static char __pyx_k_int[] = "int";
  static char __pyx_k_obj[] = "obj";
  static char __pyx_k_s_2[] = "(%s)";
  static char __pyx_k_str[] = "str";
  static char __pyx_k_sys[] = "sys";
  static char __pyx_k_PV_2[] = "PV=";
  static char __pyx_k_PV_3[] = "PV";
  static char __pyx_k__102[] = "--------------------------------------------";
  static char __pyx_k__168[] = "[";
  static char __pyx_k__169[] = "]";
  static char __pyx_k__236[] = "^";
  static char __pyx_k__237[] = ":";
static char __pyx_k__238[] = "}";
static char __pyx_k__239[] = ",";
static char __pyx_k_base[] = "base";
static char __pyx_k_join[] = "join";
static char __pyx_k_long[] = "long";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_mask[] = "mask";
static char __pyx_k_mode[] = "mode";
static char __pyx_k_mpid[] = "mpid";
static char __pyx_k_name[] = "name";
static char __pyx_k_ndim[] = "ndim";
static char __pyx_k_nsec[] = "nsec";
static char __pyx_k_open[] = "open";
static char __pyx_k_pack[] = "pack";
static char __pyx_k_show[] = "show";
static char __pyx_k_size[] = "size";
static char __pyx_k_step[] = "step";
static char __pyx_k_stop[] = "stop";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_time[] = "time";
static char __pyx_k_ts_2[] = "ts====== ";
static char __pyx_k_ts_3[] = "ts            =";
static char __pyx_k_uint[] = "uint";
static char __pyx_k_utf8[] = "utf8";
static char __pyx_k_year[] = "year=== ";
static char __pyx_k_ASCII[] = "ASCII";
static char __pyx_k_UTF_8[] = "UTF-8";
static char __pyx_k_array[] = "array";
static char __pyx_k_class[] = "__class__";
static char __pyx_k_dtype[] = "dtype";
static char __pyx_k_empty[] = "empty";
static char __pyx_k_error[] = "error";
static char __pyx_k_flags[] = "flags";
static char __pyx_k_float[] = "float";
static char __pyx_k_force[] = "force";
static char __pyx_k_gName[] = "gName";
static char __pyx_k_getPV[] = "getPV";
static char __pyx_k_gname[] = "gname";
static char __pyx_k_int32[] = "int32";
static char __pyx_k_int64[] = "int64";
static char __pyx_k_numpy[] = "numpy";
static char __pyx_k_print[] = "print";
static char __pyx_k_range[] = "range";
static char __pyx_k_shape[] = "shape";
static char __pyx_k_short[] = "short";
static char __pyx_k_sleep[] = "sleep";
static char __pyx_k_start[] = "start";
static char __pyx_k_ulong[] = "ulong";
static char __pyx_k_value[] = "value         =";
static char __pyx_k_Handle[] = "Handle=";
static char __pyx_k_Member[] = "Member: ";
static char __pyx_k_PyCafe[] = "PyCafe";
static char __pyx_k_append[] = "append";
static char __pyx_k_double[] = "double";
static char __pyx_k_encode[] = "encode";
static char __pyx_k_format[] = "format";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_name_2[] = "__name__";
static char __pyx_k_native[] = "native";
static char __pyx_k_netrfc[] = "netrfc";
static char __pyx_k_pvList[] = "pvList";
static char __pyx_k_pvlist[] = "_pvlist";
static char __pyx_k_status[] = "status";
static char __pyx_k_string[] = "string";
static char __pyx_k_struct[] = "struct";
static char __pyx_k_tsDate[] = "tsDate        =";
static char __pyx_k_uint32[] = "uint32";
static char __pyx_k_uint64[] = "uint64";
static char __pyx_k_unpack[] = "unpack";
static char __pyx_k_ushort[] = "ushort";
static char __pyx_k_valSet[] = "valSet";
static char __pyx_k_values[] = "values\t      =";
static char __pyx_k_Channel[] = "Channel";
static char __pyx_k_asnumpy[] = "asnumpy";
static char __pyx_k_dbrBase[] = "dbrBase";
static char __pyx_k_float64[] = "float64";
static char __pyx_k_fortran[] = "fortran";
static char __pyx_k_getList[] = "getList";
static char __pyx_k_inspect[] = "inspect";
static char __pyx_k_memview[] = "memview";
static char __pyx_k_ndarray[] = "ndarray";
static char __pyx_k_nelem_d[] = "nelem               = %d";
static char __pyx_k_timeout[] = "timeout";
static char __pyx_k_units_s[] = "units         = %s";
static char __pyx_k_valList[] = "valList";
static char __pyx_k_value_2[] = "value";
static char __pyx_k_Ellipsis[] = "Ellipsis";
static char __pyx_k_KeyError[] = "KeyError";
static char __pyx_k_getArray[] = "getArray";
static char __pyx_k_getCache[] = "getCache";
static char __pyx_k_getGroup[] = "getGroup";
static char __pyx_k_handlePV[] = "handlePV";
static char __pyx_k_itemsize[] = "itemsize";
static char __pyx_k_status_d[] = "status        = %d";
static char __pyx_k_tsDate_2[] = "tsDate";
static char __pyx_k_Exception[] = "Exception";
static char __pyx_k_TypeError[] = "TypeError";
static char __pyx_k_a_mapping[] = "a mapping";
static char __pyx_k_cafe_init[] = "cafe.init()";
static char __pyx_k_enumerate[] = "enumerate";
static char __pyx_k_getPVList[] = "getPVList";
static char __pyx_k_groupOpen[] = "groupOpen";
static char __pyx_k_has_error[] = " has error: ";
static char __pyx_k_printFlag[] = "printFlag";
static char __pyx_k_tolerance[] = "tolerance";
static char __pyx_k_GROUP_NAME[] = "GROUP NAME   = ";
static char __pyx_k_IndexError[] = "IndexError";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_getPVCache[] = "getPVCache";
static char __pyx_k_getPVGroup[] = "getPVGroup";
static char __pyx_k_getargspec[] = "getargspec";
static char __pyx_k_handleList[] = "handleList";
static char __pyx_k_hostName_s[] = "hostName            = %s";
static char __pyx_k_openNoWait[] = "openNoWait";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_statusList[] = "statusList";
static char __pyx_k_vectorList[] = "vectorList";
static char __pyx_k_MemoryError[] = "MemoryError";
static char __pyx_k_alarmStatus[] = "alarmStatus";
static char __pyx_k_channelID_x[] = "channelID           = %x";
static char __pyx_k_className_s[] = "className           = %s";
static char __pyx_k_enumStrings[] = "enumStrings   =";
static char __pyx_k_ghandleName[] = "ghandleName";
static char __pyx_k_handlePVSet[] = "handlePVSet";
static char __pyx_k_precision_d[] = "precision     = %d";
static char __pyx_k_GROUP_HANDLE[] = "GROUP HANDLE = ";
static char __pyx_k_GROUP_STATUS[] = "GROUP STATUS = ";
static char __pyx_k_RuntimeError[] = "RuntimeError";
static char __pyx_k_accessRead_d[] = "accessRead          = %d";
static char __pyx_k_cafe_openNow[] = "cafe.openNow()";
static char __pyx_k_dataType_s_d[] = "dataType            = %s (%d)";
static char __pyx_k_secPastEpoch[] = "secPastEpoch";
static char __pyx_k_accessWrite_d[] = "accessWrite         = %d";
static char __pyx_k_alarmSeverity[] = "alarmSeverity";
static char __pyx_k_alarmStatus_d[] = "alarmStatus   = %d";
static char __pyx_k_connectFlag_d[] = "connectFlag         = %d";
static char __pyx_k_getArrayCache[] = "getArrayCache";
static char __pyx_k_getScalarList[] = "getScalarList";
static char __pyx_k_handlePVMatch[] = "handlePVMatch";
static char __pyx_k_not_connected[] = " not connected";
static char __pyx_k_pyx_getbuffer[] = "__pyx_getbuffer";
static char __pyx_k_checkForHandle[] = "checkForHandle";
static char __pyx_k_openNowAndWait[] = "openNowAndWait";
static char __pyx_k_alarmSeverity_d[] = "alarmSeverity = %d";
static char __pyx_k_allocate_buffer[] = "allocate_buffer";
static char __pyx_k_cafe_openNoWait[] = "cafe.openNoWait()";
static char __pyx_k_dtype_is_object[] = "dtype_is_object";
static char __pyx_k_noEnumStrings_d[] = "noEnumStrings = %d";
static char __pyx_k_cyca_PyCafe_CyCa[] = "cyca=PyCafe.CyCa()";
static char __pyx_k_Assuming_DBR_TIME[] = "Assuming DBR_TIME";
static char __pyx_k_ascontiguousarray[] = "ascontiguousarray";
static char __pyx_k_cafe_allConnected[] = "cafe.allConnected()";
static char __pyx_k_cafe_printHandles[] = "cafe.printHandles()";
static char __pyx_k_def_getScalarList[] = "def getScalarList:";
static char __pyx_k_lowerAlarmLimit_f[] = "lowerAlarmLimit   = %f";
static char __pyx_k_upperAlarmLimit_f[] = "upperAlarmLimit   = %f";
static char __pyx_k_with_error_status[] = "with error status=";
static char __pyx_k_cafe_PyCafe_CyCafe[] = "cafe=PyCafe.CyCafe()";
static char __pyx_k_cafe_closeChannels[] = "cafe.closeChannels()";
static char __pyx_k_checkForHandleList[] = "checkForHandleList";
static char __pyx_k_strided_and_direct[] = "<strided and direct>";
static char __pyx_k_ICAFE_CS_NEVER_CONN[] = "ICAFE_CS_NEVER_CONN";
static char __pyx_k_checkForGroupHandle[] = "checkForGroupHandle";
static char __pyx_k_connectionState_s_d[] = "connectionState     = %s (%d)";
static char __pyx_k_lowerControlLimit_f[] = "lowerControlLimit = %f";
static char __pyx_k_lowerDisplayLimit_f[] = "lowerDisplayLimit = %f";
static char __pyx_k_lowerWarningLimit_f[] = "lowerWarningLimit = %f";
static char __pyx_k_upperControlLimit_f[] = "upperControlLimit = %f";
static char __pyx_k_upperDisplayLimit_f[] = "upperDisplayLimit = %f";
static char __pyx_k_upperWarningLimit_f[] = "upperWarningLimit = %f";
static char __pyx_k_Analysing_statusList[] = "Analysing statusList[]...";
static char __pyx_k_Error_in_def_getAsyn[] = "Error in def getAsyn: ";
static char __pyx_k_strided_and_indirect[] = "<strided and indirect>";
static char __pyx_k_unknown_type_in_open[] = "unknown type in open";
static char __pyx_k_Expected_16s_got_200s[] = "Expected %.16s, got %.200s";
static char __pyx_k_ICAFE_CA_OP_CONN_DOWN[] = "ICAFE_CA_OP_CONN_DOWN";
static char __pyx_k_The_value_entered_was[] = "The value entered was";
static char __pyx_k_contiguous_and_direct[] = "<contiguous and direct>";
static char __pyx_k_Entering_0_for_element[] = "Entering 0 for element";
static char __pyx_k_MemoryView_of_r_object[] = "<MemoryView of %r object>";
static char __pyx_k_cafe_checkForHandle_pv[] = "cafe.checkForHandle(<pv>)";
static char __pyx_k_cafe_printDisconnected[] = "cafe.printDisconnected()";
static char __pyx_k_MemoryView_of_r_at_0x_x[] = "<MemoryView of %r at 0x%x>";
static char __pyx_k_cafeConnectionState_s_d[] = "cafeConnectionState = %s (%d)";
static char __pyx_k_contiguous_and_indirect[] = "<contiguous and indirect>";
static char __pyx_k_hence_assuming_DBR_TIME[] = "hence assuming DBR_TIME";
static char __pyx_k_members_while_group_has[] = "members while group has";
static char __pyx_k_Cannot_index_with_type_s[] = "Cannot index with type '%s'";
static char __pyx_k_getbuffer_obj_view_flags[] = "getbuffer(obj, view, flags)";
static char __pyx_k_Dimension_d_is_not_direct[] = "Dimension %d is not direct";
static char __pyx_k_Invalid_shape_in_axis_d_d[] = "Invalid shape in axis %d: %d.";
static char __pyx_k_getHandlesFromWithinGroup[] = "getHandlesFromWithinGroup";
static char __pyx_k_Error_in_def_getScalarList[] = "Error in def  getScalarList: ";
static char __pyx_k_Index_out_of_bounds_axis_d[] = "Index out of bounds (axis %d)";
static char __pyx_k_ERROR_GROUP_MEMBER_MISMATCH[] = "ERROR: GROUP MEMBER MISMATCH!!";
static char __pyx_k_Step_may_not_be_zero_axis_d[] = "Step may not be zero (axis %d)";
static char __pyx_k_as_channel_is_not_connected[] = "as channel is not connected!";
static char __pyx_k_cafe_get_handlePV_handle_pv[] = "cafe.get(handlePV=<handle/pv>)";
static char __pyx_k_cafe_openNowAndWait_timeout[] = "cafe.openNowAndWait(timeout)";
static char __pyx_k_itemsize_0_for_cython_array[] = "itemsize <= 0 for cython.array";
static char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static char __pyx_k_cafe_getHandleFromPVName_str[] = "cafe.getHandleFromPVName(str)";
static char __pyx_k_cafe_getPVNameFromHandle_int[] = "cafe.getPVNameFromHandle(int)";
static char __pyx_k_ghandle_groupopen_char_gname[] = "ghandle = groupopen(char * gname)";
static char __pyx_k_cafe_close_handlePV_handle_pv[] = "cafe.close(handlePV=<handle/pv>)";
static char __pyx_k_cafe_getPV_handlePV_handle_pv[] = "cafe.getPV(handlePV=<handle/pv>)";
static char __pyx_k_status_groupClose_gHandleName[] = "status  = groupClose(<gHandleName>)";
static char __pyx_k_unable_to_allocate_array_data[] = "unable to allocate array data.";
static char __pyx_k_Warning_from_groupMonitorStart[] = "***Warning*** from groupMonitorStart for handle(orPV)=";
static char __pyx_k_cafe_checkForHandleList_pvList[] = "cafe.checkForHandleList(<pvList>)";
static char __pyx_k_cafe_getInt_handlePV_handle_pv[] = "cafe.getInt(handlePV=<handle/pv>)";
static char __pyx_k_cafe_getStr_handlePV_handle_pv[] = "cafe.getStr(handlePV=<handle/pv>)";
static char __pyx_k_handle_handleList_cafe_open_pv[] = "<handle/handleList>=cafe.open(<pv/pvList>)";
static char __pyx_k_strided_and_direct_or_indirect[] = "<strided and direct or indirect>";
static char __pyx_k_Allowed_DBR_TYPEs_are_DBR_PLAIN[] = "Allowed DBR_TYPEs are DBR_PLAIN (0), DBR_STS(1), DBR_TIME(2)";
static char __pyx_k_Error_in_def_grouping_for_group[] = "Error in def grouping for group named";
static char __pyx_k_Valid_input_parameters_for_data[] = "Valid input parameters for data type are: 'int', 'float', 'str', or 'native'";
static char __pyx_k_Warning_from_monitorStart_for_h[] = "***Warning*** from monitorStart for handle=";
static char __pyx_k_afs_psi_ch_project_cafe_gitwork[] = "/afs/psi.ch/project/cafe/gitworkspace/CAFE/cycafe/python3/PyCafeDefs.pxi";
static char __pyx_k_cafe_getCtrl_handlePV_handle_pv[] = "cafe.getCtrl(handlePV=<handle/pv>)";
static char __pyx_k_cafe_getDbrBase_handlePV_handle[] = "cafe.getDbrBase(handlePV=<handle/pv>)";
static char __pyx_k_cafe_getFloathandlePV_handle_pv[] = "cafe.getFloathandlePV=<handle/pv>)";
static char __pyx_k_cafe_getIntList_handlePV_handle[] = "cafe.getIntList(handlePV=<handle/pv>)";
static char __pyx_k_cafe_getList_handlePV_handle_pv[] = "cafe.getList(handlePV=<handle/pv>)";
static char __pyx_k_cafe_getPVCache_handlePV_handle[] = "cafe.getPVCache(handlePV=<handle/pv>)";
static char __pyx_k_cafe_getPVFloat_handlePV_handle[] = "cafe.getPVFloat(handlePV=<handle/pv>)";
static char __pyx_k_cafe_getStrList_handlePV_handle[] = "cafe.getStrList(handlePV=<handle/pv>)";
static char __pyx_k_cafe_setDbrBase_handlePV_handle[] = "cafe.setDbrBase(handlePV=<handle/pv>, unsigned int)";
static char __pyx_k_does_not_match_the_length_of_da[] = " does not match the length of data list ";
static char __pyx_k_mpid_cafe_monitorStart_handlePV[] = "mpid=cafe.monitorStart(handlePV=<handle/pv>), cb=None, dbr=None, mask=DBE_VALUE|DBE_LOG|DBE_ALARM)";
static char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static char __pyx_k_All_dimensions_preceding_dimensi[] = "All dimensions preceding dimension %d must be indexed and not sliced";
static char __pyx_k_Buffer_view_does_not_expose_stri[] = "Buffer view does not expose strides";
static char __pyx_k_Can_only_create_a_buffer_that_is[] = "Can only create a buffer that is contiguous in memory.";
static char __pyx_k_Cannot_transpose_memoryview_with[] = "Cannot transpose memoryview with indirect dimensions";
static char __pyx_k_Data_to_be_presented_in_native_d[] = "Data to be presented in native data type";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_a[] = "EXCEPTION RAISED IN PyCafe def attachContext.\nFirst input argument, should be <type 'int'> if handle, else <type 'str'> if PV";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_c[] = "EXCEPTION RAISED IN PyCafe def close.\nFirst input argument, should be <type 'int'> if handle, else <type 'str'> if PV";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g[] = "EXCEPTION RAISED IN PyCafe def getHandlesFromWithinGroup. \nFirst input argument, should be <type 'int'> if groupHandle, else <type 'str'> if groupName";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_i[] = "EXCEPTION RAISED IN PyCafe def isConnected. \nFirst input argument, should be <type 'int'> if handle, else <type 'str'> if PV";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_m[] = "EXCEPTION RAISED IN PyCafe def monitorStart. \nFirst input argument, should be <type 'int'> if handle, else <type 'str'> if PV";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_o[] = "EXCEPTION RAISED IN PyCafe def open. \npv=%f should be <type 'str'>";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_p[] = "EXCEPTION RAISED IN PyCafe def printHandle. \nFirst input argument, should be <type 'int'> if handle, else <type 'str'> if PV";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s[] = "EXCEPTION RAISED IN PyCafe def setDbrBase. \nFirst input argument, should be <type 'int'> if handle, else <type 'str'> if PV";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_v[] = "EXCEPTION RAISED IN PyCafe def valSet. \nSecond input argument, should be <type 'list'> of scalar values";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_w[] = "EXCEPTION RAISED IN PyCafe def waitForBundledEvents. \nFirst input argument, should be <type 'list'> of handles or PVs";
static char __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_c[] = "EXCEPTION RAISED in PyCafe def closeGroup. ERROR CLOSING GROUP Handle= %d";
static char __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g[] = "EXCEPTION RAISED in PyCafe def getChannelInfo";
static char __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_m[] = "EXCEPTION RAISED in PyCafe def monitorStopAll. Status = %d";
static char __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_o[] = "EXCEPTION RAISED in PyCafe def open. ERROR OPENING PVLIST= %s";
static char __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_s[] = "EXCEPTION RAISED in PyCafe def set. Status = %d";
static char __pyx_k_Empty_shape_tuple_for_cython_arr[] = "Empty shape tuple for cython.array";
static char __pyx_k_Error_in_def_waitForBundledEvent[] = "Error in def  waitForBundledEvents: ";
static char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static char __pyx_k_Indirect_dimensions_not_supporte[] = "Indirect dimensions not supported";
static char __pyx_k_Input_data_whether_within_a_list[] = "Input data (whether within a 'list','array.array','cython.view.memoryview' \nor not) should be of <type 'int'>, <type 'float'> or <type 'str'>";
static char __pyx_k_Invalid_mode_expected_c_or_fortr[] = "Invalid mode, expected 'c' or 'fortran', got %s";
static char __pyx_k_No_value_specified_for_struct_at[] = "No value specified for struct attribute 'secPastEpoch'";
static char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static char __pyx_k_Out_of_bounds_on_buffer_access_a[] = "Out of bounds on buffer access (axis %d)";
static char __pyx_k_PyCafe_def_set_WARNING_DATA_TYPE[] = "PyCafe def set WARNING: DATA TYPE NOT SUPPORTED";
static char __pyx_k_This_line_in_PyCafe_def_getAsLis[] = "This line in PyCafe def getAsList should never appear!";
static char __pyx_k_This_line_in_PyCafe_def_getCache[] = "This line in PyCafe def getCache should never appear!";
static char __pyx_k_This_line_in_PyCafe_def_get_shou[] = "This line in PyCafe def get should never appear!";
static char __pyx_k_This_line_in_PyCafe_def_setGroup[] = "This line in PyCafe def setGroup should never appear!";
static char __pyx_k_This_line_in_PyCafe_def_setScala[] = "This line in PyCafe def setScalarList should never appear!";
static char __pyx_k_Unable_to_convert_item_to_object[] = "Unable to convert item to object";
static char __pyx_k_WARNING_PyCafe_def_setDbrBase_ha[] = "WARNING: PyCafe def setDbrBase(handle/PV, DBR_TYPE)";
static char __pyx_k_cafe_checkForGroupHandle_groupNa[] = "cafe.checkForGroupHandle(<groupName>)";
static char __pyx_k_cafe_getAlarmStatusSeverity_hand[] = "cafe.getAlarmStatusSeverity(handlePV=<handle/pv>)";
static char __pyx_k_cafe_getArrayCache_handlePV_hand[] = "cafe.getArrayCache(handlePV=<handle/pv>)";
static char __pyx_k_cafe_getArray_handlePV_handle_pv[] = "cafe.getArray(handlePV=<handle/pv>)";
static char __pyx_k_cafe_getChannelInfo_handlePV_han[] = "cafe.getChannelInfo(handlePV=<handle/pv>)";
static char __pyx_k_cafe_getCtrlCache_handlePV_handl[] = "cafe.getCtrlCache(handlePV=<handle/pv>)";
static char __pyx_k_cafe_getFloatArrayCache_handlePV[] = "cafe.getFloatArrayCache(handlePV=<handle/pv>,asnumpy=<True,False(default)>)";
static char __pyx_k_cafe_getFloatArray_handlePV_hand[] = "cafe.getFloatArray(handlePV=<handle/pv>,asnumpy=<True,False(default)>)";
static char __pyx_k_cafe_getFloatList_handlePV_handl[] = "cafe.getFloatList(handlePV=<handle/pv>)";
static char __pyx_k_cafe_getFloatScalarList_handleLi[] = "cafe.getFloatScalarList(handleList=<handleList/pvList>)";
static char __pyx_k_cafe_getIntArrayCache_handlePV_h[] = "cafe.getIntArrayCache(handlePV=<handle/pv>,asnumpy=<True,False(default)>)";
static char __pyx_k_cafe_getIntArray_handlePV_handle[] = "cafe.getIntArray(handlePV=<handle/pv>,asnumpy=<True,False(default)>)";
static char __pyx_k_cafe_getIntScalarList_handleList[] = "cafe.getIntScalarList(handleList=<handleList/pvList>)";
static char __pyx_k_cafe_getNoMonitors_handlePV_hand[] = "cafe.getNoMonitors(handlePV=<handle/pv>)";
static char __pyx_k_cafe_getNonBlocking_handlePV_han[] = "cafe.getNonBlocking(handlePV=<handle/pv>)";
static char __pyx_k_cafe_getPVFloatCache_handlePV_ha[] = "cafe.getPVFloatCache(handlePV=<handle/pv>)";
static char __pyx_k_cafe_getPVFloatList_handleList_h[] = "cafe.getPVFloatList(handleList=<handleList/pvList>)";
static char __pyx_k_cafe_getPVIntCache_handlePV_hand[] = "cafe.getPVIntCache(handlePV=<handle/pv>)";
static char __pyx_k_cafe_getPVIntList_handleList_han[] = "cafe.getPVIntList(handleList=<handleList/pvList>)";
static char __pyx_k_cafe_getPVInt_handlePV_handle_pv[] = "cafe.getPVInt(handlePV=<handle/pv>)";
static char __pyx_k_cafe_getPVList_handleList_handle[] = "cafe.getPVList(handleList=<handleList/pvList>)";
static char __pyx_k_cafe_getPVStrCache_handlePV_hand[] = "cafe.getPVStrCache(handlePV=<handle/pv>)";
static char __pyx_k_cafe_getPVStrList_handleList_han[] = "cafe.getPVStrList(handleList=<handleList/pvList>)";
static char __pyx_k_cafe_getPVStr_handlePV_handle_pv[] = "cafe.getPVStr(handlePV=<handle/pv>)";
static char __pyx_k_cafe_getPV_handlePV_handle_pv_dt[] = "cafe.getPV(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)";
static char __pyx_k_cafe_getScalarList_handleList_ha[] = "cafe.getScalarList(handleList=<handleList/pvList>)";
static char __pyx_k_cafe_getStatus_handlePV_handle_p[] = "cafe.getStatus(handlePV=<handle/pv>)";
static char __pyx_k_cafe_getStrScalarList_handleList[] = "cafe.getStrScalarList(handleList=<handleList/pvList>)";
static char __pyx_k_cafe_getTimeStampDate_handlePV_h[] = "cafe.getTimeStampDate(handlePV=<handle/pv>)";
static char __pyx_k_cafe_getTimeStamp_handlePV_handl[] = "cafe.getTimeStamp(handlePV=<handle/pv>)";
static char __pyx_k_cafe_get_handlePV_handle_pv_dt_n[] = "cafe.get(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)";
static char __pyx_k_cafe_isConnected_handlePV_handle[] = "cafe.isConnected(handlePV=<handle/pv>)";
static char __pyx_k_cafe_monitorStopAll_handlePV_han[] = "cafe.monitorStopAll(handlePV=<handle/pv>)";
static char __pyx_k_cafe_monitorStop_handlePV_handle[] = "cafe.monitorStop(handlePV=<handle/pv>, mpID=None)";
static char __pyx_k_cafe_printHandle_handlePV_handle[] = "cafe.printHandle(handlePV=<handle/pv>)";
static char __pyx_k_cafe_setAndMatch_handlePVSet_han[] = "cafe.setAndMatch(handlePVSet=<handle/pv>, valSet=<int,float,str>, handlePVMatch=<handle/pv>, \t\t\t\t\t\t\t\t\t\t\t\t\ttolerance=<int,float,str> , timeout=<float>, printFlag=<bint>)";
static char __pyx_k_cafe_setGroup_ghandleName_vector[] = "cafe.setGroup(ghandleName, vectorList)";
static char __pyx_k_cafe_setScalarList_handleList_ha[] = "cafe.setScalarList(handleList=<handleList/pvList>, valList)";
static char __pyx_k_cafe_set_handlePV_handle_pv_valS[] = "cafe.set(handlePV=<handle/pv>, valSet)";
static char __pyx_k_dbr_base_type_should_be_one_of_D[] = "dbr base type should be one of DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL";
static char __pyx_k_ghandle_groupings_char_gname_lis[] = "ghandle = groupings(char * gname, list _pvlist)";
static char __pyx_k_got_differing_extents_in_dimensi[] = "got differing extents in dimension %d (got %d and %d)";
static char __pyx_k_handleList_cafe_defineGroup_gnam[] = "handleList[]=cafe.defineGroup(gname, pvList)";
static char __pyx_k_list_cafe_PVGroupValuesToList_pv[] = "list[]=cafe.PVGroupValuesToList(pvgroup)";
static char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static char __pyx_k_pvdataList_status_cafe_getPVGrou[] = "pvdataList[],status        = cafe.getPVGroup(ghandleName, dt='native')";
static char __pyx_k_unable_to_allocate_shape_and_str[] = "unable to allocate shape and strides.";
static char __pyx_k_vectorList_status_statusList_caf[] = "vectorList,status,statusList = cafe.getGroup(ghandleName, dt='native')";
static char __pyx_k_cafe_getCtrl_handlePV_handle_pv_2[] = "cafe.getCtrl(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)";
static char __pyx_k_cafe_getList_handlePV_handle_pv_2[] = "cafe.getList(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)";
static char __pyx_k_cafe_getPVCache_handlePV_handle_2[] = "cafe.getPVCache(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_2[] = "EXCEPTION RAISED IN PyCafe def getStatus. \nFirst input argument, should be <type 'int'> if handle, else <type 'str'> if PV";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_3[] = "EXCEPTION RAISED IN PyCafe def get. \nFirst input argument, should be <type 'int'> if handle, else <type 'str'> if PV";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_4[] = "EXCEPTION RAISED IN PyCafe def getChannelInfor \nFirst input argument, should be <type 'int'> if handle, else <type 'str'> if PV";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_5[] = "EXCEPTION RAISED IN PyCafe def getList. \nFirst input argument, should be <type 'int'> if handle, else <type 'str'> if PV";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_6[] = "EXCEPTION RAISED IN PyCafe def getArray. \n \t\t\tFirst input argument, should be <type 'int'> if handle, else <type 'str'> if PV";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_7[] = "EXCEPTION RAISED IN PyCafe def getPV. \nFirst input argument, should be <type 'int'> if handle, else <type 'str'> if PV";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_8[] = "EXCEPTION RAISED IN PyCafe def getPVList. \nFirst input argument, should be <type 'list'> of handles or PVs";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_9[] = "EXCEPTION RAISED IN PyCafe def getPVList. \nFirst input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_m_2[] = "EXCEPTION RAISED IN PyCafe def monitorStart. Handle = %d is invalid";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_m_3[] = "EXCEPTION RAISED IN PyCafe def monitorStop. \nFirst input argument, should be <type 'int'> if handle, else <type 'str'> if PV";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_m_4[] = "EXCEPTION RAISED IN PyCafe def monitorStop. \nmonitorPolicy ID (mpid) should be <type 'int'>";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_p_2[] = "EXCEPTION RAISED IN PyCafe def printStatusIfError. \nFirst input argument, should be <type 'list'> of handles or PVs";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_p_3[] = "EXCEPTION RAISED IN PyCafe def printStatusIfError. \nFirst input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_p_4[] = "EXCEPTION RAISED IN PyCafe def printStatusIfError. \nSecond input argument, should be <type 'list'> of handles or PVs";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_p_5[] = "EXCEPTION RAISED IN PyCafe def printStatusIFError. \nSecond input argument, should be a 'list' of <type 'int'> ";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_2[] = "EXCEPTION RAISED IN PyCafe def set. \nFirst input argument, should be <type 'int'> if handle, else <type 'str'> if PV";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_3[] = "EXCEPTION RAISED IN PyCafe def setScalarList. \nFirst input argument, should be <type 'list'> of handles or PVs";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_4[] = "EXCEPTION RAISED IN PyCafe def setScalarList. \nFirst input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_5[] = "EXCEPTION RAISED IN PyCafe def setScalarList. Length of handle list ";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_6[] = "EXCEPTION RAISED IN PyCafe def setCompoundList. \nFirst input argument, should be <type 'list'> of handles or PVs";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_7[] = "EXCEPTION RAISED IN PyCafe def setCompoundList. \nFirst input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_8[] = "EXCEPTION RAISED IN PyCafe def setCompoundList. Length of handle list ";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_9[] = "EXCEPTION RAISED IN PyCafe def setGroup. \nUnknown data input; should be one of <type 'int'> , <type 'str'>, <type 'float'> , <type 'list'>";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_w_2[] = "EXCEPTION RAISED IN PyCafe def waitForBundledEvents. \nFirst input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs";
static char __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_c_2[] = "EXCEPTION RAISED in PyCafe def closeGroup. ERROR CLOSING GROUP Name = %s";
static char __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_2[] = "EXCEPTION RAISED in PyCafe def getChannelInfo. Status = %d";
static char __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_3[] = "EXCEPTION RAISED in PyCafe def get. Status = %d";
static char __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_4[] = "EXCEPTION RAISED in PyCafe def getList. Status = %d";
static char __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_5[] = "EXCEPTION RAISED in PyCafe def getArray. Status = %d";
static char __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_6[] = "EXCEPTION RAISED in PyCafe def getPV Status = %d";
static char __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_7[] = "EXCEPTION RAISED in PyCafe def getCache. Status = %d";
static char __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_8[] = "EXCEPTION RAISED in PyCafe def getArrayCache. Status = %d";
static char __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_9[] = "EXCEPTION RAISED in PyCafe def getPVCache. Status = %d";
static char __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_o_2[] = "EXCEPTION RAISED in PyCafe def open. ERROR OPENING PV= %s";
static char __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_s_2[] = "EXCEPTION RAISED in PyCafe def setAndMatchMany. Status = %d";
static char __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_s_3[] = "EXCEPTION RAISED in PyCafe def setAndMatch. Status = %d";
static char __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_s_4[] = "EXCEPTION RAISED in PyCafe def setNelemToRetrieveFromCacheToOne";
static char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static char __pyx_k_No_value_specified_for_struct_at_2[] = "No value specified for struct attribute 'nsec'";
static char __pyx_k_cafe_getArrayCache_handlePV_hand_2[] = "cafe.getArrayCache(handlePV=<handle/pv>, dt=<'int','float','str','native'(default)>)";
static char __pyx_k_cafe_getArray_handlePV_handle_pv_2[] = "cafe.getArray(handlePV=<handle/pv>, dt=<'int','float','str','native'(default)>)";
static char __pyx_k_cafe_getCtrlCache_handlePV_handl_2[] = "cafe.getCtrlCache(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)";
static char __pyx_k_cafe_getPVList_handleList_handle_2[] = "cafe.getPVList(handleList=<handleList/pvList>, dt='native' (default) else <'int','float','str'>)";
static char __pyx_k_cafe_getScalarList_handleList_ha_2[] = "cafe.getScalarList(handleList=<handleList/pvList>, dt='native' (default) else <'int','float','str'>)";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_10[] = "EXCEPTION RAISED IN PyCafe def getAsy. \nFirst input argument, should be <type 'list'> of handles or PVs";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_11[] = "EXCEPTION RAISED IN PyCafe def getAsy. \nFirst input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_12[] = "EXCEPTION RAISED IN PyCafe def getScalarList. \nFirst input argument, should be <type 'list'> of handles or PVs";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_13[] = "EXCEPTION RAISED IN PyCafe def getScalarList. \nFirst input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_14[] = "EXCEPTION RAISED IN PyCafe def getCompoundList. \nFirst input argument, should be <type 'list'> of handles or PVs";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_15[] = "EXCEPTION RAISED IN PyCafe def getCompoundList. \nFirst input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_16[] = "EXCEPTION RAISED IN PyCafe def getCache. \nFirst input argument, should be <type 'int'> if handle, else <type 'str'> if PV";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_17[] = "EXCEPTION RAISED IN PyCafe def getArrayCache. \nFirst input argument, should be <type 'int'> if handle, else <type 'str'> if PV";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_18[] = "EXCEPTION RAISED IN PyCafe def getPVCache. \n \t\t\tFirst input argument, should be <type 'int'> if handle, else <type 'str'> if PV";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_19[] = "EXCEPTION RAISED IN PyCafe def getCtrl. \nFirst input argument, should be <type 'int'> if handle, else <type 'str'> if PV";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_20[] = "EXCEPTION RAISED IN PyCafe def getCtrlCache. \nFirst input argument, should be <type 'int'> if handle, else <type 'str'> if PV";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_21[] = "EXCEPTION RAISED IN PyCafe def groupMonitorStart. \nFirst input argument, should be <type 'int'> if group handle, else <type 'str'> if group name";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_22[] = "EXCEPTION RAISED IN PyCafe def getGroup. \nFirst input argument, should be <type 'int'> if group handle, else <type 'str'> if group name";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_23[] = "EXCEPTION RAISED IN PyCafe def getPVGroup. \nFirst input argument, should be <type 'int'> if group handle, else <type 'str'> if group name";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_24[] = "EXCEPTION RAISED IN PyCafe def groupOpen. \nFirst input argument, should be <type 'str'> for group name";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_25[] = "EXCEPTION RAISED IN PyCafe def groupClose \nFirst input argument, should be <type 'int'> if groupHandle, else <type 'str'> if groupName";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_26[] = "EXCEPTION RAISED IN PyCafe def getNoMonitors. \nFirst input argument, should be <type 'int'> if handle, else <type 'str'> if PV";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_27[] = "EXCEPTION RAISED IN PyCafe def getMonitorIDs. \nFirst input argument, should be <type 'int'> if handle, else <type 'str'> if PV";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_10[] = "EXCEPTION RAISED IN PyCafe def setGroup. \nFirst input argument, should be <type 'int'> if group handle, else <type 'str'> if group name";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_11[] = "EXCEPTION RAISED IN PyCafe def setAndMatchMany. \nFirst input argument, should be <type 'list'> of handles or PVs";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_12[] = "EXCEPTION RAISED IN PyCafe def setAndMatchMany. \nThird input argument, should be <type 'list'> of handles or PVs";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_13[] = "EXCEPTION RAISED IN PyCafe def setAndMatchMany. \nLengths of first (handlePVSet) and second (valSet) input lists must match!";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_14[] = "EXCEPTION RAISED IN PyCafe def setAndMatchMany. \nLengths of first (handlePVSet) and third (handlePVMatch) input lists must match!";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_15[] = "EXCEPTION RAISED IN PyCafe def setAndMatchMany \nhandlePVSet list member should be <type 'int'> if handle, else <type 'str'> if PV";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_16[] = "EXCEPTION RAISED IN PyCafe def setAndMatch. \nFirst input argument, should be <type 'int'> if handle, else <type 'str'> if PV";
static char __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_17[] = "EXCEPTION RAISED IN PyCafe def setAndMatch. \nThird input argument, should be <type 'int'> if handle, else <type 'str'> if PV";
static char __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_10[] = "EXCEPTION RAISED in PyCafe def getCtrl. Status = %d";
static char __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_11[] = "EXCEPTION RAISED in PyCafe def getCtrlCache. Status = %d";
static char __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_12[] = "EXCEPTION RAISED in PyCafe def grouping. ERROR OPENING PVGROUP= %s";
static char __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_13[] = "EXCEPTION RAISED in PyCafe def groupOpen. ERROR OPENING PVGROUP= %s";
static char __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_14[] = "EXCEPTION RAISED in PyCafe def groupClose";
static PyObject *__pyx_n_s_ASCII;
static PyObject *__pyx_kp_u_Allowed_DBR_TYPEs_are_DBR_PLAIN;
static PyObject *__pyx_kp_u_Analysing_statusList;
static PyObject *__pyx_kp_u_Assuming_DBR_TIME;
static PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
static PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
static PyObject *__pyx_kp_s_Cannot_index_with_type_s;
static PyObject *__pyx_n_u_Channel;
static PyObject *__pyx_kp_u_Data_to_be_presented_in_native_d;
static PyObject *__pyx_kp_u_ERROR_GROUP_MEMBER_MISMATCH;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_a;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_c;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_10;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_11;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_12;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_13;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_14;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_15;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_16;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_17;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_18;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_19;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_2;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_20;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_21;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_22;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_23;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_24;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_25;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_26;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_27;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_3;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_4;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_5;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_6;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_7;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_8;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_9;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_i;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_m;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_m_2;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_m_3;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_m_4;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_o;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_p;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_p_2;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_p_3;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_p_4;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_p_5;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_10;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_11;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_12;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_13;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_14;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_15;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_16;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_17;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_2;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_3;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_4;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_5;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_6;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_7;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_8;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_9;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_v;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_w;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_w_2;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_c;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_c_2;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_10;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_11;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_12;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_13;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_14;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_2;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_3;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_4;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_5;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_6;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_7;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_8;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_9;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_m;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_o;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_o_2;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_s;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_s_2;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_s_3;
static PyObject *__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_s_4;
static PyObject *__pyx_n_s_Ellipsis;
static PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
static PyObject *__pyx_kp_u_Entering_0_for_element;
static PyObject *__pyx_kp_u_Error_in_def_getAsyn;
static PyObject *__pyx_kp_u_Error_in_def_getScalarList;
static PyObject *__pyx_kp_u_Error_in_def_grouping_for_group;
static PyObject *__pyx_kp_u_Error_in_def_waitForBundledEvent;
static PyObject *__pyx_n_s_Exception;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_kp_u_GROUP_HANDLE;
static PyObject *__pyx_kp_u_GROUP_NAME;
static PyObject *__pyx_kp_u_GROUP_STATUS;
static PyObject *__pyx_kp_u_Handle;
static PyObject *__pyx_n_u_ICAFE_CA_OP_CONN_DOWN;
static PyObject *__pyx_n_u_ICAFE_CS_NEVER_CONN;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
static PyObject *__pyx_kp_u_Input_data_whether_within_a_list;
static PyObject *__pyx_kp_s_Invalid_mode_expected_c_or_fortr;
static PyObject *__pyx_kp_s_Invalid_shape_in_axis_d_d;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_kp_u_Member;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
static PyObject *__pyx_kp_s_MemoryView_of_r_object;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at_2;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_b_O;
static PyObject *__pyx_kp_s_Out_of_bounds_on_buffer_access_a;
static PyObject *__pyx_kp_u_PV;
static PyObject *__pyx_kp_u_PV_2;
static PyObject *__pyx_n_u_PV_3;
static PyObject *__pyx_n_s_PyCafe;
static PyObject *__pyx_kp_u_PyCafe_def_set_WARNING_DATA_TYPE;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_kp_b_T;
static PyObject *__pyx_kp_u_The_value_entered_was;
static PyObject *__pyx_kp_u_This_line_in_PyCafe_def_getAsLis;
static PyObject *__pyx_kp_u_This_line_in_PyCafe_def_getCache;
static PyObject *__pyx_kp_u_This_line_in_PyCafe_def_get_shou;
static PyObject *__pyx_kp_u_This_line_in_PyCafe_def_setGroup;
static PyObject *__pyx_kp_u_This_line_in_PyCafe_def_setScala;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_u_UTF_8;
static PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
static PyObject *__pyx_kp_u_Valid_input_parameters_for_data;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_u_WARNING_PyCafe_def_setDbrBase_ha;
static PyObject *__pyx_kp_u_Warning_from_groupMonitorStart;
static PyObject *__pyx_kp_u_Warning_from_monitorStart_for_h;
static PyObject *__pyx_kp_u__102;
static PyObject *__pyx_kp_u__168;
static PyObject *__pyx_kp_u__169;
static PyObject *__pyx_kp_b__236;
static PyObject *__pyx_kp_b__237;
static PyObject *__pyx_kp_b__238;
static PyObject *__pyx_kp_u__239;
static PyObject *__pyx_kp_b__85;
static PyObject *__pyx_kp_u__85;
static PyObject *__pyx_kp_u__98;
static PyObject *__pyx_kp_u__99;
static PyObject *__pyx_kp_u_accessRead_d;
static PyObject *__pyx_kp_u_accessWrite_d;
static PyObject *__pyx_kp_s_afs_psi_ch_project_cafe_gitwork;
static PyObject *__pyx_n_s_alarmSeverity;
static PyObject *__pyx_kp_u_alarmSeverity_d;
static PyObject *__pyx_n_s_alarmStatus;
static PyObject *__pyx_kp_u_alarmStatus_d;
static PyObject *__pyx_n_s_allocate_buffer;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_kp_u_as_channel_is_not_connected;
static PyObject *__pyx_n_s_ascontiguousarray;
static PyObject *__pyx_n_s_asnumpy;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_u_c;
static PyObject *__pyx_kp_u_cafeConnectionState_s_d;
static PyObject *__pyx_kp_u_cafe_PyCafe_CyCafe;
static PyObject *__pyx_kp_u_cafe_allConnected;
static PyObject *__pyx_kp_u_cafe_checkForGroupHandle_groupNa;
static PyObject *__pyx_kp_u_cafe_checkForHandleList_pvList;
static PyObject *__pyx_kp_u_cafe_checkForHandle_pv;
static PyObject *__pyx_kp_u_cafe_closeChannels;
static PyObject *__pyx_kp_u_cafe_close_handlePV_handle_pv;
static PyObject *__pyx_kp_u_cafe_getAlarmStatusSeverity_hand;
static PyObject *__pyx_kp_u_cafe_getArrayCache_handlePV_hand;
static PyObject *__pyx_kp_u_cafe_getArrayCache_handlePV_hand_2;
static PyObject *__pyx_kp_u_cafe_getArray_handlePV_handle_pv;
static PyObject *__pyx_kp_u_cafe_getArray_handlePV_handle_pv_2;
static PyObject *__pyx_kp_u_cafe_getChannelInfo_handlePV_han;
static PyObject *__pyx_kp_u_cafe_getCtrlCache_handlePV_handl;
static PyObject *__pyx_kp_u_cafe_getCtrlCache_handlePV_handl_2;
static PyObject *__pyx_kp_u_cafe_getCtrl_handlePV_handle_pv;
static PyObject *__pyx_kp_u_cafe_getCtrl_handlePV_handle_pv_2;
static PyObject *__pyx_kp_u_cafe_getDbrBase_handlePV_handle;
static PyObject *__pyx_kp_u_cafe_getFloatArrayCache_handlePV;
static PyObject *__pyx_kp_u_cafe_getFloatArray_handlePV_hand;
static PyObject *__pyx_kp_u_cafe_getFloatList_handlePV_handl;
static PyObject *__pyx_kp_u_cafe_getFloatScalarList_handleLi;
static PyObject *__pyx_kp_u_cafe_getFloathandlePV_handle_pv;
static PyObject *__pyx_kp_u_cafe_getHandleFromPVName_str;
static PyObject *__pyx_kp_u_cafe_getIntArrayCache_handlePV_h;
static PyObject *__pyx_kp_u_cafe_getIntArray_handlePV_handle;
static PyObject *__pyx_kp_u_cafe_getIntList_handlePV_handle;
static PyObject *__pyx_kp_u_cafe_getIntScalarList_handleList;
static PyObject *__pyx_kp_u_cafe_getInt_handlePV_handle_pv;
static PyObject *__pyx_kp_u_cafe_getList_handlePV_handle_pv;
static PyObject *__pyx_kp_u_cafe_getList_handlePV_handle_pv_2;
static PyObject *__pyx_kp_u_cafe_getNoMonitors_handlePV_hand;
static PyObject *__pyx_kp_u_cafe_getNonBlocking_handlePV_han;
static PyObject *__pyx_kp_u_cafe_getPVCache_handlePV_handle;
static PyObject *__pyx_kp_u_cafe_getPVCache_handlePV_handle_2;
static PyObject *__pyx_kp_u_cafe_getPVFloatCache_handlePV_ha;
static PyObject *__pyx_kp_u_cafe_getPVFloatList_handleList_h;
static PyObject *__pyx_kp_u_cafe_getPVFloat_handlePV_handle;
static PyObject *__pyx_kp_u_cafe_getPVIntCache_handlePV_hand;
static PyObject *__pyx_kp_u_cafe_getPVIntList_handleList_han;
static PyObject *__pyx_kp_u_cafe_getPVInt_handlePV_handle_pv;
static PyObject *__pyx_kp_u_cafe_getPVList_handleList_handle;
static PyObject *__pyx_kp_u_cafe_getPVList_handleList_handle_2;
static PyObject *__pyx_kp_u_cafe_getPVNameFromHandle_int;
static PyObject *__pyx_kp_u_cafe_getPVStrCache_handlePV_hand;
static PyObject *__pyx_kp_u_cafe_getPVStrList_handleList_han;
static PyObject *__pyx_kp_u_cafe_getPVStr_handlePV_handle_pv;
static PyObject *__pyx_kp_u_cafe_getPV_handlePV_handle_pv;
static PyObject *__pyx_kp_u_cafe_getPV_handlePV_handle_pv_dt;
static PyObject *__pyx_kp_u_cafe_getScalarList_handleList_ha;
static PyObject *__pyx_kp_u_cafe_getScalarList_handleList_ha_2;
static PyObject *__pyx_kp_u_cafe_getStatus_handlePV_handle_p;
static PyObject *__pyx_kp_u_cafe_getStrList_handlePV_handle;
static PyObject *__pyx_kp_u_cafe_getStrScalarList_handleList;
static PyObject *__pyx_kp_u_cafe_getStr_handlePV_handle_pv;
static PyObject *__pyx_kp_u_cafe_getTimeStampDate_handlePV_h;
static PyObject *__pyx_kp_u_cafe_getTimeStamp_handlePV_handl;
static PyObject *__pyx_kp_u_cafe_get_handlePV_handle_pv;
static PyObject *__pyx_kp_u_cafe_get_handlePV_handle_pv_dt_n;
static PyObject *__pyx_kp_u_cafe_init;
static PyObject *__pyx_kp_u_cafe_isConnected_handlePV_handle;
static PyObject *__pyx_kp_u_cafe_monitorStopAll_handlePV_han;
static PyObject *__pyx_kp_u_cafe_monitorStop_handlePV_handle;
static PyObject *__pyx_kp_u_cafe_openNoWait;
static PyObject *__pyx_kp_u_cafe_openNow;
static PyObject *__pyx_kp_u_cafe_openNowAndWait_timeout;
static PyObject *__pyx_kp_u_cafe_printDisconnected;
static PyObject *__pyx_kp_u_cafe_printHandle_handlePV_handle;
static PyObject *__pyx_kp_u_cafe_printHandles;
static PyObject *__pyx_kp_u_cafe_setAndMatch_handlePVSet_han;
static PyObject *__pyx_kp_u_cafe_setDbrBase_handlePV_handle;
static PyObject *__pyx_kp_u_cafe_setGroup_ghandleName_vector;
static PyObject *__pyx_kp_u_cafe_setScalarList_handleList_ha;
static PyObject *__pyx_kp_u_cafe_set_handlePV_handle_pv_valS;
static PyObject *__pyx_n_s_cb;
static PyObject *__pyx_kp_u_channelID_x;
static PyObject *__pyx_n_s_checkForGroupHandle;
static PyObject *__pyx_n_s_checkForHandle;
static PyObject *__pyx_n_s_checkForHandleList;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_kp_u_className_s;
static PyObject *__pyx_kp_u_connectFlag_d;
static PyObject *__pyx_kp_u_connectionState_s_d;
static PyObject *__pyx_kp_s_contiguous_and_direct;
static PyObject *__pyx_kp_s_contiguous_and_indirect;
static PyObject *__pyx_kp_u_cyca_PyCafe_CyCa;
static PyObject *__pyx_kp_u_d;
static PyObject *__pyx_kp_u_dataType_s_d;
static PyObject *__pyx_n_s_dbr;
static PyObject *__pyx_n_s_dbrBase;
static PyObject *__pyx_kp_u_dbr_base_type_should_be_one_of_D;
static PyObject *__pyx_kp_u_def_getScalarList;
static PyObject *__pyx_kp_u_does_not_match_the_length_of_da;
static PyObject *__pyx_n_u_double;
static PyObject *__pyx_n_s_dt;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_dtype_is_object;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_kp_u_enumStrings;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_u_float;
static PyObject *__pyx_n_s_float64;
static PyObject *__pyx_n_s_force;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fortran;
static PyObject *__pyx_n_u_fortran;
static PyObject *__pyx_n_s_gName;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_getArray;
static PyObject *__pyx_n_s_getArrayCache;
static PyObject *__pyx_n_s_getCache;
static PyObject *__pyx_n_s_getGroup;
static PyObject *__pyx_n_s_getHandlesFromWithinGroup;
static PyObject *__pyx_n_s_getList;
static PyObject *__pyx_n_s_getPV;
static PyObject *__pyx_n_s_getPVCache;
static PyObject *__pyx_n_s_getPVGroup;
static PyObject *__pyx_n_s_getPVList;
static PyObject *__pyx_n_s_getScalarList;
static PyObject *__pyx_n_s_getargspec;
static PyObject *__pyx_n_s_ghandleName;
static PyObject *__pyx_kp_u_ghandle_groupings_char_gname_lis;
static PyObject *__pyx_kp_u_ghandle_groupopen_char_gname;
static PyObject *__pyx_n_s_gname;
static PyObject *__pyx_kp_s_got_differing_extents_in_dimensi;
static PyObject *__pyx_n_s_groupOpen;
static PyObject *__pyx_n_s_handleList;
static PyObject *__pyx_kp_u_handleList_cafe_defineGroup_gnam;
static PyObject *__pyx_n_s_handlePV;
static PyObject *__pyx_n_s_handlePVMatch;
static PyObject *__pyx_n_s_handlePVSet;
static PyObject *__pyx_kp_u_handle_handleList_cafe_open_pv;
static PyObject *__pyx_n_u_has;
static PyObject *__pyx_kp_u_has_error;
static PyObject *__pyx_kp_u_hence_assuming_DBR_TIME;
static PyObject *__pyx_kp_u_hostName_s;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_inspect;
static PyObject *__pyx_n_u_int;
static PyObject *__pyx_n_s_int32;
static PyObject *__pyx_n_u_int32;
static PyObject *__pyx_n_u_int64;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_kp_u_list_cafe_PVGroupValuesToList_pv;
static PyObject *__pyx_n_u_long;
static PyObject *__pyx_kp_u_lowerAlarmLimit_f;
static PyObject *__pyx_kp_u_lowerControlLimit_f;
static PyObject *__pyx_kp_u_lowerDisplayLimit_f;
static PyObject *__pyx_kp_u_lowerWarningLimit_f;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mask;
static PyObject *__pyx_kp_u_members_while_group_has;
static PyObject *__pyx_n_s_memview;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_mpid;
static PyObject *__pyx_kp_u_mpid_cafe_monitorStart_handlePV;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_u_native;
static PyObject *__pyx_n_s_ndarray;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_kp_u_nelem_d;
static PyObject *__pyx_n_s_netrfc;
static PyObject *__pyx_kp_u_noEnumStrings_d;
static PyObject *__pyx_kp_u_not_connected;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_nsec;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_open;
static PyObject *__pyx_n_s_openNoWait;
static PyObject *__pyx_n_s_openNowAndWait;
static PyObject *__pyx_n_s_pack;
static PyObject *__pyx_kp_u_precision_d;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_printFlag;
static PyObject *__pyx_n_s_pv;
static PyObject *__pyx_n_s_pvList;
static PyObject *__pyx_kp_u_pvdataList_status_cafe_getPVGrou;
static PyObject *__pyx_n_s_pvlist;
static PyObject *__pyx_n_s_pyx_getbuffer;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_kp_u_s;
static PyObject *__pyx_kp_u_s_2;
static PyObject *__pyx_n_s_secPastEpoch;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_u_short;
static PyObject *__pyx_n_s_show;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_sleep;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_status;
static PyObject *__pyx_n_s_statusList;
static PyObject *__pyx_kp_u_status_d;
static PyObject *__pyx_kp_u_status_groupClose_gHandleName;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_n_u_str;
static PyObject *__pyx_kp_s_strided_and_direct;
static PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
static PyObject *__pyx_kp_s_strided_and_indirect;
static PyObject *__pyx_n_u_string;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_timeout;
static PyObject *__pyx_n_s_tolerance;
static PyObject *__pyx_n_s_ts;
static PyObject *__pyx_kp_u_tsDate;
static PyObject *__pyx_n_s_tsDate_2;
static PyObject *__pyx_kp_u_ts_2;
static PyObject *__pyx_kp_u_ts_3;
static PyObject *__pyx_n_u_uint;
static PyObject *__pyx_n_u_uint32;
static PyObject *__pyx_n_u_uint64;
static PyObject *__pyx_n_u_ulong;
static PyObject *__pyx_kp_s_unable_to_allocate_array_data;
static PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
static PyObject *__pyx_kp_u_units_s;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_kp_u_unknown_type_in_open;
static PyObject *__pyx_n_s_unpack;
static PyObject *__pyx_kp_u_upperAlarmLimit_f;
static PyObject *__pyx_kp_u_upperControlLimit_f;
static PyObject *__pyx_kp_u_upperDisplayLimit_f;
static PyObject *__pyx_kp_u_upperWarningLimit_f;
static PyObject *__pyx_n_u_ushort;
static PyObject *__pyx_n_u_utf8;
static PyObject *__pyx_n_s_valList;
static PyObject *__pyx_n_s_valSet;
static PyObject *__pyx_kp_u_value;
static PyObject *__pyx_n_s_value_2;
static PyObject *__pyx_kp_u_values;
static PyObject *__pyx_n_s_vectorList;
static PyObject *__pyx_kp_u_vectorList_status_statusList_caf;
static PyObject *__pyx_kp_u_with_error_status;
static PyObject *__pyx_kp_u_year;
static PyObject *__pyx_pf_6PyCafe_show(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static void __pyx_pf_6PyCafe_10_finalizer___dealloc__(struct __pyx_obj_6PyCafe__finalizer *__pyx_v_self); /* proto */
static int __pyx_pf_6PyCafe_4CyCa___cinit__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_12CY_DBE_VALUE___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_10CY_DBE_LOG___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_14CY_DBE_ARCHIVE___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_12CY_DBE_ALARM___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_15CY_DBE_PROPERTY___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_16CY_DBR_PRIMITIVE___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_12CY_DBR_PLAIN___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_10CY_DBR_STS___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_11CY_DBR_TIME___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_9CY_DBR_GR___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_11CY_DBR_CTRL___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_10CY_DBR_PUT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_13CY_DBR_STSACK___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_12CY_DBR_CLASS___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_11CY_DBR_NONE___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_13CY_DBR_STRING___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_12CY_DBR_SHORT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_10CY_DBR_INT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_12CY_DBR_FLOAT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_11CY_DBR_ENUM___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_11CY_DBR_CHAR___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_11CY_DBR_LONG___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_13CY_DBR_DOUBLE___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_17CY_DBR_STS_STRING___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_16CY_DBR_STS_SHORT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_14CY_DBR_STS_INT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_16CY_DBR_STS_FLOAT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_15CY_DBR_STS_ENUM___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_15CY_DBR_STS_CHAR___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_15CY_DBR_STS_LONG___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_17CY_DBR_STS_DOUBLE___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_18CY_DBR_TIME_STRING___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_17CY_DBR_TIME_SHORT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_15CY_DBR_TIME_INT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_17CY_DBR_TIME_FLOAT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_16CY_DBR_TIME_ENUM___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_16CY_DBR_TIME_CHAR___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_16CY_DBR_TIME_LONG___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_18CY_DBR_TIME_DOUBLE___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_16CY_DBR_GR_STRING___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_15CY_DBR_GR_SHORT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_13CY_DBR_GR_INT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_15CY_DBR_GR_FLOAT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_14CY_DBR_GR_ENUM___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_14CY_DBR_GR_CHAR___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_14CY_DBR_GR_LONG___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_16CY_DBR_GR_DOUBLE___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_18CY_DBR_CTRL_STRING___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_17CY_DBR_CTRL_SHORT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_15CY_DBR_CTRL_INT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_17CY_DBR_CTRL_FLOAT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_16CY_DBR_CTRL_ENUM___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_16CY_DBR_CTRL_CHAR___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_16CY_DBR_CTRL_LONG___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_4CyCa_18CY_DBR_CTRL_DOUBLE___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self); /* proto */
static int __pyx_pf_6PyCafe_11channelInfo___cinit__(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_11channelInfo_2show(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_11channelInfo_9channelID___get__(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_11channelInfo_11connectFlag___get__(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_11channelInfo_8hostName___get__(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_11channelInfo_5nelem___get__(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_11channelInfo_8dataType___get__(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_11channelInfo_10accessRead___get__(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_11channelInfo_11accessWrite___get__(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_11channelInfo_9className___get__(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_11channelInfo_15connectionState___get__(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_11channelInfo_19cafeConnectionState___get__(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_11channelInfo_23connectionStateAsString___get__(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_11channelInfo_27cafeConnectionStateAsString___get__(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self); /* proto */
static int __pyx_pf_6PyCafe_21_epicsTimeStampAsDate___cinit__(struct __pyx_obj_6PyCafe__epicsTimeStampAsDate *__pyx_v_self, struct epicsTimeStamp __pyx_v_ts); /* proto */
static PyObject *__pyx_pf_6PyCafe_21_epicsTimeStampAsDate_2get(struct __pyx_obj_6PyCafe__epicsTimeStampAsDate *__pyx_v_self); /* proto */
static int __pyx_pf_6PyCafe_6pvctrl___cinit__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvctrl_2show(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvctrl_4showMax(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self, PyObject *__pyx_v_nelem); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvctrl_5nelem___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvctrl_11alarmStatus___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvctrl_13alarmSeverity___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvctrl_9precision___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvctrl_5units___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvctrl_13noEnumStrings___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvctrl_11enumStrings___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvctrl_17upperDisplayLimit___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvctrl_17lowerDisplayLimit___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvctrl_15upperAlarmLimit___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvctrl_17upperWarningLimit___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvctrl_17lowerWarningLimit___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvctrl_15lowerAlarmLimit___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvctrl_17upperControlLimit___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvctrl_17lowerControlLimit___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvctrl_5value___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvctrl_6status___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self); /* proto */
static int __pyx_pf_6PyCafe_6pvdata___cinit__(struct __pyx_obj_6PyCafe_pvdata *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvdata_2show(struct __pyx_obj_6PyCafe_pvdata *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvdata_4showMax(struct __pyx_obj_6PyCafe_pvdata *__pyx_v_self, PyObject *__pyx_v_nelem); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvdata_5nelem___get__(struct __pyx_obj_6PyCafe_pvdata *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvdata_11alarmStatus___get__(struct __pyx_obj_6PyCafe_pvdata *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvdata_13alarmSeverity___get__(struct __pyx_obj_6PyCafe_pvdata *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvdata_2ts___get__(struct __pyx_obj_6PyCafe_pvdata *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvdata_6tsDate___get__(struct __pyx_obj_6PyCafe_pvdata *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvdata_5value___get__(struct __pyx_obj_6PyCafe_pvdata *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6pvdata_6status___get__(struct __pyx_obj_6PyCafe_pvdata *__pyx_v_self); /* proto */
static int __pyx_pf_6PyCafe_7pvgroup___cinit__(struct __pyx_obj_6PyCafe_pvgroup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_7pvgroup_2show(struct __pyx_obj_6PyCafe_pvgroup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_7pvgroup_4showWithPV(struct __pyx_obj_6PyCafe_pvgroup *__pyx_v_self, PyObject *__pyx_v_glist); /* proto */
static PyObject *__pyx_pf_6PyCafe_7pvgroup_6showMax(struct __pyx_obj_6PyCafe_pvgroup *__pyx_v_self, PyObject *__pyx_v__npv); /* proto */
static PyObject *__pyx_pf_6PyCafe_7pvgroup_6pvdata___get__(struct __pyx_obj_6PyCafe_pvgroup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_7pvgroup_3npv___get__(struct __pyx_obj_6PyCafe_pvgroup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_7pvgroup_4name___get__(struct __pyx_obj_6PyCafe_pvgroup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_7pvgroup_11groupStatus___get__(struct __pyx_obj_6PyCafe_pvgroup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_7pvgroup_11groupHandle___get__(struct __pyx_obj_6PyCafe_pvgroup *__pyx_v_self); /* proto */
static int __pyx_pf_6PyCafe_6CyCafe___cinit__(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self); /* proto */
static void __pyx_pf_6PyCafe_6CyCafe_2__dealloc__(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_4init(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_6open(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_pv); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_8openNoWait(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_10openPrepare(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_12openGroupPrepare(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_14openMonitorPrepare(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_16openNow(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_18openNowAndWait(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_timeout); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_20openGroupNowAndWait(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_timeout); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_22openMonitorNow(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_24openMonitorNowAndWait(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_timeout); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_26attachContext(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_28loadCollectionsFromXML(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, char const *__pyx_v_fileName); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_30loadGroupsFromXML(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, char const *__pyx_v_fileName); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_32groupList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_34getMonitorIDInCallback(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handle); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_36getDataTypeInCallback(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handle); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_38getDbrDataTypeInCallback(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handle); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_40getDbrBaseInCallback(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handle); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_42getHandlesFromWithinGroup(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_gHandleName); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_44close(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_46closeChannels(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_48allConnected(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_50isConnected(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_52printDisconnected(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_54printDisconnectedHandles(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_56printHandles(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_58printHandle(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_60getStatusSeverity(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, int __pyx_v_statusCode); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_62getStatus(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_64getAlarmStatusSeverity(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_66getTimeStamp(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_68getTimeStampAsDate(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_70checkForHandle(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_pv, int __pyx_v_force); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_72checkForHandleList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_pvList, int __pyx_v_force); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_74checkForGroupHandle(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_gName, int __pyx_v_force); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_76getPVNameFromHandle(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, int __pyx_v_h); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_78getHandleFromPVName(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_80getChannelInfo(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_82getChannelList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_listStrings); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_84setDbrBase(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, DBR_TYPE __pyx_v_dbrBase); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_86getDbrBase(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_88getNonBlocking(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_90getStr(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_92getInt(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_94getFloat(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_96get(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, PyObject *__pyx_v_dt); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_98getIntList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_100getFloatList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_102getStrList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_104getList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, PyObject *__pyx_v_dt); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_106getStrArray(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, int __pyx_v_asnumpy); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_108getIntArray(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, int __pyx_v_asnumpy); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_110getFloatArray(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, int __pyx_v_asnumpy); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_112getArray(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, PyObject *__pyx_v_dt, int __pyx_v_asnumpy); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_114getPVInt(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_116getPVFloat(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_118getPVStr(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_120getPV(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, PyObject *__pyx_v_dt); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_122getPVStrList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_124getPVIntList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_126getPVFloatList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_128getPVList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList, PyObject *__pyx_v_dt); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_130printStatusIfError(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList, PyObject *__pyx_v_statusList); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_132getAsyn(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_134waitForBundledEvents(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_136getStrScalarList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_138getIntScalarList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_140getFloatScalarList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_142getScalarList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList, PyObject *__pyx_v_dt); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_144getCompoundList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList, PyObject *__pyx_v_dt); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_146getStrCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_148getIntCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_150getFloatCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_152getCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, PyObject *__pyx_v_dt); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_154getStrArrayCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, int __pyx_v_asnumpy); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_156getIntArrayCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, int __pyx_v_asnumpy); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_158getFloatArrayCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, int __pyx_v_asnumpy); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_160getArrayCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, PyObject *__pyx_v_dt, int __pyx_v_asnumpy); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_162getPVStrCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_164getPVIntCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_166getPVFloatCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_168getPVCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, PyObject *__pyx_v_dt); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_170getCtrl(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, PyObject *__pyx_v_dt); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_172getCtrlCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, PyObject *__pyx_v_dt); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_174groupMonitorStart(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_ghandleName, PyObject *__pyx_v_cb, DBR_TYPE __pyx_v_dbr, unsigned int __pyx_v_mask); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_176getGroupStr(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_ghandleName); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_178getGroupInt(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_ghandleName); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_180getGroupFloat(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_ghandleName); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_182getGroup(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_ghandleName, PyObject *__pyx_v_dt); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_184getGroupCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_ghandleName, PyObject *__pyx_v_dt); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_186getPVGroupStr(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_ghandleName); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_188getPVGroupInt(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_ghandleName); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_190getPVGroupFloat(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_ghandleName); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_192getPVGroup(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_ghandleName, PyObject *__pyx_v_dt); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_194PVGroupValuesToList(CYTHON_UNUSED struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, struct __pyx_obj_6PyCafe_pvgroup *__pyx_v_pg); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_196groupMemberList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_gname); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_198grouping(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, char *__pyx_v_gname, PyObject *__pyx_v__pvlist); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_200defineGroup(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, char *__pyx_v_gname, PyObject *__pyx_v__pvlist); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_202groupOpen(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, char *__pyx_v_gname); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_204groupClose(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_gHandleName); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_206getNoMonitors(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_208getMonitorIDs(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_210monitorStart(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, PyObject *__pyx_v_cb, DBR_TYPE __pyx_v_dbr, unsigned int __pyx_v_mask); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_212monitorStop(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, PyObject *__pyx_v_mpid); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_214monitorStopAll(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_216set(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, PyObject *__pyx_v_valSet); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_218setScalarList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList, PyObject *__pyx_v_valList); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_220setCompoundList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList, PyObject *__pyx_v_vectorList); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_222setGroup(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_ghandleName, PyObject *__pyx_v_vectorList); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_224setAndMatchMany(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePVSet, PyObject *__pyx_v_valSet, PyObject *__pyx_v_handlePVMatch, double __pyx_v_tolerance, double __pyx_v_timeout, int __pyx_v_printFlag); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_226setAndMatch(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePVSet, double __pyx_v_valSet, PyObject *__pyx_v_handlePVMatch, double __pyx_v_tolerance, double __pyx_v_timeout, int __pyx_v_printFlag); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_228setNelemToRetrieveFromCacheToOne(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_230setNelemToRetrieveFromCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, PyObject *__pyx_v_netrfc); /* proto */
static PyObject *__pyx_pf_6PyCafe_6CyCafe_232terminate(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_6PyCafe__finalizer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6PyCafe_CyCa(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6PyCafe_channelInfo(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6PyCafe__epicsTimeStampAsDate(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6PyCafe_pvctrl(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6PyCafe_pvdata(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6PyCafe_pvgroup(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6PyCafe_CyCafe(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_01;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_neg_1;
static DBR_TYPE __pyx_k__158;
static unsigned int __pyx_k__159;
static DBR_TYPE __pyx_k__176;
static unsigned int __pyx_k__177;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__93;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__95;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__97;
static PyObject *__pyx_slice__230;
static PyObject *__pyx_slice__231;
static PyObject *__pyx_slice__232;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__101;
static PyObject *__pyx_tuple__103;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__105;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__107;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__109;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__111;
static PyObject *__pyx_tuple__112;
static PyObject *__pyx_tuple__113;
static PyObject *__pyx_tuple__114;
static PyObject *__pyx_tuple__115;
static PyObject *__pyx_tuple__116;
static PyObject *__pyx_tuple__117;
static PyObject *__pyx_tuple__118;
static PyObject *__pyx_tuple__119;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__121;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__123;
static PyObject *__pyx_tuple__124;
static PyObject *__pyx_tuple__125;
static PyObject *__pyx_tuple__126;
static PyObject *__pyx_tuple__127;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_tuple__129;
static PyObject *__pyx_tuple__130;
static PyObject *__pyx_tuple__131;
static PyObject *__pyx_tuple__132;
static PyObject *__pyx_tuple__133;
static PyObject *__pyx_tuple__134;
static PyObject *__pyx_tuple__135;
static PyObject *__pyx_tuple__136;
static PyObject *__pyx_tuple__137;
static PyObject *__pyx_tuple__138;
static PyObject *__pyx_tuple__139;
static PyObject *__pyx_tuple__140;
static PyObject *__pyx_tuple__141;
static PyObject *__pyx_tuple__142;
static PyObject *__pyx_tuple__143;
static PyObject *__pyx_tuple__144;
static PyObject *__pyx_tuple__145;
static PyObject *__pyx_tuple__146;
static PyObject *__pyx_tuple__147;
static PyObject *__pyx_tuple__148;
static PyObject *__pyx_tuple__149;
static PyObject *__pyx_tuple__150;
static PyObject *__pyx_tuple__151;
static PyObject *__pyx_tuple__152;
static PyObject *__pyx_tuple__153;
static PyObject *__pyx_tuple__154;
static PyObject *__pyx_tuple__155;
static PyObject *__pyx_tuple__156;
static PyObject *__pyx_tuple__157;
static PyObject *__pyx_tuple__160;
static PyObject *__pyx_tuple__161;
static PyObject *__pyx_tuple__162;
static PyObject *__pyx_tuple__163;
static PyObject *__pyx_tuple__164;
static PyObject *__pyx_tuple__165;
static PyObject *__pyx_tuple__166;
static PyObject *__pyx_tuple__167;
static PyObject *__pyx_tuple__170;
static PyObject *__pyx_tuple__171;
static PyObject *__pyx_tuple__172;
static PyObject *__pyx_tuple__173;
static PyObject *__pyx_tuple__174;
static PyObject *__pyx_tuple__175;
static PyObject *__pyx_tuple__178;
static PyObject *__pyx_tuple__179;
static PyObject *__pyx_tuple__180;
static PyObject *__pyx_tuple__181;
static PyObject *__pyx_tuple__182;
static PyObject *__pyx_tuple__183;
static PyObject *__pyx_tuple__184;
static PyObject *__pyx_tuple__185;
static PyObject *__pyx_tuple__186;
static PyObject *__pyx_tuple__187;
static PyObject *__pyx_tuple__188;
static PyObject *__pyx_tuple__189;
static PyObject *__pyx_tuple__190;
static PyObject *__pyx_tuple__191;
static PyObject *__pyx_tuple__192;
static PyObject *__pyx_tuple__193;
static PyObject *__pyx_tuple__194;
static PyObject *__pyx_tuple__195;
static PyObject *__pyx_tuple__196;
static PyObject *__pyx_tuple__197;
static PyObject *__pyx_tuple__198;
static PyObject *__pyx_tuple__199;
static PyObject *__pyx_tuple__200;
static PyObject *__pyx_tuple__201;
static PyObject *__pyx_tuple__202;
static PyObject *__pyx_tuple__203;
static PyObject *__pyx_tuple__204;
static PyObject *__pyx_tuple__205;
static PyObject *__pyx_tuple__206;
static PyObject *__pyx_tuple__207;
static PyObject *__pyx_tuple__208;
static PyObject *__pyx_tuple__209;
static PyObject *__pyx_tuple__210;
static PyObject *__pyx_tuple__211;
static PyObject *__pyx_tuple__212;
static PyObject *__pyx_tuple__213;
static PyObject *__pyx_tuple__214;
static PyObject *__pyx_tuple__215;
static PyObject *__pyx_tuple__216;
static PyObject *__pyx_tuple__217;
static PyObject *__pyx_tuple__218;
static PyObject *__pyx_tuple__219;
static PyObject *__pyx_tuple__220;
static PyObject *__pyx_tuple__221;
static PyObject *__pyx_tuple__222;
static PyObject *__pyx_tuple__223;
static PyObject *__pyx_tuple__224;
static PyObject *__pyx_tuple__225;
static PyObject *__pyx_tuple__226;
static PyObject *__pyx_tuple__227;
static PyObject *__pyx_tuple__228;
static PyObject *__pyx_tuple__229;
static PyObject *__pyx_tuple__233;
static PyObject *__pyx_tuple__234;
static PyObject *__pyx_tuple__235;
static PyObject *__pyx_tuple__241;
static PyObject *__pyx_tuple__242;
static PyObject *__pyx_tuple__243;
static PyObject *__pyx_tuple__244;
static PyObject *__pyx_tuple__245;
static PyObject *__pyx_codeobj__240;

/* "PyCafeDefs.pxi":2
 * 
 * def show():             # <<<<<<<<<<<<<<
 * 	print ("cafe=PyCafe.CyCafe()")
 * 	print ("cyca=PyCafe.CyCa()")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_1show(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_6PyCafe_1show = {"show", (PyCFunction)__pyx_pw_6PyCafe_1show, METH_NOARGS, 0};
static PyObject *__pyx_pw_6PyCafe_1show(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_show(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_show(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show", 0);

  /* "PyCafeDefs.pxi":3
 * 
 * def show():
 * 	print ("cafe=PyCafe.CyCafe()")             # <<<<<<<<<<<<<<
 * 	print ("cyca=PyCafe.CyCa()")
 * 	print ("cafe.init()")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":4
 * def show():
 * 	print ("cafe=PyCafe.CyCafe()")
 * 	print ("cyca=PyCafe.CyCa()")             # <<<<<<<<<<<<<<
 * 	print ("cafe.init()")
 * 	print ("cafe.openNoWait()")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":5
 * 	print ("cafe=PyCafe.CyCafe()")
 * 	print ("cyca=PyCafe.CyCa()")
 * 	print ("cafe.init()")             # <<<<<<<<<<<<<<
 * 	print ("cafe.openNoWait()")
 * 	print ("<handle/handleList>=cafe.open(<pv/pvList>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":6
 * 	print ("cyca=PyCafe.CyCa()")
 * 	print ("cafe.init()")
 * 	print ("cafe.openNoWait()")             # <<<<<<<<<<<<<<
 * 	print ("<handle/handleList>=cafe.open(<pv/pvList>)")
 * 	print ("cafe.openNowAndWait(timeout)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":7
 * 	print ("cafe.init()")
 * 	print ("cafe.openNoWait()")
 * 	print ("<handle/handleList>=cafe.open(<pv/pvList>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.openNowAndWait(timeout)")
 * 	print ("cafe.openNow()")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":8
 * 	print ("cafe.openNoWait()")
 * 	print ("<handle/handleList>=cafe.open(<pv/pvList>)")
 * 	print ("cafe.openNowAndWait(timeout)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.openNow()")
 * 	print ("cafe.close(handlePV=<handle/pv>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":9
 * 	print ("<handle/handleList>=cafe.open(<pv/pvList>)")
 * 	print ("cafe.openNowAndWait(timeout)")
 * 	print ("cafe.openNow()")             # <<<<<<<<<<<<<<
 * 	print ("cafe.close(handlePV=<handle/pv>)")
 * 	print ("cafe.closeChannels()")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":10
 * 	print ("cafe.openNowAndWait(timeout)")
 * 	print ("cafe.openNow()")
 * 	print ("cafe.close(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.closeChannels()")
 * 	print ("cafe.allConnected()")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":11
 * 	print ("cafe.openNow()")
 * 	print ("cafe.close(handlePV=<handle/pv>)")
 * 	print ("cafe.closeChannels()")             # <<<<<<<<<<<<<<
 * 	print ("cafe.allConnected()")
 * 	print ("cafe.isConnected(handlePV=<handle/pv>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":12
 * 	print ("cafe.close(handlePV=<handle/pv>)")
 * 	print ("cafe.closeChannels()")
 * 	print ("cafe.allConnected()")             # <<<<<<<<<<<<<<
 * 	print ("cafe.isConnected(handlePV=<handle/pv>)")
 * 	print ("cafe.printDisconnected()")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":13
 * 	print ("cafe.closeChannels()")
 * 	print ("cafe.allConnected()")
 * 	print ("cafe.isConnected(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.printDisconnected()")
 * 	print ("cafe.printHandles()")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":14
 * 	print ("cafe.allConnected()")
 * 	print ("cafe.isConnected(handlePV=<handle/pv>)")
 * 	print ("cafe.printDisconnected()")             # <<<<<<<<<<<<<<
 * 	print ("cafe.printHandles()")
 * 	print ("cafe.printHandle(handlePV=<handle/pv>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":15
 * 	print ("cafe.isConnected(handlePV=<handle/pv>)")
 * 	print ("cafe.printDisconnected()")
 * 	print ("cafe.printHandles()")             # <<<<<<<<<<<<<<
 * 	print ("cafe.printHandle(handlePV=<handle/pv>)")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":16
 * 	print ("cafe.printDisconnected()")
 * 	print ("cafe.printHandles()")
 * 	print ("cafe.printHandle(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 
 * 	print ("cafe.getStatus(handlePV=<handle/pv>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":18
 * 	print ("cafe.printHandle(handlePV=<handle/pv>)")
 * 
 * 	print ("cafe.getStatus(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getAlarmStatusSeverity(handlePV=<handle/pv>)")
 * 	print ("cafe.getTimeStamp(handlePV=<handle/pv>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":19
 * 
 * 	print ("cafe.getStatus(handlePV=<handle/pv>)")
 * 	print ("cafe.getAlarmStatusSeverity(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getTimeStamp(handlePV=<handle/pv>)")
 * 	print ("cafe.getTimeStampDate(handlePV=<handle/pv>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":20
 * 	print ("cafe.getStatus(handlePV=<handle/pv>)")
 * 	print ("cafe.getAlarmStatusSeverity(handlePV=<handle/pv>)")
 * 	print ("cafe.getTimeStamp(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getTimeStampDate(handlePV=<handle/pv>)")
 * 	print ("cafe.checkForHandle(<pv>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":21
 * 	print ("cafe.getAlarmStatusSeverity(handlePV=<handle/pv>)")
 * 	print ("cafe.getTimeStamp(handlePV=<handle/pv>)")
 * 	print ("cafe.getTimeStampDate(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.checkForHandle(<pv>)")
 * 	print ("cafe.checkForHandleList(<pvList>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":22
 * 	print ("cafe.getTimeStamp(handlePV=<handle/pv>)")
 * 	print ("cafe.getTimeStampDate(handlePV=<handle/pv>)")
 * 	print ("cafe.checkForHandle(<pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.checkForHandleList(<pvList>)")
 * 	print ("cafe.checkForGroupHandle(<groupName>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":23
 * 	print ("cafe.getTimeStampDate(handlePV=<handle/pv>)")
 * 	print ("cafe.checkForHandle(<pv>)")
 * 	print ("cafe.checkForHandleList(<pvList>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.checkForGroupHandle(<groupName>)")
 * 	print ("cafe.getPVNameFromHandle(int)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":24
 * 	print ("cafe.checkForHandle(<pv>)")
 * 	print ("cafe.checkForHandleList(<pvList>)")
 * 	print ("cafe.checkForGroupHandle(<groupName>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getPVNameFromHandle(int)")
 * 	print ("cafe.getHandleFromPVName(str)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":25
 * 	print ("cafe.checkForHandleList(<pvList>)")
 * 	print ("cafe.checkForGroupHandle(<groupName>)")
 * 	print ("cafe.getPVNameFromHandle(int)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getHandleFromPVName(str)")
 * 	print ("cafe.getChannelInfo(handlePV=<handle/pv>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":26
 * 	print ("cafe.checkForGroupHandle(<groupName>)")
 * 	print ("cafe.getPVNameFromHandle(int)")
 * 	print ("cafe.getHandleFromPVName(str)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getChannelInfo(handlePV=<handle/pv>)")
 * 	print ("cafe.setDbrBase(handlePV=<handle/pv>, unsigned int)") #dbrBase.DBR_XXX
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":27
 * 	print ("cafe.getPVNameFromHandle(int)")
 * 	print ("cafe.getHandleFromPVName(str)")
 * 	print ("cafe.getChannelInfo(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.setDbrBase(handlePV=<handle/pv>, unsigned int)") #dbrBase.DBR_XXX
 * 	print ("cafe.getDbrBase(handlePV=<handle/pv>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":28
 * 	print ("cafe.getHandleFromPVName(str)")
 * 	print ("cafe.getChannelInfo(handlePV=<handle/pv>)")
 * 	print ("cafe.setDbrBase(handlePV=<handle/pv>, unsigned int)") #dbrBase.DBR_XXX             # <<<<<<<<<<<<<<
 * 	print ("cafe.getDbrBase(handlePV=<handle/pv>)")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":29
 * 	print ("cafe.getChannelInfo(handlePV=<handle/pv>)")
 * 	print ("cafe.setDbrBase(handlePV=<handle/pv>, unsigned int)") #dbrBase.DBR_XXX
 * 	print ("cafe.getDbrBase(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 
 * 	print ("cafe.getNonBlocking(handlePV=<handle/pv>)") 	#followed by getCache
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":31
 * 	print ("cafe.getDbrBase(handlePV=<handle/pv>)")
 * 
 * 	print ("cafe.getNonBlocking(handlePV=<handle/pv>)") 	#followed by getCache             # <<<<<<<<<<<<<<
 * 	print ("cafe.get(handlePV=<handle/pv>)") # return in native type
 * 	print ("cafe.get(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":32
 * 
 * 	print ("cafe.getNonBlocking(handlePV=<handle/pv>)") 	#followed by getCache
 * 	print ("cafe.get(handlePV=<handle/pv>)") # return in native type             # <<<<<<<<<<<<<<
 * 	print ("cafe.get(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getInt(handlePV=<handle/pv>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":33
 * 	print ("cafe.getNonBlocking(handlePV=<handle/pv>)") 	#followed by getCache
 * 	print ("cafe.get(handlePV=<handle/pv>)") # return in native type
 * 	print ("cafe.get(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getInt(handlePV=<handle/pv>)")
 * 	print ("cafe.getFloathandlePV=<handle/pv>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":34
 * 	print ("cafe.get(handlePV=<handle/pv>)") # return in native type
 * 	print ("cafe.get(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getInt(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getFloathandlePV=<handle/pv>)")
 * 	print ("cafe.getStr(handlePV=<handle/pv>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":35
 * 	print ("cafe.get(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getInt(handlePV=<handle/pv>)")
 * 	print ("cafe.getFloathandlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getStr(handlePV=<handle/pv>)")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":36
 * 	print ("cafe.getInt(handlePV=<handle/pv>)")
 * 	print ("cafe.getFloathandlePV=<handle/pv>)")
 * 	print ("cafe.getStr(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 
 * 	print ("cafe.getList(handlePV=<handle/pv>)") # return List in native type
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":38
 * 	print ("cafe.getStr(handlePV=<handle/pv>)")
 * 
 * 	print ("cafe.getList(handlePV=<handle/pv>)") # return List in native type             # <<<<<<<<<<<<<<
 * 	print ("cafe.getList(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getIntList(handlePV=<handle/pv>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":39
 * 
 * 	print ("cafe.getList(handlePV=<handle/pv>)") # return List in native type
 * 	print ("cafe.getList(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getIntList(handlePV=<handle/pv>)")
 * 	print ("cafe.getFloatList(handlePV=<handle/pv>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":40
 * 	print ("cafe.getList(handlePV=<handle/pv>)") # return List in native type
 * 	print ("cafe.getList(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getIntList(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getFloatList(handlePV=<handle/pv>)")
 * 	print ("cafe.getStrList(handlePV=<handle/pv>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":41
 * 	print ("cafe.getList(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getIntList(handlePV=<handle/pv>)")
 * 	print ("cafe.getFloatList(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getStrList(handlePV=<handle/pv>)")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":42
 * 	print ("cafe.getIntList(handlePV=<handle/pv>)")
 * 	print ("cafe.getFloatList(handlePV=<handle/pv>)")
 * 	print ("cafe.getStrList(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 
 * 	# returns Memoryview in native type, except for when dt='str' which returns a List
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":46
 * 	# returns Memoryview in native type, except for when dt='str' which returns a List
 * 	# returns np.array if asnumpy=True
 * 	print ("cafe.getArray(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getArray(handlePV=<handle/pv>, dt=<'int','float','str','native'(default)>)")
 * 	print ("cafe.getIntArray(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":47
 * 	# returns np.array if asnumpy=True
 * 	print ("cafe.getArray(handlePV=<handle/pv>)")
 * 	print ("cafe.getArray(handlePV=<handle/pv>, dt=<'int','float','str','native'(default)>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getIntArray(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")
 * 	print ("cafe.getFloatArray(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":48
 * 	print ("cafe.getArray(handlePV=<handle/pv>)")
 * 	print ("cafe.getArray(handlePV=<handle/pv>, dt=<'int','float','str','native'(default)>)")
 * 	print ("cafe.getIntArray(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getFloatArray(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":49
 * 	print ("cafe.getArray(handlePV=<handle/pv>, dt=<'int','float','str','native'(default)>)")
 * 	print ("cafe.getIntArray(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")
 * 	print ("cafe.getFloatArray(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":52
 * 
 * 
 * 	print ("cafe.getPV(handlePV=<handle/pv>)") # return PVData in native type             # <<<<<<<<<<<<<<
 * 	print ("cafe.getPV(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getPVInt(handlePV=<handle/pv>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":53
 * 
 * 	print ("cafe.getPV(handlePV=<handle/pv>)") # return PVData in native type
 * 	print ("cafe.getPV(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getPVInt(handlePV=<handle/pv>)")
 * 	print ("cafe.getPVFloat(handlePV=<handle/pv>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":54
 * 	print ("cafe.getPV(handlePV=<handle/pv>)") # return PVData in native type
 * 	print ("cafe.getPV(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getPVInt(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getPVFloat(handlePV=<handle/pv>)")
 * 	print ("cafe.getPVStr(handlePV=<handle/pv>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":55
 * 	print ("cafe.getPV(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getPVInt(handlePV=<handle/pv>)")
 * 	print ("cafe.getPVFloat(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getPVStr(handlePV=<handle/pv>)")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":56
 * 	print ("cafe.getPVInt(handlePV=<handle/pv>)")
 * 	print ("cafe.getPVFloat(handlePV=<handle/pv>)")
 * 	print ("cafe.getPVStr(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 
 * 	print ("cafe.getPVList(handleList=<handleList/pvList>)") # return Array of PVData in native type
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":58
 * 	print ("cafe.getPVStr(handlePV=<handle/pv>)")
 * 
 * 	print ("cafe.getPVList(handleList=<handleList/pvList>)") # return Array of PVData in native type             # <<<<<<<<<<<<<<
 * 	print ("cafe.getPVList(handleList=<handleList/pvList>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getPVIntList(handleList=<handleList/pvList>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":59
 * 
 * 	print ("cafe.getPVList(handleList=<handleList/pvList>)") # return Array of PVData in native type
 * 	print ("cafe.getPVList(handleList=<handleList/pvList>, dt='native' (default) else <'int','float','str'>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getPVIntList(handleList=<handleList/pvList>)")
 * 	print ("cafe.getPVFloatList(handleList=<handleList/pvList>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":60
 * 	print ("cafe.getPVList(handleList=<handleList/pvList>)") # return Array of PVData in native type
 * 	print ("cafe.getPVList(handleList=<handleList/pvList>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getPVIntList(handleList=<handleList/pvList>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getPVFloatList(handleList=<handleList/pvList>)")
 * 	print ("cafe.getPVStrList(handleList=<handleList/pvList>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":61
 * 	print ("cafe.getPVList(handleList=<handleList/pvList>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getPVIntList(handleList=<handleList/pvList>)")
 * 	print ("cafe.getPVFloatList(handleList=<handleList/pvList>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getPVStrList(handleList=<handleList/pvList>)")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":62
 * 	print ("cafe.getPVIntList(handleList=<handleList/pvList>)")
 * 	print ("cafe.getPVFloatList(handleList=<handleList/pvList>)")
 * 	print ("cafe.getPVStrList(handleList=<handleList/pvList>)")             # <<<<<<<<<<<<<<
 * 
 * 	print ("cafe.getScalarList(handleList=<handleList/pvList>)") # return List in native type
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":64
 * 	print ("cafe.getPVStrList(handleList=<handleList/pvList>)")
 * 
 * 	print ("cafe.getScalarList(handleList=<handleList/pvList>)") # return List in native type             # <<<<<<<<<<<<<<
 * 	print ("cafe.getScalarList(handleList=<handleList/pvList>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getIntScalarList(handleList=<handleList/pvList>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":65
 * 
 * 	print ("cafe.getScalarList(handleList=<handleList/pvList>)") # return List in native type
 * 	print ("cafe.getScalarList(handleList=<handleList/pvList>, dt='native' (default) else <'int','float','str'>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getIntScalarList(handleList=<handleList/pvList>)")
 * 	print ("cafe.getFloatScalarList(handleList=<handleList/pvList>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":66
 * 	print ("cafe.getScalarList(handleList=<handleList/pvList>)") # return List in native type
 * 	print ("cafe.getScalarList(handleList=<handleList/pvList>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getIntScalarList(handleList=<handleList/pvList>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getFloatScalarList(handleList=<handleList/pvList>)")
 * 	print ("cafe.getStrScalarList(handleList=<handleList/pvList>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":67
 * 	print ("cafe.getScalarList(handleList=<handleList/pvList>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getIntScalarList(handleList=<handleList/pvList>)")
 * 	print ("cafe.getFloatScalarList(handleList=<handleList/pvList>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getStrScalarList(handleList=<handleList/pvList>)")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__55, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":68
 * 	print ("cafe.getIntScalarList(handleList=<handleList/pvList>)")
 * 	print ("cafe.getFloatScalarList(handleList=<handleList/pvList>)")
 * 	print ("cafe.getStrScalarList(handleList=<handleList/pvList>)")             # <<<<<<<<<<<<<<
 * 
 * 	print ("cafe.getPVCache(handlePV=<handle/pv>)") # return PVData in native type
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":70
 * 	print ("cafe.getStrScalarList(handleList=<handleList/pvList>)")
 * 
 * 	print ("cafe.getPVCache(handlePV=<handle/pv>)") # return PVData in native type             # <<<<<<<<<<<<<<
 * 	print ("cafe.getPVCache(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getPVIntCache(handlePV=<handle/pv>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":71
 * 
 * 	print ("cafe.getPVCache(handlePV=<handle/pv>)") # return PVData in native type
 * 	print ("cafe.getPVCache(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getPVIntCache(handlePV=<handle/pv>)")
 * 	print ("cafe.getPVFloatCache(handlePV=<handle/pv>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":72
 * 	print ("cafe.getPVCache(handlePV=<handle/pv>)") # return PVData in native type
 * 	print ("cafe.getPVCache(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getPVIntCache(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getPVFloatCache(handlePV=<handle/pv>)")
 * 	print ("cafe.getPVStrCache(handlePV=<handle/pv>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":73
 * 	print ("cafe.getPVCache(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getPVIntCache(handlePV=<handle/pv>)")
 * 	print ("cafe.getPVFloatCache(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getPVStrCache(handlePV=<handle/pv>)")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__60, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":74
 * 	print ("cafe.getPVIntCache(handlePV=<handle/pv>)")
 * 	print ("cafe.getPVFloatCache(handlePV=<handle/pv>)")
 * 	print ("cafe.getPVStrCache(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":79
 * 	# returns Memoryview in native type, except for when dt='str' which returns a List
 * 	# returns np.array if asnumpy=True
 * 	print ("cafe.getArrayCache(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getArrayCache(handlePV=<handle/pv>, dt=<'int','float','str','native'(default)>)")
 * 	print ("cafe.getIntArrayCache(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":80
 * 	# returns np.array if asnumpy=True
 * 	print ("cafe.getArrayCache(handlePV=<handle/pv>)")
 * 	print ("cafe.getArrayCache(handlePV=<handle/pv>, dt=<'int','float','str','native'(default)>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getIntArrayCache(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")
 * 	print ("cafe.getFloatArrayCache(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":81
 * 	print ("cafe.getArrayCache(handlePV=<handle/pv>)")
 * 	print ("cafe.getArrayCache(handlePV=<handle/pv>, dt=<'int','float','str','native'(default)>)")
 * 	print ("cafe.getIntArrayCache(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getFloatArrayCache(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":82
 * 	print ("cafe.getArrayCache(handlePV=<handle/pv>, dt=<'int','float','str','native'(default)>)")
 * 	print ("cafe.getIntArrayCache(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")
 * 	print ("cafe.getFloatArrayCache(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")             # <<<<<<<<<<<<<<
 * 
 * 	print ("cafe.getCtrl(handlePV=<handle/pv>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":84
 * 	print ("cafe.getFloatArrayCache(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")
 * 
 * 	print ("cafe.getCtrl(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getCtrl(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getCtrlCache(handlePV=<handle/pv>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":85
 * 
 * 	print ("cafe.getCtrl(handlePV=<handle/pv>)")
 * 	print ("cafe.getCtrl(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getCtrlCache(handlePV=<handle/pv>)")
 * 	print ("cafe.getCtrlCache(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":86
 * 	print ("cafe.getCtrl(handlePV=<handle/pv>)")
 * 	print ("cafe.getCtrl(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getCtrlCache(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getCtrlCache(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":87
 * 	print ("cafe.getCtrl(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getCtrlCache(handlePV=<handle/pv>)")
 * 	print ("cafe.getCtrlCache(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")             # <<<<<<<<<<<<<<
 * 
 * 	print ("mpid=cafe.monitorStart(handlePV=<handle/pv>), cb=None, dbr=None, mask=DBE_VALUE|DBE_LOG|DBE_ALARM)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":89
 * 	print ("cafe.getCtrlCache(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 
 * 	print ("mpid=cafe.monitorStart(handlePV=<handle/pv>), cb=None, dbr=None, mask=DBE_VALUE|DBE_LOG|DBE_ALARM)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.monitorStop(handlePV=<handle/pv>, mpID=None)")
 * 	print ("cafe.monitorStopAll(handlePV=<handle/pv>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__70, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":90
 * 
 * 	print ("mpid=cafe.monitorStart(handlePV=<handle/pv>), cb=None, dbr=None, mask=DBE_VALUE|DBE_LOG|DBE_ALARM)")
 * 	print ("cafe.monitorStop(handlePV=<handle/pv>, mpID=None)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.monitorStopAll(handlePV=<handle/pv>)")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__71, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":91
 * 	print ("mpid=cafe.monitorStart(handlePV=<handle/pv>), cb=None, dbr=None, mask=DBE_VALUE|DBE_LOG|DBE_ALARM)")
 * 	print ("cafe.monitorStop(handlePV=<handle/pv>, mpID=None)")
 * 	print ("cafe.monitorStopAll(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 
 * 	print ("cafe.getNoMonitors(handlePV=<handle/pv>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__72, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":93
 * 	print ("cafe.monitorStopAll(handlePV=<handle/pv>)")
 * 
 * 	print ("cafe.getNoMonitors(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 
 * 	print ("cafe.set(handlePV=<handle/pv>, valSet)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__73, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":95
 * 	print ("cafe.getNoMonitors(handlePV=<handle/pv>)")
 * 
 * 	print ("cafe.set(handlePV=<handle/pv>, valSet)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.setScalarList(handleList=<handleList/pvList>, valList)")
 * 	print ("cafe.setAndMatch(handlePVSet=<handle/pv>, valSet=<int,float,str>, handlePVMatch=<handle/pv>, \
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__74, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":96
 * 
 * 	print ("cafe.set(handlePV=<handle/pv>, valSet)")
 * 	print ("cafe.setScalarList(handleList=<handleList/pvList>, valList)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.setAndMatch(handlePVSet=<handle/pv>, valSet=<int,float,str>, handlePVMatch=<handle/pv>, \
 * 													tolerance=<int,float,str> , timeout=<float>, printFlag=<bint>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__75, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":97
 * 	print ("cafe.set(handlePV=<handle/pv>, valSet)")
 * 	print ("cafe.setScalarList(handleList=<handleList/pvList>, valList)")
 * 	print ("cafe.setAndMatch(handlePVSet=<handle/pv>, valSet=<int,float,str>, handlePVMatch=<handle/pv>, \             # <<<<<<<<<<<<<<
 * 													tolerance=<int,float,str> , timeout=<float>, printFlag=<bint>)")
 * 	#Synchronous groups
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__76, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":100
 * 													tolerance=<int,float,str> , timeout=<float>, printFlag=<bint>)")
 * 	#Synchronous groups
 * 	print ("ghandle = groupings(char * gname, list _pvlist)")             # <<<<<<<<<<<<<<
 * 	print ("ghandle = groupopen(char * gname)")
 * 	print ("status  = groupClose(<gHandleName>)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__77, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":101
 * 	#Synchronous groups
 * 	print ("ghandle = groupings(char * gname, list _pvlist)")
 * 	print ("ghandle = groupopen(char * gname)")             # <<<<<<<<<<<<<<
 * 	print ("status  = groupClose(<gHandleName>)")
 * 	print ("handleList[]=cafe.defineGroup(gname, pvList)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__78, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":102
 * 	print ("ghandle = groupings(char * gname, list _pvlist)")
 * 	print ("ghandle = groupopen(char * gname)")
 * 	print ("status  = groupClose(<gHandleName>)")             # <<<<<<<<<<<<<<
 * 	print ("handleList[]=cafe.defineGroup(gname, pvList)")
 * 	print ("list[]=cafe.PVGroupValuesToList(pvgroup)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__79, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":103
 * 	print ("ghandle = groupopen(char * gname)")
 * 	print ("status  = groupClose(<gHandleName>)")
 * 	print ("handleList[]=cafe.defineGroup(gname, pvList)")             # <<<<<<<<<<<<<<
 * 	print ("list[]=cafe.PVGroupValuesToList(pvgroup)")
 * 	print ("vectorList,status,statusList = cafe.getGroup(ghandleName, dt='native')")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__80, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":104
 * 	print ("status  = groupClose(<gHandleName>)")
 * 	print ("handleList[]=cafe.defineGroup(gname, pvList)")
 * 	print ("list[]=cafe.PVGroupValuesToList(pvgroup)")             # <<<<<<<<<<<<<<
 * 	print ("vectorList,status,statusList = cafe.getGroup(ghandleName, dt='native')")
 * 	print ("pvdataList[],status        = cafe.getPVGroup(ghandleName, dt='native')")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__81, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":105
 * 	print ("handleList[]=cafe.defineGroup(gname, pvList)")
 * 	print ("list[]=cafe.PVGroupValuesToList(pvgroup)")
 * 	print ("vectorList,status,statusList = cafe.getGroup(ghandleName, dt='native')")             # <<<<<<<<<<<<<<
 * 	print ("pvdataList[],status        = cafe.getPVGroup(ghandleName, dt='native')")
 * 	print ("cafe.setGroup(ghandleName, vectorList)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__82, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":106
 * 	print ("list[]=cafe.PVGroupValuesToList(pvgroup)")
 * 	print ("vectorList,status,statusList = cafe.getGroup(ghandleName, dt='native')")
 * 	print ("pvdataList[],status        = cafe.getPVGroup(ghandleName, dt='native')")             # <<<<<<<<<<<<<<
 * 	print ("cafe.setGroup(ghandleName, vectorList)")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__83, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":107
 * 	print ("vectorList,status,statusList = cafe.getGroup(ghandleName, dt='native')")
 * 	print ("pvdataList[],status        = cafe.getPVGroup(ghandleName, dt='native')")
 * 	print ("cafe.setGroup(ghandleName, vectorList)")             # <<<<<<<<<<<<<<
 * 
 * 	return
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__84, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":109
 * 	print ("cafe.setGroup(ghandleName, vectorList)")
 * 
 * 	return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "PyCafeDefs.pxi":2
 * 
 * def show():             # <<<<<<<<<<<<<<
 * 	print ("cafe=PyCafe.CyCafe()")
 * 	print ("cyca=PyCafe.CyCa()")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.show", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":146
 * #***********api***************
 * 
 * cdef api void py_cb_wrapper(PVDataHolder pvd, unsigned int handle, string pvname) with gil:             # <<<<<<<<<<<<<<
 * 	cdef pvdata pv1 = PVDataHolderToStruct(pvd)
 * 	py_cb(pv1, handle, pvname)
 */

static void __pyx_f_6PyCafe_py_cb_wrapper(PVDataHolder __pyx_v_pvd, unsigned int __pyx_v_handle, std::string __pyx_v_pvname) {
  struct __pyx_obj_6PyCafe_pvdata *__pyx_v_pv1 = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("py_cb_wrapper", 0);

  /* "PyCafeDefs.pxi":147
 * 
 * cdef api void py_cb_wrapper(PVDataHolder pvd, unsigned int handle, string pvname) with gil:
 * 	cdef pvdata pv1 = PVDataHolderToStruct(pvd)             # <<<<<<<<<<<<<<
 * 	py_cb(pv1, handle, pvname)
 * 	with nogil:
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6PyCafe_PVDataHolderToStruct(__pyx_v_pvd, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pv1 = ((struct __pyx_obj_6PyCafe_pvdata *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":148
 * cdef api void py_cb_wrapper(PVDataHolder pvd, unsigned int handle, string pvname) with gil:
 * 	cdef pvdata pv1 = PVDataHolderToStruct(pvd)
 * 	py_cb(pv1, handle, pvname)             # <<<<<<<<<<<<<<
 * 	with nogil:
 * 		return
 */
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_handle); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_pvname); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_6PyCafe_py_cb);
  __pyx_t_4 = __pyx_v_6PyCafe_py_cb; __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  if (__pyx_t_5) {
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
  }
  __Pyx_INCREF(((PyObject *)__pyx_v_pv1));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_pv1));
  PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_pv1));
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":149
 * 	cdef pvdata pv1 = PVDataHolderToStruct(pvd)
 * 	py_cb(pv1, handle, pvname)
 * 	with nogil:             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafeDefs.pxi":150
 * 	py_cb(pv1, handle, pvname)
 * 	with nogil:
 * 		return             # <<<<<<<<<<<<<<
 * 
 * cdef api void py_cb_ctrl_wrapper(PVCtrlHolder pvc, unsigned int handle, string pvname) with gil:
 */
        goto __pyx_L3_return;
      }

      /* "PyCafeDefs.pxi":149
 * 	cdef pvdata pv1 = PVDataHolderToStruct(pvd)
 * 	py_cb(pv1, handle, pvname)
 * 	with nogil:             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
      /*finally:*/ {
        __pyx_L3_return: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L0;
        }
      }
  }

  /* "PyCafeDefs.pxi":146
 * #***********api***************
 * 
 * cdef api void py_cb_wrapper(PVDataHolder pvd, unsigned int handle, string pvname) with gil:             # <<<<<<<<<<<<<<
 * 	cdef pvdata pv1 = PVDataHolderToStruct(pvd)
 * 	py_cb(pv1, handle, pvname)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("PyCafe.py_cb_wrapper", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pv1);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "PyCafeDefs.pxi":152
 * 		return
 * 
 * cdef api void py_cb_ctrl_wrapper(PVCtrlHolder pvc, unsigned int handle, string pvname) with gil:             # <<<<<<<<<<<<<<
 * 	cdef pvctrl c1 = PVCtrlHolderToStruct(pvc)
 * 	py_cb_ctrl(c1, handle, pvname)
 */

static void __pyx_f_6PyCafe_py_cb_ctrl_wrapper(PVCtrlHolder __pyx_v_pvc, unsigned int __pyx_v_handle, std::string __pyx_v_pvname) {
  struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_c1 = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("py_cb_ctrl_wrapper", 0);

  /* "PyCafeDefs.pxi":153
 * 
 * cdef api void py_cb_ctrl_wrapper(PVCtrlHolder pvc, unsigned int handle, string pvname) with gil:
 * 	cdef pvctrl c1 = PVCtrlHolderToStruct(pvc)             # <<<<<<<<<<<<<<
 * 	py_cb_ctrl(c1, handle, pvname)
 * 	with nogil:
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6PyCafe_PVCtrlHolderToStruct(__pyx_v_pvc, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_c1 = ((struct __pyx_obj_6PyCafe_pvctrl *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":154
 * cdef api void py_cb_ctrl_wrapper(PVCtrlHolder pvc, unsigned int handle, string pvname) with gil:
 * 	cdef pvctrl c1 = PVCtrlHolderToStruct(pvc)
 * 	py_cb_ctrl(c1, handle, pvname)             # <<<<<<<<<<<<<<
 * 	with nogil:
 * 		return
 */
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_handle); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_pvname); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_6PyCafe_py_cb_ctrl);
  __pyx_t_4 = __pyx_v_6PyCafe_py_cb_ctrl; __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  if (__pyx_t_5) {
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
  }
  __Pyx_INCREF(((PyObject *)__pyx_v_c1));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_c1));
  PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_c1));
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":155
 * 	cdef pvctrl c1 = PVCtrlHolderToStruct(pvc)
 * 	py_cb_ctrl(c1, handle, pvname)
 * 	with nogil:             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafeDefs.pxi":156
 * 	py_cb_ctrl(c1, handle, pvname)
 * 	with nogil:
 * 		return             # <<<<<<<<<<<<<<
 * 
 * cdef api void py_cb_handle_wrapper(unsigned int handle) with gil:
 */
        goto __pyx_L3_return;
      }

      /* "PyCafeDefs.pxi":155
 * 	cdef pvctrl c1 = PVCtrlHolderToStruct(pvc)
 * 	py_cb_ctrl(c1, handle, pvname)
 * 	with nogil:             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
      /*finally:*/ {
        __pyx_L3_return: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L0;
        }
      }
  }

  /* "PyCafeDefs.pxi":152
 * 		return
 * 
 * cdef api void py_cb_ctrl_wrapper(PVCtrlHolder pvc, unsigned int handle, string pvname) with gil:             # <<<<<<<<<<<<<<
 * 	cdef pvctrl c1 = PVCtrlHolderToStruct(pvc)
 * 	py_cb_ctrl(c1, handle, pvname)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("PyCafe.py_cb_ctrl_wrapper", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c1);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "PyCafeDefs.pxi":158
 * 		return
 * 
 * cdef api void py_cb_handle_wrapper(unsigned int handle) with gil:             # <<<<<<<<<<<<<<
 * 
 * 	py_cb_handle(handle)
 */

static void __pyx_f_6PyCafe_py_cb_handle_wrapper(unsigned int __pyx_v_handle) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("py_cb_handle_wrapper", 0);

  /* "PyCafeDefs.pxi":160
 * cdef api void py_cb_handle_wrapper(unsigned int handle) with gil:
 * 
 * 	py_cb_handle(handle)             # <<<<<<<<<<<<<<
 * 
 * 	with nogil:
 */
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_handle); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_6PyCafe_py_cb_handle);
  __pyx_t_3 = __pyx_v_6PyCafe_py_cb_handle; __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":162
 * 	py_cb_handle(handle)
 * 
 * 	with nogil:             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafeDefs.pxi":163
 * 
 * 	with nogil:
 * 		return             # <<<<<<<<<<<<<<
 * 
 * 
 */
        goto __pyx_L3_return;
      }

      /* "PyCafeDefs.pxi":162
 * 	py_cb_handle(handle)
 * 
 * 	with nogil:             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
      /*finally:*/ {
        __pyx_L3_return: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L0;
        }
      }
  }

  /* "PyCafeDefs.pxi":158
 * 		return
 * 
 * cdef api void py_cb_handle_wrapper(unsigned int handle) with gil:             # <<<<<<<<<<<<<<
 * 
 * 	py_cb_handle(handle)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("PyCafe.py_cb_handle_wrapper", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "PyCafeDefs.pxi":166
 * 
 * 
 * cdef api void py_cb_handle_monid_wrapper(unsigned int handle, unsigned long monid) with gil:             # <<<<<<<<<<<<<<
 * 
 * 	cbobjt=monDictGlobal[monid]
 */

static void __pyx_f_6PyCafe_py_cb_handle_monid_wrapper(unsigned int __pyx_v_handle, unsigned long __pyx_v_monid) {
  PyObject *__pyx_v_cbobjt = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("py_cb_handle_monid_wrapper", 0);

  /* "PyCafeDefs.pxi":168
 * cdef api void py_cb_handle_monid_wrapper(unsigned int handle, unsigned long monid) with gil:
 * 
 * 	cbobjt=monDictGlobal[monid]             # <<<<<<<<<<<<<<
 * 
 * 	cbobjt(handle)
 */
  if (unlikely(__pyx_v_6PyCafe_monDictGlobal == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_monid); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_6PyCafe_monDictGlobal, __pyx_t_1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_cbobjt = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "PyCafeDefs.pxi":170
 * 	cbobjt=monDictGlobal[monid]
 * 
 * 	cbobjt(handle)             # <<<<<<<<<<<<<<
 * 
 * 	with nogil:
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_handle); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_cbobjt);
  __pyx_t_3 = __pyx_v_cbobjt; __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PyCafeDefs.pxi":172
 * 	cbobjt(handle)
 * 
 * 	with nogil:             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafeDefs.pxi":173
 * 
 * 	with nogil:
 * 		return             # <<<<<<<<<<<<<<
 * 
 * 
 */
        goto __pyx_L3_return;
      }

      /* "PyCafeDefs.pxi":172
 * 	cbobjt(handle)
 * 
 * 	with nogil:             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
      /*finally:*/ {
        __pyx_L3_return: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L0;
        }
      }
  }

  /* "PyCafeDefs.pxi":166
 * 
 * 
 * cdef api void py_cb_handle_monid_wrapper(unsigned int handle, unsigned long monid) with gil:             # <<<<<<<<<<<<<<
 * 
 * 	cbobjt=monDictGlobal[monid]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("PyCafe.py_cb_handle_monid_wrapper", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cbobjt);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "PyCafeDefs.pxi":190
 * cdef class _finalizer:
 * 	cdef void *_data
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		if self._data is not NULL:
 * 			free(self._data)
 */

/* Python wrapper */
static void __pyx_pw_6PyCafe_10_finalizer_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6PyCafe_10_finalizer_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6PyCafe_10_finalizer___dealloc__(((struct __pyx_obj_6PyCafe__finalizer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6PyCafe_10_finalizer___dealloc__(struct __pyx_obj_6PyCafe__finalizer *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "PyCafeDefs.pxi":191
 * 	cdef void *_data
 * 	def __dealloc__(self):
 * 		if self._data is not NULL:             # <<<<<<<<<<<<<<
 * 			free(self._data)
 * 		return
 */
  __pyx_t_1 = ((__pyx_v_self->_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "PyCafeDefs.pxi":192
 * 	def __dealloc__(self):
 * 		if self._data is not NULL:
 * 			free(self._data)             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
    free(__pyx_v_self->_data);

    /* "PyCafeDefs.pxi":191
 * 	cdef void *_data
 * 	def __dealloc__(self):
 * 		if self._data is not NULL:             # <<<<<<<<<<<<<<
 * 			free(self._data)
 * 		return
 */
  }

  /* "PyCafeDefs.pxi":193
 * 		if self._data is not NULL:
 * 			free(self._data)
 * 		return             # <<<<<<<<<<<<<<
 * 
 * cdef void set_base(cnp.ndarray arr, void * carr):
 */
  goto __pyx_L0;

  /* "PyCafeDefs.pxi":190
 * cdef class _finalizer:
 * 	cdef void *_data
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		if self._data is not NULL:
 * 			free(self._data)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "PyCafeDefs.pxi":195
 * 		return
 * 
 * cdef void set_base(cnp.ndarray arr, void * carr):             # <<<<<<<<<<<<<<
 * 		cdef _finalizer fin = _finalizer()
 * 		fin._data = <void *> carr
 */

static void __pyx_f_6PyCafe_set_base(PyArrayObject *__pyx_v_arr, void *__pyx_v_carr) {
  struct __pyx_obj_6PyCafe__finalizer *__pyx_v_fin = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_base", 0);

  /* "PyCafeDefs.pxi":196
 * 
 * cdef void set_base(cnp.ndarray arr, void * carr):
 * 		cdef _finalizer fin = _finalizer()             # <<<<<<<<<<<<<<
 * 		fin._data = <void *> carr
 * 		cnp.set_array_base(arr, fin)
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6PyCafe__finalizer), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_fin = ((struct __pyx_obj_6PyCafe__finalizer *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":197
 * cdef void set_base(cnp.ndarray arr, void * carr):
 * 		cdef _finalizer fin = _finalizer()
 * 		fin._data = <void *> carr             # <<<<<<<<<<<<<<
 * 		cnp.set_array_base(arr, fin)
 * 		return
 */
  __pyx_v_fin->_data = ((void *)__pyx_v_carr);

  /* "PyCafeDefs.pxi":198
 * 		cdef _finalizer fin = _finalizer()
 * 		fin._data = <void *> carr
 * 		cnp.set_array_base(arr, fin)             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
  __pyx_f_5numpy_set_array_base(__pyx_v_arr, ((PyObject *)__pyx_v_fin));

  /* "PyCafeDefs.pxi":199
 * 		fin._data = <void *> carr
 * 		cnp.set_array_base(arr, fin)
 * 		return             # <<<<<<<<<<<<<<
 * 
 * cdef class CyCa:
 */
  goto __pyx_L0;

  /* "PyCafeDefs.pxi":195
 * 		return
 * 
 * cdef void set_base(cnp.ndarray arr, void * carr):             # <<<<<<<<<<<<<<
 * 		cdef _finalizer fin = _finalizer()
 * 		fin._data = <void *> carr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("PyCafe.set_base", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_fin);
  __Pyx_RefNannyFinishContext();
}

/* "PyCafeDefs.pxi":258
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_DOUBLE #returns a control double structure (dbr_ctrl_double)
 * 
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self.CY_DBE_VALUE 		=DBE_VALUE
 * 		self.CY_DBE_LOG   		=DBE_LOG
 */

/* Python wrapper */
static int __pyx_pw_6PyCafe_4CyCa_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6PyCafe_4CyCa_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6PyCafe_4CyCa___cinit__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6PyCafe_4CyCa___cinit__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "PyCafeDefs.pxi":259
 * 
 * 	def __cinit__(self):
 * 		self.CY_DBE_VALUE 		=DBE_VALUE             # <<<<<<<<<<<<<<
 * 		self.CY_DBE_LOG   		=DBE_LOG
 * 		self.CY_DBE_ARCHIVE 	=DBE_ARCHIVE
 */
  __pyx_v_self->CY_DBE_VALUE = DBE_VALUE;

  /* "PyCafeDefs.pxi":260
 * 	def __cinit__(self):
 * 		self.CY_DBE_VALUE 		=DBE_VALUE
 * 		self.CY_DBE_LOG   		=DBE_LOG             # <<<<<<<<<<<<<<
 * 		self.CY_DBE_ARCHIVE 	=DBE_ARCHIVE
 * 		self.CY_DBE_ALARM		=DBE_ALARM
 */
  __pyx_v_self->CY_DBE_LOG = DBE_LOG;

  /* "PyCafeDefs.pxi":261
 * 		self.CY_DBE_VALUE 		=DBE_VALUE
 * 		self.CY_DBE_LOG   		=DBE_LOG
 * 		self.CY_DBE_ARCHIVE 	=DBE_ARCHIVE             # <<<<<<<<<<<<<<
 * 		self.CY_DBE_ALARM		=DBE_ALARM
 * 		self.CY_DBE_PROPERTY	=DBE_PROPERTY
 */
  __pyx_v_self->CY_DBE_ARCHIVE = DBE_ARCHIVE;

  /* "PyCafeDefs.pxi":262
 * 		self.CY_DBE_LOG   		=DBE_LOG
 * 		self.CY_DBE_ARCHIVE 	=DBE_ARCHIVE
 * 		self.CY_DBE_ALARM		=DBE_ALARM             # <<<<<<<<<<<<<<
 * 		self.CY_DBE_PROPERTY	=DBE_PROPERTY
 * 		self.CY_DBR_PRIMITIVE	=DBR_PRIMITIVE
 */
  __pyx_v_self->CY_DBE_ALARM = DBE_ALARM;

  /* "PyCafeDefs.pxi":263
 * 		self.CY_DBE_ARCHIVE 	=DBE_ARCHIVE
 * 		self.CY_DBE_ALARM		=DBE_ALARM
 * 		self.CY_DBE_PROPERTY	=DBE_PROPERTY             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_PRIMITIVE	=DBR_PRIMITIVE
 * 		self.CY_DBR_PLAIN 		=DBR_PLAIN
 */
  __pyx_v_self->CY_DBE_PROPERTY = DBE_PROPERTY;

  /* "PyCafeDefs.pxi":264
 * 		self.CY_DBE_ALARM		=DBE_ALARM
 * 		self.CY_DBE_PROPERTY	=DBE_PROPERTY
 * 		self.CY_DBR_PRIMITIVE	=DBR_PRIMITIVE             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_PLAIN 		=DBR_PLAIN
 * 		self.CY_DBR_STS   		=DBR_STS
 */
  __pyx_v_self->CY_DBR_PRIMITIVE = DBR_PRIMITIVE;

  /* "PyCafeDefs.pxi":265
 * 		self.CY_DBE_PROPERTY	=DBE_PROPERTY
 * 		self.CY_DBR_PRIMITIVE	=DBR_PRIMITIVE
 * 		self.CY_DBR_PLAIN 		=DBR_PLAIN             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_STS   		=DBR_STS
 * 		self.CY_DBR_TIME  		=DBR_TIME
 */
  __pyx_v_self->CY_DBR_PLAIN = DBR_PLAIN;

  /* "PyCafeDefs.pxi":266
 * 		self.CY_DBR_PRIMITIVE	=DBR_PRIMITIVE
 * 		self.CY_DBR_PLAIN 		=DBR_PLAIN
 * 		self.CY_DBR_STS   		=DBR_STS             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_TIME  		=DBR_TIME
 * 		self.CY_DBR_GR    		=DBR_GR
 */
  __pyx_v_self->CY_DBR_STS = DBR_STS;

  /* "PyCafeDefs.pxi":267
 * 		self.CY_DBR_PLAIN 		=DBR_PLAIN
 * 		self.CY_DBR_STS   		=DBR_STS
 * 		self.CY_DBR_TIME  		=DBR_TIME             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_GR    		=DBR_GR
 * 		self.CY_DBR_CTRL  		=DBR_CTRL
 */
  __pyx_v_self->CY_DBR_TIME = DBR_TIME;

  /* "PyCafeDefs.pxi":268
 * 		self.CY_DBR_STS   		=DBR_STS
 * 		self.CY_DBR_TIME  		=DBR_TIME
 * 		self.CY_DBR_GR    		=DBR_GR             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_CTRL  		=DBR_CTRL
 * 		self.CY_DBR_PUT   		=DBR_PUT     # DBR_PUT_ACKT and DBR_PUT_ACKS Write only - used from global alarm acknowledge.
 */
  __pyx_v_self->CY_DBR_GR = DBR_GR;

  /* "PyCafeDefs.pxi":269
 * 		self.CY_DBR_TIME  		=DBR_TIME
 * 		self.CY_DBR_GR    		=DBR_GR
 * 		self.CY_DBR_CTRL  		=DBR_CTRL             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_PUT   		=DBR_PUT     # DBR_PUT_ACKT and DBR_PUT_ACKS Write only - used from global alarm acknowledge.
 * 		self.CY_DBR_STSACK		=DBR_STSACK  # is DBR_STSACK_STRING
 */
  __pyx_v_self->CY_DBR_CTRL = DBR_CTRL;

  /* "PyCafeDefs.pxi":270
 * 		self.CY_DBR_GR    		=DBR_GR
 * 		self.CY_DBR_CTRL  		=DBR_CTRL
 * 		self.CY_DBR_PUT   		=DBR_PUT     # DBR_PUT_ACKT and DBR_PUT_ACKS Write only - used from global alarm acknowledge.             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_STSACK		=DBR_STSACK  # is DBR_STSACK_STRING
 * 		self.CY_DBR_CLASS 		=DBR_CLASS   # is DBR_CLASS_NAME,
 */
  __pyx_v_self->CY_DBR_PUT = DBR_PUT;

  /* "PyCafeDefs.pxi":271
 * 		self.CY_DBR_CTRL  		=DBR_CTRL
 * 		self.CY_DBR_PUT   		=DBR_PUT     # DBR_PUT_ACKT and DBR_PUT_ACKS Write only - used from global alarm acknowledge.
 * 		self.CY_DBR_STSACK		=DBR_STSACK  # is DBR_STSACK_STRING             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_CLASS 		=DBR_CLASS   # is DBR_CLASS_NAME,
 * 		self.CY_DBR_NONE  		=DBR_NONE
 */
  __pyx_v_self->CY_DBR_STSACK = DBR_STSACK;

  /* "PyCafeDefs.pxi":272
 * 		self.CY_DBR_PUT   		=DBR_PUT     # DBR_PUT_ACKT and DBR_PUT_ACKS Write only - used from global alarm acknowledge.
 * 		self.CY_DBR_STSACK		=DBR_STSACK  # is DBR_STSACK_STRING
 * 		self.CY_DBR_CLASS 		=DBR_CLASS   # is DBR_CLASS_NAME,             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_NONE  		=DBR_NONE
 * 		self.CY_DBR_STRING    =DBR_STRING
 */
  __pyx_v_self->CY_DBR_CLASS = DBR_CLASS;

  /* "PyCafeDefs.pxi":273
 * 		self.CY_DBR_STSACK		=DBR_STSACK  # is DBR_STSACK_STRING
 * 		self.CY_DBR_CLASS 		=DBR_CLASS   # is DBR_CLASS_NAME,
 * 		self.CY_DBR_NONE  		=DBR_NONE             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_STRING    =DBR_STRING
 * 		self.CY_DBR_SHORT     =DBR_SHORT  #returns an unsigned short
 */
  __pyx_v_self->CY_DBR_NONE = DBR_NONE;

  /* "PyCafeDefs.pxi":274
 * 		self.CY_DBR_CLASS 		=DBR_CLASS   # is DBR_CLASS_NAME,
 * 		self.CY_DBR_NONE  		=DBR_NONE
 * 		self.CY_DBR_STRING    =DBR_STRING             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_SHORT     =DBR_SHORT  #returns an unsigned short
 * 		self.CY_DBR_INT       =DBR_INT  #returns an unsigned short
 */
  __pyx_v_self->CY_DBR_STRING = DBR_STRING;

  /* "PyCafeDefs.pxi":275
 * 		self.CY_DBR_NONE  		=DBR_NONE
 * 		self.CY_DBR_STRING    =DBR_STRING
 * 		self.CY_DBR_SHORT     =DBR_SHORT  #returns an unsigned short             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_INT       =DBR_INT  #returns an unsigned short
 * 		self.CY_DBR_FLOAT     =DBR_FLOAT  #returns an IEEE floating point value
 */
  __pyx_v_self->CY_DBR_SHORT = DBR_SHORT;

  /* "PyCafeDefs.pxi":276
 * 		self.CY_DBR_STRING    =DBR_STRING
 * 		self.CY_DBR_SHORT     =DBR_SHORT  #returns an unsigned short
 * 		self.CY_DBR_INT       =DBR_INT  #returns an unsigned short             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_FLOAT     =DBR_FLOAT  #returns an IEEE floating point value
 * 		self.CY_DBR_ENUM      =DBR_ENUM  #returns an unsigned short which is the enum item
 */
  __pyx_v_self->CY_DBR_INT = DBR_INT;

  /* "PyCafeDefs.pxi":277
 * 		self.CY_DBR_SHORT     =DBR_SHORT  #returns an unsigned short
 * 		self.CY_DBR_INT       =DBR_INT  #returns an unsigned short
 * 		self.CY_DBR_FLOAT     =DBR_FLOAT  #returns an IEEE floating point value             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_ENUM      =DBR_ENUM  #returns an unsigned short which is the enum item
 * 		self.CY_DBR_CHAR      =DBR_CHAR  #returns an unsigned char
 */
  __pyx_v_self->CY_DBR_FLOAT = DBR_FLOAT;

  /* "PyCafeDefs.pxi":278
 * 		self.CY_DBR_INT       =DBR_INT  #returns an unsigned short
 * 		self.CY_DBR_FLOAT     =DBR_FLOAT  #returns an IEEE floating point value
 * 		self.CY_DBR_ENUM      =DBR_ENUM  #returns an unsigned short which is the enum item             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_CHAR      =DBR_CHAR  #returns an unsigned char
 * 		self.CY_DBR_LONG      =DBR_LONG  #returns an unsigned long
 */
  __pyx_v_self->CY_DBR_ENUM = DBR_ENUM;

  /* "PyCafeDefs.pxi":279
 * 		self.CY_DBR_FLOAT     =DBR_FLOAT  #returns an IEEE floating point value
 * 		self.CY_DBR_ENUM      =DBR_ENUM  #returns an unsigned short which is the enum item
 * 		self.CY_DBR_CHAR      =DBR_CHAR  #returns an unsigned char             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_LONG      =DBR_LONG  #returns an unsigned long
 * 		self.CY_DBR_DOUBLE    =DBR_DOUBLE  #returns a double precision floating point number
 */
  __pyx_v_self->CY_DBR_CHAR = DBR_CHAR;

  /* "PyCafeDefs.pxi":280
 * 		self.CY_DBR_ENUM      =DBR_ENUM  #returns an unsigned short which is the enum item
 * 		self.CY_DBR_CHAR      =DBR_CHAR  #returns an unsigned char
 * 		self.CY_DBR_LONG      =DBR_LONG  #returns an unsigned long             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_DOUBLE    =DBR_DOUBLE  #returns a double precision floating point number
 * 		self.CY_DBR_STS_STRING=DBR_STS_STRING  #returns a string status structure (dbr_sts_string)
 */
  __pyx_v_self->CY_DBR_LONG = DBR_LONG;

  /* "PyCafeDefs.pxi":281
 * 		self.CY_DBR_CHAR      =DBR_CHAR  #returns an unsigned char
 * 		self.CY_DBR_LONG      =DBR_LONG  #returns an unsigned long
 * 		self.CY_DBR_DOUBLE    =DBR_DOUBLE  #returns a double precision floating point number             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_STS_STRING=DBR_STS_STRING  #returns a string status structure (dbr_sts_string)
 * 		self.CY_DBR_STS_SHORT =DBR_STS_SHORT  #returns a short status structure (dbr_sts_short)
 */
  __pyx_v_self->CY_DBR_DOUBLE = DBR_DOUBLE;

  /* "PyCafeDefs.pxi":282
 * 		self.CY_DBR_LONG      =DBR_LONG  #returns an unsigned long
 * 		self.CY_DBR_DOUBLE    =DBR_DOUBLE  #returns a double precision floating point number
 * 		self.CY_DBR_STS_STRING=DBR_STS_STRING  #returns a string status structure (dbr_sts_string)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_STS_SHORT =DBR_STS_SHORT  #returns a short status structure (dbr_sts_short)
 * 		self.CY_DBR_STS_INT   =DBR_STS_INT  #returns a short status structure (dbr_sts_int)
 */
  __pyx_v_self->CY_DBR_STS_STRING = DBR_STS_STRING;

  /* "PyCafeDefs.pxi":283
 * 		self.CY_DBR_DOUBLE    =DBR_DOUBLE  #returns a double precision floating point number
 * 		self.CY_DBR_STS_STRING=DBR_STS_STRING  #returns a string status structure (dbr_sts_string)
 * 		self.CY_DBR_STS_SHORT =DBR_STS_SHORT  #returns a short status structure (dbr_sts_short)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_STS_INT   =DBR_STS_INT  #returns a short status structure (dbr_sts_int)
 * 		self.CY_DBR_STS_FLOAT =DBR_STS_FLOAT  #returns a float status structure (dbr_sts_float)
 */
  __pyx_v_self->CY_DBR_STS_SHORT = DBR_STS_SHORT;

  /* "PyCafeDefs.pxi":284
 * 		self.CY_DBR_STS_STRING=DBR_STS_STRING  #returns a string status structure (dbr_sts_string)
 * 		self.CY_DBR_STS_SHORT =DBR_STS_SHORT  #returns a short status structure (dbr_sts_short)
 * 		self.CY_DBR_STS_INT   =DBR_STS_INT  #returns a short status structure (dbr_sts_int)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_STS_FLOAT =DBR_STS_FLOAT  #returns a float status structure (dbr_sts_float)
 * 		self.CY_DBR_STS_ENUM  =DBR_STS_ENUM  #returns an enum status structure (dbr_sts_enum)
 */
  __pyx_v_self->CY_DBR_STS_INT = DBR_STS_INT;

  /* "PyCafeDefs.pxi":285
 * 		self.CY_DBR_STS_SHORT =DBR_STS_SHORT  #returns a short status structure (dbr_sts_short)
 * 		self.CY_DBR_STS_INT   =DBR_STS_INT  #returns a short status structure (dbr_sts_int)
 * 		self.CY_DBR_STS_FLOAT =DBR_STS_FLOAT  #returns a float status structure (dbr_sts_float)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_STS_ENUM  =DBR_STS_ENUM  #returns an enum status structure (dbr_sts_enum)
 * 		self.CY_DBR_STS_CHAR  =DBR_STS_CHAR  #returns a char status structure (dbr_sts_char)
 */
  __pyx_v_self->CY_DBR_STS_FLOAT = DBR_STS_FLOAT;

  /* "PyCafeDefs.pxi":286
 * 		self.CY_DBR_STS_INT   =DBR_STS_INT  #returns a short status structure (dbr_sts_int)
 * 		self.CY_DBR_STS_FLOAT =DBR_STS_FLOAT  #returns a float status structure (dbr_sts_float)
 * 		self.CY_DBR_STS_ENUM  =DBR_STS_ENUM  #returns an enum status structure (dbr_sts_enum)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_STS_CHAR  =DBR_STS_CHAR  #returns a char status structure (dbr_sts_char)
 * 		self.CY_DBR_STS_LONG  =DBR_STS_LONG  #returns a long status structure (dbr_sts_long)
 */
  __pyx_v_self->CY_DBR_STS_ENUM = DBR_STS_ENUM;

  /* "PyCafeDefs.pxi":287
 * 		self.CY_DBR_STS_FLOAT =DBR_STS_FLOAT  #returns a float status structure (dbr_sts_float)
 * 		self.CY_DBR_STS_ENUM  =DBR_STS_ENUM  #returns an enum status structure (dbr_sts_enum)
 * 		self.CY_DBR_STS_CHAR  =DBR_STS_CHAR  #returns a char status structure (dbr_sts_char)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_STS_LONG  =DBR_STS_LONG  #returns a long status structure (dbr_sts_long)
 * 		self.CY_DBR_STS_DOUBLE=DBR_STS_DOUBLE  #returns a double status structure (dbr_sts_double)
 */
  __pyx_v_self->CY_DBR_STS_CHAR = DBR_STS_CHAR;

  /* "PyCafeDefs.pxi":288
 * 		self.CY_DBR_STS_ENUM  =DBR_STS_ENUM  #returns an enum status structure (dbr_sts_enum)
 * 		self.CY_DBR_STS_CHAR  =DBR_STS_CHAR  #returns a char status structure (dbr_sts_char)
 * 		self.CY_DBR_STS_LONG  =DBR_STS_LONG  #returns a long status structure (dbr_sts_long)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_STS_DOUBLE=DBR_STS_DOUBLE  #returns a double status structure (dbr_sts_double)
 * 		self.CY_DBR_TIME_STRING=DBR_TIME_STRING #returns a string time structure (dbr_time_string)
 */
  __pyx_v_self->CY_DBR_STS_LONG = DBR_STS_LONG;

  /* "PyCafeDefs.pxi":289
 * 		self.CY_DBR_STS_CHAR  =DBR_STS_CHAR  #returns a char status structure (dbr_sts_char)
 * 		self.CY_DBR_STS_LONG  =DBR_STS_LONG  #returns a long status structure (dbr_sts_long)
 * 		self.CY_DBR_STS_DOUBLE=DBR_STS_DOUBLE  #returns a double status structure (dbr_sts_double)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_TIME_STRING=DBR_TIME_STRING #returns a string time structure (dbr_time_string)
 * 		self.CY_DBR_TIME_SHORT =DBR_TIME_SHORT #returns a short time structure (dbr_time_short)
 */
  __pyx_v_self->CY_DBR_STS_DOUBLE = DBR_STS_DOUBLE;

  /* "PyCafeDefs.pxi":290
 * 		self.CY_DBR_STS_LONG  =DBR_STS_LONG  #returns a long status structure (dbr_sts_long)
 * 		self.CY_DBR_STS_DOUBLE=DBR_STS_DOUBLE  #returns a double status structure (dbr_sts_double)
 * 		self.CY_DBR_TIME_STRING=DBR_TIME_STRING #returns a string time structure (dbr_time_string)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_TIME_SHORT =DBR_TIME_SHORT #returns a short time structure (dbr_time_short)
 * 		self.CY_DBR_TIME_INT   =DBR_TIME_INT #returns a short time structure (dbr_time_short)
 */
  __pyx_v_self->CY_DBR_TIME_STRING = DBR_TIME_STRING;

  /* "PyCafeDefs.pxi":291
 * 		self.CY_DBR_STS_DOUBLE=DBR_STS_DOUBLE  #returns a double status structure (dbr_sts_double)
 * 		self.CY_DBR_TIME_STRING=DBR_TIME_STRING #returns a string time structure (dbr_time_string)
 * 		self.CY_DBR_TIME_SHORT =DBR_TIME_SHORT #returns a short time structure (dbr_time_short)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_TIME_INT   =DBR_TIME_INT #returns a short time structure (dbr_time_short)
 * 		self.CY_DBR_TIME_FLOAT =DBR_TIME_FLOAT #returns a float time structure (dbr_time_float)
 */
  __pyx_v_self->CY_DBR_TIME_SHORT = DBR_TIME_SHORT;

  /* "PyCafeDefs.pxi":292
 * 		self.CY_DBR_TIME_STRING=DBR_TIME_STRING #returns a string time structure (dbr_time_string)
 * 		self.CY_DBR_TIME_SHORT =DBR_TIME_SHORT #returns a short time structure (dbr_time_short)
 * 		self.CY_DBR_TIME_INT   =DBR_TIME_INT #returns a short time structure (dbr_time_short)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_TIME_FLOAT =DBR_TIME_FLOAT #returns a float time structure (dbr_time_float)
 * 		self.CY_DBR_TIME_ENUM  =DBR_TIME_ENUM #returns an enum time structure (dbr_time_enum)
 */
  __pyx_v_self->CY_DBR_TIME_INT = DBR_TIME_INT;

  /* "PyCafeDefs.pxi":293
 * 		self.CY_DBR_TIME_SHORT =DBR_TIME_SHORT #returns a short time structure (dbr_time_short)
 * 		self.CY_DBR_TIME_INT   =DBR_TIME_INT #returns a short time structure (dbr_time_short)
 * 		self.CY_DBR_TIME_FLOAT =DBR_TIME_FLOAT #returns a float time structure (dbr_time_float)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_TIME_ENUM  =DBR_TIME_ENUM #returns an enum time structure (dbr_time_enum)
 * 		self.CY_DBR_TIME_CHAR  =DBR_TIME_CHAR #returns a char time structure (dbr_time_char)
 */
  __pyx_v_self->CY_DBR_TIME_FLOAT = DBR_TIME_FLOAT;

  /* "PyCafeDefs.pxi":294
 * 		self.CY_DBR_TIME_INT   =DBR_TIME_INT #returns a short time structure (dbr_time_short)
 * 		self.CY_DBR_TIME_FLOAT =DBR_TIME_FLOAT #returns a float time structure (dbr_time_float)
 * 		self.CY_DBR_TIME_ENUM  =DBR_TIME_ENUM #returns an enum time structure (dbr_time_enum)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_TIME_CHAR  =DBR_TIME_CHAR #returns a char time structure (dbr_time_char)
 * 		self.CY_DBR_TIME_LONG  =DBR_TIME_LONG #returns a long time structure (dbr_time_long)
 */
  __pyx_v_self->CY_DBR_TIME_ENUM = DBR_TIME_ENUM;

  /* "PyCafeDefs.pxi":295
 * 		self.CY_DBR_TIME_FLOAT =DBR_TIME_FLOAT #returns a float time structure (dbr_time_float)
 * 		self.CY_DBR_TIME_ENUM  =DBR_TIME_ENUM #returns an enum time structure (dbr_time_enum)
 * 		self.CY_DBR_TIME_CHAR  =DBR_TIME_CHAR #returns a char time structure (dbr_time_char)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_TIME_LONG  =DBR_TIME_LONG #returns a long time structure (dbr_time_long)
 * 		self.CY_DBR_TIME_DOUBLE=DBR_TIME_DOUBLE #returns a double time structure (dbr_time_double)
 */
  __pyx_v_self->CY_DBR_TIME_CHAR = DBR_TIME_CHAR;

  /* "PyCafeDefs.pxi":296
 * 		self.CY_DBR_TIME_ENUM  =DBR_TIME_ENUM #returns an enum time structure (dbr_time_enum)
 * 		self.CY_DBR_TIME_CHAR  =DBR_TIME_CHAR #returns a char time structure (dbr_time_char)
 * 		self.CY_DBR_TIME_LONG  =DBR_TIME_LONG #returns a long time structure (dbr_time_long)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_TIME_DOUBLE=DBR_TIME_DOUBLE #returns a double time structure (dbr_time_double)
 * 		self.CY_DBR_GR_STRING  =DBR_GR_STRING #returns a graphic string structure (dbr_gr_string)
 */
  __pyx_v_self->CY_DBR_TIME_LONG = DBR_TIME_LONG;

  /* "PyCafeDefs.pxi":297
 * 		self.CY_DBR_TIME_CHAR  =DBR_TIME_CHAR #returns a char time structure (dbr_time_char)
 * 		self.CY_DBR_TIME_LONG  =DBR_TIME_LONG #returns a long time structure (dbr_time_long)
 * 		self.CY_DBR_TIME_DOUBLE=DBR_TIME_DOUBLE #returns a double time structure (dbr_time_double)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_GR_STRING  =DBR_GR_STRING #returns a graphic string structure (dbr_gr_string)
 * 		self.CY_DBR_GR_SHORT   =DBR_GR_SHORT #returns a graphic short structure (dbr_gr_short)
 */
  __pyx_v_self->CY_DBR_TIME_DOUBLE = DBR_TIME_DOUBLE;

  /* "PyCafeDefs.pxi":298
 * 		self.CY_DBR_TIME_LONG  =DBR_TIME_LONG #returns a long time structure (dbr_time_long)
 * 		self.CY_DBR_TIME_DOUBLE=DBR_TIME_DOUBLE #returns a double time structure (dbr_time_double)
 * 		self.CY_DBR_GR_STRING  =DBR_GR_STRING #returns a graphic string structure (dbr_gr_string)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_GR_SHORT   =DBR_GR_SHORT #returns a graphic short structure (dbr_gr_short)
 * 		self.CY_DBR_GR_INT     =DBR_GR_INT #returns a graphic short structure (dbr_gr_int)
 */
  __pyx_v_self->CY_DBR_GR_STRING = DBR_GR_STRING;

  /* "PyCafeDefs.pxi":299
 * 		self.CY_DBR_TIME_DOUBLE=DBR_TIME_DOUBLE #returns a double time structure (dbr_time_double)
 * 		self.CY_DBR_GR_STRING  =DBR_GR_STRING #returns a graphic string structure (dbr_gr_string)
 * 		self.CY_DBR_GR_SHORT   =DBR_GR_SHORT #returns a graphic short structure (dbr_gr_short)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_GR_INT     =DBR_GR_INT #returns a graphic short structure (dbr_gr_int)
 * 		self.CY_DBR_GR_FLOAT   =DBR_GR_FLOAT #returns a graphic float structure (dbr_gr_float)
 */
  __pyx_v_self->CY_DBR_GR_SHORT = DBR_GR_SHORT;

  /* "PyCafeDefs.pxi":300
 * 		self.CY_DBR_GR_STRING  =DBR_GR_STRING #returns a graphic string structure (dbr_gr_string)
 * 		self.CY_DBR_GR_SHORT   =DBR_GR_SHORT #returns a graphic short structure (dbr_gr_short)
 * 		self.CY_DBR_GR_INT     =DBR_GR_INT #returns a graphic short structure (dbr_gr_int)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_GR_FLOAT   =DBR_GR_FLOAT #returns a graphic float structure (dbr_gr_float)
 * 		self.CY_DBR_GR_ENUM    =DBR_GR_ENUM #returns a graphic enum structure (dbr_gr_enum)
 */
  __pyx_v_self->CY_DBR_GR_INT = DBR_GR_INT;

  /* "PyCafeDefs.pxi":301
 * 		self.CY_DBR_GR_SHORT   =DBR_GR_SHORT #returns a graphic short structure (dbr_gr_short)
 * 		self.CY_DBR_GR_INT     =DBR_GR_INT #returns a graphic short structure (dbr_gr_int)
 * 		self.CY_DBR_GR_FLOAT   =DBR_GR_FLOAT #returns a graphic float structure (dbr_gr_float)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_GR_ENUM    =DBR_GR_ENUM #returns a graphic enum structure (dbr_gr_enum)
 * 		self.CY_DBR_GR_CHAR    =DBR_GR_CHAR #returns a graphic char structure (dbr_gr_char)
 */
  __pyx_v_self->CY_DBR_GR_FLOAT = DBR_GR_FLOAT;

  /* "PyCafeDefs.pxi":302
 * 		self.CY_DBR_GR_INT     =DBR_GR_INT #returns a graphic short structure (dbr_gr_int)
 * 		self.CY_DBR_GR_FLOAT   =DBR_GR_FLOAT #returns a graphic float structure (dbr_gr_float)
 * 		self.CY_DBR_GR_ENUM    =DBR_GR_ENUM #returns a graphic enum structure (dbr_gr_enum)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_GR_CHAR    =DBR_GR_CHAR #returns a graphic char structure (dbr_gr_char)
 * 		self.CY_DBR_GR_LONG    =DBR_GR_LONG #returns a graphic long structure (dbr_gr_long)
 */
  __pyx_v_self->CY_DBR_GR_ENUM = DBR_GR_ENUM;

  /* "PyCafeDefs.pxi":303
 * 		self.CY_DBR_GR_FLOAT   =DBR_GR_FLOAT #returns a graphic float structure (dbr_gr_float)
 * 		self.CY_DBR_GR_ENUM    =DBR_GR_ENUM #returns a graphic enum structure (dbr_gr_enum)
 * 		self.CY_DBR_GR_CHAR    =DBR_GR_CHAR #returns a graphic char structure (dbr_gr_char)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_GR_LONG    =DBR_GR_LONG #returns a graphic long structure (dbr_gr_long)
 * 		self.CY_DBR_GR_DOUBLE  =DBR_GR_DOUBLE #returns a graphic double structure (dbr_gr_double)
 */
  __pyx_v_self->CY_DBR_GR_CHAR = DBR_GR_CHAR;

  /* "PyCafeDefs.pxi":304
 * 		self.CY_DBR_GR_ENUM    =DBR_GR_ENUM #returns a graphic enum structure (dbr_gr_enum)
 * 		self.CY_DBR_GR_CHAR    =DBR_GR_CHAR #returns a graphic char structure (dbr_gr_char)
 * 		self.CY_DBR_GR_LONG    =DBR_GR_LONG #returns a graphic long structure (dbr_gr_long)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_GR_DOUBLE  =DBR_GR_DOUBLE #returns a graphic double structure (dbr_gr_double)
 * 		self.CY_DBR_CTRL_STRING=DBR_CTRL_STRING #returns a control string structure (dbr_ctrl_int)
 */
  __pyx_v_self->CY_DBR_GR_LONG = DBR_GR_LONG;

  /* "PyCafeDefs.pxi":305
 * 		self.CY_DBR_GR_CHAR    =DBR_GR_CHAR #returns a graphic char structure (dbr_gr_char)
 * 		self.CY_DBR_GR_LONG    =DBR_GR_LONG #returns a graphic long structure (dbr_gr_long)
 * 		self.CY_DBR_GR_DOUBLE  =DBR_GR_DOUBLE #returns a graphic double structure (dbr_gr_double)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_CTRL_STRING=DBR_CTRL_STRING #returns a control string structure (dbr_ctrl_int)
 * 		self.CY_DBR_CTRL_SHORT =DBR_CTRL_SHORT #returns a control short structure (dbr_ctrl_short)
 */
  __pyx_v_self->CY_DBR_GR_DOUBLE = DBR_GR_DOUBLE;

  /* "PyCafeDefs.pxi":306
 * 		self.CY_DBR_GR_LONG    =DBR_GR_LONG #returns a graphic long structure (dbr_gr_long)
 * 		self.CY_DBR_GR_DOUBLE  =DBR_GR_DOUBLE #returns a graphic double structure (dbr_gr_double)
 * 		self.CY_DBR_CTRL_STRING=DBR_CTRL_STRING #returns a control string structure (dbr_ctrl_int)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_CTRL_SHORT =DBR_CTRL_SHORT #returns a control short structure (dbr_ctrl_short)
 * 		self.CY_DBR_CTRL_INT   =DBR_CTRL_INT #returns a control short structure (dbr_ctrl_int)
 */
  __pyx_v_self->CY_DBR_CTRL_STRING = DBR_CTRL_STRING;

  /* "PyCafeDefs.pxi":307
 * 		self.CY_DBR_GR_DOUBLE  =DBR_GR_DOUBLE #returns a graphic double structure (dbr_gr_double)
 * 		self.CY_DBR_CTRL_STRING=DBR_CTRL_STRING #returns a control string structure (dbr_ctrl_int)
 * 		self.CY_DBR_CTRL_SHORT =DBR_CTRL_SHORT #returns a control short structure (dbr_ctrl_short)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_CTRL_INT   =DBR_CTRL_INT #returns a control short structure (dbr_ctrl_int)
 * 		self.CY_DBR_CTRL_FLOAT =DBR_CTRL_FLOAT #returns a control float structure (dbr_ctrl_float)
 */
  __pyx_v_self->CY_DBR_CTRL_SHORT = DBR_CTRL_SHORT;

  /* "PyCafeDefs.pxi":308
 * 		self.CY_DBR_CTRL_STRING=DBR_CTRL_STRING #returns a control string structure (dbr_ctrl_int)
 * 		self.CY_DBR_CTRL_SHORT =DBR_CTRL_SHORT #returns a control short structure (dbr_ctrl_short)
 * 		self.CY_DBR_CTRL_INT   =DBR_CTRL_INT #returns a control short structure (dbr_ctrl_int)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_CTRL_FLOAT =DBR_CTRL_FLOAT #returns a control float structure (dbr_ctrl_float)
 * 		self.CY_DBR_CTRL_ENUM  =DBR_CTRL_ENUM #returns a control enum structure (dbr_ctrl_enum)
 */
  __pyx_v_self->CY_DBR_CTRL_INT = DBR_CTRL_INT;

  /* "PyCafeDefs.pxi":309
 * 		self.CY_DBR_CTRL_SHORT =DBR_CTRL_SHORT #returns a control short structure (dbr_ctrl_short)
 * 		self.CY_DBR_CTRL_INT   =DBR_CTRL_INT #returns a control short structure (dbr_ctrl_int)
 * 		self.CY_DBR_CTRL_FLOAT =DBR_CTRL_FLOAT #returns a control float structure (dbr_ctrl_float)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_CTRL_ENUM  =DBR_CTRL_ENUM #returns a control enum structure (dbr_ctrl_enum)
 * 		self.CY_DBR_CTRL_CHAR  =DBR_CTRL_CHAR #returns a control char structure (dbr_ctrl_char)
 */
  __pyx_v_self->CY_DBR_CTRL_FLOAT = DBR_CTRL_FLOAT;

  /* "PyCafeDefs.pxi":310
 * 		self.CY_DBR_CTRL_INT   =DBR_CTRL_INT #returns a control short structure (dbr_ctrl_int)
 * 		self.CY_DBR_CTRL_FLOAT =DBR_CTRL_FLOAT #returns a control float structure (dbr_ctrl_float)
 * 		self.CY_DBR_CTRL_ENUM  =DBR_CTRL_ENUM #returns a control enum structure (dbr_ctrl_enum)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_CTRL_CHAR  =DBR_CTRL_CHAR #returns a control char structure (dbr_ctrl_char)
 * 		self.CY_DBR_CTRL_LONG  =DBR_CTRL_LONG #returns a control long structure (dbr_ctrl_long)
 */
  __pyx_v_self->CY_DBR_CTRL_ENUM = DBR_CTRL_ENUM;

  /* "PyCafeDefs.pxi":311
 * 		self.CY_DBR_CTRL_FLOAT =DBR_CTRL_FLOAT #returns a control float structure (dbr_ctrl_float)
 * 		self.CY_DBR_CTRL_ENUM  =DBR_CTRL_ENUM #returns a control enum structure (dbr_ctrl_enum)
 * 		self.CY_DBR_CTRL_CHAR  =DBR_CTRL_CHAR #returns a control char structure (dbr_ctrl_char)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_CTRL_LONG  =DBR_CTRL_LONG #returns a control long structure (dbr_ctrl_long)
 * 		self.CY_DBR_CTRL_DOUBLE=DBR_CTRL_DOUBLE #returns a control double structure (dbr_ctrl_double)
 */
  __pyx_v_self->CY_DBR_CTRL_CHAR = DBR_CTRL_CHAR;

  /* "PyCafeDefs.pxi":312
 * 		self.CY_DBR_CTRL_ENUM  =DBR_CTRL_ENUM #returns a control enum structure (dbr_ctrl_enum)
 * 		self.CY_DBR_CTRL_CHAR  =DBR_CTRL_CHAR #returns a control char structure (dbr_ctrl_char)
 * 		self.CY_DBR_CTRL_LONG  =DBR_CTRL_LONG #returns a control long structure (dbr_ctrl_long)             # <<<<<<<<<<<<<<
 * 		self.CY_DBR_CTRL_DOUBLE=DBR_CTRL_DOUBLE #returns a control double structure (dbr_ctrl_double)
 * 		return
 */
  __pyx_v_self->CY_DBR_CTRL_LONG = DBR_CTRL_LONG;

  /* "PyCafeDefs.pxi":313
 * 		self.CY_DBR_CTRL_CHAR  =DBR_CTRL_CHAR #returns a control char structure (dbr_ctrl_char)
 * 		self.CY_DBR_CTRL_LONG  =DBR_CTRL_LONG #returns a control long structure (dbr_ctrl_long)
 * 		self.CY_DBR_CTRL_DOUBLE=DBR_CTRL_DOUBLE #returns a control double structure (dbr_ctrl_double)             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
  __pyx_v_self->CY_DBR_CTRL_DOUBLE = DBR_CTRL_DOUBLE;

  /* "PyCafeDefs.pxi":314
 * 		self.CY_DBR_CTRL_LONG  =DBR_CTRL_LONG #returns a control long structure (dbr_ctrl_long)
 * 		self.CY_DBR_CTRL_DOUBLE=DBR_CTRL_DOUBLE #returns a control double structure (dbr_ctrl_double)
 * 		return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "PyCafeDefs.pxi":258
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_DOUBLE #returns a control double structure (dbr_ctrl_double)
 * 
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self.CY_DBE_VALUE 		=DBE_VALUE
 * 		self.CY_DBE_LOG   		=DBE_LOG
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":202
 * 
 * cdef class CyCa:
 * 	cpdef readonly unsigned int CY_DBE_VALUE             # <<<<<<<<<<<<<<
 * 	cpdef readonly unsigned int CY_DBE_LOG
 * 	cpdef readonly unsigned int CY_DBE_ARCHIVE
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_12CY_DBE_VALUE_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_12CY_DBE_VALUE_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_12CY_DBE_VALUE___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_12CY_DBE_VALUE___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBE_VALUE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBE_VALUE.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":203
 * cdef class CyCa:
 * 	cpdef readonly unsigned int CY_DBE_VALUE
 * 	cpdef readonly unsigned int CY_DBE_LOG             # <<<<<<<<<<<<<<
 * 	cpdef readonly unsigned int CY_DBE_ARCHIVE
 * 	cpdef readonly unsigned int CY_DBE_ALARM
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_10CY_DBE_LOG_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_10CY_DBE_LOG_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_10CY_DBE_LOG___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_10CY_DBE_LOG___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBE_LOG); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBE_LOG.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":204
 * 	cpdef readonly unsigned int CY_DBE_VALUE
 * 	cpdef readonly unsigned int CY_DBE_LOG
 * 	cpdef readonly unsigned int CY_DBE_ARCHIVE             # <<<<<<<<<<<<<<
 * 	cpdef readonly unsigned int CY_DBE_ALARM
 * 	cpdef readonly unsigned int CY_DBE_PROPERTY
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_14CY_DBE_ARCHIVE_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_14CY_DBE_ARCHIVE_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_14CY_DBE_ARCHIVE___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_14CY_DBE_ARCHIVE___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBE_ARCHIVE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBE_ARCHIVE.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":205
 * 	cpdef readonly unsigned int CY_DBE_LOG
 * 	cpdef readonly unsigned int CY_DBE_ARCHIVE
 * 	cpdef readonly unsigned int CY_DBE_ALARM             # <<<<<<<<<<<<<<
 * 	cpdef readonly unsigned int CY_DBE_PROPERTY
 * 	cpdef readonly unsigned int CY_DBR_PRIMITIVE
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_12CY_DBE_ALARM_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_12CY_DBE_ALARM_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_12CY_DBE_ALARM___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_12CY_DBE_ALARM___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBE_ALARM); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBE_ALARM.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":206
 * 	cpdef readonly unsigned int CY_DBE_ARCHIVE
 * 	cpdef readonly unsigned int CY_DBE_ALARM
 * 	cpdef readonly unsigned int CY_DBE_PROPERTY             # <<<<<<<<<<<<<<
 * 	cpdef readonly unsigned int CY_DBR_PRIMITIVE
 * 	cpdef readonly unsigned int CY_DBR_PLAIN
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_15CY_DBE_PROPERTY_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_15CY_DBE_PROPERTY_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_15CY_DBE_PROPERTY___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_15CY_DBE_PROPERTY___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBE_PROPERTY); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBE_PROPERTY.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":207
 * 	cpdef readonly unsigned int CY_DBE_ALARM
 * 	cpdef readonly unsigned int CY_DBE_PROPERTY
 * 	cpdef readonly unsigned int CY_DBR_PRIMITIVE             # <<<<<<<<<<<<<<
 * 	cpdef readonly unsigned int CY_DBR_PLAIN
 * 	cpdef readonly unsigned int CY_DBR_STS
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_16CY_DBR_PRIMITIVE_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_16CY_DBR_PRIMITIVE_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_16CY_DBR_PRIMITIVE___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_16CY_DBR_PRIMITIVE___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_PRIMITIVE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_PRIMITIVE.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":208
 * 	cpdef readonly unsigned int CY_DBE_PROPERTY
 * 	cpdef readonly unsigned int CY_DBR_PRIMITIVE
 * 	cpdef readonly unsigned int CY_DBR_PLAIN             # <<<<<<<<<<<<<<
 * 	cpdef readonly unsigned int CY_DBR_STS
 * 	cpdef readonly unsigned int CY_DBR_TIME
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_12CY_DBR_PLAIN_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_12CY_DBR_PLAIN_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_12CY_DBR_PLAIN___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_12CY_DBR_PLAIN___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_PLAIN); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_PLAIN.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":209
 * 	cpdef readonly unsigned int CY_DBR_PRIMITIVE
 * 	cpdef readonly unsigned int CY_DBR_PLAIN
 * 	cpdef readonly unsigned int CY_DBR_STS             # <<<<<<<<<<<<<<
 * 	cpdef readonly unsigned int CY_DBR_TIME
 * 	cpdef readonly unsigned int CY_DBR_GR
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_10CY_DBR_STS_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_10CY_DBR_STS_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_10CY_DBR_STS___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_10CY_DBR_STS___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_STS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_STS.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":210
 * 	cpdef readonly unsigned int CY_DBR_PLAIN
 * 	cpdef readonly unsigned int CY_DBR_STS
 * 	cpdef readonly unsigned int CY_DBR_TIME             # <<<<<<<<<<<<<<
 * 	cpdef readonly unsigned int CY_DBR_GR
 * 	cpdef readonly unsigned int CY_DBR_CTRL
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_11CY_DBR_TIME_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_11CY_DBR_TIME_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_11CY_DBR_TIME___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_11CY_DBR_TIME___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_TIME); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_TIME.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":211
 * 	cpdef readonly unsigned int CY_DBR_STS
 * 	cpdef readonly unsigned int CY_DBR_TIME
 * 	cpdef readonly unsigned int CY_DBR_GR             # <<<<<<<<<<<<<<
 * 	cpdef readonly unsigned int CY_DBR_CTRL
 * 	cpdef readonly unsigned int CY_DBR_PUT
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_9CY_DBR_GR_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_9CY_DBR_GR_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_9CY_DBR_GR___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_9CY_DBR_GR___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_GR); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_GR.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":212
 * 	cpdef readonly unsigned int CY_DBR_TIME
 * 	cpdef readonly unsigned int CY_DBR_GR
 * 	cpdef readonly unsigned int CY_DBR_CTRL             # <<<<<<<<<<<<<<
 * 	cpdef readonly unsigned int CY_DBR_PUT
 * 	cpdef readonly unsigned int CY_DBR_STSACK
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_11CY_DBR_CTRL_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_11CY_DBR_CTRL_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_11CY_DBR_CTRL___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_11CY_DBR_CTRL___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_CTRL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_CTRL.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":213
 * 	cpdef readonly unsigned int CY_DBR_GR
 * 	cpdef readonly unsigned int CY_DBR_CTRL
 * 	cpdef readonly unsigned int CY_DBR_PUT             # <<<<<<<<<<<<<<
 * 	cpdef readonly unsigned int CY_DBR_STSACK
 * 	cpdef readonly unsigned int CY_DBR_CLASS
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_10CY_DBR_PUT_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_10CY_DBR_PUT_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_10CY_DBR_PUT___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_10CY_DBR_PUT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_PUT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_PUT.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":214
 * 	cpdef readonly unsigned int CY_DBR_CTRL
 * 	cpdef readonly unsigned int CY_DBR_PUT
 * 	cpdef readonly unsigned int CY_DBR_STSACK             # <<<<<<<<<<<<<<
 * 	cpdef readonly unsigned int CY_DBR_CLASS
 * 	cpdef readonly unsigned int CY_DBR_NONE
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_13CY_DBR_STSACK_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_13CY_DBR_STSACK_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_13CY_DBR_STSACK___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_13CY_DBR_STSACK___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_STSACK); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_STSACK.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":215
 * 	cpdef readonly unsigned int CY_DBR_PUT
 * 	cpdef readonly unsigned int CY_DBR_STSACK
 * 	cpdef readonly unsigned int CY_DBR_CLASS             # <<<<<<<<<<<<<<
 * 	cpdef readonly unsigned int CY_DBR_NONE
 * 	cpdef readonly	unsigned int CY_DBR_STRING      #returns a NULL terminated string
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_12CY_DBR_CLASS_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_12CY_DBR_CLASS_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_12CY_DBR_CLASS___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_12CY_DBR_CLASS___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_CLASS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_CLASS.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":216
 * 	cpdef readonly unsigned int CY_DBR_STSACK
 * 	cpdef readonly unsigned int CY_DBR_CLASS
 * 	cpdef readonly unsigned int CY_DBR_NONE             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_STRING      #returns a NULL terminated string
 * 	cpdef readonly	unsigned int CY_DBR_SHORT       #returns an unsigned short
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_11CY_DBR_NONE_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_11CY_DBR_NONE_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_11CY_DBR_NONE___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_11CY_DBR_NONE___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_NONE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_NONE.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":217
 * 	cpdef readonly unsigned int CY_DBR_CLASS
 * 	cpdef readonly unsigned int CY_DBR_NONE
 * 	cpdef readonly	unsigned int CY_DBR_STRING      #returns a NULL terminated string             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_SHORT       #returns an unsigned short
 * 	cpdef readonly	unsigned int CY_DBR_INT         #returns an unsigned short
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_13CY_DBR_STRING_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_13CY_DBR_STRING_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_13CY_DBR_STRING___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_13CY_DBR_STRING___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_STRING); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_STRING.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":218
 * 	cpdef readonly unsigned int CY_DBR_NONE
 * 	cpdef readonly	unsigned int CY_DBR_STRING      #returns a NULL terminated string
 * 	cpdef readonly	unsigned int CY_DBR_SHORT       #returns an unsigned short             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_INT         #returns an unsigned short
 * 	cpdef readonly	unsigned int CY_DBR_FLOAT       #returns an IEEE floating point value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_12CY_DBR_SHORT_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_12CY_DBR_SHORT_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_12CY_DBR_SHORT___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_12CY_DBR_SHORT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_SHORT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_SHORT.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":219
 * 	cpdef readonly	unsigned int CY_DBR_STRING      #returns a NULL terminated string
 * 	cpdef readonly	unsigned int CY_DBR_SHORT       #returns an unsigned short
 * 	cpdef readonly	unsigned int CY_DBR_INT         #returns an unsigned short             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_FLOAT       #returns an IEEE floating point value
 * 	cpdef readonly	unsigned int CY_DBR_ENUM        #returns an unsigned short which is the enum item
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_10CY_DBR_INT_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_10CY_DBR_INT_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_10CY_DBR_INT___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_10CY_DBR_INT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_INT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_INT.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":220
 * 	cpdef readonly	unsigned int CY_DBR_SHORT       #returns an unsigned short
 * 	cpdef readonly	unsigned int CY_DBR_INT         #returns an unsigned short
 * 	cpdef readonly	unsigned int CY_DBR_FLOAT       #returns an IEEE floating point value             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_ENUM        #returns an unsigned short which is the enum item
 * 	cpdef readonly	unsigned int CY_DBR_CHAR        #returns an unsigned char
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_12CY_DBR_FLOAT_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_12CY_DBR_FLOAT_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_12CY_DBR_FLOAT___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_12CY_DBR_FLOAT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_FLOAT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_FLOAT.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":221
 * 	cpdef readonly	unsigned int CY_DBR_INT         #returns an unsigned short
 * 	cpdef readonly	unsigned int CY_DBR_FLOAT       #returns an IEEE floating point value
 * 	cpdef readonly	unsigned int CY_DBR_ENUM        #returns an unsigned short which is the enum item             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_CHAR        #returns an unsigned char
 * 	cpdef readonly	unsigned int CY_DBR_LONG        #returns an unsigned long
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_11CY_DBR_ENUM_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_11CY_DBR_ENUM_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_11CY_DBR_ENUM___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_11CY_DBR_ENUM___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_ENUM); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_ENUM.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":222
 * 	cpdef readonly	unsigned int CY_DBR_FLOAT       #returns an IEEE floating point value
 * 	cpdef readonly	unsigned int CY_DBR_ENUM        #returns an unsigned short which is the enum item
 * 	cpdef readonly	unsigned int CY_DBR_CHAR        #returns an unsigned char             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_LONG        #returns an unsigned long
 * 	cpdef readonly	unsigned int CY_DBR_DOUBLE      #returns a double precision floating point number
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_11CY_DBR_CHAR_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_11CY_DBR_CHAR_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_11CY_DBR_CHAR___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_11CY_DBR_CHAR___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_CHAR); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_CHAR.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":223
 * 	cpdef readonly	unsigned int CY_DBR_ENUM        #returns an unsigned short which is the enum item
 * 	cpdef readonly	unsigned int CY_DBR_CHAR        #returns an unsigned char
 * 	cpdef readonly	unsigned int CY_DBR_LONG        #returns an unsigned long             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_DOUBLE      #returns a double precision floating point number
 * 	cpdef readonly	unsigned int CY_DBR_STS_STRING  #returns a string status structure (dbr_sts_string)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_11CY_DBR_LONG_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_11CY_DBR_LONG_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_11CY_DBR_LONG___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_11CY_DBR_LONG___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_LONG); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_LONG.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":224
 * 	cpdef readonly	unsigned int CY_DBR_CHAR        #returns an unsigned char
 * 	cpdef readonly	unsigned int CY_DBR_LONG        #returns an unsigned long
 * 	cpdef readonly	unsigned int CY_DBR_DOUBLE      #returns a double precision floating point number             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_STS_STRING  #returns a string status structure (dbr_sts_string)
 * 	cpdef readonly	unsigned int CY_DBR_STS_SHORT   #returns a short status structure (dbr_sts_short)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_13CY_DBR_DOUBLE_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_13CY_DBR_DOUBLE_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_13CY_DBR_DOUBLE___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_13CY_DBR_DOUBLE___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_DOUBLE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_DOUBLE.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":225
 * 	cpdef readonly	unsigned int CY_DBR_LONG        #returns an unsigned long
 * 	cpdef readonly	unsigned int CY_DBR_DOUBLE      #returns a double precision floating point number
 * 	cpdef readonly	unsigned int CY_DBR_STS_STRING  #returns a string status structure (dbr_sts_string)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_STS_SHORT   #returns a short status structure (dbr_sts_short)
 * 	cpdef readonly	unsigned int CY_DBR_STS_INT     #returns a short status structure (dbr_sts_int)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_17CY_DBR_STS_STRING_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_17CY_DBR_STS_STRING_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_17CY_DBR_STS_STRING___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_17CY_DBR_STS_STRING___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_STS_STRING); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_STS_STRING.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":226
 * 	cpdef readonly	unsigned int CY_DBR_DOUBLE      #returns a double precision floating point number
 * 	cpdef readonly	unsigned int CY_DBR_STS_STRING  #returns a string status structure (dbr_sts_string)
 * 	cpdef readonly	unsigned int CY_DBR_STS_SHORT   #returns a short status structure (dbr_sts_short)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_STS_INT     #returns a short status structure (dbr_sts_int)
 * 	cpdef readonly	unsigned int CY_DBR_STS_FLOAT   #returns a float status structure (dbr_sts_float)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_16CY_DBR_STS_SHORT_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_16CY_DBR_STS_SHORT_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_16CY_DBR_STS_SHORT___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_16CY_DBR_STS_SHORT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_STS_SHORT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_STS_SHORT.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":227
 * 	cpdef readonly	unsigned int CY_DBR_STS_STRING  #returns a string status structure (dbr_sts_string)
 * 	cpdef readonly	unsigned int CY_DBR_STS_SHORT   #returns a short status structure (dbr_sts_short)
 * 	cpdef readonly	unsigned int CY_DBR_STS_INT     #returns a short status structure (dbr_sts_int)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_STS_FLOAT   #returns a float status structure (dbr_sts_float)
 * 	cpdef readonly	unsigned int CY_DBR_STS_ENUM    #returns an enum status structure (dbr_sts_enum)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_14CY_DBR_STS_INT_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_14CY_DBR_STS_INT_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_14CY_DBR_STS_INT___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_14CY_DBR_STS_INT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_STS_INT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_STS_INT.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":228
 * 	cpdef readonly	unsigned int CY_DBR_STS_SHORT   #returns a short status structure (dbr_sts_short)
 * 	cpdef readonly	unsigned int CY_DBR_STS_INT     #returns a short status structure (dbr_sts_int)
 * 	cpdef readonly	unsigned int CY_DBR_STS_FLOAT   #returns a float status structure (dbr_sts_float)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_STS_ENUM    #returns an enum status structure (dbr_sts_enum)
 * 	cpdef readonly	unsigned int CY_DBR_STS_CHAR    #returns a char status structure (dbr_sts_char)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_16CY_DBR_STS_FLOAT_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_16CY_DBR_STS_FLOAT_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_16CY_DBR_STS_FLOAT___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_16CY_DBR_STS_FLOAT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_STS_FLOAT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_STS_FLOAT.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":229
 * 	cpdef readonly	unsigned int CY_DBR_STS_INT     #returns a short status structure (dbr_sts_int)
 * 	cpdef readonly	unsigned int CY_DBR_STS_FLOAT   #returns a float status structure (dbr_sts_float)
 * 	cpdef readonly	unsigned int CY_DBR_STS_ENUM    #returns an enum status structure (dbr_sts_enum)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_STS_CHAR    #returns a char status structure (dbr_sts_char)
 * 	cpdef readonly	unsigned int CY_DBR_STS_LONG    #returns a long status structure (dbr_sts_long)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_15CY_DBR_STS_ENUM_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_15CY_DBR_STS_ENUM_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_15CY_DBR_STS_ENUM___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_15CY_DBR_STS_ENUM___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_STS_ENUM); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_STS_ENUM.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":230
 * 	cpdef readonly	unsigned int CY_DBR_STS_FLOAT   #returns a float status structure (dbr_sts_float)
 * 	cpdef readonly	unsigned int CY_DBR_STS_ENUM    #returns an enum status structure (dbr_sts_enum)
 * 	cpdef readonly	unsigned int CY_DBR_STS_CHAR    #returns a char status structure (dbr_sts_char)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_STS_LONG    #returns a long status structure (dbr_sts_long)
 * 	cpdef readonly	unsigned int CY_DBR_STS_DOUBLE  #returns a double status structure (dbr_sts_double)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_15CY_DBR_STS_CHAR_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_15CY_DBR_STS_CHAR_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_15CY_DBR_STS_CHAR___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_15CY_DBR_STS_CHAR___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_STS_CHAR); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_STS_CHAR.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":231
 * 	cpdef readonly	unsigned int CY_DBR_STS_ENUM    #returns an enum status structure (dbr_sts_enum)
 * 	cpdef readonly	unsigned int CY_DBR_STS_CHAR    #returns a char status structure (dbr_sts_char)
 * 	cpdef readonly	unsigned int CY_DBR_STS_LONG    #returns a long status structure (dbr_sts_long)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_STS_DOUBLE  #returns a double status structure (dbr_sts_double)
 * 	cpdef readonly	unsigned int CY_DBR_TIME_STRING #returns a string time structure (dbr_time_string)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_15CY_DBR_STS_LONG_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_15CY_DBR_STS_LONG_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_15CY_DBR_STS_LONG___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_15CY_DBR_STS_LONG___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_STS_LONG); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_STS_LONG.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":232
 * 	cpdef readonly	unsigned int CY_DBR_STS_CHAR    #returns a char status structure (dbr_sts_char)
 * 	cpdef readonly	unsigned int CY_DBR_STS_LONG    #returns a long status structure (dbr_sts_long)
 * 	cpdef readonly	unsigned int CY_DBR_STS_DOUBLE  #returns a double status structure (dbr_sts_double)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_TIME_STRING #returns a string time structure (dbr_time_string)
 * 	cpdef readonly	unsigned int CY_DBR_TIME_SHORT  #returns a short time structure (dbr_time_short)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_17CY_DBR_STS_DOUBLE_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_17CY_DBR_STS_DOUBLE_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_17CY_DBR_STS_DOUBLE___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_17CY_DBR_STS_DOUBLE___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_STS_DOUBLE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_STS_DOUBLE.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":233
 * 	cpdef readonly	unsigned int CY_DBR_STS_LONG    #returns a long status structure (dbr_sts_long)
 * 	cpdef readonly	unsigned int CY_DBR_STS_DOUBLE  #returns a double status structure (dbr_sts_double)
 * 	cpdef readonly	unsigned int CY_DBR_TIME_STRING #returns a string time structure (dbr_time_string)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_TIME_SHORT  #returns a short time structure (dbr_time_short)
 * 	cpdef readonly	unsigned int CY_DBR_TIME_INT    #returns a short time structure (dbr_time_short)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_18CY_DBR_TIME_STRING_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_18CY_DBR_TIME_STRING_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_18CY_DBR_TIME_STRING___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_18CY_DBR_TIME_STRING___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_TIME_STRING); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_TIME_STRING.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":234
 * 	cpdef readonly	unsigned int CY_DBR_STS_DOUBLE  #returns a double status structure (dbr_sts_double)
 * 	cpdef readonly	unsigned int CY_DBR_TIME_STRING #returns a string time structure (dbr_time_string)
 * 	cpdef readonly	unsigned int CY_DBR_TIME_SHORT  #returns a short time structure (dbr_time_short)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_TIME_INT    #returns a short time structure (dbr_time_short)
 * 	cpdef readonly	unsigned int CY_DBR_TIME_FLOAT  #returns a float time structure (dbr_time_float)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_17CY_DBR_TIME_SHORT_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_17CY_DBR_TIME_SHORT_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_17CY_DBR_TIME_SHORT___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_17CY_DBR_TIME_SHORT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_TIME_SHORT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_TIME_SHORT.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":235
 * 	cpdef readonly	unsigned int CY_DBR_TIME_STRING #returns a string time structure (dbr_time_string)
 * 	cpdef readonly	unsigned int CY_DBR_TIME_SHORT  #returns a short time structure (dbr_time_short)
 * 	cpdef readonly	unsigned int CY_DBR_TIME_INT    #returns a short time structure (dbr_time_short)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_TIME_FLOAT  #returns a float time structure (dbr_time_float)
 * 	cpdef readonly	unsigned int CY_DBR_TIME_ENUM   #returns an enum time structure (dbr_time_enum)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_15CY_DBR_TIME_INT_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_15CY_DBR_TIME_INT_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_15CY_DBR_TIME_INT___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_15CY_DBR_TIME_INT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_TIME_INT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_TIME_INT.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":236
 * 	cpdef readonly	unsigned int CY_DBR_TIME_SHORT  #returns a short time structure (dbr_time_short)
 * 	cpdef readonly	unsigned int CY_DBR_TIME_INT    #returns a short time structure (dbr_time_short)
 * 	cpdef readonly	unsigned int CY_DBR_TIME_FLOAT  #returns a float time structure (dbr_time_float)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_TIME_ENUM   #returns an enum time structure (dbr_time_enum)
 * 	cpdef readonly	unsigned int CY_DBR_TIME_CHAR   #returns a char time structure (dbr_time_char)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_17CY_DBR_TIME_FLOAT_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_17CY_DBR_TIME_FLOAT_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_17CY_DBR_TIME_FLOAT___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_17CY_DBR_TIME_FLOAT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_TIME_FLOAT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_TIME_FLOAT.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":237
 * 	cpdef readonly	unsigned int CY_DBR_TIME_INT    #returns a short time structure (dbr_time_short)
 * 	cpdef readonly	unsigned int CY_DBR_TIME_FLOAT  #returns a float time structure (dbr_time_float)
 * 	cpdef readonly	unsigned int CY_DBR_TIME_ENUM   #returns an enum time structure (dbr_time_enum)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_TIME_CHAR   #returns a char time structure (dbr_time_char)
 * 	cpdef readonly	unsigned int CY_DBR_TIME_LONG   #returns a long time structure (dbr_time_long)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_16CY_DBR_TIME_ENUM_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_16CY_DBR_TIME_ENUM_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_16CY_DBR_TIME_ENUM___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_16CY_DBR_TIME_ENUM___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_TIME_ENUM); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_TIME_ENUM.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":238
 * 	cpdef readonly	unsigned int CY_DBR_TIME_FLOAT  #returns a float time structure (dbr_time_float)
 * 	cpdef readonly	unsigned int CY_DBR_TIME_ENUM   #returns an enum time structure (dbr_time_enum)
 * 	cpdef readonly	unsigned int CY_DBR_TIME_CHAR   #returns a char time structure (dbr_time_char)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_TIME_LONG   #returns a long time structure (dbr_time_long)
 * 	cpdef readonly	unsigned int CY_DBR_TIME_DOUBLE #returns a double time structure (dbr_time_double)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_16CY_DBR_TIME_CHAR_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_16CY_DBR_TIME_CHAR_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_16CY_DBR_TIME_CHAR___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_16CY_DBR_TIME_CHAR___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_TIME_CHAR); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_TIME_CHAR.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":239
 * 	cpdef readonly	unsigned int CY_DBR_TIME_ENUM   #returns an enum time structure (dbr_time_enum)
 * 	cpdef readonly	unsigned int CY_DBR_TIME_CHAR   #returns a char time structure (dbr_time_char)
 * 	cpdef readonly	unsigned int CY_DBR_TIME_LONG   #returns a long time structure (dbr_time_long)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_TIME_DOUBLE #returns a double time structure (dbr_time_double)
 * 	cpdef readonly	unsigned int CY_DBR_GR_STRING   #returns a graphic string structure (dbr_gr_string)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_16CY_DBR_TIME_LONG_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_16CY_DBR_TIME_LONG_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_16CY_DBR_TIME_LONG___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_16CY_DBR_TIME_LONG___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_TIME_LONG); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_TIME_LONG.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":240
 * 	cpdef readonly	unsigned int CY_DBR_TIME_CHAR   #returns a char time structure (dbr_time_char)
 * 	cpdef readonly	unsigned int CY_DBR_TIME_LONG   #returns a long time structure (dbr_time_long)
 * 	cpdef readonly	unsigned int CY_DBR_TIME_DOUBLE #returns a double time structure (dbr_time_double)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_GR_STRING   #returns a graphic string structure (dbr_gr_string)
 * 	cpdef readonly	unsigned int CY_DBR_GR_SHORT    #returns a graphic short structure (dbr_gr_short)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_18CY_DBR_TIME_DOUBLE_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_18CY_DBR_TIME_DOUBLE_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_18CY_DBR_TIME_DOUBLE___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_18CY_DBR_TIME_DOUBLE___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_TIME_DOUBLE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_TIME_DOUBLE.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":241
 * 	cpdef readonly	unsigned int CY_DBR_TIME_LONG   #returns a long time structure (dbr_time_long)
 * 	cpdef readonly	unsigned int CY_DBR_TIME_DOUBLE #returns a double time structure (dbr_time_double)
 * 	cpdef readonly	unsigned int CY_DBR_GR_STRING   #returns a graphic string structure (dbr_gr_string)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_GR_SHORT    #returns a graphic short structure (dbr_gr_short)
 * 	cpdef readonly	unsigned int CY_DBR_GR_INT      #returns a graphic short structure (dbr_gr_int)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_16CY_DBR_GR_STRING_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_16CY_DBR_GR_STRING_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_16CY_DBR_GR_STRING___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_16CY_DBR_GR_STRING___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_GR_STRING); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_GR_STRING.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":242
 * 	cpdef readonly	unsigned int CY_DBR_TIME_DOUBLE #returns a double time structure (dbr_time_double)
 * 	cpdef readonly	unsigned int CY_DBR_GR_STRING   #returns a graphic string structure (dbr_gr_string)
 * 	cpdef readonly	unsigned int CY_DBR_GR_SHORT    #returns a graphic short structure (dbr_gr_short)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_GR_INT      #returns a graphic short structure (dbr_gr_int)
 * 	cpdef readonly	unsigned int CY_DBR_GR_FLOAT    #returns a graphic float structure (dbr_gr_float)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_15CY_DBR_GR_SHORT_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_15CY_DBR_GR_SHORT_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_15CY_DBR_GR_SHORT___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_15CY_DBR_GR_SHORT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_GR_SHORT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_GR_SHORT.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":243
 * 	cpdef readonly	unsigned int CY_DBR_GR_STRING   #returns a graphic string structure (dbr_gr_string)
 * 	cpdef readonly	unsigned int CY_DBR_GR_SHORT    #returns a graphic short structure (dbr_gr_short)
 * 	cpdef readonly	unsigned int CY_DBR_GR_INT      #returns a graphic short structure (dbr_gr_int)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_GR_FLOAT    #returns a graphic float structure (dbr_gr_float)
 * 	cpdef readonly	unsigned int CY_DBR_GR_ENUM     #returns a graphic enum structure (dbr_gr_enum)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_13CY_DBR_GR_INT_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_13CY_DBR_GR_INT_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_13CY_DBR_GR_INT___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_13CY_DBR_GR_INT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_GR_INT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_GR_INT.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":244
 * 	cpdef readonly	unsigned int CY_DBR_GR_SHORT    #returns a graphic short structure (dbr_gr_short)
 * 	cpdef readonly	unsigned int CY_DBR_GR_INT      #returns a graphic short structure (dbr_gr_int)
 * 	cpdef readonly	unsigned int CY_DBR_GR_FLOAT    #returns a graphic float structure (dbr_gr_float)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_GR_ENUM     #returns a graphic enum structure (dbr_gr_enum)
 * 	cpdef readonly	unsigned int CY_DBR_GR_CHAR     #returns a graphic char structure (dbr_gr_char)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_15CY_DBR_GR_FLOAT_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_15CY_DBR_GR_FLOAT_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_15CY_DBR_GR_FLOAT___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_15CY_DBR_GR_FLOAT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_GR_FLOAT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_GR_FLOAT.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":245
 * 	cpdef readonly	unsigned int CY_DBR_GR_INT      #returns a graphic short structure (dbr_gr_int)
 * 	cpdef readonly	unsigned int CY_DBR_GR_FLOAT    #returns a graphic float structure (dbr_gr_float)
 * 	cpdef readonly	unsigned int CY_DBR_GR_ENUM     #returns a graphic enum structure (dbr_gr_enum)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_GR_CHAR     #returns a graphic char structure (dbr_gr_char)
 * 	cpdef readonly	unsigned int CY_DBR_GR_LONG     #returns a graphic long structure (dbr_gr_long)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_14CY_DBR_GR_ENUM_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_14CY_DBR_GR_ENUM_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_14CY_DBR_GR_ENUM___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_14CY_DBR_GR_ENUM___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_GR_ENUM); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_GR_ENUM.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":246
 * 	cpdef readonly	unsigned int CY_DBR_GR_FLOAT    #returns a graphic float structure (dbr_gr_float)
 * 	cpdef readonly	unsigned int CY_DBR_GR_ENUM     #returns a graphic enum structure (dbr_gr_enum)
 * 	cpdef readonly	unsigned int CY_DBR_GR_CHAR     #returns a graphic char structure (dbr_gr_char)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_GR_LONG     #returns a graphic long structure (dbr_gr_long)
 * 	cpdef readonly	unsigned int CY_DBR_GR_DOUBLE   #returns a graphic double structure (dbr_gr_double)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_14CY_DBR_GR_CHAR_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_14CY_DBR_GR_CHAR_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_14CY_DBR_GR_CHAR___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_14CY_DBR_GR_CHAR___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_GR_CHAR); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_GR_CHAR.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":247
 * 	cpdef readonly	unsigned int CY_DBR_GR_ENUM     #returns a graphic enum structure (dbr_gr_enum)
 * 	cpdef readonly	unsigned int CY_DBR_GR_CHAR     #returns a graphic char structure (dbr_gr_char)
 * 	cpdef readonly	unsigned int CY_DBR_GR_LONG     #returns a graphic long structure (dbr_gr_long)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_GR_DOUBLE   #returns a graphic double structure (dbr_gr_double)
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_STRING #returns a control string structure (dbr_ctrl_int)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_14CY_DBR_GR_LONG_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_14CY_DBR_GR_LONG_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_14CY_DBR_GR_LONG___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_14CY_DBR_GR_LONG___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_GR_LONG); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_GR_LONG.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":248
 * 	cpdef readonly	unsigned int CY_DBR_GR_CHAR     #returns a graphic char structure (dbr_gr_char)
 * 	cpdef readonly	unsigned int CY_DBR_GR_LONG     #returns a graphic long structure (dbr_gr_long)
 * 	cpdef readonly	unsigned int CY_DBR_GR_DOUBLE   #returns a graphic double structure (dbr_gr_double)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_STRING #returns a control string structure (dbr_ctrl_int)
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_SHORT  #returns a control short structure (dbr_ctrl_short)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_16CY_DBR_GR_DOUBLE_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_16CY_DBR_GR_DOUBLE_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_16CY_DBR_GR_DOUBLE___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_16CY_DBR_GR_DOUBLE___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_GR_DOUBLE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_GR_DOUBLE.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":249
 * 	cpdef readonly	unsigned int CY_DBR_GR_LONG     #returns a graphic long structure (dbr_gr_long)
 * 	cpdef readonly	unsigned int CY_DBR_GR_DOUBLE   #returns a graphic double structure (dbr_gr_double)
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_STRING #returns a control string structure (dbr_ctrl_int)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_SHORT  #returns a control short structure (dbr_ctrl_short)
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_INT    #returns a control short structure (dbr_ctrl_int)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_18CY_DBR_CTRL_STRING_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_18CY_DBR_CTRL_STRING_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_18CY_DBR_CTRL_STRING___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_18CY_DBR_CTRL_STRING___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_CTRL_STRING); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_CTRL_STRING.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":250
 * 	cpdef readonly	unsigned int CY_DBR_GR_DOUBLE   #returns a graphic double structure (dbr_gr_double)
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_STRING #returns a control string structure (dbr_ctrl_int)
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_SHORT  #returns a control short structure (dbr_ctrl_short)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_INT    #returns a control short structure (dbr_ctrl_int)
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_FLOAT  #returns a control float structure (dbr_ctrl_float)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_17CY_DBR_CTRL_SHORT_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_17CY_DBR_CTRL_SHORT_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_17CY_DBR_CTRL_SHORT___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_17CY_DBR_CTRL_SHORT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_CTRL_SHORT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_CTRL_SHORT.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":251
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_STRING #returns a control string structure (dbr_ctrl_int)
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_SHORT  #returns a control short structure (dbr_ctrl_short)
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_INT    #returns a control short structure (dbr_ctrl_int)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_FLOAT  #returns a control float structure (dbr_ctrl_float)
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_ENUM   #returns a control enum structure (dbr_ctrl_enum)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_15CY_DBR_CTRL_INT_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_15CY_DBR_CTRL_INT_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_15CY_DBR_CTRL_INT___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_15CY_DBR_CTRL_INT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_CTRL_INT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_CTRL_INT.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":252
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_SHORT  #returns a control short structure (dbr_ctrl_short)
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_INT    #returns a control short structure (dbr_ctrl_int)
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_FLOAT  #returns a control float structure (dbr_ctrl_float)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_ENUM   #returns a control enum structure (dbr_ctrl_enum)
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_CHAR   #returns a control char structure (dbr_ctrl_char)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_17CY_DBR_CTRL_FLOAT_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_17CY_DBR_CTRL_FLOAT_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_17CY_DBR_CTRL_FLOAT___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_17CY_DBR_CTRL_FLOAT___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_CTRL_FLOAT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_CTRL_FLOAT.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":253
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_INT    #returns a control short structure (dbr_ctrl_int)
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_FLOAT  #returns a control float structure (dbr_ctrl_float)
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_ENUM   #returns a control enum structure (dbr_ctrl_enum)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_CHAR   #returns a control char structure (dbr_ctrl_char)
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_LONG   #returns a control long structure (dbr_ctrl_long)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_16CY_DBR_CTRL_ENUM_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_16CY_DBR_CTRL_ENUM_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_16CY_DBR_CTRL_ENUM___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_16CY_DBR_CTRL_ENUM___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_CTRL_ENUM); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_CTRL_ENUM.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":254
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_FLOAT  #returns a control float structure (dbr_ctrl_float)
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_ENUM   #returns a control enum structure (dbr_ctrl_enum)
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_CHAR   #returns a control char structure (dbr_ctrl_char)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_LONG   #returns a control long structure (dbr_ctrl_long)
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_DOUBLE #returns a control double structure (dbr_ctrl_double)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_16CY_DBR_CTRL_CHAR_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_16CY_DBR_CTRL_CHAR_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_16CY_DBR_CTRL_CHAR___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_16CY_DBR_CTRL_CHAR___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_CTRL_CHAR); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_CTRL_CHAR.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":255
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_ENUM   #returns a control enum structure (dbr_ctrl_enum)
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_CHAR   #returns a control char structure (dbr_ctrl_char)
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_LONG   #returns a control long structure (dbr_ctrl_long)             # <<<<<<<<<<<<<<
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_DOUBLE #returns a control double structure (dbr_ctrl_double)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_16CY_DBR_CTRL_LONG_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_16CY_DBR_CTRL_LONG_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_16CY_DBR_CTRL_LONG___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_16CY_DBR_CTRL_LONG___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_CTRL_LONG); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_CTRL_LONG.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":256
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_CHAR   #returns a control char structure (dbr_ctrl_char)
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_LONG   #returns a control long structure (dbr_ctrl_long)
 * 	cpdef readonly	unsigned int CY_DBR_CTRL_DOUBLE #returns a control double structure (dbr_ctrl_double)             # <<<<<<<<<<<<<<
 * 
 * 	def __cinit__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_4CyCa_18CY_DBR_CTRL_DOUBLE_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_4CyCa_18CY_DBR_CTRL_DOUBLE_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_4CyCa_18CY_DBR_CTRL_DOUBLE___get__(((struct __pyx_obj_6PyCafe_CyCa *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_4CyCa_18CY_DBR_CTRL_DOUBLE___get__(struct __pyx_obj_6PyCafe_CyCa *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->CY_DBR_CTRL_DOUBLE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCa.CY_DBR_CTRL_DOUBLE.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":335
 * 	cdef CAOPCodes   		      caop
 * 
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self.channelID=0
 * 		self.connectFlag=False
 */

/* Python wrapper */
static int __pyx_pw_6PyCafe_11channelInfo_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6PyCafe_11channelInfo_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6PyCafe_11channelInfo___cinit__(((struct __pyx_obj_6PyCafe_channelInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6PyCafe_11channelInfo___cinit__(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "PyCafeDefs.pxi":336
 * 
 * 	def __cinit__(self):
 * 		self.channelID=0             # <<<<<<<<<<<<<<
 * 		self.connectFlag=False
 * 		self.hostName=(<bytes>("")).encode('UTF-8')
 */
  __pyx_v_self->channelID = 0;

  /* "PyCafeDefs.pxi":337
 * 	def __cinit__(self):
 * 		self.channelID=0
 * 		self.connectFlag=False             # <<<<<<<<<<<<<<
 * 		self.hostName=(<bytes>("")).encode('UTF-8')
 * 		self.nelem=0
 */
  __pyx_v_self->connectFlag = 0;

  /* "PyCafeDefs.pxi":338
 * 		self.channelID=0
 * 		self.connectFlag=False
 * 		self.hostName=(<bytes>("")).encode('UTF-8')             # <<<<<<<<<<<<<<
 * 		self.nelem=0
 * 		self.dataType=ICAFE_TYPENOTCONN
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u__85, __pyx_n_s_encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__86, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->hostName = __pyx_t_3;

  /* "PyCafeDefs.pxi":339
 * 		self.connectFlag=False
 * 		self.hostName=(<bytes>("")).encode('UTF-8')
 * 		self.nelem=0             # <<<<<<<<<<<<<<
 * 		self.dataType=ICAFE_TYPENOTCONN
 * 		self.accessRead=0
 */
  __pyx_v_self->nelem = 0;

  /* "PyCafeDefs.pxi":340
 * 		self.hostName=(<bytes>("")).encode('UTF-8')
 * 		self.nelem=0
 * 		self.dataType=ICAFE_TYPENOTCONN             # <<<<<<<<<<<<<<
 * 		self.accessRead=0
 * 		self.accessWrite=0
 */
  __pyx_v_self->dataType = ICAFE_TYPENOTCONN;

  /* "PyCafeDefs.pxi":341
 * 		self.nelem=0
 * 		self.dataType=ICAFE_TYPENOTCONN
 * 		self.accessRead=0             # <<<<<<<<<<<<<<
 * 		self.accessWrite=0
 * 		self.className=(<bytes>("")).encode('UTF-8')
 */
  __pyx_v_self->accessRead = 0;

  /* "PyCafeDefs.pxi":342
 * 		self.dataType=ICAFE_TYPENOTCONN
 * 		self.accessRead=0
 * 		self.accessWrite=0             # <<<<<<<<<<<<<<
 * 		self.className=(<bytes>("")).encode('UTF-8')
 * 		self.connectionState=ICAFE_CA_OP_CONN_DOWN
 */
  __pyx_v_self->accessWrite = 0;

  /* "PyCafeDefs.pxi":343
 * 		self.accessRead=0
 * 		self.accessWrite=0
 * 		self.className=(<bytes>("")).encode('UTF-8')             # <<<<<<<<<<<<<<
 * 		self.connectionState=ICAFE_CA_OP_CONN_DOWN
 * 		self.cafeConnectionState=ICAFE_CS_NEVER_CONN
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u__85, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__87, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->className = __pyx_t_3;

  /* "PyCafeDefs.pxi":344
 * 		self.accessWrite=0
 * 		self.className=(<bytes>("")).encode('UTF-8')
 * 		self.connectionState=ICAFE_CA_OP_CONN_DOWN             # <<<<<<<<<<<<<<
 * 		self.cafeConnectionState=ICAFE_CS_NEVER_CONN
 * 		self.connectionStateAsString=(<bytes>('ICAFE_CA_OP_CONN_DOWN')).encode('UTF-8')
 */
  __pyx_v_self->connectionState = ICAFE_CA_OP_CONN_DOWN;

  /* "PyCafeDefs.pxi":345
 * 		self.className=(<bytes>("")).encode('UTF-8')
 * 		self.connectionState=ICAFE_CA_OP_CONN_DOWN
 * 		self.cafeConnectionState=ICAFE_CS_NEVER_CONN             # <<<<<<<<<<<<<<
 * 		self.connectionStateAsString=(<bytes>('ICAFE_CA_OP_CONN_DOWN')).encode('UTF-8')
 * 		self.cafeConnectionStateAsString=(<bytes>('ICAFE_CS_NEVER_CONN')).encode('UTF-8')
 */
  __pyx_v_self->cafeConnectionState = ICAFE_CS_NEVER_CONN;

  /* "PyCafeDefs.pxi":346
 * 		self.connectionState=ICAFE_CA_OP_CONN_DOWN
 * 		self.cafeConnectionState=ICAFE_CS_NEVER_CONN
 * 		self.connectionStateAsString=(<bytes>('ICAFE_CA_OP_CONN_DOWN')).encode('UTF-8')             # <<<<<<<<<<<<<<
 * 		self.cafeConnectionStateAsString=(<bytes>('ICAFE_CS_NEVER_CONN')).encode('UTF-8')
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_n_u_ICAFE_CA_OP_CONN_DOWN, __pyx_n_s_encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__88, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->connectionStateAsString = __pyx_t_3;

  /* "PyCafeDefs.pxi":347
 * 		self.cafeConnectionState=ICAFE_CS_NEVER_CONN
 * 		self.connectionStateAsString=(<bytes>('ICAFE_CA_OP_CONN_DOWN')).encode('UTF-8')
 * 		self.cafeConnectionStateAsString=(<bytes>('ICAFE_CS_NEVER_CONN')).encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 * 	def show(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_n_u_ICAFE_CS_NEVER_CONN, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__89, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->cafeConnectionStateAsString = __pyx_t_3;

  /* "PyCafeDefs.pxi":335
 * 	cdef CAOPCodes   		      caop
 * 
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self.channelID=0
 * 		self.connectFlag=False
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PyCafe.channelInfo.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":349
 * 		self.cafeConnectionStateAsString=(<bytes>('ICAFE_CS_NEVER_CONN')).encode('UTF-8')
 * 
 * 	def show(self):             # <<<<<<<<<<<<<<
 * 		print ("channelID           = %x" % self.channelID)
 * 		print ("connectFlag         = %d" % self.connectFlag)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_11channelInfo_3show(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6PyCafe_11channelInfo_3show(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_11channelInfo_2show(((struct __pyx_obj_6PyCafe_channelInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_11channelInfo_2show(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show", 0);

  /* "PyCafeDefs.pxi":350
 * 
 * 	def show(self):
 * 		print ("channelID           = %x" % self.channelID)             # <<<<<<<<<<<<<<
 * 		print ("connectFlag         = %d" % self.connectFlag)
 * 		print ("hostName            = %s" % self.hostName)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->channelID); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_channelID_x, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PyCafeDefs.pxi":351
 * 	def show(self):
 * 		print ("channelID           = %x" % self.channelID)
 * 		print ("connectFlag         = %d" % self.connectFlag)             # <<<<<<<<<<<<<<
 * 		print ("hostName            = %s" % self.hostName)
 * 		print ("nelem               = %d" % self.nelem)
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->connectFlag); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyUnicode_Format(__pyx_kp_u_connectFlag_d, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":352
 * 		print ("channelID           = %x" % self.channelID)
 * 		print ("connectFlag         = %d" % self.connectFlag)
 * 		print ("hostName            = %s" % self.hostName)             # <<<<<<<<<<<<<<
 * 		print ("nelem               = %d" % self.nelem)
 * 		print ("dataType            = %s (%d)" % (self.cdt.message(self.dataType), self.dataType))
 */
  __pyx_t_1 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_self->hostName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_hostName_s, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PyCafeDefs.pxi":353
 * 		print ("connectFlag         = %d" % self.connectFlag)
 * 		print ("hostName            = %s" % self.hostName)
 * 		print ("nelem               = %d" % self.nelem)             # <<<<<<<<<<<<<<
 * 		print ("dataType            = %s (%d)" % (self.cdt.message(self.dataType), self.dataType))
 * 		print ("accessRead          = %d" % self.accessRead)
 */
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->nelem); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyUnicode_Format(__pyx_kp_u_nelem_d, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":354
 * 		print ("hostName            = %s" % self.hostName)
 * 		print ("nelem               = %d" % self.nelem)
 * 		print ("dataType            = %s (%d)" % (self.cdt.message(self.dataType), self.dataType))             # <<<<<<<<<<<<<<
 * 		print ("accessRead          = %d" % self.accessRead)
 * 		print ("accessWrite         = %d" % self.accessWrite)
 */
  __pyx_t_1 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_self->cdt.message(__pyx_v_self->dataType)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->dataType); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_dataType_s_d, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PyCafeDefs.pxi":355
 * 		print ("nelem               = %d" % self.nelem)
 * 		print ("dataType            = %s (%d)" % (self.cdt.message(self.dataType), self.dataType))
 * 		print ("accessRead          = %d" % self.accessRead)             # <<<<<<<<<<<<<<
 * 		print ("accessWrite         = %d" % self.accessWrite)
 * 		print ("className           = %s" % self.className)
 */
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_short(__pyx_v_self->accessRead); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_accessRead_d, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "PyCafeDefs.pxi":356
 * 		print ("dataType            = %s (%d)" % (self.cdt.message(self.dataType), self.dataType))
 * 		print ("accessRead          = %d" % self.accessRead)
 * 		print ("accessWrite         = %d" % self.accessWrite)             # <<<<<<<<<<<<<<
 * 		print ("className           = %s" % self.className)
 * 		#print ("connectionState     = %s (%d)" % (self.connectionStateAsString, self.connectionState))
 */
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_short(__pyx_v_self->accessWrite); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_accessWrite_d, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PyCafeDefs.pxi":357
 * 		print ("accessRead          = %d" % self.accessRead)
 * 		print ("accessWrite         = %d" % self.accessWrite)
 * 		print ("className           = %s" % self.className)             # <<<<<<<<<<<<<<
 * 		#print ("connectionState     = %s (%d)" % (self.connectionStateAsString, self.connectionState))
 * 		#print ("cafeConnectionState = %s (%d)" % (self.cafeConnectionStateAsString,self.cafeConnectionState))
 */
  __pyx_t_2 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_self->className); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_className_s, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "PyCafeDefs.pxi":360
 * 		#print ("connectionState     = %s (%d)" % (self.connectionStateAsString, self.connectionState))
 * 		#print ("cafeConnectionState = %s (%d)" % (self.cafeConnectionStateAsString,self.cafeConnectionState))
 * 		print ("connectionState     = %s (%d)" % (self.caop.message(self.connectionState),self.connectionState))             # <<<<<<<<<<<<<<
 * 		print ("cafeConnectionState = %s (%d)" % (self.csc.message(self.cafeConnectionState),self.cafeConnectionState))
 * 		return
 */
  __pyx_t_3 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_self->caop.message(__pyx_v_self->connectionState)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->connectionState); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_connectionState_s_d, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PyCafeDefs.pxi":361
 * 		#print ("cafeConnectionState = %s (%d)" % (self.cafeConnectionStateAsString,self.cafeConnectionState))
 * 		print ("connectionState     = %s (%d)" % (self.caop.message(self.connectionState),self.connectionState))
 * 		print ("cafeConnectionState = %s (%d)" % (self.csc.message(self.cafeConnectionState),self.cafeConnectionState))             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
  __pyx_t_2 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_self->csc.message(__pyx_v_self->cafeConnectionState)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->cafeConnectionState); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = PyUnicode_Format(__pyx_kp_u_cafeConnectionState_s_d, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":362
 * 		print ("connectionState     = %s (%d)" % (self.caop.message(self.connectionState),self.connectionState))
 * 		print ("cafeConnectionState = %s (%d)" % (self.csc.message(self.cafeConnectionState),self.cafeConnectionState))
 * 		return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "PyCafeDefs.pxi":349
 * 		self.cafeConnectionStateAsString=(<bytes>('ICAFE_CS_NEVER_CONN')).encode('UTF-8')
 * 
 * 	def show(self):             # <<<<<<<<<<<<<<
 * 		print ("channelID           = %x" % self.channelID)
 * 		print ("connectFlag         = %d" % self.connectFlag)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("PyCafe.channelInfo.show", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":319
 * 
 * cdef class channelInfo:
 * 	cdef readonly 	long  	  					channelID             # <<<<<<<<<<<<<<
 * 	cdef readonly   bint                connectFlag
 * 	cdef readonly   string			        hostName
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_11channelInfo_9channelID_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_11channelInfo_9channelID_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_11channelInfo_9channelID___get__(((struct __pyx_obj_6PyCafe_channelInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_11channelInfo_9channelID___get__(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->channelID); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.channelInfo.channelID.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":320
 * cdef class channelInfo:
 * 	cdef readonly 	long  	  					channelID
 * 	cdef readonly   bint                connectFlag             # <<<<<<<<<<<<<<
 * 	cdef readonly   string			        hostName
 * 	cdef readonly   unsigned int        nelem              #native
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_11channelInfo_11connectFlag_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_11channelInfo_11connectFlag_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_11channelInfo_11connectFlag___get__(((struct __pyx_obj_6PyCafe_channelInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_11channelInfo_11connectFlag___get__(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->connectFlag); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.channelInfo.connectFlag.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":321
 * 	cdef readonly 	long  	  					channelID
 * 	cdef readonly   bint                connectFlag
 * 	cdef readonly   string			        hostName             # <<<<<<<<<<<<<<
 * 	cdef readonly   unsigned int        nelem              #native
 * 	cdef readonly   int		              dataType;          #native
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_11channelInfo_8hostName_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_11channelInfo_8hostName_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_11channelInfo_8hostName___get__(((struct __pyx_obj_6PyCafe_channelInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_11channelInfo_8hostName___get__(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_self->hostName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.channelInfo.hostName.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":322
 * 	cdef readonly   bint                connectFlag
 * 	cdef readonly   string			        hostName
 * 	cdef readonly   unsigned int        nelem              #native             # <<<<<<<<<<<<<<
 * 	cdef readonly   int		              dataType;          #native
 * 	cdef readonly   unsigned short      accessRead;        #0 or 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_11channelInfo_5nelem_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_11channelInfo_5nelem_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_11channelInfo_5nelem___get__(((struct __pyx_obj_6PyCafe_channelInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_11channelInfo_5nelem___get__(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->nelem); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.channelInfo.nelem.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":323
 * 	cdef readonly   string			        hostName
 * 	cdef readonly   unsigned int        nelem              #native
 * 	cdef readonly   int		              dataType;          #native             # <<<<<<<<<<<<<<
 * 	cdef readonly   unsigned short      accessRead;        #0 or 1
 * 	cdef readonly   unsigned short      accessWrite;       #0 or 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_11channelInfo_8dataType_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_11channelInfo_8dataType_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_11channelInfo_8dataType___get__(((struct __pyx_obj_6PyCafe_channelInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_11channelInfo_8dataType___get__(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->dataType); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.channelInfo.dataType.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":324
 * 	cdef readonly   unsigned int        nelem              #native
 * 	cdef readonly   int		              dataType;          #native
 * 	cdef readonly   unsigned short      accessRead;        #0 or 1             # <<<<<<<<<<<<<<
 * 	cdef readonly   unsigned short      accessWrite;       #0 or 1
 * 	cdef readonly   string							className;            #dbr_class_name_t
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_11channelInfo_10accessRead_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_11channelInfo_10accessRead_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_11channelInfo_10accessRead___get__(((struct __pyx_obj_6PyCafe_channelInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_11channelInfo_10accessRead___get__(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_short(__pyx_v_self->accessRead); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.channelInfo.accessRead.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":325
 * 	cdef readonly   int		              dataType;          #native
 * 	cdef readonly   unsigned short      accessRead;        #0 or 1
 * 	cdef readonly   unsigned short      accessWrite;       #0 or 1             # <<<<<<<<<<<<<<
 * 	cdef readonly   string							className;            #dbr_class_name_t
 * 	cdef readonly   int                 connectionState;      #as given by CA_OP_
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_11channelInfo_11accessWrite_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_11channelInfo_11accessWrite_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_11channelInfo_11accessWrite___get__(((struct __pyx_obj_6PyCafe_channelInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_11channelInfo_11accessWrite___get__(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_short(__pyx_v_self->accessWrite); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.channelInfo.accessWrite.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":326
 * 	cdef readonly   unsigned short      accessRead;        #0 or 1
 * 	cdef readonly   unsigned short      accessWrite;       #0 or 1
 * 	cdef readonly   string							className;            #dbr_class_name_t             # <<<<<<<<<<<<<<
 * 	cdef readonly   int                 connectionState;      #as given by CA_OP_
 * 	cdef readonly   int                 cafeConnectionState;  #as given by cafe_cs_state
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_11channelInfo_9className_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_11channelInfo_9className_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_11channelInfo_9className___get__(((struct __pyx_obj_6PyCafe_channelInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_11channelInfo_9className___get__(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_self->className); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.channelInfo.className.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":327
 * 	cdef readonly   unsigned short      accessWrite;       #0 or 1
 * 	cdef readonly   string							className;            #dbr_class_name_t
 * 	cdef readonly   int                 connectionState;      #as given by CA_OP_             # <<<<<<<<<<<<<<
 * 	cdef readonly   int                 cafeConnectionState;  #as given by cafe_cs_state
 * 	cdef readonly   string              connectionStateAsString;      #as given by CA_OP_
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_11channelInfo_15connectionState_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_11channelInfo_15connectionState_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_11channelInfo_15connectionState___get__(((struct __pyx_obj_6PyCafe_channelInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_11channelInfo_15connectionState___get__(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->connectionState); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.channelInfo.connectionState.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":328
 * 	cdef readonly   string							className;            #dbr_class_name_t
 * 	cdef readonly   int                 connectionState;      #as given by CA_OP_
 * 	cdef readonly   int                 cafeConnectionState;  #as given by cafe_cs_state             # <<<<<<<<<<<<<<
 * 	cdef readonly   string              connectionStateAsString;      #as given by CA_OP_
 * 	cdef readonly   string              cafeConnectionStateAsString;  #as given by cafe_cs_state
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_11channelInfo_19cafeConnectionState_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_11channelInfo_19cafeConnectionState_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_11channelInfo_19cafeConnectionState___get__(((struct __pyx_obj_6PyCafe_channelInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_11channelInfo_19cafeConnectionState___get__(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->cafeConnectionState); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.channelInfo.cafeConnectionState.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":329
 * 	cdef readonly   int                 connectionState;      #as given by CA_OP_
 * 	cdef readonly   int                 cafeConnectionState;  #as given by cafe_cs_state
 * 	cdef readonly   string              connectionStateAsString;      #as given by CA_OP_             # <<<<<<<<<<<<<<
 * 	cdef readonly   string              cafeConnectionStateAsString;  #as given by cafe_cs_state
 * 	cdef CAFEDataTypeCode 		cdt
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_11channelInfo_23connectionStateAsString_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_11channelInfo_23connectionStateAsString_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_11channelInfo_23connectionStateAsString___get__(((struct __pyx_obj_6PyCafe_channelInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_11channelInfo_23connectionStateAsString___get__(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_self->connectionStateAsString); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.channelInfo.connectionStateAsString.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":330
 * 	cdef readonly   int                 cafeConnectionState;  #as given by cafe_cs_state
 * 	cdef readonly   string              connectionStateAsString;      #as given by CA_OP_
 * 	cdef readonly   string              cafeConnectionStateAsString;  #as given by cafe_cs_state             # <<<<<<<<<<<<<<
 * 	cdef CAFEDataTypeCode 		cdt
 * 	cdef CAFEStatusCode   		csc
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_11channelInfo_27cafeConnectionStateAsString_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_11channelInfo_27cafeConnectionStateAsString_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_11channelInfo_27cafeConnectionStateAsString___get__(((struct __pyx_obj_6PyCafe_channelInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_11channelInfo_27cafeConnectionStateAsString___get__(struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_self->cafeConnectionStateAsString); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.channelInfo.cafeConnectionStateAsString.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":371
 * 	cdef local_tm_nano_sec local
 * 	cdef list  etsDate
 * 	def __cinit__(self, epicsTimeStamp ts):             # <<<<<<<<<<<<<<
 * 		self._time = new epicsTime(ts)
 * 		self.local = <local_tm_nano_sec &> (self._time)
 */

/* Python wrapper */
static int __pyx_pw_6PyCafe_21_epicsTimeStampAsDate_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6PyCafe_21_epicsTimeStampAsDate_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct epicsTimeStamp __pyx_v_ts;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ts,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ts)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_ts = __pyx_convert__from_py_epicsTimeStamp(values[0]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe._epicsTimeStampAsDate.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6PyCafe_21_epicsTimeStampAsDate___cinit__(((struct __pyx_obj_6PyCafe__epicsTimeStampAsDate *)__pyx_v_self), __pyx_v_ts);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6PyCafe_21_epicsTimeStampAsDate___cinit__(struct __pyx_obj_6PyCafe__epicsTimeStampAsDate *__pyx_v_self, struct epicsTimeStamp __pyx_v_ts) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "PyCafeDefs.pxi":372
 * 	cdef list  etsDate
 * 	def __cinit__(self, epicsTimeStamp ts):
 * 		self._time = new epicsTime(ts)             # <<<<<<<<<<<<<<
 * 		self.local = <local_tm_nano_sec &> (self._time)
 * 
 */
  __pyx_v_self->_time = new epicsTime(__pyx_v_ts);

  /* "PyCafeDefs.pxi":373
 * 	def __cinit__(self, epicsTimeStamp ts):
 * 		self._time = new epicsTime(ts)
 * 		self.local = <local_tm_nano_sec &> (self._time)             # <<<<<<<<<<<<<<
 * 
 * 		print ("ts====== ", ts.secPastEpoch, ts.nsec)
 */
  __pyx_v_self->local = ((struct local_tm_nano_sec &)__pyx_v_self->_time);

  /* "PyCafeDefs.pxi":375
 * 		self.local = <local_tm_nano_sec &> (self._time)
 * 
 * 		print ("ts====== ", ts.secPastEpoch, ts.nsec)             # <<<<<<<<<<<<<<
 * 
 * 		print ("year=== ", ( ( (&(&self.local).ansi_tm).tm_year) + 1900))
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_ts.secPastEpoch); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_ts.nsec); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_kp_u_ts_2);
  __Pyx_GIVEREF(__pyx_kp_u_ts_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_ts_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PyCafeDefs.pxi":377
 * 		print ("ts====== ", ts.secPastEpoch, ts.nsec)
 * 
 * 		print ("year=== ", ( ( (&(&self.local).ansi_tm).tm_year) + 1900))             # <<<<<<<<<<<<<<
 * 
 * 		self.etsDate=[]
 */
  __pyx_t_2 = __Pyx_PyInt_From_long(((&(&__pyx_v_self->local)->ansi_tm)->tm_year + 0x76C)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_kp_u_year);
  __Pyx_GIVEREF(__pyx_kp_u_year);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_year);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PyCafeDefs.pxi":379
 * 		print ("year=== ", ( ( (&(&self.local).ansi_tm).tm_year) + 1900))
 * 
 * 		self.etsDate=[]             # <<<<<<<<<<<<<<
 * 		self.etsDate.append( (self.local.ansi_tm.tm_year + 1900))
 * 		self.etsDate.append( (self.local.ansi_tm.tm_mon  + 1))
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->etsDate);
  __Pyx_DECREF(__pyx_v_self->etsDate);
  __pyx_v_self->etsDate = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "PyCafeDefs.pxi":380
 * 
 * 		self.etsDate=[]
 * 		self.etsDate.append( (self.local.ansi_tm.tm_year + 1900))             # <<<<<<<<<<<<<<
 * 		self.etsDate.append( (self.local.ansi_tm.tm_mon  + 1))
 * 		self.etsDate.append( self.local.ansi_tm.tm_mday)
 */
  if (unlikely(__pyx_v_self->etsDate == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_v_self->local.ansi_tm.tm_year + 0x76C)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_self->etsDate, __pyx_t_2); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PyCafeDefs.pxi":381
 * 		self.etsDate=[]
 * 		self.etsDate.append( (self.local.ansi_tm.tm_year + 1900))
 * 		self.etsDate.append( (self.local.ansi_tm.tm_mon  + 1))             # <<<<<<<<<<<<<<
 * 		self.etsDate.append( self.local.ansi_tm.tm_mday)
 * 		self.etsDate.append( self.local.ansi_tm.tm_hour)
 */
  if (unlikely(__pyx_v_self->etsDate == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_v_self->local.ansi_tm.tm_mon + 1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_self->etsDate, __pyx_t_2); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PyCafeDefs.pxi":382
 * 		self.etsDate.append( (self.local.ansi_tm.tm_year + 1900))
 * 		self.etsDate.append( (self.local.ansi_tm.tm_mon  + 1))
 * 		self.etsDate.append( self.local.ansi_tm.tm_mday)             # <<<<<<<<<<<<<<
 * 		self.etsDate.append( self.local.ansi_tm.tm_hour)
 * 		self.etsDate.append( self.local.ansi_tm.tm_min)
 */
  if (unlikely(__pyx_v_self->etsDate == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->local.ansi_tm.tm_mday); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_self->etsDate, __pyx_t_2); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PyCafeDefs.pxi":383
 * 		self.etsDate.append( (self.local.ansi_tm.tm_mon  + 1))
 * 		self.etsDate.append( self.local.ansi_tm.tm_mday)
 * 		self.etsDate.append( self.local.ansi_tm.tm_hour)             # <<<<<<<<<<<<<<
 * 		self.etsDate.append( self.local.ansi_tm.tm_min)
 * 		self.etsDate.append( self.local.ansi_tm.tm_sec)
 */
  if (unlikely(__pyx_v_self->etsDate == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->local.ansi_tm.tm_hour); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_self->etsDate, __pyx_t_2); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PyCafeDefs.pxi":384
 * 		self.etsDate.append( self.local.ansi_tm.tm_mday)
 * 		self.etsDate.append( self.local.ansi_tm.tm_hour)
 * 		self.etsDate.append( self.local.ansi_tm.tm_min)             # <<<<<<<<<<<<<<
 * 		self.etsDate.append( self.local.ansi_tm.tm_sec)
 * 		self.etsDate.append( <unsigned int> ts.nsec)
 */
  if (unlikely(__pyx_v_self->etsDate == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->local.ansi_tm.tm_min); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_self->etsDate, __pyx_t_2); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PyCafeDefs.pxi":385
 * 		self.etsDate.append( self.local.ansi_tm.tm_hour)
 * 		self.etsDate.append( self.local.ansi_tm.tm_min)
 * 		self.etsDate.append( self.local.ansi_tm.tm_sec)             # <<<<<<<<<<<<<<
 * 		self.etsDate.append( <unsigned int> ts.nsec)
 * 		self.etsDate.append( self.local.nSec)
 */
  if (unlikely(__pyx_v_self->etsDate == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->local.ansi_tm.tm_sec); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_self->etsDate, __pyx_t_2); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PyCafeDefs.pxi":386
 * 		self.etsDate.append( self.local.ansi_tm.tm_min)
 * 		self.etsDate.append( self.local.ansi_tm.tm_sec)
 * 		self.etsDate.append( <unsigned int> ts.nsec)             # <<<<<<<<<<<<<<
 * 		self.etsDate.append( self.local.nSec)
 * 	def get(self):
 */
  if (unlikely(__pyx_v_self->etsDate == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(((unsigned int)__pyx_v_ts.nsec)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_self->etsDate, __pyx_t_2); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PyCafeDefs.pxi":387
 * 		self.etsDate.append( self.local.ansi_tm.tm_sec)
 * 		self.etsDate.append( <unsigned int> ts.nsec)
 * 		self.etsDate.append( self.local.nSec)             # <<<<<<<<<<<<<<
 * 	def get(self):
 * 		return self.etsDate
 */
  if (unlikely(__pyx_v_self->etsDate == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->local.nSec); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_self->etsDate, __pyx_t_2); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PyCafeDefs.pxi":371
 * 	cdef local_tm_nano_sec local
 * 	cdef list  etsDate
 * 	def __cinit__(self, epicsTimeStamp ts):             # <<<<<<<<<<<<<<
 * 		self._time = new epicsTime(ts)
 * 		self.local = <local_tm_nano_sec &> (self._time)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("PyCafe._epicsTimeStampAsDate.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":388
 * 		self.etsDate.append( <unsigned int> ts.nsec)
 * 		self.etsDate.append( self.local.nSec)
 * 	def get(self):             # <<<<<<<<<<<<<<
 * 		return self.etsDate
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_21_epicsTimeStampAsDate_3get(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6PyCafe_21_epicsTimeStampAsDate_3get(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_21_epicsTimeStampAsDate_2get(((struct __pyx_obj_6PyCafe__epicsTimeStampAsDate *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_21_epicsTimeStampAsDate_2get(struct __pyx_obj_6PyCafe__epicsTimeStampAsDate *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get", 0);

  /* "PyCafeDefs.pxi":389
 * 		self.etsDate.append( self.local.nSec)
 * 	def get(self):
 * 		return self.etsDate             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->etsDate);
  __pyx_r = __pyx_v_self->etsDate;
  goto __pyx_L0;

  /* "PyCafeDefs.pxi":388
 * 		self.etsDate.append( <unsigned int> ts.nsec)
 * 		self.etsDate.append( self.local.nSec)
 * 	def get(self):             # <<<<<<<<<<<<<<
 * 		return self.etsDate
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":414
 * 	cdef readonly int status
 * 
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self.nelem=	1
 * 		self.alarmStatus=-1
 */

/* Python wrapper */
static int __pyx_pw_6PyCafe_6pvctrl_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6PyCafe_6pvctrl_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6PyCafe_6pvctrl___cinit__(((struct __pyx_obj_6PyCafe_pvctrl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6PyCafe_6pvctrl___cinit__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "PyCafeDefs.pxi":415
 * 
 * 	def __cinit__(self):
 * 		self.nelem=	1             # <<<<<<<<<<<<<<
 * 		self.alarmStatus=-1
 * 		self.alarmSeverity=-1
 */
  __pyx_v_self->nelem = 1;

  /* "PyCafeDefs.pxi":416
 * 	def __cinit__(self):
 * 		self.nelem=	1
 * 		self.alarmStatus=-1             # <<<<<<<<<<<<<<
 * 		self.alarmSeverity=-1
 * 		self.precision=0
 */
  __pyx_v_self->alarmStatus = -1;

  /* "PyCafeDefs.pxi":417
 * 		self.nelem=	1
 * 		self.alarmStatus=-1
 * 		self.alarmSeverity=-1             # <<<<<<<<<<<<<<
 * 		self.precision=0
 * 		self.units=(<bytes>("")).encode('UTF-8')
 */
  __pyx_v_self->alarmSeverity = -1;

  /* "PyCafeDefs.pxi":418
 * 		self.alarmStatus=-1
 * 		self.alarmSeverity=-1
 * 		self.precision=0             # <<<<<<<<<<<<<<
 * 		self.units=(<bytes>("")).encode('UTF-8')
 * 		self.noEnumStrings=0
 */
  __pyx_v_self->precision = 0;

  /* "PyCafeDefs.pxi":419
 * 		self.alarmSeverity=-1
 * 		self.precision=0
 * 		self.units=(<bytes>("")).encode('UTF-8')             # <<<<<<<<<<<<<<
 * 		self.noEnumStrings=0
 * 		self.enumStrings=[]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u__85, __pyx_n_s_encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__90, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->units = __pyx_t_3;

  /* "PyCafeDefs.pxi":420
 * 		self.precision=0
 * 		self.units=(<bytes>("")).encode('UTF-8')
 * 		self.noEnumStrings=0             # <<<<<<<<<<<<<<
 * 		self.enumStrings=[]
 * 		self.upperDisplayLimit=0
 */
  __pyx_v_self->noEnumStrings = 0;

  /* "PyCafeDefs.pxi":421
 * 		self.units=(<bytes>("")).encode('UTF-8')
 * 		self.noEnumStrings=0
 * 		self.enumStrings=[]             # <<<<<<<<<<<<<<
 * 		self.upperDisplayLimit=0
 * 		self.lowerDisplayLimit=0
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->enumStrings);
  __Pyx_DECREF(__pyx_v_self->enumStrings);
  __pyx_v_self->enumStrings = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "PyCafeDefs.pxi":422
 * 		self.noEnumStrings=0
 * 		self.enumStrings=[]
 * 		self.upperDisplayLimit=0             # <<<<<<<<<<<<<<
 * 		self.lowerDisplayLimit=0
 * 		self.upperAlarmLimit=0
 */
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __Pyx_GOTREF(__pyx_v_self->upperDisplayLimit);
  __Pyx_DECREF(__pyx_v_self->upperDisplayLimit);
  __pyx_v_self->upperDisplayLimit = __pyx_int_0;

  /* "PyCafeDefs.pxi":423
 * 		self.enumStrings=[]
 * 		self.upperDisplayLimit=0
 * 		self.lowerDisplayLimit=0             # <<<<<<<<<<<<<<
 * 		self.upperAlarmLimit=0
 * 		self.lowerAlarmLimit=0
 */
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __Pyx_GOTREF(__pyx_v_self->lowerDisplayLimit);
  __Pyx_DECREF(__pyx_v_self->lowerDisplayLimit);
  __pyx_v_self->lowerDisplayLimit = __pyx_int_0;

  /* "PyCafeDefs.pxi":424
 * 		self.upperDisplayLimit=0
 * 		self.lowerDisplayLimit=0
 * 		self.upperAlarmLimit=0             # <<<<<<<<<<<<<<
 * 		self.lowerAlarmLimit=0
 * 		self.upperControlLimit=0
 */
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __Pyx_GOTREF(__pyx_v_self->upperAlarmLimit);
  __Pyx_DECREF(__pyx_v_self->upperAlarmLimit);
  __pyx_v_self->upperAlarmLimit = __pyx_int_0;

  /* "PyCafeDefs.pxi":425
 * 		self.lowerDisplayLimit=0
 * 		self.upperAlarmLimit=0
 * 		self.lowerAlarmLimit=0             # <<<<<<<<<<<<<<
 * 		self.upperControlLimit=0
 * 		self.lowerControlLimit=0
 */
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __Pyx_GOTREF(__pyx_v_self->lowerAlarmLimit);
  __Pyx_DECREF(__pyx_v_self->lowerAlarmLimit);
  __pyx_v_self->lowerAlarmLimit = __pyx_int_0;

  /* "PyCafeDefs.pxi":426
 * 		self.upperAlarmLimit=0
 * 		self.lowerAlarmLimit=0
 * 		self.upperControlLimit=0             # <<<<<<<<<<<<<<
 * 		self.lowerControlLimit=0
 * 		self.value=[]
 */
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __Pyx_GOTREF(__pyx_v_self->upperControlLimit);
  __Pyx_DECREF(__pyx_v_self->upperControlLimit);
  __pyx_v_self->upperControlLimit = __pyx_int_0;

  /* "PyCafeDefs.pxi":427
 * 		self.lowerAlarmLimit=0
 * 		self.upperControlLimit=0
 * 		self.lowerControlLimit=0             # <<<<<<<<<<<<<<
 * 		self.value=[]
 * 		self.status=1
 */
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __Pyx_GOTREF(__pyx_v_self->lowerControlLimit);
  __Pyx_DECREF(__pyx_v_self->lowerControlLimit);
  __pyx_v_self->lowerControlLimit = __pyx_int_0;

  /* "PyCafeDefs.pxi":428
 * 		self.upperControlLimit=0
 * 		self.lowerControlLimit=0
 * 		self.value=[]             # <<<<<<<<<<<<<<
 * 		self.status=1
 * 
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->value);
  __Pyx_DECREF(__pyx_v_self->value);
  __pyx_v_self->value = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "PyCafeDefs.pxi":429
 * 		self.lowerControlLimit=0
 * 		self.value=[]
 * 		self.status=1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->status = 1;

  /* "PyCafeDefs.pxi":414
 * 	cdef readonly int status
 * 
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self.nelem=	1
 * 		self.alarmStatus=-1
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PyCafe.pvctrl.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":432
 * 
 * 
 * 	def show(self):             # <<<<<<<<<<<<<<
 * 		self.showPrint(self.nelem)
 * 		return
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvctrl_3show(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvctrl_3show(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvctrl_2show(((struct __pyx_obj_6PyCafe_pvctrl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvctrl_2show(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show", 0);

  /* "PyCafeDefs.pxi":433
 * 
 * 	def show(self):
 * 		self.showPrint(self.nelem)             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->nelem); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_6PyCafe_pvctrl *)__pyx_v_self->__pyx_vtab)->showPrint(__pyx_v_self, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PyCafeDefs.pxi":434
 * 	def show(self):
 * 		self.showPrint(self.nelem)
 * 		return             # <<<<<<<<<<<<<<
 * 
 * 	def showMax(self, nelem):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "PyCafeDefs.pxi":432
 * 
 * 
 * 	def show(self):             # <<<<<<<<<<<<<<
 * 		self.showPrint(self.nelem)
 * 		return
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PyCafe.pvctrl.show", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":436
 * 		return
 * 
 * 	def showMax(self, nelem):             # <<<<<<<<<<<<<<
 * 		if nelem > self.nelem:
 * 			#print ("----------------------"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvctrl_5showMax(PyObject *__pyx_v_self, PyObject *__pyx_v_nelem); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvctrl_5showMax(PyObject *__pyx_v_self, PyObject *__pyx_v_nelem) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("showMax (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvctrl_4showMax(((struct __pyx_obj_6PyCafe_pvctrl *)__pyx_v_self), ((PyObject *)__pyx_v_nelem));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvctrl_4showMax(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self, PyObject *__pyx_v_nelem) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("showMax", 0);
  __Pyx_INCREF(__pyx_v_nelem);

  /* "PyCafeDefs.pxi":437
 * 
 * 	def showMax(self, nelem):
 * 		if nelem > self.nelem:             # <<<<<<<<<<<<<<
 * 			#print ("----------------------"
 * 			#print ("Note: Max. Nelem =", self.nelem
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->nelem); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_nelem, __pyx_t_1, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "PyCafeDefs.pxi":441
 * 			#print ("Note: Max. Nelem =", self.nelem
 * 			#print ("----------------------"
 * 			nelem=self.nelem             # <<<<<<<<<<<<<<
 * 		self.showPrint(nelem)
 * 		return
 */
    __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->nelem); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_nelem, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "PyCafeDefs.pxi":437
 * 
 * 	def showMax(self, nelem):
 * 		if nelem > self.nelem:             # <<<<<<<<<<<<<<
 * 			#print ("----------------------"
 * 			#print ("Note: Max. Nelem =", self.nelem
 */
  }

  /* "PyCafeDefs.pxi":442
 * 			#print ("----------------------"
 * 			nelem=self.nelem
 * 		self.showPrint(nelem)             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_6PyCafe_pvctrl *)__pyx_v_self->__pyx_vtab)->showPrint(__pyx_v_self, __pyx_v_nelem); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PyCafeDefs.pxi":443
 * 			nelem=self.nelem
 * 		self.showPrint(nelem)
 * 		return             # <<<<<<<<<<<<<<
 * 
 * 	cdef showPrint(self, nelem):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "PyCafeDefs.pxi":436
 * 		return
 * 
 * 	def showMax(self, nelem):             # <<<<<<<<<<<<<<
 * 		if nelem > self.nelem:
 * 			#print ("----------------------"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PyCafe.pvctrl.showMax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nelem);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":445
 * 		return
 * 
 * 	cdef showPrint(self, nelem):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int i
 * 		#is self.value[0] a list
 */

static PyObject *__pyx_f_6PyCafe_6pvctrl_showPrint(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self, PyObject *__pyx_v_nelem) {
  unsigned int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  long __pyx_t_5;
  unsigned int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  unsigned short __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("showPrint", 0);

  /* "PyCafeDefs.pxi":448
 * 		cdef unsigned int i
 * 		#is self.value[0] a list
 * 		if nelem==1:             # <<<<<<<<<<<<<<
 * 			if isinstance (self.value[0], list):
 * 				print  ("value         =", self.value[0][0], )
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_nelem, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "PyCafeDefs.pxi":449
 * 		#is self.value[0] a list
 * 		if nelem==1:
 * 			if isinstance (self.value[0], list):             # <<<<<<<<<<<<<<
 * 				print  ("value         =", self.value[0][0], )
 * 			else:
 */
    if (unlikely(__pyx_v_self->value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_self->value, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyList_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {

      /* "PyCafeDefs.pxi":450
 * 		if nelem==1:
 * 			if isinstance (self.value[0], list):
 * 				print  ("value         =", self.value[0][0], )             # <<<<<<<<<<<<<<
 * 			else:
 * 				print  ("value         =", self.value[0],	)
 */
      if (unlikely(__pyx_v_self->value == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_self->value, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_kp_u_value);
      __Pyx_GIVEREF(__pyx_kp_u_value);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_value);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "PyCafeDefs.pxi":449
 * 		#is self.value[0] a list
 * 		if nelem==1:
 * 			if isinstance (self.value[0], list):             # <<<<<<<<<<<<<<
 * 				print  ("value         =", self.value[0][0], )
 * 			else:
 */
      goto __pyx_L4;
    }

    /* "PyCafeDefs.pxi":452
 * 				print  ("value         =", self.value[0][0], )
 * 			else:
 * 				print  ("value         =", self.value[0],	)             # <<<<<<<<<<<<<<
 * 		else:
 * 			print  ("values	      =",)
 */
    /*else*/ {
      if (unlikely(__pyx_v_self->value == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_self->value, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 452; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_kp_u_value);
      __Pyx_GIVEREF(__pyx_kp_u_value);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_value);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_L4:;

    /* "PyCafeDefs.pxi":448
 * 		cdef unsigned int i
 * 		#is self.value[0] a list
 * 		if nelem==1:             # <<<<<<<<<<<<<<
 * 			if isinstance (self.value[0], list):
 * 				print  ("value         =", self.value[0][0], )
 */
    goto __pyx_L3;
  }

  /* "PyCafeDefs.pxi":454
 * 				print  ("value         =", self.value[0],	)
 * 		else:
 * 			print  ("values	      =",)             # <<<<<<<<<<<<<<
 * 			if isinstance (self.value[0], list):
 * 				for i in range(0, nelem):
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__91, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "PyCafeDefs.pxi":455
 * 		else:
 * 			print  ("values	      =",)
 * 			if isinstance (self.value[0], list):             # <<<<<<<<<<<<<<
 * 				for i in range(0, nelem):
 * 					print (self.value[0][i],"[%d]" %i,)
 */
    if (unlikely(__pyx_v_self->value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_self->value, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyList_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {

      /* "PyCafeDefs.pxi":456
 * 			print  ("values	      =",)
 * 			if isinstance (self.value[0], list):
 * 				for i in range(0, nelem):             # <<<<<<<<<<<<<<
 * 					print (self.value[0][i],"[%d]" %i,)
 * 			else:
 */
      __pyx_t_5 = __Pyx_PyInt_As_long(__pyx_v_nelem); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "PyCafeDefs.pxi":457
 * 			if isinstance (self.value[0], list):
 * 				for i in range(0, nelem):
 * 					print (self.value[0][i],"[%d]" %i,)             # <<<<<<<<<<<<<<
 * 			else:
 * 				for i in range(0, nelem):
 */
        if (unlikely(__pyx_v_self->value == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_self->value, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, __pyx_v_i, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_v_i); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = PyUnicode_Format(__pyx_kp_u_d, __pyx_t_4); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_7);
        __pyx_t_1 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }

      /* "PyCafeDefs.pxi":455
 * 		else:
 * 			print  ("values	      =",)
 * 			if isinstance (self.value[0], list):             # <<<<<<<<<<<<<<
 * 				for i in range(0, nelem):
 * 					print (self.value[0][i],"[%d]" %i,)
 */
      goto __pyx_L5;
    }

    /* "PyCafeDefs.pxi":459
 * 					print (self.value[0][i],"[%d]" %i,)
 * 			else:
 * 				for i in range(0, nelem):             # <<<<<<<<<<<<<<
 * 					print (self.value[i],"[%d]" %i,	)
 * 		print ("")
 */
    /*else*/ {
      __pyx_t_5 = __Pyx_PyInt_As_long(__pyx_v_nelem); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "PyCafeDefs.pxi":460
 * 			else:
 * 				for i in range(0, nelem):
 * 					print (self.value[i],"[%d]" %i,	)             # <<<<<<<<<<<<<<
 * 		print ("")
 * 		print ("status        = %d" % self.status)
 */
        if (unlikely(__pyx_v_self->value == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_self->value, __pyx_v_i, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 1, 0, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_v_i); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_1 = PyUnicode_Format(__pyx_kp_u_d, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
        __pyx_t_7 = 0;
        __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
    }
    __pyx_L5:;
  }
  __pyx_L3:;

  /* "PyCafeDefs.pxi":461
 * 				for i in range(0, nelem):
 * 					print (self.value[i],"[%d]" %i,	)
 * 		print ("")             # <<<<<<<<<<<<<<
 * 		print ("status        = %d" % self.status)
 * 		print ("alarmStatus   = %d" % self.alarmStatus)
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__92, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":462
 * 					print (self.value[i],"[%d]" %i,	)
 * 		print ("")
 * 		print ("status        = %d" % self.status)             # <<<<<<<<<<<<<<
 * 		print ("alarmStatus   = %d" % self.alarmStatus)
 * 		print ("alarmSeverity = %d" % self.alarmSeverity)
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyUnicode_Format(__pyx_kp_u_status_d, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "PyCafeDefs.pxi":463
 * 		print ("")
 * 		print ("status        = %d" % self.status)
 * 		print ("alarmStatus   = %d" % self.alarmStatus)             # <<<<<<<<<<<<<<
 * 		print ("alarmSeverity = %d" % self.alarmSeverity)
 * 		print ("precision     = %d" % self.precision)
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->alarmStatus); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyUnicode_Format(__pyx_kp_u_alarmStatus_d, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":464
 * 		print ("status        = %d" % self.status)
 * 		print ("alarmStatus   = %d" % self.alarmStatus)
 * 		print ("alarmSeverity = %d" % self.alarmSeverity)             # <<<<<<<<<<<<<<
 * 		print ("precision     = %d" % self.precision)
 * 		print ("units         = %s" % self.units)
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->alarmSeverity); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyUnicode_Format(__pyx_kp_u_alarmSeverity_d, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "PyCafeDefs.pxi":465
 * 		print ("alarmStatus   = %d" % self.alarmStatus)
 * 		print ("alarmSeverity = %d" % self.alarmSeverity)
 * 		print ("precision     = %d" % self.precision)             # <<<<<<<<<<<<<<
 * 		print ("units         = %s" % self.units)
 * 		print ("noEnumStrings = %d" % self.noEnumStrings)
 */
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_short(__pyx_v_self->precision); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyUnicode_Format(__pyx_kp_u_precision_d, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":466
 * 		print ("alarmSeverity = %d" % self.alarmSeverity)
 * 		print ("precision     = %d" % self.precision)
 * 		print ("units         = %s" % self.units)             # <<<<<<<<<<<<<<
 * 		print ("noEnumStrings = %d" % self.noEnumStrings)
 * 
 */
  __pyx_t_1 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_self->units); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyUnicode_Format(__pyx_kp_u_units_s, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "PyCafeDefs.pxi":467
 * 		print ("precision     = %d" % self.precision)
 * 		print ("units         = %s" % self.units)
 * 		print ("noEnumStrings = %d" % self.noEnumStrings)             # <<<<<<<<<<<<<<
 * 
 * 		if self.noEnumStrings > 0:
 */
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_short(__pyx_v_self->noEnumStrings); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyUnicode_Format(__pyx_kp_u_noEnumStrings_d, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":469
 * 		print ("noEnumStrings = %d" % self.noEnumStrings)
 * 
 * 		if self.noEnumStrings > 0:             # <<<<<<<<<<<<<<
 * 			print ("enumStrings   =",)
 * 			for i in range(0, self.noEnumStrings):
 */
  __pyx_t_2 = ((__pyx_v_self->noEnumStrings > 0) != 0);
  if (__pyx_t_2) {

    /* "PyCafeDefs.pxi":470
 * 
 * 		if self.noEnumStrings > 0:
 * 			print ("enumStrings   =",)             # <<<<<<<<<<<<<<
 * 			for i in range(0, self.noEnumStrings):
 * 				print (self.enumStrings[i],"[%s]" %i,)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__93, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "PyCafeDefs.pxi":471
 * 		if self.noEnumStrings > 0:
 * 			print ("enumStrings   =",)
 * 			for i in range(0, self.noEnumStrings):             # <<<<<<<<<<<<<<
 * 				print (self.enumStrings[i],"[%s]" %i,)
 * 			print ("")
 */
    __pyx_t_8 = __pyx_v_self->noEnumStrings;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_8; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "PyCafeDefs.pxi":472
 * 			print ("enumStrings   =",)
 * 			for i in range(0, self.noEnumStrings):
 * 				print (self.enumStrings[i],"[%s]" %i,)             # <<<<<<<<<<<<<<
 * 			print ("")
 * 
 */
      if (unlikely(__pyx_v_self->enumStrings == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_self->enumStrings, __pyx_v_i, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 1, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_v_i); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = PyUnicode_Format(__pyx_kp_u_s, __pyx_t_4); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_7);
      __pyx_t_1 = 0;
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }

    /* "PyCafeDefs.pxi":473
 * 			for i in range(0, self.noEnumStrings):
 * 				print (self.enumStrings[i],"[%s]" %i,)
 * 			print ("")             # <<<<<<<<<<<<<<
 * 
 * 		print ("upperDisplayLimit = %f" % self.upperDisplayLimit)
 */
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__94, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "PyCafeDefs.pxi":469
 * 		print ("noEnumStrings = %d" % self.noEnumStrings)
 * 
 * 		if self.noEnumStrings > 0:             # <<<<<<<<<<<<<<
 * 			print ("enumStrings   =",)
 * 			for i in range(0, self.noEnumStrings):
 */
  }

  /* "PyCafeDefs.pxi":475
 * 			print ("")
 * 
 * 		print ("upperDisplayLimit = %f" % self.upperDisplayLimit)             # <<<<<<<<<<<<<<
 * 		print ("lowerDisplayLimit = %f" % self.lowerDisplayLimit)
 * 		print ("upperAlarmLimit   = %f" % self.upperAlarmLimit)
 */
  __pyx_t_7 = PyUnicode_Format(__pyx_kp_u_upperDisplayLimit_f, __pyx_v_self->upperDisplayLimit); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "PyCafeDefs.pxi":476
 * 
 * 		print ("upperDisplayLimit = %f" % self.upperDisplayLimit)
 * 		print ("lowerDisplayLimit = %f" % self.lowerDisplayLimit)             # <<<<<<<<<<<<<<
 * 		print ("upperAlarmLimit   = %f" % self.upperAlarmLimit)
 * 		print ("lowerAlarmLimit   = %f" % self.lowerAlarmLimit)
 */
  __pyx_t_7 = PyUnicode_Format(__pyx_kp_u_lowerDisplayLimit_f, __pyx_v_self->lowerDisplayLimit); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "PyCafeDefs.pxi":477
 * 		print ("upperDisplayLimit = %f" % self.upperDisplayLimit)
 * 		print ("lowerDisplayLimit = %f" % self.lowerDisplayLimit)
 * 		print ("upperAlarmLimit   = %f" % self.upperAlarmLimit)             # <<<<<<<<<<<<<<
 * 		print ("lowerAlarmLimit   = %f" % self.lowerAlarmLimit)
 * 		print ("upperWarningLimit = %f" % self.upperWarningLimit)
 */
  __pyx_t_7 = PyUnicode_Format(__pyx_kp_u_upperAlarmLimit_f, __pyx_v_self->upperAlarmLimit); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "PyCafeDefs.pxi":478
 * 		print ("lowerDisplayLimit = %f" % self.lowerDisplayLimit)
 * 		print ("upperAlarmLimit   = %f" % self.upperAlarmLimit)
 * 		print ("lowerAlarmLimit   = %f" % self.lowerAlarmLimit)             # <<<<<<<<<<<<<<
 * 		print ("upperWarningLimit = %f" % self.upperWarningLimit)
 * 		print ("lowerWarningLimit = %f" % self.lowerWarningLimit)
 */
  __pyx_t_7 = PyUnicode_Format(__pyx_kp_u_lowerAlarmLimit_f, __pyx_v_self->lowerAlarmLimit); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "PyCafeDefs.pxi":479
 * 		print ("upperAlarmLimit   = %f" % self.upperAlarmLimit)
 * 		print ("lowerAlarmLimit   = %f" % self.lowerAlarmLimit)
 * 		print ("upperWarningLimit = %f" % self.upperWarningLimit)             # <<<<<<<<<<<<<<
 * 		print ("lowerWarningLimit = %f" % self.lowerWarningLimit)
 * 		print ("upperControlLimit = %f" % self.upperControlLimit)
 */
  __pyx_t_7 = PyUnicode_Format(__pyx_kp_u_upperWarningLimit_f, __pyx_v_self->upperWarningLimit); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "PyCafeDefs.pxi":480
 * 		print ("lowerAlarmLimit   = %f" % self.lowerAlarmLimit)
 * 		print ("upperWarningLimit = %f" % self.upperWarningLimit)
 * 		print ("lowerWarningLimit = %f" % self.lowerWarningLimit)             # <<<<<<<<<<<<<<
 * 		print ("upperControlLimit = %f" % self.upperControlLimit)
 * 		print ("lowerControlLimit = %f" % self.lowerControlLimit)
 */
  __pyx_t_7 = PyUnicode_Format(__pyx_kp_u_lowerWarningLimit_f, __pyx_v_self->lowerWarningLimit); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "PyCafeDefs.pxi":481
 * 		print ("upperWarningLimit = %f" % self.upperWarningLimit)
 * 		print ("lowerWarningLimit = %f" % self.lowerWarningLimit)
 * 		print ("upperControlLimit = %f" % self.upperControlLimit)             # <<<<<<<<<<<<<<
 * 		print ("lowerControlLimit = %f" % self.lowerControlLimit)
 * 
 */
  __pyx_t_7 = PyUnicode_Format(__pyx_kp_u_upperControlLimit_f, __pyx_v_self->upperControlLimit); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "PyCafeDefs.pxi":482
 * 		print ("lowerWarningLimit = %f" % self.lowerWarningLimit)
 * 		print ("upperControlLimit = %f" % self.upperControlLimit)
 * 		print ("lowerControlLimit = %f" % self.lowerControlLimit)             # <<<<<<<<<<<<<<
 * 
 * 		return
 */
  __pyx_t_7 = PyUnicode_Format(__pyx_kp_u_lowerControlLimit_f, __pyx_v_self->lowerControlLimit); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "PyCafeDefs.pxi":484
 * 		print ("lowerControlLimit = %f" % self.lowerControlLimit)
 * 
 * 		return             # <<<<<<<<<<<<<<
 * ##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "PyCafeDefs.pxi":445
 * 		return
 * 
 * 	cdef showPrint(self, nelem):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int i
 * 		#is self.value[0] a list
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("PyCafe.pvctrl.showPrint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":396
 * ##################################################################################
 * cdef class pvctrl:
 * 	cdef readonly unsigned int nelem             # <<<<<<<<<<<<<<
 * 	cdef readonly int alarmStatus
 * 	cdef readonly int alarmSeverity
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvctrl_5nelem_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvctrl_5nelem_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvctrl_5nelem___get__(((struct __pyx_obj_6PyCafe_pvctrl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvctrl_5nelem___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->nelem); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.pvctrl.nelem.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":397
 * cdef class pvctrl:
 * 	cdef readonly unsigned int nelem
 * 	cdef readonly int alarmStatus             # <<<<<<<<<<<<<<
 * 	cdef readonly int alarmSeverity
 * 	cdef readonly unsigned short precision
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvctrl_11alarmStatus_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvctrl_11alarmStatus_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvctrl_11alarmStatus___get__(((struct __pyx_obj_6PyCafe_pvctrl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvctrl_11alarmStatus___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->alarmStatus); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.pvctrl.alarmStatus.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":398
 * 	cdef readonly unsigned int nelem
 * 	cdef readonly int alarmStatus
 * 	cdef readonly int alarmSeverity             # <<<<<<<<<<<<<<
 * 	cdef readonly unsigned short precision
 * 	cdef readonly string units
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvctrl_13alarmSeverity_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvctrl_13alarmSeverity_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvctrl_13alarmSeverity___get__(((struct __pyx_obj_6PyCafe_pvctrl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvctrl_13alarmSeverity___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->alarmSeverity); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.pvctrl.alarmSeverity.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":399
 * 	cdef readonly int alarmStatus
 * 	cdef readonly int alarmSeverity
 * 	cdef readonly unsigned short precision             # <<<<<<<<<<<<<<
 * 	cdef readonly string units
 * 	cdef readonly unsigned short noEnumStrings
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvctrl_9precision_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvctrl_9precision_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvctrl_9precision___get__(((struct __pyx_obj_6PyCafe_pvctrl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvctrl_9precision___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_short(__pyx_v_self->precision); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.pvctrl.precision.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":400
 * 	cdef readonly int alarmSeverity
 * 	cdef readonly unsigned short precision
 * 	cdef readonly string units             # <<<<<<<<<<<<<<
 * 	cdef readonly unsigned short noEnumStrings
 * 	cdef readonly list enumStrings
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvctrl_5units_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvctrl_5units_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvctrl_5units___get__(((struct __pyx_obj_6PyCafe_pvctrl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvctrl_5units___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_self->units); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.pvctrl.units.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":401
 * 	cdef readonly unsigned short precision
 * 	cdef readonly string units
 * 	cdef readonly unsigned short noEnumStrings             # <<<<<<<<<<<<<<
 * 	cdef readonly list enumStrings
 * 	cdef readonly upperDisplayLimit
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvctrl_13noEnumStrings_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvctrl_13noEnumStrings_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvctrl_13noEnumStrings___get__(((struct __pyx_obj_6PyCafe_pvctrl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvctrl_13noEnumStrings___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_short(__pyx_v_self->noEnumStrings); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.pvctrl.noEnumStrings.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":402
 * 	cdef readonly string units
 * 	cdef readonly unsigned short noEnumStrings
 * 	cdef readonly list enumStrings             # <<<<<<<<<<<<<<
 * 	cdef readonly upperDisplayLimit
 * 	cdef readonly lowerDisplayLimit
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvctrl_11enumStrings_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvctrl_11enumStrings_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvctrl_11enumStrings___get__(((struct __pyx_obj_6PyCafe_pvctrl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvctrl_11enumStrings___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->enumStrings);
  __pyx_r = __pyx_v_self->enumStrings;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":403
 * 	cdef readonly unsigned short noEnumStrings
 * 	cdef readonly list enumStrings
 * 	cdef readonly upperDisplayLimit             # <<<<<<<<<<<<<<
 * 	cdef readonly lowerDisplayLimit
 * 	cdef readonly upperAlarmLimit
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvctrl_17upperDisplayLimit_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvctrl_17upperDisplayLimit_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvctrl_17upperDisplayLimit___get__(((struct __pyx_obj_6PyCafe_pvctrl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvctrl_17upperDisplayLimit___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->upperDisplayLimit);
  __pyx_r = __pyx_v_self->upperDisplayLimit;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":404
 * 	cdef readonly list enumStrings
 * 	cdef readonly upperDisplayLimit
 * 	cdef readonly lowerDisplayLimit             # <<<<<<<<<<<<<<
 * 	cdef readonly upperAlarmLimit
 * 	cdef readonly upperWarningLimit
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvctrl_17lowerDisplayLimit_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvctrl_17lowerDisplayLimit_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvctrl_17lowerDisplayLimit___get__(((struct __pyx_obj_6PyCafe_pvctrl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvctrl_17lowerDisplayLimit___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->lowerDisplayLimit);
  __pyx_r = __pyx_v_self->lowerDisplayLimit;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":405
 * 	cdef readonly upperDisplayLimit
 * 	cdef readonly lowerDisplayLimit
 * 	cdef readonly upperAlarmLimit             # <<<<<<<<<<<<<<
 * 	cdef readonly upperWarningLimit
 * 	cdef readonly lowerWarningLimit
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvctrl_15upperAlarmLimit_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvctrl_15upperAlarmLimit_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvctrl_15upperAlarmLimit___get__(((struct __pyx_obj_6PyCafe_pvctrl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvctrl_15upperAlarmLimit___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->upperAlarmLimit);
  __pyx_r = __pyx_v_self->upperAlarmLimit;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":406
 * 	cdef readonly lowerDisplayLimit
 * 	cdef readonly upperAlarmLimit
 * 	cdef readonly upperWarningLimit             # <<<<<<<<<<<<<<
 * 	cdef readonly lowerWarningLimit
 * 	cdef readonly lowerAlarmLimit
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvctrl_17upperWarningLimit_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvctrl_17upperWarningLimit_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvctrl_17upperWarningLimit___get__(((struct __pyx_obj_6PyCafe_pvctrl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvctrl_17upperWarningLimit___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->upperWarningLimit);
  __pyx_r = __pyx_v_self->upperWarningLimit;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":407
 * 	cdef readonly upperAlarmLimit
 * 	cdef readonly upperWarningLimit
 * 	cdef readonly lowerWarningLimit             # <<<<<<<<<<<<<<
 * 	cdef readonly lowerAlarmLimit
 * 	cdef readonly upperControlLimit
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvctrl_17lowerWarningLimit_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvctrl_17lowerWarningLimit_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvctrl_17lowerWarningLimit___get__(((struct __pyx_obj_6PyCafe_pvctrl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvctrl_17lowerWarningLimit___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->lowerWarningLimit);
  __pyx_r = __pyx_v_self->lowerWarningLimit;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":408
 * 	cdef readonly upperWarningLimit
 * 	cdef readonly lowerWarningLimit
 * 	cdef readonly lowerAlarmLimit             # <<<<<<<<<<<<<<
 * 	cdef readonly upperControlLimit
 * 	cdef readonly lowerControlLimit
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvctrl_15lowerAlarmLimit_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvctrl_15lowerAlarmLimit_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvctrl_15lowerAlarmLimit___get__(((struct __pyx_obj_6PyCafe_pvctrl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvctrl_15lowerAlarmLimit___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->lowerAlarmLimit);
  __pyx_r = __pyx_v_self->lowerAlarmLimit;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":409
 * 	cdef readonly lowerWarningLimit
 * 	cdef readonly lowerAlarmLimit
 * 	cdef readonly upperControlLimit             # <<<<<<<<<<<<<<
 * 	cdef readonly lowerControlLimit
 * 	cdef readonly list value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvctrl_17upperControlLimit_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvctrl_17upperControlLimit_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvctrl_17upperControlLimit___get__(((struct __pyx_obj_6PyCafe_pvctrl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvctrl_17upperControlLimit___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->upperControlLimit);
  __pyx_r = __pyx_v_self->upperControlLimit;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":410
 * 	cdef readonly lowerAlarmLimit
 * 	cdef readonly upperControlLimit
 * 	cdef readonly lowerControlLimit             # <<<<<<<<<<<<<<
 * 	cdef readonly list value
 * 	cdef readonly int status
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvctrl_17lowerControlLimit_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvctrl_17lowerControlLimit_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvctrl_17lowerControlLimit___get__(((struct __pyx_obj_6PyCafe_pvctrl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvctrl_17lowerControlLimit___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->lowerControlLimit);
  __pyx_r = __pyx_v_self->lowerControlLimit;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":411
 * 	cdef readonly upperControlLimit
 * 	cdef readonly lowerControlLimit
 * 	cdef readonly list value             # <<<<<<<<<<<<<<
 * 	cdef readonly int status
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvctrl_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvctrl_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvctrl_5value___get__(((struct __pyx_obj_6PyCafe_pvctrl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvctrl_5value___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->value);
  __pyx_r = __pyx_v_self->value;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":412
 * 	cdef readonly lowerControlLimit
 * 	cdef readonly list value
 * 	cdef readonly int status             # <<<<<<<<<<<<<<
 * 
 * 	def __cinit__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvctrl_6status_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvctrl_6status_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvctrl_6status___get__(((struct __pyx_obj_6PyCafe_pvctrl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvctrl_6status___get__(struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.pvctrl.status.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":499
 * 
 * 
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self.nelem=	1
 * 
 */

/* Python wrapper */
static int __pyx_pw_6PyCafe_6pvdata_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6PyCafe_6pvdata_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6PyCafe_6pvdata___cinit__(((struct __pyx_obj_6PyCafe_pvdata *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6PyCafe_6pvdata___cinit__(struct __pyx_obj_6PyCafe_pvdata *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "PyCafeDefs.pxi":500
 * 
 * 	def __cinit__(self):
 * 		self.nelem=	1             # <<<<<<<<<<<<<<
 * 
 * 		self.alarmStatus=-1
 */
  __pyx_v_self->nelem = 1;

  /* "PyCafeDefs.pxi":502
 * 		self.nelem=	1
 * 
 * 		self.alarmStatus=-1             # <<<<<<<<<<<<<<
 * 		self.alarmSeverity=-1
 * 		self.ts=[]
 */
  __pyx_v_self->alarmStatus = -1;

  /* "PyCafeDefs.pxi":503
 * 
 * 		self.alarmStatus=-1
 * 		self.alarmSeverity=-1             # <<<<<<<<<<<<<<
 * 		self.ts=[]
 * 		self.tsDate=[]
 */
  __pyx_v_self->alarmSeverity = -1;

  /* "PyCafeDefs.pxi":504
 * 		self.alarmStatus=-1
 * 		self.alarmSeverity=-1
 * 		self.ts=[]             # <<<<<<<<<<<<<<
 * 		self.tsDate=[]
 * 		self.value=[]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->ts);
  __Pyx_DECREF(__pyx_v_self->ts);
  __pyx_v_self->ts = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":505
 * 		self.alarmSeverity=-1
 * 		self.ts=[]
 * 		self.tsDate=[]             # <<<<<<<<<<<<<<
 * 		self.value=[]
 * 		self.status=1
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->tsDate);
  __Pyx_DECREF(__pyx_v_self->tsDate);
  __pyx_v_self->tsDate = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":506
 * 		self.ts=[]
 * 		self.tsDate=[]
 * 		self.value=[]             # <<<<<<<<<<<<<<
 * 		self.status=1
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->value);
  __Pyx_DECREF(__pyx_v_self->value);
  __pyx_v_self->value = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":507
 * 		self.tsDate=[]
 * 		self.value=[]
 * 		self.status=1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->status = 1;

  /* "PyCafeDefs.pxi":499
 * 
 * 
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self.nelem=	1
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.pvdata.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":510
 * 
 * 
 * 	def show(self):             # <<<<<<<<<<<<<<
 * 		self.showPrint(self.nelem)
 * 		return
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvdata_3show(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvdata_3show(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvdata_2show(((struct __pyx_obj_6PyCafe_pvdata *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvdata_2show(struct __pyx_obj_6PyCafe_pvdata *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show", 0);

  /* "PyCafeDefs.pxi":511
 * 
 * 	def show(self):
 * 		self.showPrint(self.nelem)             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->nelem); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_6PyCafe_pvdata *)__pyx_v_self->__pyx_vtab)->showPrint(__pyx_v_self, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PyCafeDefs.pxi":512
 * 	def show(self):
 * 		self.showPrint(self.nelem)
 * 		return             # <<<<<<<<<<<<<<
 * 
 * 	def showMax(self, nelem):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "PyCafeDefs.pxi":510
 * 
 * 
 * 	def show(self):             # <<<<<<<<<<<<<<
 * 		self.showPrint(self.nelem)
 * 		return
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PyCafe.pvdata.show", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":514
 * 		return
 * 
 * 	def showMax(self, nelem):             # <<<<<<<<<<<<<<
 * 		if nelem > self.nelem:
 * 			#print ("----------------------"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvdata_5showMax(PyObject *__pyx_v_self, PyObject *__pyx_v_nelem); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvdata_5showMax(PyObject *__pyx_v_self, PyObject *__pyx_v_nelem) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("showMax (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvdata_4showMax(((struct __pyx_obj_6PyCafe_pvdata *)__pyx_v_self), ((PyObject *)__pyx_v_nelem));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvdata_4showMax(struct __pyx_obj_6PyCafe_pvdata *__pyx_v_self, PyObject *__pyx_v_nelem) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("showMax", 0);
  __Pyx_INCREF(__pyx_v_nelem);

  /* "PyCafeDefs.pxi":515
 * 
 * 	def showMax(self, nelem):
 * 		if nelem > self.nelem:             # <<<<<<<<<<<<<<
 * 			#print ("----------------------"
 * 			#print ("Note: Max. Nelem =", self.nelem
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->nelem); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_nelem, __pyx_t_1, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "PyCafeDefs.pxi":519
 * 			#print ("Note: Max. Nelem =", self.nelem
 * 			#print ("----------------------"
 * 			nelem=self.nelem             # <<<<<<<<<<<<<<
 * 		self.showPrint(nelem)
 * 		return
 */
    __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->nelem); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_nelem, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "PyCafeDefs.pxi":515
 * 
 * 	def showMax(self, nelem):
 * 		if nelem > self.nelem:             # <<<<<<<<<<<<<<
 * 			#print ("----------------------"
 * 			#print ("Note: Max. Nelem =", self.nelem
 */
  }

  /* "PyCafeDefs.pxi":520
 * 			#print ("----------------------"
 * 			nelem=self.nelem
 * 		self.showPrint(nelem)             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_6PyCafe_pvdata *)__pyx_v_self->__pyx_vtab)->showPrint(__pyx_v_self, __pyx_v_nelem); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PyCafeDefs.pxi":521
 * 			nelem=self.nelem
 * 		self.showPrint(nelem)
 * 		return             # <<<<<<<<<<<<<<
 * 
 * 	cdef showPrint(self, nelem):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "PyCafeDefs.pxi":514
 * 		return
 * 
 * 	def showMax(self, nelem):             # <<<<<<<<<<<<<<
 * 		if nelem > self.nelem:
 * 			#print ("----------------------"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PyCafe.pvdata.showMax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nelem);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":523
 * 		return
 * 
 * 	cdef showPrint(self, nelem):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int i
 * 		#is self.value[0] a list
 */

static PyObject *__pyx_f_6PyCafe_6pvdata_showPrint(struct __pyx_obj_6PyCafe_pvdata *__pyx_v_self, PyObject *__pyx_v_nelem) {
  unsigned int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  long __pyx_t_5;
  unsigned int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("showPrint", 0);

  /* "PyCafeDefs.pxi":527
 * 		#is self.value[0] a list
 * 
 * 		if nelem==1:             # <<<<<<<<<<<<<<
 * 			if isinstance (self.value[0], list):
 * 				print  ("value         =", self.value[0][0], )
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_nelem, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "PyCafeDefs.pxi":528
 * 
 * 		if nelem==1:
 * 			if isinstance (self.value[0], list):             # <<<<<<<<<<<<<<
 * 				print  ("value         =", self.value[0][0], )
 * 			else:
 */
    if (unlikely(__pyx_v_self->value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_self->value, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyList_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {

      /* "PyCafeDefs.pxi":529
 * 		if nelem==1:
 * 			if isinstance (self.value[0], list):
 * 				print  ("value         =", self.value[0][0], )             # <<<<<<<<<<<<<<
 * 			else:
 * 				print  ("value         =", self.value[0],	)
 */
      if (unlikely(__pyx_v_self->value == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_self->value, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_kp_u_value);
      __Pyx_GIVEREF(__pyx_kp_u_value);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_value);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "PyCafeDefs.pxi":528
 * 
 * 		if nelem==1:
 * 			if isinstance (self.value[0], list):             # <<<<<<<<<<<<<<
 * 				print  ("value         =", self.value[0][0], )
 * 			else:
 */
      goto __pyx_L4;
    }

    /* "PyCafeDefs.pxi":531
 * 				print  ("value         =", self.value[0][0], )
 * 			else:
 * 				print  ("value         =", self.value[0],	)             # <<<<<<<<<<<<<<
 * 		else:
 * 			print  ("values	      =",)
 */
    /*else*/ {
      if (unlikely(__pyx_v_self->value == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_self->value, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_kp_u_value);
      __Pyx_GIVEREF(__pyx_kp_u_value);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_value);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_L4:;

    /* "PyCafeDefs.pxi":527
 * 		#is self.value[0] a list
 * 
 * 		if nelem==1:             # <<<<<<<<<<<<<<
 * 			if isinstance (self.value[0], list):
 * 				print  ("value         =", self.value[0][0], )
 */
    goto __pyx_L3;
  }

  /* "PyCafeDefs.pxi":533
 * 				print  ("value         =", self.value[0],	)
 * 		else:
 * 			print  ("values	      =",)             # <<<<<<<<<<<<<<
 * 			if isinstance (self.value[0], list):
 * 				for i in range(0, nelem):
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__95, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "PyCafeDefs.pxi":534
 * 		else:
 * 			print  ("values	      =",)
 * 			if isinstance (self.value[0], list):             # <<<<<<<<<<<<<<
 * 				for i in range(0, nelem):
 * 					print (self.value[0][i],"[%d]" %i,	)
 */
    if (unlikely(__pyx_v_self->value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_self->value, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyList_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {

      /* "PyCafeDefs.pxi":535
 * 			print  ("values	      =",)
 * 			if isinstance (self.value[0], list):
 * 				for i in range(0, nelem):             # <<<<<<<<<<<<<<
 * 					print (self.value[0][i],"[%d]" %i,	)
 * 			else:
 */
      __pyx_t_5 = __Pyx_PyInt_As_long(__pyx_v_nelem); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "PyCafeDefs.pxi":536
 * 			if isinstance (self.value[0], list):
 * 				for i in range(0, nelem):
 * 					print (self.value[0][i],"[%d]" %i,	)             # <<<<<<<<<<<<<<
 * 			else:
 * 				for i in range(0, nelem):
 */
        if (unlikely(__pyx_v_self->value == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_self->value, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, __pyx_v_i, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_v_i); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = PyUnicode_Format(__pyx_kp_u_d, __pyx_t_4); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_7);
        __pyx_t_1 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }

      /* "PyCafeDefs.pxi":534
 * 		else:
 * 			print  ("values	      =",)
 * 			if isinstance (self.value[0], list):             # <<<<<<<<<<<<<<
 * 				for i in range(0, nelem):
 * 					print (self.value[0][i],"[%d]" %i,	)
 */
      goto __pyx_L5;
    }

    /* "PyCafeDefs.pxi":538
 * 					print (self.value[0][i],"[%d]" %i,	)
 * 			else:
 * 				for i in range(0, nelem):             # <<<<<<<<<<<<<<
 * 					print (self.value[i],"[%d]" %i,)
 * 		print ("")
 */
    /*else*/ {
      __pyx_t_5 = __Pyx_PyInt_As_long(__pyx_v_nelem); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "PyCafeDefs.pxi":539
 * 			else:
 * 				for i in range(0, nelem):
 * 					print (self.value[i],"[%d]" %i,)             # <<<<<<<<<<<<<<
 * 		print ("")
 * 		print ("status        = %d" % self.status)
 */
        if (unlikely(__pyx_v_self->value == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_self->value, __pyx_v_i, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 1, 0, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_v_i); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_1 = PyUnicode_Format(__pyx_kp_u_d, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
        __pyx_t_7 = 0;
        __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
    }
    __pyx_L5:;
  }
  __pyx_L3:;

  /* "PyCafeDefs.pxi":540
 * 				for i in range(0, nelem):
 * 					print (self.value[i],"[%d]" %i,)
 * 		print ("")             # <<<<<<<<<<<<<<
 * 		print ("status        = %d" % self.status)
 * 		#if self.alarmStatus != -1:
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__96, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":541
 * 					print (self.value[i],"[%d]" %i,)
 * 		print ("")
 * 		print ("status        = %d" % self.status)             # <<<<<<<<<<<<<<
 * 		#if self.alarmStatus != -1:
 * 		print ("alarmStatus   = %d" % self.alarmStatus)
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 541; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyUnicode_Format(__pyx_kp_u_status_d, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 541; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 541; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 541; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "PyCafeDefs.pxi":543
 * 		print ("status        = %d" % self.status)
 * 		#if self.alarmStatus != -1:
 * 		print ("alarmStatus   = %d" % self.alarmStatus)             # <<<<<<<<<<<<<<
 * 		print ("alarmSeverity = %d" % self.alarmSeverity)
 * 		#if self.ts[0] != 0:
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->alarmStatus); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyUnicode_Format(__pyx_kp_u_alarmStatus_d, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":544
 * 		#if self.alarmStatus != -1:
 * 		print ("alarmStatus   = %d" % self.alarmStatus)
 * 		print ("alarmSeverity = %d" % self.alarmSeverity)             # <<<<<<<<<<<<<<
 * 		#if self.ts[0] != 0:
 * 		print  ("ts            =", self.ts[0], self.ts[1])
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->alarmSeverity); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyUnicode_Format(__pyx_kp_u_alarmSeverity_d, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "PyCafeDefs.pxi":546
 * 		print ("alarmSeverity = %d" % self.alarmSeverity)
 * 		#if self.ts[0] != 0:
 * 		print  ("ts            =", self.ts[0], self.ts[1])             # <<<<<<<<<<<<<<
 * 		print  ("tsDate        =", self.tsDate[0], self.tsDate[1], \
 * 		self.tsDate[2], self.tsDate[3],\
 */
  if (unlikely(__pyx_v_self->ts == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_self->ts, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_v_self->ts == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_self->ts, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_kp_u_ts_3);
  __Pyx_GIVEREF(__pyx_kp_u_ts_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u_ts_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_1);
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":547
 * 		#if self.ts[0] != 0:
 * 		print  ("ts            =", self.ts[0], self.ts[1])
 * 		print  ("tsDate        =", self.tsDate[0], self.tsDate[1], \             # <<<<<<<<<<<<<<
 * 		self.tsDate[2], self.tsDate[3],\
 * 		self.tsDate[4], self.tsDate[5], self.tsDate[6])
 */
  if (unlikely(__pyx_v_self->tsDate == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 547; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_self->tsDate, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 547; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_self->tsDate == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 547; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_self->tsDate, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 547; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_7);

  /* "PyCafeDefs.pxi":548
 * 		print  ("ts            =", self.ts[0], self.ts[1])
 * 		print  ("tsDate        =", self.tsDate[0], self.tsDate[1], \
 * 		self.tsDate[2], self.tsDate[3],\             # <<<<<<<<<<<<<<
 * 		self.tsDate[4], self.tsDate[5], self.tsDate[6])
 * 		return
 */
  if (unlikely(__pyx_v_self->tsDate == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_self->tsDate, 2, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_v_self->tsDate == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_self->tsDate, 3, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_8);

  /* "PyCafeDefs.pxi":549
 * 		print  ("tsDate        =", self.tsDate[0], self.tsDate[1], \
 * 		self.tsDate[2], self.tsDate[3],\
 * 		self.tsDate[4], self.tsDate[5], self.tsDate[6])             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
  if (unlikely(__pyx_v_self->tsDate == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_9 = __Pyx_GetItemInt_List(__pyx_v_self->tsDate, 4, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_9);
  if (unlikely(__pyx_v_self->tsDate == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_10 = __Pyx_GetItemInt_List(__pyx_v_self->tsDate, 5, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(__pyx_t_10 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_10);
  if (unlikely(__pyx_v_self->tsDate == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_11 = __Pyx_GetItemInt_List(__pyx_v_self->tsDate, 6, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(__pyx_t_11 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_11);

  /* "PyCafeDefs.pxi":547
 * 		#if self.ts[0] != 0:
 * 		print  ("ts            =", self.ts[0], self.ts[1])
 * 		print  ("tsDate        =", self.tsDate[0], self.tsDate[1], \             # <<<<<<<<<<<<<<
 * 		self.tsDate[2], self.tsDate[3],\
 * 		self.tsDate[4], self.tsDate[5], self.tsDate[6])
 */
  __pyx_t_12 = PyTuple_New(8); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 547; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_kp_u_tsDate);
  __Pyx_GIVEREF(__pyx_kp_u_tsDate);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_kp_u_tsDate);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_12, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_12, 4, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_12, 5, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_12, 6, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_12, 7, __pyx_t_11);
  __pyx_t_1 = 0;
  __pyx_t_7 = 0;
  __pyx_t_4 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_12, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 547; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "PyCafeDefs.pxi":550
 * 		self.tsDate[2], self.tsDate[3],\
 * 		self.tsDate[4], self.tsDate[5], self.tsDate[6])
 * 		return             # <<<<<<<<<<<<<<
 * 
 * ##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "PyCafeDefs.pxi":523
 * 		return
 * 
 * 	cdef showPrint(self, nelem):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int i
 * 		#is self.value[0] a list
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("PyCafe.pvdata.showPrint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":490
 * ##################################################################################
 * cdef class pvdata:
 * 	cdef readonly unsigned int nelem             # <<<<<<<<<<<<<<
 * 	cdef readonly int alarmStatus
 * 	cdef readonly int alarmSeverity
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvdata_5nelem_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvdata_5nelem_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvdata_5nelem___get__(((struct __pyx_obj_6PyCafe_pvdata *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvdata_5nelem___get__(struct __pyx_obj_6PyCafe_pvdata *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->nelem); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.pvdata.nelem.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":491
 * cdef class pvdata:
 * 	cdef readonly unsigned int nelem
 * 	cdef readonly int alarmStatus             # <<<<<<<<<<<<<<
 * 	cdef readonly int alarmSeverity
 * 	cdef readonly list ts
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvdata_11alarmStatus_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvdata_11alarmStatus_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvdata_11alarmStatus___get__(((struct __pyx_obj_6PyCafe_pvdata *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvdata_11alarmStatus___get__(struct __pyx_obj_6PyCafe_pvdata *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->alarmStatus); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.pvdata.alarmStatus.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":492
 * 	cdef readonly unsigned int nelem
 * 	cdef readonly int alarmStatus
 * 	cdef readonly int alarmSeverity             # <<<<<<<<<<<<<<
 * 	cdef readonly list ts
 * 	cdef readonly list tsDate
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvdata_13alarmSeverity_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvdata_13alarmSeverity_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvdata_13alarmSeverity___get__(((struct __pyx_obj_6PyCafe_pvdata *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvdata_13alarmSeverity___get__(struct __pyx_obj_6PyCafe_pvdata *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->alarmSeverity); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.pvdata.alarmSeverity.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":493
 * 	cdef readonly int alarmStatus
 * 	cdef readonly int alarmSeverity
 * 	cdef readonly list ts             # <<<<<<<<<<<<<<
 * 	cdef readonly list tsDate
 * 	cdef readonly list value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvdata_2ts_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvdata_2ts_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvdata_2ts___get__(((struct __pyx_obj_6PyCafe_pvdata *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvdata_2ts___get__(struct __pyx_obj_6PyCafe_pvdata *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->ts);
  __pyx_r = __pyx_v_self->ts;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":494
 * 	cdef readonly int alarmSeverity
 * 	cdef readonly list ts
 * 	cdef readonly list tsDate             # <<<<<<<<<<<<<<
 * 	cdef readonly list value
 * 	cdef readonly int  status
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvdata_6tsDate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvdata_6tsDate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvdata_6tsDate___get__(((struct __pyx_obj_6PyCafe_pvdata *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvdata_6tsDate___get__(struct __pyx_obj_6PyCafe_pvdata *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->tsDate);
  __pyx_r = __pyx_v_self->tsDate;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":495
 * 	cdef readonly list ts
 * 	cdef readonly list tsDate
 * 	cdef readonly list value             # <<<<<<<<<<<<<<
 * 	cdef readonly int  status
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvdata_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvdata_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvdata_5value___get__(((struct __pyx_obj_6PyCafe_pvdata *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvdata_5value___get__(struct __pyx_obj_6PyCafe_pvdata *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->value);
  __pyx_r = __pyx_v_self->value;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":496
 * 	cdef readonly list tsDate
 * 	cdef readonly list value
 * 	cdef readonly int  status             # <<<<<<<<<<<<<<
 * 
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6pvdata_6status_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6pvdata_6status_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6pvdata_6status___get__(((struct __pyx_obj_6PyCafe_pvdata *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6pvdata_6status___get__(struct __pyx_obj_6PyCafe_pvdata *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.pvdata.status.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":565
 * 	cdef readonly unsigned int groupHandle
 * 
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self.groupStatus=ICAFE_NORMAL
 * 		return
 */

/* Python wrapper */
static int __pyx_pw_6PyCafe_7pvgroup_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6PyCafe_7pvgroup_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6PyCafe_7pvgroup___cinit__(((struct __pyx_obj_6PyCafe_pvgroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6PyCafe_7pvgroup___cinit__(struct __pyx_obj_6PyCafe_pvgroup *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "PyCafeDefs.pxi":566
 * 
 * 	def __cinit__(self):
 * 		self.groupStatus=ICAFE_NORMAL             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
  __pyx_v_self->groupStatus = ICAFE_NORMAL;

  /* "PyCafeDefs.pxi":567
 * 	def __cinit__(self):
 * 		self.groupStatus=ICAFE_NORMAL
 * 		return             # <<<<<<<<<<<<<<
 * 
 * 	def show(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "PyCafeDefs.pxi":565
 * 	cdef readonly unsigned int groupHandle
 * 
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self.groupStatus=ICAFE_NORMAL
 * 		return
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":569
 * 		return
 * 
 * 	def show(self):             # <<<<<<<<<<<<<<
 * 		self.showPrint(npv=self.npv, grouplist=None)
 * 		return
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_7pvgroup_3show(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6PyCafe_7pvgroup_3show(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_7pvgroup_2show(((struct __pyx_obj_6PyCafe_pvgroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_7pvgroup_2show(struct __pyx_obj_6PyCafe_pvgroup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show", 0);

  /* "PyCafeDefs.pxi":570
 * 
 * 	def show(self):
 * 		self.showPrint(npv=self.npv, grouplist=None)             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->npv); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_6PyCafe_pvgroup *)__pyx_v_self->__pyx_vtab)->showPrint(__pyx_v_self, __pyx_t_1, Py_None); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PyCafeDefs.pxi":571
 * 	def show(self):
 * 		self.showPrint(npv=self.npv, grouplist=None)
 * 		return             # <<<<<<<<<<<<<<
 * 
 * 	def showWithPV(self,glist):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "PyCafeDefs.pxi":569
 * 		return
 * 
 * 	def show(self):             # <<<<<<<<<<<<<<
 * 		self.showPrint(npv=self.npv, grouplist=None)
 * 		return
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PyCafe.pvgroup.show", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":573
 * 		return
 * 
 * 	def showWithPV(self,glist):             # <<<<<<<<<<<<<<
 * 		if len(glist) != self.npv:
 * 			print ("ERROR: GROUP MEMBER MISMATCH!!")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_7pvgroup_5showWithPV(PyObject *__pyx_v_self, PyObject *__pyx_v_glist); /*proto*/
static PyObject *__pyx_pw_6PyCafe_7pvgroup_5showWithPV(PyObject *__pyx_v_self, PyObject *__pyx_v_glist) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("showWithPV (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_7pvgroup_4showWithPV(((struct __pyx_obj_6PyCafe_pvgroup *)__pyx_v_self), ((PyObject *)__pyx_v_glist));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_7pvgroup_4showWithPV(struct __pyx_obj_6PyCafe_pvgroup *__pyx_v_self, PyObject *__pyx_v_glist) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("showWithPV", 0);

  /* "PyCafeDefs.pxi":574
 * 
 * 	def showWithPV(self,glist):
 * 		if len(glist) != self.npv:             # <<<<<<<<<<<<<<
 * 			print ("ERROR: GROUP MEMBER MISMATCH!!")
 * 			print (glist, "has", len(glist), "members while group has", self.npv,"!!")
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_glist); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_t_1 != __pyx_v_self->npv) != 0);
  if (__pyx_t_2) {

    /* "PyCafeDefs.pxi":575
 * 	def showWithPV(self,glist):
 * 		if len(glist) != self.npv:
 * 			print ("ERROR: GROUP MEMBER MISMATCH!!")             # <<<<<<<<<<<<<<
 * 			print (glist, "has", len(glist), "members while group has", self.npv,"!!")
 * 			return
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__97, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "PyCafeDefs.pxi":576
 * 		if len(glist) != self.npv:
 * 			print ("ERROR: GROUP MEMBER MISMATCH!!")
 * 			print (glist, "has", len(glist), "members while group has", self.npv,"!!")             # <<<<<<<<<<<<<<
 * 			return
 * 		self.showPrint(self.npv, grouplist=glist)
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_glist); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->npv); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_glist);
    __Pyx_GIVEREF(__pyx_v_glist);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_glist);
    __Pyx_INCREF(__pyx_n_u_has);
    __Pyx_GIVEREF(__pyx_n_u_has);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_u_has);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
    __Pyx_INCREF(__pyx_kp_u_members_while_group_has);
    __Pyx_GIVEREF(__pyx_kp_u_members_while_group_has);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_kp_u_members_while_group_has);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_t_4);
    __Pyx_INCREF(__pyx_kp_u__98);
    __Pyx_GIVEREF(__pyx_kp_u__98);
    PyTuple_SET_ITEM(__pyx_t_5, 5, __pyx_kp_u__98);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "PyCafeDefs.pxi":577
 * 			print ("ERROR: GROUP MEMBER MISMATCH!!")
 * 			print (glist, "has", len(glist), "members while group has", self.npv,"!!")
 * 			return             # <<<<<<<<<<<<<<
 * 		self.showPrint(self.npv, grouplist=glist)
 * 		return
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "PyCafeDefs.pxi":574
 * 
 * 	def showWithPV(self,glist):
 * 		if len(glist) != self.npv:             # <<<<<<<<<<<<<<
 * 			print ("ERROR: GROUP MEMBER MISMATCH!!")
 * 			print (glist, "has", len(glist), "members while group has", self.npv,"!!")
 */
  }

  /* "PyCafeDefs.pxi":578
 * 			print (glist, "has", len(glist), "members while group has", self.npv,"!!")
 * 			return
 * 		self.showPrint(self.npv, grouplist=glist)             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->npv); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_pvgroup *)__pyx_v_self->__pyx_vtab)->showPrint(__pyx_v_self, __pyx_t_4, __pyx_v_glist); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "PyCafeDefs.pxi":579
 * 			return
 * 		self.showPrint(self.npv, grouplist=glist)
 * 		return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "PyCafeDefs.pxi":573
 * 		return
 * 
 * 	def showWithPV(self,glist):             # <<<<<<<<<<<<<<
 * 		if len(glist) != self.npv:
 * 			print ("ERROR: GROUP MEMBER MISMATCH!!")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.pvgroup.showWithPV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":582
 * 
 * 
 * 	def showMax(self, _npv):             # <<<<<<<<<<<<<<
 * 		if _npv > self.npv:
 * 			#print ("----------------------"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_7pvgroup_7showMax(PyObject *__pyx_v_self, PyObject *__pyx_v__npv); /*proto*/
static PyObject *__pyx_pw_6PyCafe_7pvgroup_7showMax(PyObject *__pyx_v_self, PyObject *__pyx_v__npv) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("showMax (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_7pvgroup_6showMax(((struct __pyx_obj_6PyCafe_pvgroup *)__pyx_v_self), ((PyObject *)__pyx_v__npv));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_7pvgroup_6showMax(struct __pyx_obj_6PyCafe_pvgroup *__pyx_v_self, PyObject *__pyx_v__npv) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("showMax", 0);
  __Pyx_INCREF(__pyx_v__npv);

  /* "PyCafeDefs.pxi":583
 * 
 * 	def showMax(self, _npv):
 * 		if _npv > self.npv:             # <<<<<<<<<<<<<<
 * 			#print ("----------------------"
 * 			#print ("Note: Max. Npv =", self.npv
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->npv); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v__npv, __pyx_t_1, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "PyCafeDefs.pxi":587
 * 			#print ("Note: Max. Npv =", self.npv
 * 			#print ("----------------------"
 * 			_npv=self.npv             # <<<<<<<<<<<<<<
 * 		self.showPrint(npv=_npv, grouplist=None)
 * 		return
 */
    __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->npv); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v__npv, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "PyCafeDefs.pxi":583
 * 
 * 	def showMax(self, _npv):
 * 		if _npv > self.npv:             # <<<<<<<<<<<<<<
 * 			#print ("----------------------"
 * 			#print ("Note: Max. Npv =", self.npv
 */
  }

  /* "PyCafeDefs.pxi":588
 * 			#print ("----------------------"
 * 			_npv=self.npv
 * 		self.showPrint(npv=_npv, grouplist=None)             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_6PyCafe_pvgroup *)__pyx_v_self->__pyx_vtab)->showPrint(__pyx_v_self, __pyx_v__npv, Py_None); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PyCafeDefs.pxi":589
 * 			_npv=self.npv
 * 		self.showPrint(npv=_npv, grouplist=None)
 * 		return             # <<<<<<<<<<<<<<
 * 
 * 	cdef showPrint(self, npv, grouplist):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "PyCafeDefs.pxi":582
 * 
 * 
 * 	def showMax(self, _npv):             # <<<<<<<<<<<<<<
 * 		if _npv > self.npv:
 * 			#print ("----------------------"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PyCafe.pvgroup.showMax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__npv);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":591
 * 		return
 * 
 * 	cdef showPrint(self, npv, grouplist):             # <<<<<<<<<<<<<<
 * 		print ("GROUP NAME   = ", self.name)
 * 		print ("GROUP HANDLE = ", self.groupHandle)
 */

static PyObject *__pyx_f_6PyCafe_7pvgroup_showPrint(struct __pyx_obj_6PyCafe_pvgroup *__pyx_v_self, PyObject *__pyx_v_npv, PyObject *__pyx_v_grouplist) {
  unsigned int __pyx_v_i;
  unsigned int __pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  long __pyx_t_3;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  unsigned int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("showPrint", 0);

  /* "PyCafeDefs.pxi":592
 * 
 * 	cdef showPrint(self, npv, grouplist):
 * 		print ("GROUP NAME   = ", self.name)             # <<<<<<<<<<<<<<
 * 		print ("GROUP HANDLE = ", self.groupHandle)
 * 		print ("GROUP STATUS = ", self.groupStatus)
 */
  __pyx_t_1 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_self->name); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_kp_u_GROUP_NAME);
  __Pyx_GIVEREF(__pyx_kp_u_GROUP_NAME);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_GROUP_NAME);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":593
 * 	cdef showPrint(self, npv, grouplist):
 * 		print ("GROUP NAME   = ", self.name)
 * 		print ("GROUP HANDLE = ", self.groupHandle)             # <<<<<<<<<<<<<<
 * 		print ("GROUP STATUS = ", self.groupStatus)
 * 		cdef unsigned int i,j
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->groupHandle); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_kp_u_GROUP_HANDLE);
  __Pyx_GIVEREF(__pyx_kp_u_GROUP_HANDLE);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_GROUP_HANDLE);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":594
 * 		print ("GROUP NAME   = ", self.name)
 * 		print ("GROUP HANDLE = ", self.groupHandle)
 * 		print ("GROUP STATUS = ", self.groupStatus)             # <<<<<<<<<<<<<<
 * 		cdef unsigned int i,j
 * 		#if nelem==1:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->groupStatus); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_kp_u_GROUP_STATUS);
  __Pyx_GIVEREF(__pyx_kp_u_GROUP_STATUS);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_GROUP_STATUS);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":601
 * 
 * 
 * 		for i in range(0, npv):             # <<<<<<<<<<<<<<
 * 			print ("Member: ", i, "---------------------------------")
 * 			if grouplist:
 */
  __pyx_t_3 = __Pyx_PyInt_As_long(__pyx_v_npv); if (unlikely((__pyx_t_3 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "PyCafeDefs.pxi":602
 * 
 * 		for i in range(0, npv):
 * 			print ("Member: ", i, "---------------------------------")             # <<<<<<<<<<<<<<
 * 			if grouplist:
 * 				print ("PV            =", grouplist[i])
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_kp_u_Member);
    __Pyx_GIVEREF(__pyx_kp_u_Member);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Member);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_kp_u__99);
    __Pyx_GIVEREF(__pyx_kp_u__99);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u__99);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "PyCafeDefs.pxi":603
 * 		for i in range(0, npv):
 * 			print ("Member: ", i, "---------------------------------")
 * 			if grouplist:             # <<<<<<<<<<<<<<
 * 				print ("PV            =", grouplist[i])
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_grouplist); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_5) {

      /* "PyCafeDefs.pxi":604
 * 			print ("Member: ", i, "---------------------------------")
 * 			if grouplist:
 * 				print ("PV            =", grouplist[i])             # <<<<<<<<<<<<<<
 * 
 * 			print  ("values	      =",)
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_grouplist, __pyx_v_i, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_kp_u_PV);
      __Pyx_GIVEREF(__pyx_kp_u_PV);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_PV);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "PyCafeDefs.pxi":603
 * 		for i in range(0, npv):
 * 			print ("Member: ", i, "---------------------------------")
 * 			if grouplist:             # <<<<<<<<<<<<<<
 * 				print ("PV            =", grouplist[i])
 * 
 */
    }

    /* "PyCafeDefs.pxi":606
 * 				print ("PV            =", grouplist[i])
 * 
 * 			print  ("values	      =",)             # <<<<<<<<<<<<<<
 * 			for j in range(0, len(self.pvdata[i].value)):
 * 				print (self.pvdata[i].value[j],"[%d]" %j,)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__100, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "PyCafeDefs.pxi":607
 * 
 * 			print  ("values	      =",)
 * 			for j in range(0, len(self.pvdata[i].value)):             # <<<<<<<<<<<<<<
 * 				print (self.pvdata[i].value[j],"[%d]" %j,)
 * 			print ("")
 */
    if (unlikely(__pyx_v_self->pvdata == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_self->pvdata, __pyx_v_i, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 1, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 607; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_value_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_j = __pyx_t_7;

      /* "PyCafeDefs.pxi":608
 * 			print  ("values	      =",)
 * 			for j in range(0, len(self.pvdata[i].value)):
 * 				print (self.pvdata[i].value[j],"[%d]" %j,)             # <<<<<<<<<<<<<<
 * 			print ("")
 * 			print ("status        = %d" % self.pvdata[i].status)
 */
      if (unlikely(__pyx_v_self->pvdata == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_self->pvdata, __pyx_v_i, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 1, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_j, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_j); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = PyUnicode_Format(__pyx_kp_u_d, __pyx_t_1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_8);
      __pyx_t_2 = 0;
      __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }

    /* "PyCafeDefs.pxi":609
 * 			for j in range(0, len(self.pvdata[i].value)):
 * 				print (self.pvdata[i].value[j],"[%d]" %j,)
 * 			print ("")             # <<<<<<<<<<<<<<
 * 			print ("status        = %d" % self.pvdata[i].status)
 * 			print ("alarmStatus   = %d" % self.pvdata[i].alarmStatus)
 */
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__101, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "PyCafeDefs.pxi":610
 * 				print (self.pvdata[i].value[j],"[%d]" %j,)
 * 			print ("")
 * 			print ("status        = %d" % self.pvdata[i].status)             # <<<<<<<<<<<<<<
 * 			print ("alarmStatus   = %d" % self.pvdata[i].alarmStatus)
 * 			print ("alarmSeverity = %d" % self.pvdata[i].alarmSeverity)
 */
    if (unlikely(__pyx_v_self->pvdata == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_self->pvdata, __pyx_v_i, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 1, 0, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 610; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyUnicode_Format(__pyx_kp_u_status_d, __pyx_t_1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "PyCafeDefs.pxi":611
 * 			print ("")
 * 			print ("status        = %d" % self.pvdata[i].status)
 * 			print ("alarmStatus   = %d" % self.pvdata[i].alarmStatus)             # <<<<<<<<<<<<<<
 * 			print ("alarmSeverity = %d" % self.pvdata[i].alarmSeverity)
 * 			print  ("ts            =", self.pvdata[i].ts[0], self.pvdata[i].tsDate[1])
 */
    if (unlikely(__pyx_v_self->pvdata == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_self->pvdata, __pyx_v_i, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 1, 0, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_alarmStatus); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyUnicode_Format(__pyx_kp_u_alarmStatus_d, __pyx_t_1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "PyCafeDefs.pxi":612
 * 			print ("status        = %d" % self.pvdata[i].status)
 * 			print ("alarmStatus   = %d" % self.pvdata[i].alarmStatus)
 * 			print ("alarmSeverity = %d" % self.pvdata[i].alarmSeverity)             # <<<<<<<<<<<<<<
 * 			print  ("ts            =", self.pvdata[i].ts[0], self.pvdata[i].tsDate[1])
 * 			print  ("tsDate        =", self.pvdata[i].tsDate[0], self.pvdata[i].tsDate[1], \
 */
    if (unlikely(__pyx_v_self->pvdata == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_self->pvdata, __pyx_v_i, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 1, 0, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_alarmSeverity); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyUnicode_Format(__pyx_kp_u_alarmSeverity_d, __pyx_t_1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "PyCafeDefs.pxi":613
 * 			print ("alarmStatus   = %d" % self.pvdata[i].alarmStatus)
 * 			print ("alarmSeverity = %d" % self.pvdata[i].alarmSeverity)
 * 			print  ("ts            =", self.pvdata[i].ts[0], self.pvdata[i].tsDate[1])             # <<<<<<<<<<<<<<
 * 			print  ("tsDate        =", self.pvdata[i].tsDate[0], self.pvdata[i].tsDate[1], \
 * 			self.pvdata[i].tsDate[2], self.pvdata[i].tsDate[3],\
 */
    if (unlikely(__pyx_v_self->pvdata == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_self->pvdata, __pyx_v_i, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 1, 0, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_ts); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__pyx_v_self->pvdata == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_self->pvdata, __pyx_v_i, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 1, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_tsDate_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_kp_u_ts_3);
    __Pyx_GIVEREF(__pyx_kp_u_ts_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_ts_3);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_1);
    __pyx_t_8 = 0;
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "PyCafeDefs.pxi":614
 * 			print ("alarmSeverity = %d" % self.pvdata[i].alarmSeverity)
 * 			print  ("ts            =", self.pvdata[i].ts[0], self.pvdata[i].tsDate[1])
 * 			print  ("tsDate        =", self.pvdata[i].tsDate[0], self.pvdata[i].tsDate[1], \             # <<<<<<<<<<<<<<
 * 			self.pvdata[i].tsDate[2], self.pvdata[i].tsDate[3],\
 * 			self.pvdata[i].tsDate[4], self.pvdata[i].tsDate[5], self.pvdata[i].tsDate[6])
 */
    if (unlikely(__pyx_v_self->pvdata == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_self->pvdata, __pyx_v_i, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 1, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_tsDate_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(__pyx_v_self->pvdata == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_self->pvdata, __pyx_v_i, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 1, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tsDate_2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_8, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "PyCafeDefs.pxi":615
 * 			print  ("ts            =", self.pvdata[i].ts[0], self.pvdata[i].tsDate[1])
 * 			print  ("tsDate        =", self.pvdata[i].tsDate[0], self.pvdata[i].tsDate[1], \
 * 			self.pvdata[i].tsDate[2], self.pvdata[i].tsDate[3],\             # <<<<<<<<<<<<<<
 * 			self.pvdata[i].tsDate[4], self.pvdata[i].tsDate[5], self.pvdata[i].tsDate[6])
 * 			print ("--------------------------------------------")
 */
    if (unlikely(__pyx_v_self->pvdata == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_self->pvdata, __pyx_v_i, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 1, 0, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_tsDate_2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_9, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(__pyx_v_self->pvdata == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_9 = __Pyx_GetItemInt_List(__pyx_v_self->pvdata, __pyx_v_i, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 1, 0, 1); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_tsDate_2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_10, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "PyCafeDefs.pxi":616
 * 			print  ("tsDate        =", self.pvdata[i].tsDate[0], self.pvdata[i].tsDate[1], \
 * 			self.pvdata[i].tsDate[2], self.pvdata[i].tsDate[3],\
 * 			self.pvdata[i].tsDate[4], self.pvdata[i].tsDate[5], self.pvdata[i].tsDate[6])             # <<<<<<<<<<<<<<
 * 			print ("--------------------------------------------")
 * 		return
 */
    if (unlikely(__pyx_v_self->pvdata == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_10 = __Pyx_GetItemInt_List(__pyx_v_self->pvdata, __pyx_v_i, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 1, 0, 1); if (unlikely(__pyx_t_10 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_tsDate_2); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_11, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_10 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(__pyx_v_self->pvdata == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_11 = __Pyx_GetItemInt_List(__pyx_v_self->pvdata, __pyx_v_i, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 1, 0, 1); if (unlikely(__pyx_t_11 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_tsDate_2); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_12, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_11 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(__pyx_v_self->pvdata == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_12 = __Pyx_GetItemInt_List(__pyx_v_self->pvdata, __pyx_v_i, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 1, 0, 1); if (unlikely(__pyx_t_12 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_tsDate_2); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = __Pyx_GetItemInt(__pyx_t_13, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_12 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

    /* "PyCafeDefs.pxi":614
 * 			print ("alarmSeverity = %d" % self.pvdata[i].alarmSeverity)
 * 			print  ("ts            =", self.pvdata[i].ts[0], self.pvdata[i].tsDate[1])
 * 			print  ("tsDate        =", self.pvdata[i].tsDate[0], self.pvdata[i].tsDate[1], \             # <<<<<<<<<<<<<<
 * 			self.pvdata[i].tsDate[2], self.pvdata[i].tsDate[3],\
 * 			self.pvdata[i].tsDate[4], self.pvdata[i].tsDate[5], self.pvdata[i].tsDate[6])
 */
    __pyx_t_13 = PyTuple_New(8); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_INCREF(__pyx_kp_u_tsDate);
    __Pyx_GIVEREF(__pyx_kp_u_tsDate);
    PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_kp_u_tsDate);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_13, 3, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_13, 4, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_13, 5, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_13, 6, __pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_13, 7, __pyx_t_12);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_t_10 = 0;
    __pyx_t_11 = 0;
    __pyx_t_12 = 0;
    __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_13, NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "PyCafeDefs.pxi":617
 * 			self.pvdata[i].tsDate[2], self.pvdata[i].tsDate[3],\
 * 			self.pvdata[i].tsDate[4], self.pvdata[i].tsDate[5], self.pvdata[i].tsDate[6])
 * 			print ("--------------------------------------------")             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
    __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__103, NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }

  /* "PyCafeDefs.pxi":618
 * 			self.pvdata[i].tsDate[4], self.pvdata[i].tsDate[5], self.pvdata[i].tsDate[6])
 * 			print ("--------------------------------------------")
 * 		return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "PyCafeDefs.pxi":591
 * 		return
 * 
 * 	cdef showPrint(self, npv, grouplist):             # <<<<<<<<<<<<<<
 * 		print ("GROUP NAME   = ", self.name)
 * 		print ("GROUP HANDLE = ", self.groupHandle)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("PyCafe.pvgroup.showPrint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":559
 * ##################################################################################
 * cdef class pvgroup:
 * 	cdef readonly list pvdata             # <<<<<<<<<<<<<<
 * 	cdef readonly unsigned int npv
 * 	cdef readonly string name
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_7pvgroup_6pvdata_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_7pvgroup_6pvdata_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_7pvgroup_6pvdata___get__(((struct __pyx_obj_6PyCafe_pvgroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_7pvgroup_6pvdata___get__(struct __pyx_obj_6PyCafe_pvgroup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->pvdata);
  __pyx_r = __pyx_v_self->pvdata;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":560
 * cdef class pvgroup:
 * 	cdef readonly list pvdata
 * 	cdef readonly unsigned int npv             # <<<<<<<<<<<<<<
 * 	cdef readonly string name
 * 	cdef readonly int  groupStatus
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_7pvgroup_3npv_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_7pvgroup_3npv_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_7pvgroup_3npv___get__(((struct __pyx_obj_6PyCafe_pvgroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_7pvgroup_3npv___get__(struct __pyx_obj_6PyCafe_pvgroup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->npv); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.pvgroup.npv.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":561
 * 	cdef readonly list pvdata
 * 	cdef readonly unsigned int npv
 * 	cdef readonly string name             # <<<<<<<<<<<<<<
 * 	cdef readonly int  groupStatus
 * 	cdef readonly unsigned int groupHandle
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_7pvgroup_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_7pvgroup_4name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_7pvgroup_4name___get__(((struct __pyx_obj_6PyCafe_pvgroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_7pvgroup_4name___get__(struct __pyx_obj_6PyCafe_pvgroup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_self->name); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.pvgroup.name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":562
 * 	cdef readonly unsigned int npv
 * 	cdef readonly string name
 * 	cdef readonly int  groupStatus             # <<<<<<<<<<<<<<
 * 	cdef readonly unsigned int groupHandle
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_7pvgroup_11groupStatus_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_7pvgroup_11groupStatus_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_7pvgroup_11groupStatus___get__(((struct __pyx_obj_6PyCafe_pvgroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_7pvgroup_11groupStatus___get__(struct __pyx_obj_6PyCafe_pvgroup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->groupStatus); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.pvgroup.groupStatus.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":563
 * 	cdef readonly string name
 * 	cdef readonly int  groupStatus
 * 	cdef readonly unsigned int groupHandle             # <<<<<<<<<<<<<<
 * 
 * 	def __cinit__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_7pvgroup_11groupHandle_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6PyCafe_7pvgroup_11groupHandle_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_7pvgroup_11groupHandle___get__(((struct __pyx_obj_6PyCafe_pvgroup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_7pvgroup_11groupHandle___get__(struct __pyx_obj_6PyCafe_pvgroup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->groupHandle); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.pvgroup.groupHandle.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":647
 * 
 * ##################################################################################
 * cdef getMatchedDataType(dt, dtn):             # <<<<<<<<<<<<<<
 * 	#dt: input from user
 * 	#dtn: native type
 */

static PyObject *__pyx_f_6PyCafe_getMatchedDataType(PyObject *__pyx_v_dt, PyObject *__pyx_v_dtn) {
  unsigned int __pyx_v_dtcheck;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMatchedDataType", 0);

  /* "PyCafeDefs.pxi":652
 * 	#dtcheck: matching data type for pvd convert method
 * 
 * 	cdef unsigned int dtcheck=dtn;             # <<<<<<<<<<<<<<
 * 
 * 	if dt in ['int','long','short','uint','ulong','ushort','int32','int64','uint32','uint64']:
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_dtn); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_dtcheck = __pyx_t_1;

  /* "PyCafeDefs.pxi":654
 * 	cdef unsigned int dtcheck=dtn;
 * 
 * 	if dt in ['int','long','short','uint','ulong','ushort','int32','int64','uint32','uint64']:             # <<<<<<<<<<<<<<
 * 		dtcheck=CAFE_LONG
 * 	elif dt=='double':
 */
  __Pyx_INCREF(__pyx_v_dt);
  __pyx_t_2 = __pyx_v_dt;
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_int, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_long, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_short, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_uint, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_ulong, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_ushort, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_int32, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_int64, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_uint32, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_uint64, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "PyCafeDefs.pxi":655
 * 
 * 	if dt in ['int','long','short','uint','ulong','ushort','int32','int64','uint32','uint64']:
 * 		dtcheck=CAFE_LONG             # <<<<<<<<<<<<<<
 * 	elif dt=='double':
 * 		dtcheck=CAFE_DOUBLE
 */
    __pyx_v_dtcheck = CAFE_LONG;

    /* "PyCafeDefs.pxi":654
 * 	cdef unsigned int dtcheck=dtn;
 * 
 * 	if dt in ['int','long','short','uint','ulong','ushort','int32','int64','uint32','uint64']:             # <<<<<<<<<<<<<<
 * 		dtcheck=CAFE_LONG
 * 	elif dt=='double':
 */
    goto __pyx_L3;
  }

  /* "PyCafeDefs.pxi":656
 * 	if dt in ['int','long','short','uint','ulong','ushort','int32','int64','uint32','uint64']:
 * 		dtcheck=CAFE_LONG
 * 	elif dt=='double':             # <<<<<<<<<<<<<<
 * 		dtcheck=CAFE_DOUBLE
 * 	elif dt=='float':
 */
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_v_dt, __pyx_n_u_double, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_4) {

    /* "PyCafeDefs.pxi":657
 * 		dtcheck=CAFE_LONG
 * 	elif dt=='double':
 * 		dtcheck=CAFE_DOUBLE             # <<<<<<<<<<<<<<
 * 	elif dt=='float':
 * 		dtcheck=CAFE_DOUBLE
 */
    __pyx_v_dtcheck = CAFE_DOUBLE;

    /* "PyCafeDefs.pxi":656
 * 	if dt in ['int','long','short','uint','ulong','ushort','int32','int64','uint32','uint64']:
 * 		dtcheck=CAFE_LONG
 * 	elif dt=='double':             # <<<<<<<<<<<<<<
 * 		dtcheck=CAFE_DOUBLE
 * 	elif dt=='float':
 */
    goto __pyx_L3;
  }

  /* "PyCafeDefs.pxi":658
 * 	elif dt=='double':
 * 		dtcheck=CAFE_DOUBLE
 * 	elif dt=='float':             # <<<<<<<<<<<<<<
 * 		dtcheck=CAFE_DOUBLE
 * 	elif dt in ['string','str']:
 */
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_v_dt, __pyx_n_u_float, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_4) {

    /* "PyCafeDefs.pxi":659
 * 		dtcheck=CAFE_DOUBLE
 * 	elif dt=='float':
 * 		dtcheck=CAFE_DOUBLE             # <<<<<<<<<<<<<<
 * 	elif dt in ['string','str']:
 * 		dtcheck=CAFE_STRING
 */
    __pyx_v_dtcheck = CAFE_DOUBLE;

    /* "PyCafeDefs.pxi":658
 * 	elif dt=='double':
 * 		dtcheck=CAFE_DOUBLE
 * 	elif dt=='float':             # <<<<<<<<<<<<<<
 * 		dtcheck=CAFE_DOUBLE
 * 	elif dt in ['string','str']:
 */
    goto __pyx_L3;
  }

  /* "PyCafeDefs.pxi":660
 * 	elif dt=='float':
 * 		dtcheck=CAFE_DOUBLE
 * 	elif dt in ['string','str']:             # <<<<<<<<<<<<<<
 * 		dtcheck=CAFE_STRING
 * 	elif dt in ['native','']:
 */
  __Pyx_INCREF(__pyx_v_dt);
  __pyx_t_2 = __pyx_v_dt;
  __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_string, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (!__pyx_t_3) {
  } else {
    __pyx_t_4 = __pyx_t_3;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_str, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __pyx_t_3;
  __pyx_L14_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (__pyx_t_3) {

    /* "PyCafeDefs.pxi":661
 * 		dtcheck=CAFE_DOUBLE
 * 	elif dt in ['string','str']:
 * 		dtcheck=CAFE_STRING             # <<<<<<<<<<<<<<
 * 	elif dt in ['native','']:
 * 		dtcheck=dtn		#need a line here
 */
    __pyx_v_dtcheck = CAFE_STRING;

    /* "PyCafeDefs.pxi":660
 * 	elif dt=='float':
 * 		dtcheck=CAFE_DOUBLE
 * 	elif dt in ['string','str']:             # <<<<<<<<<<<<<<
 * 		dtcheck=CAFE_STRING
 * 	elif dt in ['native','']:
 */
    goto __pyx_L3;
  }

  /* "PyCafeDefs.pxi":662
 * 	elif dt in ['string','str']:
 * 		dtcheck=CAFE_STRING
 * 	elif dt in ['native','']:             # <<<<<<<<<<<<<<
 * 		dtcheck=dtn		#need a line here
 * 	else:
 */
  __Pyx_INCREF(__pyx_v_dt);
  __pyx_t_2 = __pyx_v_dt;
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_native, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L16_bool_binop_done;
  }
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_kp_u__85, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __pyx_t_4;
  __pyx_L16_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "PyCafeDefs.pxi":663
 * 		dtcheck=CAFE_STRING
 * 	elif dt in ['native','']:
 * 		dtcheck=dtn		#need a line here             # <<<<<<<<<<<<<<
 * 	else:
 * 		print ("Valid input parameters for data type are: 'int', 'float', 'str', or 'native'")
 */
    __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_dtn); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_dtcheck = __pyx_t_1;

    /* "PyCafeDefs.pxi":662
 * 	elif dt in ['string','str']:
 * 		dtcheck=CAFE_STRING
 * 	elif dt in ['native','']:             # <<<<<<<<<<<<<<
 * 		dtcheck=dtn		#need a line here
 * 	else:
 */
    goto __pyx_L3;
  }

  /* "PyCafeDefs.pxi":665
 * 		dtcheck=dtn		#need a line here
 * 	else:
 * 		print ("Valid input parameters for data type are: 'int', 'float', 'str', or 'native'")             # <<<<<<<<<<<<<<
 * 		print ("Data to be presented in native data type")
 * 
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__104, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "PyCafeDefs.pxi":666
 * 	else:
 * 		print ("Valid input parameters for data type are: 'int', 'float', 'str', or 'native'")
 * 		print ("Data to be presented in native data type")             # <<<<<<<<<<<<<<
 * 
 * 	return dtcheck
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__105, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "PyCafeDefs.pxi":668
 * 		print ("Data to be presented in native data type")
 * 
 * 	return dtcheck             # <<<<<<<<<<<<<<
 * ##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_dtcheck); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 668; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PyCafeDefs.pxi":647
 * 
 * ##################################################################################
 * cdef getMatchedDataType(dt, dtn):             # <<<<<<<<<<<<<<
 * 	#dt: input from user
 * 	#dtn: native type
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PyCafe.getMatchedDataType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":681
 * #################################################################################
 * 
 * cdef pvdata	PVDataHolderToStruct(PVDataHolder pvd, dt=None):             # <<<<<<<<<<<<<<
 * 
 * 	#global p1
 */

static struct __pyx_obj_6PyCafe_pvdata *__pyx_f_6PyCafe_PVDataHolderToStruct(PVDataHolder __pyx_v_pvd, struct __pyx_opt_args_6PyCafe_PVDataHolderToStruct *__pyx_optional_args) {
  PyObject *__pyx_v_dt = ((PyObject *)Py_None);
  struct __pyx_obj_6PyCafe_pvdata *__pyx_v_p1 = 0;
  unsigned int __pyx_v_dtn;
  unsigned int __pyx_v_dtcheck;
  PyObject *__pyx_v_localList = 0;
  long __pyx_v_i;
  PyObject *__pyx_v_ll = 0;
  PyObject *__pyx_v_ld = 0;
  struct __pyx_obj_6PyCafe_pvdata *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  long __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PVDataHolderToStruct", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_dt = __pyx_optional_args->dt;
    }
  }

  /* "PyCafeDefs.pxi":684
 * 
 * 	#global p1
 * 	cdef pvdata  p1 = pvdata()             # <<<<<<<<<<<<<<
 * 
 * 	cdef unsigned int dtn = pvd.getDataType();
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6PyCafe_pvdata), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_p1 = ((struct __pyx_obj_6PyCafe_pvdata *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":686
 * 	cdef pvdata  p1 = pvdata()
 * 
 * 	cdef unsigned int dtn = pvd.getDataType();             # <<<<<<<<<<<<<<
 * 	cdef unsigned int dtcheck=dtn
 * 	cdef localList=[]
 */
  __pyx_v_dtn = __pyx_v_pvd.getDataType();

  /* "PyCafeDefs.pxi":687
 * 
 * 	cdef unsigned int dtn = pvd.getDataType();
 * 	cdef unsigned int dtcheck=dtn             # <<<<<<<<<<<<<<
 * 	cdef localList=[]
 * 
 */
  __pyx_v_dtcheck = __pyx_v_dtn;

  /* "PyCafeDefs.pxi":688
 * 	cdef unsigned int dtn = pvd.getDataType();
 * 	cdef unsigned int dtcheck=dtn
 * 	cdef localList=[]             # <<<<<<<<<<<<<<
 * 
 * 	if dt:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_localList = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":690
 * 	cdef localList=[]
 * 
 * 	if dt:             # <<<<<<<<<<<<<<
 * 		dtcheck=getMatchedDataType(dt, dtn)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_dt); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {

    /* "PyCafeDefs.pxi":691
 * 
 * 	if dt:
 * 		dtcheck=getMatchedDataType(dt, dtn)             # <<<<<<<<<<<<<<
 * 
 * 	if dtcheck==CAFE_STRING:
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_dtn); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_f_6PyCafe_getMatchedDataType(__pyx_v_dt, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_dtcheck = __pyx_t_4;

    /* "PyCafeDefs.pxi":690
 * 	cdef localList=[]
 * 
 * 	if dt:             # <<<<<<<<<<<<<<
 * 		dtcheck=getMatchedDataType(dt, dtn)
 * 
 */
  }

  /* "PyCafeDefs.pxi":693
 * 		dtcheck=getMatchedDataType(dt, dtn)
 * 
 * 	if dtcheck==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsString(i))
 */
  switch (__pyx_v_dtcheck) {
    case CAFE_STRING:

    /* "PyCafeDefs.pxi":694
 * 
 * 	if dtcheck==CAFE_STRING:
 * 		for i in range(0, pvd.getNelem()):             # <<<<<<<<<<<<<<
 * 			localList.append(pvd.getAsString(i))
 * 	elif dtcheck==CAFE_SHORT:
 */
    __pyx_t_4 = __pyx_v_pvd.getNelem();
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "PyCafeDefs.pxi":695
 * 	if dtcheck==CAFE_STRING:
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsString(i))             # <<<<<<<<<<<<<<
 * 	elif dtcheck==CAFE_SHORT:
 * 		for i in range(0, pvd.getNelem()):
 */
      __pyx_t_3 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_pvd.getAsString(__pyx_v_i)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_localList, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }

    /* "PyCafeDefs.pxi":693
 * 		dtcheck=getMatchedDataType(dt, dtn)
 * 
 * 	if dtcheck==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsString(i))
 */
    break;

    /* "PyCafeDefs.pxi":696
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsString(i))
 * 	elif dtcheck==CAFE_SHORT:             # <<<<<<<<<<<<<<
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsLong(i))		#getAsShort(i)
 */
    case CAFE_SHORT:

    /* "PyCafeDefs.pxi":697
 * 			localList.append(pvd.getAsString(i))
 * 	elif dtcheck==CAFE_SHORT:
 * 		for i in range(0, pvd.getNelem()):             # <<<<<<<<<<<<<<
 * 			localList.append(pvd.getAsLong(i))		#getAsShort(i)
 * 	elif dtcheck==CAFE_FLOAT:
 */
    __pyx_t_4 = __pyx_v_pvd.getNelem();
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "PyCafeDefs.pxi":698
 * 	elif dtcheck==CAFE_SHORT:
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsLong(i))		#getAsShort(i)             # <<<<<<<<<<<<<<
 * 	elif dtcheck==CAFE_FLOAT:
 * 		for i in range(0, pvd.getNelem()):
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_pvd.getAsLong(__pyx_v_i)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_localList, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }

    /* "PyCafeDefs.pxi":696
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsString(i))
 * 	elif dtcheck==CAFE_SHORT:             # <<<<<<<<<<<<<<
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsLong(i))		#getAsShort(i)
 */
    break;

    /* "PyCafeDefs.pxi":699
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsLong(i))		#getAsShort(i)
 * 	elif dtcheck==CAFE_FLOAT:             # <<<<<<<<<<<<<<
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsDouble(i))	 #getAsFloat(i)
 */
    case CAFE_FLOAT:

    /* "PyCafeDefs.pxi":700
 * 			localList.append(pvd.getAsLong(i))		#getAsShort(i)
 * 	elif dtcheck==CAFE_FLOAT:
 * 		for i in range(0, pvd.getNelem()):             # <<<<<<<<<<<<<<
 * 			localList.append(pvd.getAsDouble(i))	 #getAsFloat(i)
 * 	elif dtcheck==CAFE_ENUM:
 */
    __pyx_t_4 = __pyx_v_pvd.getNelem();
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "PyCafeDefs.pxi":701
 * 	elif dtcheck==CAFE_FLOAT:
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsDouble(i))	 #getAsFloat(i)             # <<<<<<<<<<<<<<
 * 	elif dtcheck==CAFE_ENUM:
 * 		#if enum, string taken as native
 */
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_pvd.getAsDouble(__pyx_v_i)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_localList, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }

    /* "PyCafeDefs.pxi":699
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsLong(i))		#getAsShort(i)
 * 	elif dtcheck==CAFE_FLOAT:             # <<<<<<<<<<<<<<
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsDouble(i))	 #getAsFloat(i)
 */
    break;

    /* "PyCafeDefs.pxi":702
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsDouble(i))	 #getAsFloat(i)
 * 	elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 		#if enum, string taken as native
 * 		#if self._c_cafe.isEnum(handle)==1:
 */
    case CAFE_ENUM:

    /* "PyCafeDefs.pxi":705
 * 		#if enum, string taken as native
 * 		#if self._c_cafe.isEnum(handle)==1:
 * 		for i in range(0, pvd.getNelem()):             # <<<<<<<<<<<<<<
 * 			localList.append(pvd.getAsString(i))
 * 		#else:
 */
    __pyx_t_4 = __pyx_v_pvd.getNelem();
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "PyCafeDefs.pxi":706
 * 		#if self._c_cafe.isEnum(handle)==1:
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsString(i))             # <<<<<<<<<<<<<<
 * 		#else:
 * 		#	for i in range(0, pvd.getNelem()):
 */
      __pyx_t_3 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_pvd.getAsString(__pyx_v_i)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_localList, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }

    /* "PyCafeDefs.pxi":702
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsDouble(i))	 #getAsFloat(i)
 * 	elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 		#if enum, string taken as native
 * 		#if self._c_cafe.isEnum(handle)==1:
 */
    break;

    /* "PyCafeDefs.pxi":710
 * 		#	for i in range(0, pvd.getNelem()):
 * 		#		localList.append(pvd.getAsLong(i)) #getAsUShort(i)
 * 	elif dtcheck==CAFE_CHAR:             # <<<<<<<<<<<<<<
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsLong(i)) # <unsigned char> pvd.getAsChar(i)
 */
    case CAFE_CHAR:

    /* "PyCafeDefs.pxi":711
 * 		#		localList.append(pvd.getAsLong(i)) #getAsUShort(i)
 * 	elif dtcheck==CAFE_CHAR:
 * 		for i in range(0, pvd.getNelem()):             # <<<<<<<<<<<<<<
 * 			localList.append(pvd.getAsLong(i)) # <unsigned char> pvd.getAsChar(i)
 * 	elif dtcheck==CAFE_LONG:
 */
    __pyx_t_4 = __pyx_v_pvd.getNelem();
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "PyCafeDefs.pxi":712
 * 	elif dtcheck==CAFE_CHAR:
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsLong(i)) # <unsigned char> pvd.getAsChar(i)             # <<<<<<<<<<<<<<
 * 	elif dtcheck==CAFE_LONG:
 * 		for i in range(0, pvd.getNelem()):
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_pvd.getAsLong(__pyx_v_i)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_localList, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }

    /* "PyCafeDefs.pxi":710
 * 		#	for i in range(0, pvd.getNelem()):
 * 		#		localList.append(pvd.getAsLong(i)) #getAsUShort(i)
 * 	elif dtcheck==CAFE_CHAR:             # <<<<<<<<<<<<<<
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsLong(i)) # <unsigned char> pvd.getAsChar(i)
 */
    break;

    /* "PyCafeDefs.pxi":713
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsLong(i)) # <unsigned char> pvd.getAsChar(i)
 * 	elif dtcheck==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsLong(i))
 */
    case CAFE_LONG:

    /* "PyCafeDefs.pxi":714
 * 			localList.append(pvd.getAsLong(i)) # <unsigned char> pvd.getAsChar(i)
 * 	elif dtcheck==CAFE_LONG:
 * 		for i in range(0, pvd.getNelem()):             # <<<<<<<<<<<<<<
 * 			localList.append(pvd.getAsLong(i))
 * 	elif dtcheck==CAFE_DOUBLE:
 */
    __pyx_t_4 = __pyx_v_pvd.getNelem();
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "PyCafeDefs.pxi":715
 * 	elif dtcheck==CAFE_LONG:
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsLong(i))             # <<<<<<<<<<<<<<
 * 	elif dtcheck==CAFE_DOUBLE:
 * 		for i in range(0, pvd.getNelem()):
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_pvd.getAsLong(__pyx_v_i)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_localList, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }

    /* "PyCafeDefs.pxi":713
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsLong(i)) # <unsigned char> pvd.getAsChar(i)
 * 	elif dtcheck==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsLong(i))
 */
    break;

    /* "PyCafeDefs.pxi":716
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsLong(i))
 * 	elif dtcheck==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsDouble(i))
 */
    case CAFE_DOUBLE:

    /* "PyCafeDefs.pxi":717
 * 			localList.append(pvd.getAsLong(i))
 * 	elif dtcheck==CAFE_DOUBLE:
 * 		for i in range(0, pvd.getNelem()):             # <<<<<<<<<<<<<<
 * 			localList.append(pvd.getAsDouble(i))
 * 	else:
 */
    __pyx_t_4 = __pyx_v_pvd.getNelem();
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "PyCafeDefs.pxi":718
 * 	elif dtcheck==CAFE_DOUBLE:
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsDouble(i))             # <<<<<<<<<<<<<<
 * 	else:
 * 		localList.append(0)
 */
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_pvd.getAsDouble(__pyx_v_i)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_localList, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }

    /* "PyCafeDefs.pxi":716
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsLong(i))
 * 	elif dtcheck==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 		for i in range(0, pvd.getNelem()):
 * 			localList.append(pvd.getAsDouble(i))
 */
    break;
    default:

    /* "PyCafeDefs.pxi":720
 * 			localList.append(pvd.getAsDouble(i))
 * 	else:
 * 		localList.append(0)             # <<<<<<<<<<<<<<
 * 		#print ("This line in PyCafe def getDataHolderToStruct should never appear!"
 * 		#print ("No Data! Error. Is channel connected?"
 */
    __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_localList, __pyx_int_0); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    break;
  }

  /* "PyCafeDefs.pxi":724
 * 		#print ("No Data! Error. Is channel connected?"
 * 
 * 	p1.value=localList             # <<<<<<<<<<<<<<
 * 	p1.status=pvd.getStatus()
 * 	p1.nelem=pvd.getNelem()
 */
  if (!(likely(PyList_CheckExact(__pyx_v_localList))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_localList)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __pyx_v_localList;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_p1->value);
  __Pyx_DECREF(__pyx_v_p1->value);
  __pyx_v_p1->value = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "PyCafeDefs.pxi":725
 * 
 * 	p1.value=localList
 * 	p1.status=pvd.getStatus()             # <<<<<<<<<<<<<<
 * 	p1.nelem=pvd.getNelem()
 * 	p1.alarmStatus=pvd.getAlarmStatus()
 */
  __pyx_v_p1->status = __pyx_v_pvd.getStatus();

  /* "PyCafeDefs.pxi":726
 * 	p1.value=localList
 * 	p1.status=pvd.getStatus()
 * 	p1.nelem=pvd.getNelem()             # <<<<<<<<<<<<<<
 * 	p1.alarmStatus=pvd.getAlarmStatus()
 * 	p1.alarmSeverity=pvd.getAlarmSeverity()
 */
  __pyx_v_p1->nelem = __pyx_v_pvd.getNelem();

  /* "PyCafeDefs.pxi":727
 * 	p1.status=pvd.getStatus()
 * 	p1.nelem=pvd.getNelem()
 * 	p1.alarmStatus=pvd.getAlarmStatus()             # <<<<<<<<<<<<<<
 * 	p1.alarmSeverity=pvd.getAlarmSeverity()
 * 
 */
  __pyx_v_p1->alarmStatus = __pyx_v_pvd.getAlarmStatus();

  /* "PyCafeDefs.pxi":728
 * 	p1.nelem=pvd.getNelem()
 * 	p1.alarmStatus=pvd.getAlarmStatus()
 * 	p1.alarmSeverity=pvd.getAlarmSeverity()             # <<<<<<<<<<<<<<
 * 
 * 	pvd._etsNorm=pvd.getEpicsTimeStampAsUInt32()
 */
  __pyx_v_p1->alarmSeverity = __pyx_v_pvd.getAlarmSeverity();

  /* "PyCafeDefs.pxi":730
 * 	p1.alarmSeverity=pvd.getAlarmSeverity()
 * 
 * 	pvd._etsNorm=pvd.getEpicsTimeStampAsUInt32()             # <<<<<<<<<<<<<<
 * 
 * 	cpdef ll=[]
 */
  __pyx_v_pvd._etsNorm = __pyx_v_pvd.getEpicsTimeStampAsUInt32();

  /* "PyCafeDefs.pxi":732
 * 	pvd._etsNorm=pvd.getEpicsTimeStampAsUInt32()
 * 
 * 	cpdef ll=[]             # <<<<<<<<<<<<<<
 * 	ll.append((pvd._etsNorm).secPastEpoch)
 * 	ll.append((pvd._etsNorm).nsec)
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 732; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_ll = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "PyCafeDefs.pxi":733
 * 
 * 	cpdef ll=[]
 * 	ll.append((pvd._etsNorm).secPastEpoch)             # <<<<<<<<<<<<<<
 * 	ll.append((pvd._etsNorm).nsec)
 * 	p1.ts=ll
 */
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_v_pvd._etsNorm.secPastEpoch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_ll, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "PyCafeDefs.pxi":734
 * 	cpdef ll=[]
 * 	ll.append((pvd._etsNorm).secPastEpoch)
 * 	ll.append((pvd._etsNorm).nsec)             # <<<<<<<<<<<<<<
 * 	p1.ts=ll
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_v_pvd._etsNorm.nsec); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_ll, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "PyCafeDefs.pxi":735
 * 	ll.append((pvd._etsNorm).secPastEpoch)
 * 	ll.append((pvd._etsNorm).nsec)
 * 	p1.ts=ll             # <<<<<<<<<<<<<<
 * 
 * 	pvd._etsDate=pvd.getEpicsTimeStampAsDate()
 */
  if (!(likely(PyList_CheckExact(__pyx_v_ll))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_ll)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __pyx_v_ll;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_p1->ts);
  __Pyx_DECREF(__pyx_v_p1->ts);
  __pyx_v_p1->ts = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "PyCafeDefs.pxi":737
 * 	p1.ts=ll
 * 
 * 	pvd._etsDate=pvd.getEpicsTimeStampAsDate()             # <<<<<<<<<<<<<<
 * 
 * 	cpdef ld=[]
 */
  __pyx_v_pvd._etsDate = __pyx_v_pvd.getEpicsTimeStampAsDate();

  /* "PyCafeDefs.pxi":739
 * 	pvd._etsDate=pvd.getEpicsTimeStampAsDate()
 * 
 * 	cpdef ld=[]             # <<<<<<<<<<<<<<
 * 	ld.append( (pvd._etsDate).year )
 * 	ld.append( (pvd._etsDate).mon )
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_ld = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "PyCafeDefs.pxi":740
 * 
 * 	cpdef ld=[]
 * 	ld.append( (pvd._etsDate).year )             # <<<<<<<<<<<<<<
 * 	ld.append( (pvd._etsDate).mon )
 * 	ld.append( (pvd._etsDate).day )
 */
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_short(__pyx_v_pvd._etsDate.year); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_ld, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "PyCafeDefs.pxi":741
 * 	cpdef ld=[]
 * 	ld.append( (pvd._etsDate).year )
 * 	ld.append( (pvd._etsDate).mon )             # <<<<<<<<<<<<<<
 * 	ld.append( (pvd._etsDate).day )
 * 	ld.append( (pvd._etsDate).hour )
 */
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_short(__pyx_v_pvd._etsDate.mon); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_ld, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "PyCafeDefs.pxi":742
 * 	ld.append( (pvd._etsDate).year )
 * 	ld.append( (pvd._etsDate).mon )
 * 	ld.append( (pvd._etsDate).day )             # <<<<<<<<<<<<<<
 * 	ld.append( (pvd._etsDate).hour )
 * 	ld.append( (pvd._etsDate).min )
 */
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_short(__pyx_v_pvd._etsDate.day); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_ld, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "PyCafeDefs.pxi":743
 * 	ld.append( (pvd._etsDate).mon )
 * 	ld.append( (pvd._etsDate).day )
 * 	ld.append( (pvd._etsDate).hour )             # <<<<<<<<<<<<<<
 * 	ld.append( (pvd._etsDate).min )
 * 	ld.append( (pvd._etsDate).sec )
 */
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_short(__pyx_v_pvd._etsDate.hour); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_ld, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "PyCafeDefs.pxi":744
 * 	ld.append( (pvd._etsDate).day )
 * 	ld.append( (pvd._etsDate).hour )
 * 	ld.append( (pvd._etsDate).min )             # <<<<<<<<<<<<<<
 * 	ld.append( (pvd._etsDate).sec )
 * 	ld.append( (pvd._etsDate).nsec )
 */
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_short(__pyx_v_pvd._etsDate.min); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_ld, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "PyCafeDefs.pxi":745
 * 	ld.append( (pvd._etsDate).hour )
 * 	ld.append( (pvd._etsDate).min )
 * 	ld.append( (pvd._etsDate).sec )             # <<<<<<<<<<<<<<
 * 	ld.append( (pvd._etsDate).nsec )
 * 	p1.tsDate=ld
 */
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_short(__pyx_v_pvd._etsDate.sec); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_ld, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "PyCafeDefs.pxi":746
 * 	ld.append( (pvd._etsDate).min )
 * 	ld.append( (pvd._etsDate).sec )
 * 	ld.append( (pvd._etsDate).nsec )             # <<<<<<<<<<<<<<
 * 	p1.tsDate=ld
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_v_pvd._etsDate.nsec); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_ld, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "PyCafeDefs.pxi":747
 * 	ld.append( (pvd._etsDate).sec )
 * 	ld.append( (pvd._etsDate).nsec )
 * 	p1.tsDate=ld             # <<<<<<<<<<<<<<
 * 
 * 	return p1
 */
  if (!(likely(PyList_CheckExact(__pyx_v_ld))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_ld)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __pyx_v_ld;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_p1->tsDate);
  __Pyx_DECREF(__pyx_v_p1->tsDate);
  __pyx_v_p1->tsDate = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "PyCafeDefs.pxi":749
 * 	p1.tsDate=ld
 * 
 * 	return p1             # <<<<<<<<<<<<<<
 * ##################################################################################
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_p1));
  __pyx_r = __pyx_v_p1;
  goto __pyx_L0;

  /* "PyCafeDefs.pxi":681
 * #################################################################################
 * 
 * cdef pvdata	PVDataHolderToStruct(PVDataHolder pvd, dt=None):             # <<<<<<<<<<<<<<
 * 
 * 	#global p1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("PyCafe.PVDataHolderToStruct", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p1);
  __Pyx_XDECREF(__pyx_v_localList);
  __Pyx_XDECREF(__pyx_v_ll);
  __Pyx_XDECREF(__pyx_v_ld);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":756
 * #################################################################################
 * 
 * cdef pvctrl	PVCtrlHolderToStruct(PVCtrlHolder pvc, dt=None):             # <<<<<<<<<<<<<<
 * 
 * 	#global c1
 */

static struct __pyx_obj_6PyCafe_pvctrl *__pyx_f_6PyCafe_PVCtrlHolderToStruct(PVCtrlHolder __pyx_v_pvc, struct __pyx_opt_args_6PyCafe_PVCtrlHolderToStruct *__pyx_optional_args) {
  PyObject *__pyx_v_dt = ((PyObject *)Py_None);
  struct __pyx_obj_6PyCafe_pvctrl *__pyx_v_c1 = 0;
  unsigned int __pyx_v_dtn;
  unsigned int __pyx_v_dtcheck;
  PyObject *__pyx_v_localList = 0;
  long __pyx_v_i;
  PyObject *__pyx_v_enumList = NULL;
  struct __pyx_obj_6PyCafe_pvctrl *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  long __pyx_t_5;
  int __pyx_t_6;
  short __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PVCtrlHolderToStruct", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_dt = __pyx_optional_args->dt;
    }
  }

  /* "PyCafeDefs.pxi":759
 * 
 * 	#global c1
 * 	cdef pvctrl c1 = pvctrl()             # <<<<<<<<<<<<<<
 * 
 * 	cdef unsigned int dtn = pvc.getDataType();
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6PyCafe_pvctrl), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 759; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_c1 = ((struct __pyx_obj_6PyCafe_pvctrl *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":761
 * 	cdef pvctrl c1 = pvctrl()
 * 
 * 	cdef unsigned int dtn = pvc.getDataType();             # <<<<<<<<<<<<<<
 * 
 * 	cdef unsigned int dtcheck=dtn
 */
  __pyx_v_dtn = __pyx_v_pvc.getDataType();

  /* "PyCafeDefs.pxi":763
 * 	cdef unsigned int dtn = pvc.getDataType();
 * 
 * 	cdef unsigned int dtcheck=dtn             # <<<<<<<<<<<<<<
 * 
 * 	cdef localList=[]
 */
  __pyx_v_dtcheck = __pyx_v_dtn;

  /* "PyCafeDefs.pxi":765
 * 	cdef unsigned int dtcheck=dtn
 * 
 * 	cdef localList=[]             # <<<<<<<<<<<<<<
 * 
 * 	if dt:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_localList = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":767
 * 	cdef localList=[]
 * 
 * 	if dt:             # <<<<<<<<<<<<<<
 * 		dtcheck=getMatchedDataType(dt, dtn)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_dt); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {

    /* "PyCafeDefs.pxi":768
 * 
 * 	if dt:
 * 		dtcheck=getMatchedDataType(dt, dtn)             # <<<<<<<<<<<<<<
 * 
 * 	if dtcheck==CAFE_STRING:
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_dtn); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_f_6PyCafe_getMatchedDataType(__pyx_v_dt, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_dtcheck = __pyx_t_4;

    /* "PyCafeDefs.pxi":767
 * 	cdef localList=[]
 * 
 * 	if dt:             # <<<<<<<<<<<<<<
 * 		dtcheck=getMatchedDataType(dt, dtn)
 * 
 */
  }

  /* "PyCafeDefs.pxi":770
 * 		dtcheck=getMatchedDataType(dt, dtn)
 * 
 * 	if dtcheck==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsString(i))
 */
  switch (__pyx_v_dtcheck) {
    case CAFE_STRING:

    /* "PyCafeDefs.pxi":771
 * 
 * 	if dtcheck==CAFE_STRING:
 * 		for i in range(0, pvc.getNelem()):             # <<<<<<<<<<<<<<
 * 			localList.append(pvc.getAsString(i))
 * 	elif dtcheck==CAFE_SHORT:
 */
    __pyx_t_4 = __pyx_v_pvc.getNelem();
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "PyCafeDefs.pxi":772
 * 	if dtcheck==CAFE_STRING:
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsString(i))             # <<<<<<<<<<<<<<
 * 	elif dtcheck==CAFE_SHORT:
 * 		for i in range(0, pvc.getNelem()):
 */
      __pyx_t_3 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_pvc.getAsString(__pyx_v_i)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_localList, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }

    /* "PyCafeDefs.pxi":770
 * 		dtcheck=getMatchedDataType(dt, dtn)
 * 
 * 	if dtcheck==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsString(i))
 */
    break;

    /* "PyCafeDefs.pxi":773
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsString(i))
 * 	elif dtcheck==CAFE_SHORT:             # <<<<<<<<<<<<<<
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsLong(i))		#getAsShort(i)
 */
    case CAFE_SHORT:

    /* "PyCafeDefs.pxi":774
 * 			localList.append(pvc.getAsString(i))
 * 	elif dtcheck==CAFE_SHORT:
 * 		for i in range(0, pvc.getNelem()):             # <<<<<<<<<<<<<<
 * 			localList.append(pvc.getAsLong(i))		#getAsShort(i)
 * 	elif dtcheck==CAFE_FLOAT:
 */
    __pyx_t_4 = __pyx_v_pvc.getNelem();
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "PyCafeDefs.pxi":775
 * 	elif dtcheck==CAFE_SHORT:
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsLong(i))		#getAsShort(i)             # <<<<<<<<<<<<<<
 * 	elif dtcheck==CAFE_FLOAT:
 * 		for i in range(0, pvc.getNelem()):
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_pvc.getAsLong(__pyx_v_i)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_localList, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }

    /* "PyCafeDefs.pxi":773
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsString(i))
 * 	elif dtcheck==CAFE_SHORT:             # <<<<<<<<<<<<<<
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsLong(i))		#getAsShort(i)
 */
    break;

    /* "PyCafeDefs.pxi":776
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsLong(i))		#getAsShort(i)
 * 	elif dtcheck==CAFE_FLOAT:             # <<<<<<<<<<<<<<
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsDouble(i))	 #getAsFloat(i)
 */
    case CAFE_FLOAT:

    /* "PyCafeDefs.pxi":777
 * 			localList.append(pvc.getAsLong(i))		#getAsShort(i)
 * 	elif dtcheck==CAFE_FLOAT:
 * 		for i in range(0, pvc.getNelem()):             # <<<<<<<<<<<<<<
 * 			localList.append(pvc.getAsDouble(i))	 #getAsFloat(i)
 * 	elif dtcheck==CAFE_ENUM:
 */
    __pyx_t_4 = __pyx_v_pvc.getNelem();
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "PyCafeDefs.pxi":778
 * 	elif dtcheck==CAFE_FLOAT:
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsDouble(i))	 #getAsFloat(i)             # <<<<<<<<<<<<<<
 * 	elif dtcheck==CAFE_ENUM:
 * 		#if enum, string taken as native
 */
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_pvc.getAsDouble(__pyx_v_i)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_localList, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }

    /* "PyCafeDefs.pxi":776
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsLong(i))		#getAsShort(i)
 * 	elif dtcheck==CAFE_FLOAT:             # <<<<<<<<<<<<<<
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsDouble(i))	 #getAsFloat(i)
 */
    break;

    /* "PyCafeDefs.pxi":779
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsDouble(i))	 #getAsFloat(i)
 * 	elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 		#if enum, string taken as native
 * 		#if self._c_cafe.isEnum(handle)==1:
 */
    case CAFE_ENUM:

    /* "PyCafeDefs.pxi":782
 * 		#if enum, string taken as native
 * 		#if self._c_cafe.isEnum(handle)==1:
 * 		for i in range(0, pvc.getNelem()):             # <<<<<<<<<<<<<<
 * 			localList.append(pvc.getAsString(i))
 * 		#else:
 */
    __pyx_t_4 = __pyx_v_pvc.getNelem();
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "PyCafeDefs.pxi":783
 * 		#if self._c_cafe.isEnum(handle)==1:
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsString(i))             # <<<<<<<<<<<<<<
 * 		#else:
 * 		#	for i in range(0, pvd.getNelem()):
 */
      __pyx_t_3 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_pvc.getAsString(__pyx_v_i)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 783; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_localList, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 783; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }

    /* "PyCafeDefs.pxi":779
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsDouble(i))	 #getAsFloat(i)
 * 	elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 		#if enum, string taken as native
 * 		#if self._c_cafe.isEnum(handle)==1:
 */
    break;

    /* "PyCafeDefs.pxi":787
 * 		#	for i in range(0, pvd.getNelem()):
 * 		#		localList.append(pvd.getAsLong(i)) #getAsUShort(i)
 * 	elif dtcheck==CAFE_CHAR:             # <<<<<<<<<<<<<<
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsLong(i)) # <unsigned char> pvd.getAsChar(i)
 */
    case CAFE_CHAR:

    /* "PyCafeDefs.pxi":788
 * 		#		localList.append(pvd.getAsLong(i)) #getAsUShort(i)
 * 	elif dtcheck==CAFE_CHAR:
 * 		for i in range(0, pvc.getNelem()):             # <<<<<<<<<<<<<<
 * 			localList.append(pvc.getAsLong(i)) # <unsigned char> pvd.getAsChar(i)
 * 	elif dtcheck==CAFE_LONG:
 */
    __pyx_t_4 = __pyx_v_pvc.getNelem();
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "PyCafeDefs.pxi":789
 * 	elif dtcheck==CAFE_CHAR:
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsLong(i)) # <unsigned char> pvd.getAsChar(i)             # <<<<<<<<<<<<<<
 * 	elif dtcheck==CAFE_LONG:
 * 		for i in range(0, pvc.getNelem()):
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_pvc.getAsLong(__pyx_v_i)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_localList, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }

    /* "PyCafeDefs.pxi":787
 * 		#	for i in range(0, pvd.getNelem()):
 * 		#		localList.append(pvd.getAsLong(i)) #getAsUShort(i)
 * 	elif dtcheck==CAFE_CHAR:             # <<<<<<<<<<<<<<
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsLong(i)) # <unsigned char> pvd.getAsChar(i)
 */
    break;

    /* "PyCafeDefs.pxi":790
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsLong(i)) # <unsigned char> pvd.getAsChar(i)
 * 	elif dtcheck==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsLong(i))
 */
    case CAFE_LONG:

    /* "PyCafeDefs.pxi":791
 * 			localList.append(pvc.getAsLong(i)) # <unsigned char> pvd.getAsChar(i)
 * 	elif dtcheck==CAFE_LONG:
 * 		for i in range(0, pvc.getNelem()):             # <<<<<<<<<<<<<<
 * 			localList.append(pvc.getAsLong(i))
 * 	elif dtcheck==CAFE_DOUBLE:
 */
    __pyx_t_4 = __pyx_v_pvc.getNelem();
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "PyCafeDefs.pxi":792
 * 	elif dtcheck==CAFE_LONG:
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsLong(i))             # <<<<<<<<<<<<<<
 * 	elif dtcheck==CAFE_DOUBLE:
 * 		for i in range(0, pvc.getNelem()):
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_pvc.getAsLong(__pyx_v_i)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_localList, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }

    /* "PyCafeDefs.pxi":790
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsLong(i)) # <unsigned char> pvd.getAsChar(i)
 * 	elif dtcheck==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsLong(i))
 */
    break;

    /* "PyCafeDefs.pxi":793
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsLong(i))
 * 	elif dtcheck==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsDouble(i))
 */
    case CAFE_DOUBLE:

    /* "PyCafeDefs.pxi":794
 * 			localList.append(pvc.getAsLong(i))
 * 	elif dtcheck==CAFE_DOUBLE:
 * 		for i in range(0, pvc.getNelem()):             # <<<<<<<<<<<<<<
 * 			localList.append(pvc.getAsDouble(i))
 * 	else:
 */
    __pyx_t_4 = __pyx_v_pvc.getNelem();
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "PyCafeDefs.pxi":795
 * 	elif dtcheck==CAFE_DOUBLE:
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsDouble(i))             # <<<<<<<<<<<<<<
 * 	else:
 * 		localList.append(0)
 */
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_pvc.getAsDouble(__pyx_v_i)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_localList, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }

    /* "PyCafeDefs.pxi":793
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsLong(i))
 * 	elif dtcheck==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 		for i in range(0, pvc.getNelem()):
 * 			localList.append(pvc.getAsDouble(i))
 */
    break;
    default:

    /* "PyCafeDefs.pxi":797
 * 			localList.append(pvc.getAsDouble(i))
 * 	else:
 * 		localList.append(0)             # <<<<<<<<<<<<<<
 * 		#print ("This line in PyCafe def getDataHolderToStruct should never appear!"
 * 		#print ("No Data! Error. Is channel connected?"
 */
    __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_localList, __pyx_int_0); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    break;
  }

  /* "PyCafeDefs.pxi":800
 * 		#print ("This line in PyCafe def getDataHolderToStruct should never appear!"
 * 		#print ("No Data! Error. Is channel connected?"
 * 	c1.value=localList             # <<<<<<<<<<<<<<
 * 	c1.status=pvc.getStatus()
 * 	c1.nelem=pvc.getNelem()
 */
  if (!(likely(PyList_CheckExact(__pyx_v_localList))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_localList)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 800; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __pyx_v_localList;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_c1->value);
  __Pyx_DECREF(__pyx_v_c1->value);
  __pyx_v_c1->value = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "PyCafeDefs.pxi":801
 * 		#print ("No Data! Error. Is channel connected?"
 * 	c1.value=localList
 * 	c1.status=pvc.getStatus()             # <<<<<<<<<<<<<<
 * 	c1.nelem=pvc.getNelem()
 * 	c1.alarmStatus=pvc.getAlarmStatus()
 */
  __pyx_v_c1->status = __pyx_v_pvc.getStatus();

  /* "PyCafeDefs.pxi":802
 * 	c1.value=localList
 * 	c1.status=pvc.getStatus()
 * 	c1.nelem=pvc.getNelem()             # <<<<<<<<<<<<<<
 * 	c1.alarmStatus=pvc.getAlarmStatus()
 * 	c1.alarmSeverity=pvc.getAlarmSeverity()
 */
  __pyx_v_c1->nelem = __pyx_v_pvc.getNelem();

  /* "PyCafeDefs.pxi":803
 * 	c1.status=pvc.getStatus()
 * 	c1.nelem=pvc.getNelem()
 * 	c1.alarmStatus=pvc.getAlarmStatus()             # <<<<<<<<<<<<<<
 * 	c1.alarmSeverity=pvc.getAlarmSeverity()
 * 
 */
  __pyx_v_c1->alarmStatus = __pyx_v_pvc.getAlarmStatus();

  /* "PyCafeDefs.pxi":804
 * 	c1.nelem=pvc.getNelem()
 * 	c1.alarmStatus=pvc.getAlarmStatus()
 * 	c1.alarmSeverity=pvc.getAlarmSeverity()             # <<<<<<<<<<<<<<
 * 
 * 	c1.precision=pvc.getPrecision()
 */
  __pyx_v_c1->alarmSeverity = __pyx_v_pvc.getAlarmSeverity();

  /* "PyCafeDefs.pxi":806
 * 	c1.alarmSeverity=pvc.getAlarmSeverity()
 * 
 * 	c1.precision=pvc.getPrecision()             # <<<<<<<<<<<<<<
 * 	c1.noEnumStrings=pvc.getNoEnumStrings()
 * 
 */
  __pyx_v_c1->precision = __pyx_v_pvc.getPrecision();

  /* "PyCafeDefs.pxi":807
 * 
 * 	c1.precision=pvc.getPrecision()
 * 	c1.noEnumStrings=pvc.getNoEnumStrings()             # <<<<<<<<<<<<<<
 * 
 * 	enumList=[]
 */
  __pyx_v_c1->noEnumStrings = __pyx_v_pvc.getNoEnumStrings();

  /* "PyCafeDefs.pxi":809
 * 	c1.noEnumStrings=pvc.getNoEnumStrings()
 * 
 * 	enumList=[]             # <<<<<<<<<<<<<<
 * 	for i in range(0, pvc.getNoEnumStrings()):
 * 		enumList.append(pvc.getEnumStrings()[i])
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_enumList = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "PyCafeDefs.pxi":810
 * 
 * 	enumList=[]
 * 	for i in range(0, pvc.getNoEnumStrings()):             # <<<<<<<<<<<<<<
 * 		enumList.append(pvc.getEnumStrings()[i])
 * 
 */
  __pyx_t_7 = __pyx_v_pvc.getNoEnumStrings();
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_7; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "PyCafeDefs.pxi":811
 * 	enumList=[]
 * 	for i in range(0, pvc.getNoEnumStrings()):
 * 		enumList.append(pvc.getEnumStrings()[i])             # <<<<<<<<<<<<<<
 * 
 * 	c1.enumStrings=enumList
 */
    __pyx_t_3 = __pyx_convert_PyStr_string_to_py_std__in_string((__pyx_v_pvc.getEnumStrings()[__pyx_v_i])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_enumList, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "PyCafeDefs.pxi":813
 * 		enumList.append(pvc.getEnumStrings()[i])
 * 
 * 	c1.enumStrings=enumList             # <<<<<<<<<<<<<<
 * 
 * 	c1.units=pvc.getUnitsAsString()
 */
  __Pyx_INCREF(__pyx_v_enumList);
  __Pyx_GIVEREF(__pyx_v_enumList);
  __Pyx_GOTREF(__pyx_v_c1->enumStrings);
  __Pyx_DECREF(__pyx_v_c1->enumStrings);
  __pyx_v_c1->enumStrings = __pyx_v_enumList;

  /* "PyCafeDefs.pxi":815
 * 	c1.enumStrings=enumList
 * 
 * 	c1.units=pvc.getUnitsAsString()             # <<<<<<<<<<<<<<
 * 
 * 	c1.upperDisplayLimit=pvc.getUpperDispLimit_AsDouble()
 */
  __pyx_v_c1->units = __pyx_v_pvc.getUnitsAsString();

  /* "PyCafeDefs.pxi":817
 * 	c1.units=pvc.getUnitsAsString()
 * 
 * 	c1.upperDisplayLimit=pvc.getUpperDispLimit_AsDouble()             # <<<<<<<<<<<<<<
 * 	c1.lowerDisplayLimit=pvc.getLowerDispLimit_AsDouble()
 * 	c1.upperAlarmLimit  =pvc.getUpperAlarmLimit_AsDouble()
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_pvc.getUpperDispLimit_AsDouble()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_c1->upperDisplayLimit);
  __Pyx_DECREF(__pyx_v_c1->upperDisplayLimit);
  __pyx_v_c1->upperDisplayLimit = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "PyCafeDefs.pxi":818
 * 
 * 	c1.upperDisplayLimit=pvc.getUpperDispLimit_AsDouble()
 * 	c1.lowerDisplayLimit=pvc.getLowerDispLimit_AsDouble()             # <<<<<<<<<<<<<<
 * 	c1.upperAlarmLimit  =pvc.getUpperAlarmLimit_AsDouble()
 * 	c1.upperWarningLimit=pvc.getUpperWarningLimit_AsDouble()
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_pvc.getLowerDispLimit_AsDouble()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 818; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_c1->lowerDisplayLimit);
  __Pyx_DECREF(__pyx_v_c1->lowerDisplayLimit);
  __pyx_v_c1->lowerDisplayLimit = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "PyCafeDefs.pxi":819
 * 	c1.upperDisplayLimit=pvc.getUpperDispLimit_AsDouble()
 * 	c1.lowerDisplayLimit=pvc.getLowerDispLimit_AsDouble()
 * 	c1.upperAlarmLimit  =pvc.getUpperAlarmLimit_AsDouble()             # <<<<<<<<<<<<<<
 * 	c1.upperWarningLimit=pvc.getUpperWarningLimit_AsDouble()
 * 	c1.lowerWarningLimit=pvc.getLowerWarningLimit_AsDouble()
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_pvc.getUpperAlarmLimit_AsDouble()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 819; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_c1->upperAlarmLimit);
  __Pyx_DECREF(__pyx_v_c1->upperAlarmLimit);
  __pyx_v_c1->upperAlarmLimit = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "PyCafeDefs.pxi":820
 * 	c1.lowerDisplayLimit=pvc.getLowerDispLimit_AsDouble()
 * 	c1.upperAlarmLimit  =pvc.getUpperAlarmLimit_AsDouble()
 * 	c1.upperWarningLimit=pvc.getUpperWarningLimit_AsDouble()             # <<<<<<<<<<<<<<
 * 	c1.lowerWarningLimit=pvc.getLowerWarningLimit_AsDouble()
 * 	c1.lowerAlarmLimit  =pvc.getLowerAlarmLimit_AsDouble()
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_pvc.getUpperWarningLimit_AsDouble()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_c1->upperWarningLimit);
  __Pyx_DECREF(__pyx_v_c1->upperWarningLimit);
  __pyx_v_c1->upperWarningLimit = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "PyCafeDefs.pxi":821
 * 	c1.upperAlarmLimit  =pvc.getUpperAlarmLimit_AsDouble()
 * 	c1.upperWarningLimit=pvc.getUpperWarningLimit_AsDouble()
 * 	c1.lowerWarningLimit=pvc.getLowerWarningLimit_AsDouble()             # <<<<<<<<<<<<<<
 * 	c1.lowerAlarmLimit  =pvc.getLowerAlarmLimit_AsDouble()
 * 	c1.upperControlLimit=pvc.getUpperCtrlLimit_AsDouble()
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_pvc.getLowerWarningLimit_AsDouble()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_c1->lowerWarningLimit);
  __Pyx_DECREF(__pyx_v_c1->lowerWarningLimit);
  __pyx_v_c1->lowerWarningLimit = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "PyCafeDefs.pxi":822
 * 	c1.upperWarningLimit=pvc.getUpperWarningLimit_AsDouble()
 * 	c1.lowerWarningLimit=pvc.getLowerWarningLimit_AsDouble()
 * 	c1.lowerAlarmLimit  =pvc.getLowerAlarmLimit_AsDouble()             # <<<<<<<<<<<<<<
 * 	c1.upperControlLimit=pvc.getUpperCtrlLimit_AsDouble()
 * 	c1.lowerControlLimit=pvc.getLowerCtrlLimit_AsDouble()
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_pvc.getLowerAlarmLimit_AsDouble()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_c1->lowerAlarmLimit);
  __Pyx_DECREF(__pyx_v_c1->lowerAlarmLimit);
  __pyx_v_c1->lowerAlarmLimit = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "PyCafeDefs.pxi":823
 * 	c1.lowerWarningLimit=pvc.getLowerWarningLimit_AsDouble()
 * 	c1.lowerAlarmLimit  =pvc.getLowerAlarmLimit_AsDouble()
 * 	c1.upperControlLimit=pvc.getUpperCtrlLimit_AsDouble()             # <<<<<<<<<<<<<<
 * 	c1.lowerControlLimit=pvc.getLowerCtrlLimit_AsDouble()
 * 
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_pvc.getUpperCtrlLimit_AsDouble()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_c1->upperControlLimit);
  __Pyx_DECREF(__pyx_v_c1->upperControlLimit);
  __pyx_v_c1->upperControlLimit = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "PyCafeDefs.pxi":824
 * 	c1.lowerAlarmLimit  =pvc.getLowerAlarmLimit_AsDouble()
 * 	c1.upperControlLimit=pvc.getUpperCtrlLimit_AsDouble()
 * 	c1.lowerControlLimit=pvc.getLowerCtrlLimit_AsDouble()             # <<<<<<<<<<<<<<
 * 
 * 	return c1
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_pvc.getLowerCtrlLimit_AsDouble()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_c1->lowerControlLimit);
  __Pyx_DECREF(__pyx_v_c1->lowerControlLimit);
  __pyx_v_c1->lowerControlLimit = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "PyCafeDefs.pxi":826
 * 	c1.lowerControlLimit=pvc.getLowerCtrlLimit_AsDouble()
 * 
 * 	return c1             # <<<<<<<<<<<<<<
 * ##################################################################################
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_c1));
  __pyx_r = __pyx_v_c1;
  goto __pyx_L0;

  /* "PyCafeDefs.pxi":756
 * #################################################################################
 * 
 * cdef pvctrl	PVCtrlHolderToStruct(PVCtrlHolder pvc, dt=None):             # <<<<<<<<<<<<<<
 * 
 * 	#global c1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("PyCafe.PVCtrlHolderToStruct", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c1);
  __Pyx_XDECREF(__pyx_v_localList);
  __Pyx_XDECREF(__pyx_v_enumList);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafeDefs.pxi":832
 * #################################################################################
 * 
 * cdef channelInfo channelRegaliaToStruct(ChannelRegalia cr):             # <<<<<<<<<<<<<<
 * 
 * 	cdef channelInfo ci = channelInfo()
 */

static struct __pyx_obj_6PyCafe_channelInfo *__pyx_f_6PyCafe_channelRegaliaToStruct(ChannelRegalia __pyx_v_cr) {
  struct __pyx_obj_6PyCafe_channelInfo *__pyx_v_ci = 0;
  struct __pyx_obj_6PyCafe_channelInfo *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("channelRegaliaToStruct", 0);

  /* "PyCafeDefs.pxi":834
 * cdef channelInfo channelRegaliaToStruct(ChannelRegalia cr):
 * 
 * 	cdef channelInfo ci = channelInfo()             # <<<<<<<<<<<<<<
 * 
 * 	ci.channelID = (<long> cr.getChannelID())
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6PyCafe_channelInfo), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ci = ((struct __pyx_obj_6PyCafe_channelInfo *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":836
 * 	cdef channelInfo ci = channelInfo()
 * 
 * 	ci.channelID = (<long> cr.getChannelID())             # <<<<<<<<<<<<<<
 * 	ci.connectFlag=cr.getConnectFlag()
 * 	ci.hostName   =cr.getHostNameAsString()
 */
  __pyx_v_ci->channelID = ((long)__pyx_v_cr.getChannelID());

  /* "PyCafeDefs.pxi":837
 * 
 * 	ci.channelID = (<long> cr.getChannelID())
 * 	ci.connectFlag=cr.getConnectFlag()             # <<<<<<<<<<<<<<
 * 	ci.hostName   =cr.getHostNameAsString()
 * 	ci.dataType   =cr.getDataType()
 */
  __pyx_v_ci->connectFlag = __pyx_v_cr.getConnectFlag();

  /* "PyCafeDefs.pxi":838
 * 	ci.channelID = (<long> cr.getChannelID())
 * 	ci.connectFlag=cr.getConnectFlag()
 * 	ci.hostName   =cr.getHostNameAsString()             # <<<<<<<<<<<<<<
 * 	ci.dataType   =cr.getDataType()
 * 	ci.className  =cr.getClassNameAsString()
 */
  __pyx_v_ci->hostName = __pyx_v_cr.getHostNameAsString();

  /* "PyCafeDefs.pxi":839
 * 	ci.connectFlag=cr.getConnectFlag()
 * 	ci.hostName   =cr.getHostNameAsString()
 * 	ci.dataType   =cr.getDataType()             # <<<<<<<<<<<<<<
 * 	ci.className  =cr.getClassNameAsString()
 * 	ci.accessRead =cr.getAccessRead()
 */
  __pyx_v_ci->dataType = __pyx_v_cr.getDataType();

  /* "PyCafeDefs.pxi":840
 * 	ci.hostName   =cr.getHostNameAsString()
 * 	ci.dataType   =cr.getDataType()
 * 	ci.className  =cr.getClassNameAsString()             # <<<<<<<<<<<<<<
 * 	ci.accessRead =cr.getAccessRead()
 * 	ci.accessWrite=cr.getAccessWrite()
 */
  __pyx_v_ci->className = __pyx_v_cr.getClassNameAsString();

  /* "PyCafeDefs.pxi":841
 * 	ci.dataType   =cr.getDataType()
 * 	ci.className  =cr.getClassNameAsString()
 * 	ci.accessRead =cr.getAccessRead()             # <<<<<<<<<<<<<<
 * 	ci.accessWrite=cr.getAccessWrite()
 * 	ci.nelem      =cr.getNelem()
 */
  __pyx_v_ci->accessRead = __pyx_v_cr.getAccessRead();

  /* "PyCafeDefs.pxi":842
 * 	ci.className  =cr.getClassNameAsString()
 * 	ci.accessRead =cr.getAccessRead()
 * 	ci.accessWrite=cr.getAccessWrite()             # <<<<<<<<<<<<<<
 * 	ci.nelem      =cr.getNelem()
 * 	ci.connectionState    =cr.getConnectionState()
 */
  __pyx_v_ci->accessWrite = __pyx_v_cr.getAccessWrite();

  /* "PyCafeDefs.pxi":843
 * 	ci.accessRead =cr.getAccessRead()
 * 	ci.accessWrite=cr.getAccessWrite()
 * 	ci.nelem      =cr.getNelem()             # <<<<<<<<<<<<<<
 * 	ci.connectionState    =cr.getConnectionState()
 * 	ci.cafeConnectionState=cr.getCafeConnectionState()
 */
  __pyx_v_ci->nelem = __pyx_v_cr.getNelem();

  /* "PyCafeDefs.pxi":844
 * 	ci.accessWrite=cr.getAccessWrite()
 * 	ci.nelem      =cr.getNelem()
 * 	ci.connectionState    =cr.getConnectionState()             # <<<<<<<<<<<<<<
 * 	ci.cafeConnectionState=cr.getCafeConnectionState()
 * 	ci.connectionStateAsString     =cr.getConnectionStateAsString()
 */
  __pyx_v_ci->connectionState = __pyx_v_cr.getConnectionState();

  /* "PyCafeDefs.pxi":845
 * 	ci.nelem      =cr.getNelem()
 * 	ci.connectionState    =cr.getConnectionState()
 * 	ci.cafeConnectionState=cr.getCafeConnectionState()             # <<<<<<<<<<<<<<
 * 	ci.connectionStateAsString     =cr.getConnectionStateAsString()
 * 	ci.cafeConnectionStateAsString =cr.getCafeConnectionStateAsString()
 */
  __pyx_v_ci->cafeConnectionState = __pyx_v_cr.getCafeConnectionState();

  /* "PyCafeDefs.pxi":846
 * 	ci.connectionState    =cr.getConnectionState()
 * 	ci.cafeConnectionState=cr.getCafeConnectionState()
 * 	ci.connectionStateAsString     =cr.getConnectionStateAsString()             # <<<<<<<<<<<<<<
 * 	ci.cafeConnectionStateAsString =cr.getCafeConnectionStateAsString()
 * 	return ci
 */
  __pyx_v_ci->connectionStateAsString = __pyx_v_cr.getConnectionStateAsString();

  /* "PyCafeDefs.pxi":847
 * 	ci.cafeConnectionState=cr.getCafeConnectionState()
 * 	ci.connectionStateAsString     =cr.getConnectionStateAsString()
 * 	ci.cafeConnectionStateAsString =cr.getCafeConnectionStateAsString()             # <<<<<<<<<<<<<<
 * 	return ci
 * #################################################################################
 */
  __pyx_v_ci->cafeConnectionStateAsString = __pyx_v_cr.getCafeConnectionStateAsString();

  /* "PyCafeDefs.pxi":848
 * 	ci.connectionStateAsString     =cr.getConnectionStateAsString()
 * 	ci.cafeConnectionStateAsString =cr.getCafeConnectionStateAsString()
 * 	return ci             # <<<<<<<<<<<<<<
 * #################################################################################
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_ci));
  __pyx_r = __pyx_v_ci;
  goto __pyx_L0;

  /* "PyCafeDefs.pxi":832
 * #################################################################################
 * 
 * cdef channelInfo channelRegaliaToStruct(ChannelRegalia cr):             # <<<<<<<<<<<<<<
 * 
 * 	cdef channelInfo ci = channelInfo()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.channelRegaliaToStruct", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ci);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":49
 * 		#dict monDict
 * 
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self._c_cafe = new ccafe.CAFE()
 * 		if self._c_cafe is NULL:
 */

/* Python wrapper */
static int __pyx_pw_6PyCafe_6CyCafe_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6PyCafe_6CyCafe_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe___cinit__(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6PyCafe_6CyCafe___cinit__(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  CAFE *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "PyCafe.pyx":50
 * 
 * 	def __cinit__(self):
 * 		self._c_cafe = new ccafe.CAFE()             # <<<<<<<<<<<<<<
 * 		if self._c_cafe is NULL:
 * 			raise MemoryError()
 */
  try {
    __pyx_t_1 = new CAFE();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->_c_cafe = __pyx_t_1;

  /* "PyCafe.pyx":51
 * 	def __cinit__(self):
 * 		self._c_cafe = new ccafe.CAFE()
 * 		if self._c_cafe is NULL:             # <<<<<<<<<<<<<<
 * 			raise MemoryError()
 * 
 */
  __pyx_t_2 = ((__pyx_v_self->_c_cafe == NULL) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":52
 * 		self._c_cafe = new ccafe.CAFE()
 * 		if self._c_cafe is NULL:
 * 			raise MemoryError()             # <<<<<<<<<<<<<<
 * 
 * 		self.cs =self._c_cafe.getCafeStatus()
 */
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":51
 * 	def __cinit__(self):
 * 		self._c_cafe = new ccafe.CAFE()
 * 		if self._c_cafe is NULL:             # <<<<<<<<<<<<<<
 * 			raise MemoryError()
 * 
 */
  }

  /* "PyCafe.pyx":54
 * 			raise MemoryError()
 * 
 * 		self.cs =self._c_cafe.getCafeStatus()             # <<<<<<<<<<<<<<
 * 		##self.css=self._c_cafe_getCafeStatusSeverity()
 * 
 */
  __pyx_v_self->cs = __pyx_v_self->_c_cafe->getCafeStatus();

  /* "PyCafe.pyx":49
 * 		#dict monDict
 * 
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self._c_cafe = new ccafe.CAFE()
 * 		if self._c_cafe is NULL:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":69
 * 
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del self._c_cafe
 * 
 */

/* Python wrapper */
static void __pyx_pw_6PyCafe_6CyCafe_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6PyCafe_6CyCafe_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6PyCafe_6CyCafe_2__dealloc__(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6PyCafe_6CyCafe_2__dealloc__(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "PyCafe.pyx":70
 * 
 * 	def __dealloc__(self):
 * 		del self._c_cafe             # <<<<<<<<<<<<<<
 * 
 * 
 */
  delete __pyx_v_self->_c_cafe;

  /* "PyCafe.pyx":69
 * 
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del self._c_cafe
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "PyCafe.pyx":74
 * 
 * 	##################################################################################
 * 	def   init(self):             # <<<<<<<<<<<<<<
 * 		return self._c_cafe.init()
 * 	##################################################################################
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_5init(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_5init(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_4init(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_4init(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init", 0);

  /* "PyCafe.pyx":75
 * 	##################################################################################
 * 	def   init(self):
 * 		return self._c_cafe.init()             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_c_cafe->init()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":74
 * 
 * 	##################################################################################
 * 	def   init(self):             # <<<<<<<<<<<<<<
 * 		return self._c_cafe.init()
 * 	##################################################################################
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCafe.init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":88
 * 
 * 	##################################################################################
 * 	def  open(self, pv):             # <<<<<<<<<<<<<<
 * 
 * 		cdef vector[string] pvV
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_7open(PyObject *__pyx_v_self, PyObject *__pyx_v_pv); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_7open(PyObject *__pyx_v_self, PyObject *__pyx_v_pv) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("open (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_6open(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_pv));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_6open(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_pv) {
  std::vector<std::string>  __pyx_v_pvV;
  std::vector<unsigned int>  __pyx_v_handleV;
  PyObject *__pyx_v_py_string = 0;
  Py_ssize_t __pyx_v_i;
  unsigned int __pyx_v_handle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  std::string __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("open", 0);

  /* "PyCafe.pyx":95
 * 		cdef char * c_string
 * 
 * 		if isinstance(pv, (list)):             # <<<<<<<<<<<<<<
 * 			for i in range(0, len(pv)):
 * 
 */
  __pyx_t_1 = PyList_Check(__pyx_v_pv); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":96
 * 
 * 		if isinstance(pv, (list)):
 * 			for i in range(0, len(pv)):             # <<<<<<<<<<<<<<
 * 
 * 				#print (type('text'))
 */
    __pyx_t_3 = PyObject_Length(__pyx_v_pv); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "PyCafe.pyx":101
 * 				#print (type (pv[i]))
 * 
 * 				if type(pv[i]) is unicode:             # <<<<<<<<<<<<<<
 * 					#print ("unicode")
 * 
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_pv, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = (((PyObject *)Py_TYPE(__pyx_t_5)) == ((PyObject *)(&PyUnicode_Type)));
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_1 = (__pyx_t_2 != 0);
      if (__pyx_t_1) {

        /* "PyCafe.pyx":104
 * 					#print ("unicode")
 * 
 * 					py_string = (<bytes>pv[i]).encode('UTF-8')             # <<<<<<<<<<<<<<
 * 					pvV.push_back (py_string )
 * 
 */
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_pv, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__106, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (!(likely(PyBytes_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_5)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_XDECREF_SET(__pyx_v_py_string, ((PyObject*)__pyx_t_5));
        __pyx_t_5 = 0;

        /* "PyCafe.pyx":105
 * 
 * 					py_string = (<bytes>pv[i]).encode('UTF-8')
 * 					pvV.push_back (py_string )             # <<<<<<<<<<<<<<
 * 
 * 				elif isinstance(pv[i], unicode):
 */
        __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_v_py_string); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        try {
          __pyx_v_pvV.push_back(__pyx_t_7);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }

        /* "PyCafe.pyx":101
 * 				#print (type (pv[i]))
 * 
 * 				if type(pv[i]) is unicode:             # <<<<<<<<<<<<<<
 * 					#print ("unicode")
 * 
 */
        goto __pyx_L6;
      }

      /* "PyCafe.pyx":107
 * 					pvV.push_back (py_string )
 * 
 * 				elif isinstance(pv[i], unicode):             # <<<<<<<<<<<<<<
 * 					py_string = (<bytes>pv[i]).encode('UTF-8')
 * 					pvV.push_back( py_string )
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_pv, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = PyUnicode_Check(__pyx_t_5); 
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_2 = (__pyx_t_1 != 0);
      if (__pyx_t_2) {

        /* "PyCafe.pyx":108
 * 
 * 				elif isinstance(pv[i], unicode):
 * 					py_string = (<bytes>pv[i]).encode('UTF-8')             # <<<<<<<<<<<<<<
 * 					pvV.push_back( py_string )
 * 				elif isinstance(pv[i], bytes):
 */
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_pv, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__107, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (!(likely(PyBytes_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_5)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_XDECREF_SET(__pyx_v_py_string, ((PyObject*)__pyx_t_5));
        __pyx_t_5 = 0;

        /* "PyCafe.pyx":109
 * 				elif isinstance(pv[i], unicode):
 * 					py_string = (<bytes>pv[i]).encode('UTF-8')
 * 					pvV.push_back( py_string )             # <<<<<<<<<<<<<<
 * 				elif isinstance(pv[i], bytes):
 * 
 */
        __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_v_py_string); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        try {
          __pyx_v_pvV.push_back(__pyx_t_7);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }

        /* "PyCafe.pyx":107
 * 					pvV.push_back (py_string )
 * 
 * 				elif isinstance(pv[i], unicode):             # <<<<<<<<<<<<<<
 * 					py_string = (<bytes>pv[i]).encode('UTF-8')
 * 					pvV.push_back( py_string )
 */
        goto __pyx_L6;
      }

      /* "PyCafe.pyx":110
 * 					py_string = (<bytes>pv[i]).encode('UTF-8')
 * 					pvV.push_back( py_string )
 * 				elif isinstance(pv[i], bytes):             # <<<<<<<<<<<<<<
 * 
 * 					pvV.push_back( (<bytes>pv[i]).encode('utf8') )
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_pv, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = PyBytes_Check(__pyx_t_5); 
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_1 = (__pyx_t_2 != 0);
      if (__pyx_t_1) {

        /* "PyCafe.pyx":112
 * 				elif isinstance(pv[i], bytes):
 * 
 * 					pvV.push_back( (<bytes>pv[i]).encode('utf8') )             # <<<<<<<<<<<<<<
 * 				else:
 * 					print ("unknown type in open")
 */
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_pv, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__108, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_5); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        try {
          __pyx_v_pvV.push_back(__pyx_t_7);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }

        /* "PyCafe.pyx":110
 * 					py_string = (<bytes>pv[i]).encode('UTF-8')
 * 					pvV.push_back( py_string )
 * 				elif isinstance(pv[i], bytes):             # <<<<<<<<<<<<<<
 * 
 * 					pvV.push_back( (<bytes>pv[i]).encode('utf8') )
 */
        goto __pyx_L6;
      }

      /* "PyCafe.pyx":114
 * 					pvV.push_back( (<bytes>pv[i]).encode('utf8') )
 * 				else:
 * 					print ("unknown type in open")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      /*else*/ {
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__109, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_L6:;
    }

    /* "PyCafe.pyx":117
 * 
 * 
 * 			try:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.openV(pvV, handleV)
 * 			except:
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      /*try:*/ {

        /* "PyCafe.pyx":118
 * 
 * 			try:
 * 				self._c_cafe.openV(pvV, handleV)             # <<<<<<<<<<<<<<
 * 			except:
 * 				raise Exception("EXCEPTION RAISED in PyCafe def open. ERROR OPENING PVLIST= %s" %pv)
 */
        try {
          __pyx_v_self->_c_cafe->openV(__pyx_v_pvV, __pyx_v_handleV);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
        }

        /* "PyCafe.pyx":117
 * 
 * 
 * 			try:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.openV(pvV, handleV)
 * 			except:
 */
      }
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L14_try_end;
      __pyx_L7_error:;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "PyCafe.pyx":119
 * 			try:
 * 				self._c_cafe.openV(pvV, handleV)
 * 			except:             # <<<<<<<<<<<<<<
 * 				raise Exception("EXCEPTION RAISED in PyCafe def open. ERROR OPENING PVLIST= %s" %pv)
 * 			return handleV
 */
      /*except:*/ {
        __Pyx_AddTraceback("PyCafe.CyCafe.open", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_11) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_11);

        /* "PyCafe.pyx":120
 * 				self._c_cafe.openV(pvV, handleV)
 * 			except:
 * 				raise Exception("EXCEPTION RAISED in PyCafe def open. ERROR OPENING PVLIST= %s" %pv)             # <<<<<<<<<<<<<<
 * 			return handleV
 * 
 */
        __pyx_t_12 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_o, __pyx_v_pv); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_13 = PyTuple_New(1); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_12);
        PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_12);
        __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_13, NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_Raise(__pyx_t_12, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
      }
      __pyx_L9_except_error:;

      /* "PyCafe.pyx":117
 * 
 * 
 * 			try:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.openV(pvV, handleV)
 * 			except:
 */
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      goto __pyx_L1_error;
      __pyx_L14_try_end:;
    }

    /* "PyCafe.pyx":121
 * 			except:
 * 				raise Exception("EXCEPTION RAISED in PyCafe def open. ERROR OPENING PVLIST= %s" %pv)
 * 			return handleV             # <<<<<<<<<<<<<<
 * 
 * 		elif isinstance(pv, (str)) == 0:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_11 = __pyx_convert_vector_to_py_unsigned_int(__pyx_v_handleV); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_r = __pyx_t_11;
    __pyx_t_11 = 0;
    goto __pyx_L0;

    /* "PyCafe.pyx":95
 * 		cdef char * c_string
 * 
 * 		if isinstance(pv, (list)):             # <<<<<<<<<<<<<<
 * 			for i in range(0, len(pv)):
 * 
 */
  }

  /* "PyCafe.pyx":123
 * 			return handleV
 * 
 * 		elif isinstance(pv, (str)) == 0:             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def open. \n\
 * pv=%f should be <type 'str'>" %pv)
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_pv); 
  __pyx_t_2 = ((__pyx_t_1 == 0) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":125
 * 		elif isinstance(pv, (str)) == 0:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def open. \n\
 * pv=%f should be <type 'str'>" %pv)             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int handle=0
 */
    __pyx_t_11 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_o, __pyx_v_pv); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);

    /* "PyCafe.pyx":124
 * 
 * 		elif isinstance(pv, (str)) == 0:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def open. \n\             # <<<<<<<<<<<<<<
 * pv=%f should be <type 'str'>" %pv)
 * 
 */
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_11);
    __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_6, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_11, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":123
 * 			return handleV
 * 
 * 		elif isinstance(pv, (str)) == 0:             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def open. \n\
 * pv=%f should be <type 'str'>" %pv)
 */
  }

  /* "PyCafe.pyx":127
 * pv=%f should be <type 'str'>" %pv)
 * 
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":130
 * 
 * 
 * 		try:             # <<<<<<<<<<<<<<
 * 			self._c_cafe.open(pv, handle)
 * 		except:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
    __Pyx_XGOTREF(__pyx_t_10);
    __Pyx_XGOTREF(__pyx_t_9);
    __Pyx_XGOTREF(__pyx_t_8);
    /*try:*/ {

      /* "PyCafe.pyx":131
 * 
 * 		try:
 * 			self._c_cafe.open(pv, handle)             # <<<<<<<<<<<<<<
 * 		except:
 * 			raise Exception("EXCEPTION RAISED in PyCafe def open. ERROR OPENING PV= %s" %pv)
 */
      __pyx_t_14 = __Pyx_PyObject_AsString(__pyx_v_pv); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L17_error;}
      try {
        __pyx_v_self->_c_cafe->open(__pyx_t_14, __pyx_v_handle);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L17_error;}
      }

      /* "PyCafe.pyx":130
 * 
 * 
 * 		try:             # <<<<<<<<<<<<<<
 * 			self._c_cafe.open(pv, handle)
 * 		except:
 */
    }
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L24_try_end;
    __pyx_L17_error:;
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "PyCafe.pyx":132
 * 		try:
 * 			self._c_cafe.open(pv, handle)
 * 		except:             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def open. ERROR OPENING PV= %s" %pv)
 * 		return handle
 */
    /*except:*/ {
      __Pyx_AddTraceback("PyCafe.CyCafe.open", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_11, &__pyx_t_6, &__pyx_t_5) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L19_except_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_5);

      /* "PyCafe.pyx":133
 * 			self._c_cafe.open(pv, handle)
 * 		except:
 * 			raise Exception("EXCEPTION RAISED in PyCafe def open. ERROR OPENING PV= %s" %pv)             # <<<<<<<<<<<<<<
 * 		return handle
 * 
 */
      __pyx_t_12 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_o_2, __pyx_v_pv); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L19_except_error;}
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = PyTuple_New(1); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L19_except_error;}
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_12);
      __pyx_t_12 = 0;
      __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_13, NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L19_except_error;}
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_Raise(__pyx_t_12, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L19_except_error;}
    }
    __pyx_L19_except_error:;

    /* "PyCafe.pyx":130
 * 
 * 
 * 		try:             # <<<<<<<<<<<<<<
 * 			self._c_cafe.open(pv, handle)
 * 		except:
 */
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_9, __pyx_t_8);
    goto __pyx_L1_error;
    __pyx_L24_try_end:;
  }

  /* "PyCafe.pyx":134
 * 		except:
 * 			raise Exception("EXCEPTION RAISED in PyCafe def open. ERROR OPENING PV= %s" %pv)
 * 		return handle             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_handle); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":88
 * 
 * 	##################################################################################
 * 	def  open(self, pv):             # <<<<<<<<<<<<<<
 * 
 * 		cdef vector[string] pvV
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("PyCafe.CyCafe.open", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":137
 * 
 * 	##################################################################################
 * 	def openNoWait(self):             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelOpenPolicy.setFlushSendBufferKind(WITH_PEND_EVENT)
 * 		self._c_cafe.channelOpenPolicy.setWhenToFlushSendBuffer(FLUSH_DESIGNATED_TO_CLIENT)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_9openNoWait(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_9openNoWait(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("openNoWait (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_8openNoWait(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_8openNoWait(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("openNoWait", 0);

  /* "PyCafe.pyx":138
 * 	##################################################################################
 * 	def openNoWait(self):
 * 		self._c_cafe.channelOpenPolicy.setFlushSendBufferKind(WITH_PEND_EVENT)             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelOpenPolicy.setWhenToFlushSendBuffer(FLUSH_DESIGNATED_TO_CLIENT)
 * 		return
 */
  __pyx_v_self->_c_cafe->channelOpenPolicy.setFlushSendBufferKind(WITH_PEND_EVENT);

  /* "PyCafe.pyx":139
 * 	def openNoWait(self):
 * 		self._c_cafe.channelOpenPolicy.setFlushSendBufferKind(WITH_PEND_EVENT)
 * 		self._c_cafe.channelOpenPolicy.setWhenToFlushSendBuffer(FLUSH_DESIGNATED_TO_CLIENT)             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
  __pyx_v_self->_c_cafe->channelOpenPolicy.setWhenToFlushSendBuffer(FLUSH_DESIGNATED_TO_CLIENT);

  /* "PyCafe.pyx":140
 * 		self._c_cafe.channelOpenPolicy.setFlushSendBufferKind(WITH_PEND_EVENT)
 * 		self._c_cafe.channelOpenPolicy.setWhenToFlushSendBuffer(FLUSH_DESIGNATED_TO_CLIENT)
 * 		return             # <<<<<<<<<<<<<<
 * 
 * 	def openPrepare(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "PyCafe.pyx":137
 * 
 * 	##################################################################################
 * 	def openNoWait(self):             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelOpenPolicy.setFlushSendBufferKind(WITH_PEND_EVENT)
 * 		self._c_cafe.channelOpenPolicy.setWhenToFlushSendBuffer(FLUSH_DESIGNATED_TO_CLIENT)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":142
 * 		return
 * 
 * 	def openPrepare(self):             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelOpenPolicy.setFlushSendBufferKind(WITH_PEND_EVENT)
 * 		self._c_cafe.channelOpenPolicy.setWhenToFlushSendBuffer(FLUSH_DESIGNATED_TO_CLIENT)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_11openPrepare(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_11openPrepare(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("openPrepare (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_10openPrepare(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_10openPrepare(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("openPrepare", 0);

  /* "PyCafe.pyx":143
 * 
 * 	def openPrepare(self):
 * 		self._c_cafe.channelOpenPolicy.setFlushSendBufferKind(WITH_PEND_EVENT)             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelOpenPolicy.setWhenToFlushSendBuffer(FLUSH_DESIGNATED_TO_CLIENT)
 * 		return
 */
  __pyx_v_self->_c_cafe->channelOpenPolicy.setFlushSendBufferKind(WITH_PEND_EVENT);

  /* "PyCafe.pyx":144
 * 	def openPrepare(self):
 * 		self._c_cafe.channelOpenPolicy.setFlushSendBufferKind(WITH_PEND_EVENT)
 * 		self._c_cafe.channelOpenPolicy.setWhenToFlushSendBuffer(FLUSH_DESIGNATED_TO_CLIENT)             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
  __pyx_v_self->_c_cafe->channelOpenPolicy.setWhenToFlushSendBuffer(FLUSH_DESIGNATED_TO_CLIENT);

  /* "PyCafe.pyx":145
 * 		self._c_cafe.channelOpenPolicy.setFlushSendBufferKind(WITH_PEND_EVENT)
 * 		self._c_cafe.channelOpenPolicy.setWhenToFlushSendBuffer(FLUSH_DESIGNATED_TO_CLIENT)
 * 		return             # <<<<<<<<<<<<<<
 * 
 * 	def openGroupPrepare(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "PyCafe.pyx":142
 * 		return
 * 
 * 	def openPrepare(self):             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelOpenPolicy.setFlushSendBufferKind(WITH_PEND_EVENT)
 * 		self._c_cafe.channelOpenPolicy.setWhenToFlushSendBuffer(FLUSH_DESIGNATED_TO_CLIENT)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":147
 * 		return
 * 
 * 	def openGroupPrepare(self):             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelOpenGroupPolicy.setFlushSendBufferKind(WITH_PEND_EVENT)
 * 		self._c_cafe.channelOpenGroupPolicy.setWhenToFlushSendBuffer(FLUSH_DESIGNATED_TO_CLIENT)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_13openGroupPrepare(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_13openGroupPrepare(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("openGroupPrepare (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_12openGroupPrepare(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_12openGroupPrepare(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("openGroupPrepare", 0);

  /* "PyCafe.pyx":148
 * 
 * 	def openGroupPrepare(self):
 * 		self._c_cafe.channelOpenGroupPolicy.setFlushSendBufferKind(WITH_PEND_EVENT)             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelOpenGroupPolicy.setWhenToFlushSendBuffer(FLUSH_DESIGNATED_TO_CLIENT)
 * 		return
 */
  __pyx_v_self->_c_cafe->channelOpenGroupPolicy.setFlushSendBufferKind(WITH_PEND_EVENT);

  /* "PyCafe.pyx":149
 * 	def openGroupPrepare(self):
 * 		self._c_cafe.channelOpenGroupPolicy.setFlushSendBufferKind(WITH_PEND_EVENT)
 * 		self._c_cafe.channelOpenGroupPolicy.setWhenToFlushSendBuffer(FLUSH_DESIGNATED_TO_CLIENT)             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
  __pyx_v_self->_c_cafe->channelOpenGroupPolicy.setWhenToFlushSendBuffer(FLUSH_DESIGNATED_TO_CLIENT);

  /* "PyCafe.pyx":150
 * 		self._c_cafe.channelOpenGroupPolicy.setFlushSendBufferKind(WITH_PEND_EVENT)
 * 		self._c_cafe.channelOpenGroupPolicy.setWhenToFlushSendBuffer(FLUSH_DESIGNATED_TO_CLIENT)
 * 		return             # <<<<<<<<<<<<<<
 * 
 * 	def openMonitorPrepare(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "PyCafe.pyx":147
 * 		return
 * 
 * 	def openGroupPrepare(self):             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelOpenGroupPolicy.setFlushSendBufferKind(WITH_PEND_EVENT)
 * 		self._c_cafe.channelOpenGroupPolicy.setWhenToFlushSendBuffer(FLUSH_DESIGNATED_TO_CLIENT)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":152
 * 		return
 * 
 * 	def openMonitorPrepare(self):             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelMonitorPolicy.setFlushSendBufferKind(WITH_FLUSH_IO)
 * 		self._c_cafe.channelMonitorPolicy.setWhenToFlushSendBuffer(FLUSH_DESIGNATED_TO_CLIENT)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_15openMonitorPrepare(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_15openMonitorPrepare(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("openMonitorPrepare (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_14openMonitorPrepare(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_14openMonitorPrepare(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("openMonitorPrepare", 0);

  /* "PyCafe.pyx":153
 * 
 * 	def openMonitorPrepare(self):
 * 		self._c_cafe.channelMonitorPolicy.setFlushSendBufferKind(WITH_FLUSH_IO)             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelMonitorPolicy.setWhenToFlushSendBuffer(FLUSH_DESIGNATED_TO_CLIENT)
 * 		return
 */
  __pyx_v_self->_c_cafe->channelMonitorPolicy.setFlushSendBufferKind(WITH_FLUSH_IO);

  /* "PyCafe.pyx":154
 * 	def openMonitorPrepare(self):
 * 		self._c_cafe.channelMonitorPolicy.setFlushSendBufferKind(WITH_FLUSH_IO)
 * 		self._c_cafe.channelMonitorPolicy.setWhenToFlushSendBuffer(FLUSH_DESIGNATED_TO_CLIENT)             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
  __pyx_v_self->_c_cafe->channelMonitorPolicy.setWhenToFlushSendBuffer(FLUSH_DESIGNATED_TO_CLIENT);

  /* "PyCafe.pyx":155
 * 		self._c_cafe.channelMonitorPolicy.setFlushSendBufferKind(WITH_FLUSH_IO)
 * 		self._c_cafe.channelMonitorPolicy.setWhenToFlushSendBuffer(FLUSH_DESIGNATED_TO_CLIENT)
 * 		return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "PyCafe.pyx":152
 * 		return
 * 
 * 	def openMonitorPrepare(self):             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelMonitorPolicy.setFlushSendBufferKind(WITH_FLUSH_IO)
 * 		self._c_cafe.channelMonitorPolicy.setWhenToFlushSendBuffer(FLUSH_DESIGNATED_TO_CLIENT)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":159
 * 
 * 	##################################################################################
 * 	def openNow(self):             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelOpenPolicy.flushSendBufferNow()
 * 		self._c_cafe.channelOpenPolicy.setWhenToFlushSendBuffer(FLUSH_NOW)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_17openNow(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_17openNow(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("openNow (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_16openNow(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_16openNow(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("openNow", 0);

  /* "PyCafe.pyx":160
 * 	##################################################################################
 * 	def openNow(self):
 * 		self._c_cafe.channelOpenPolicy.flushSendBufferNow()             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelOpenPolicy.setWhenToFlushSendBuffer(FLUSH_NOW)
 * 		self._c_cafe.channelOpenPolicy.setFlushSendBufferKind(WITH_PEND_EVENT)
 */
  __pyx_v_self->_c_cafe->channelOpenPolicy.flushSendBufferNow();

  /* "PyCafe.pyx":161
 * 	def openNow(self):
 * 		self._c_cafe.channelOpenPolicy.flushSendBufferNow()
 * 		self._c_cafe.channelOpenPolicy.setWhenToFlushSendBuffer(FLUSH_NOW)             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelOpenPolicy.setFlushSendBufferKind(WITH_PEND_EVENT)
 * 		return
 */
  __pyx_v_self->_c_cafe->channelOpenPolicy.setWhenToFlushSendBuffer(FLUSH_NOW);

  /* "PyCafe.pyx":162
 * 		self._c_cafe.channelOpenPolicy.flushSendBufferNow()
 * 		self._c_cafe.channelOpenPolicy.setWhenToFlushSendBuffer(FLUSH_NOW)
 * 		self._c_cafe.channelOpenPolicy.setFlushSendBufferKind(WITH_PEND_EVENT)             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
  __pyx_v_self->_c_cafe->channelOpenPolicy.setFlushSendBufferKind(WITH_PEND_EVENT);

  /* "PyCafe.pyx":163
 * 		self._c_cafe.channelOpenPolicy.setWhenToFlushSendBuffer(FLUSH_NOW)
 * 		self._c_cafe.channelOpenPolicy.setFlushSendBufferKind(WITH_PEND_EVENT)
 * 		return             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "PyCafe.pyx":159
 * 
 * 	##################################################################################
 * 	def openNow(self):             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelOpenPolicy.flushSendBufferNow()
 * 		self._c_cafe.channelOpenPolicy.setWhenToFlushSendBuffer(FLUSH_NOW)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":166
 * 
 * 	##################################################################################
 * 	def openNowAndWait(self, timeout):             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelOpenPolicy.setTimeout(timeout)
 * 		self._c_cafe.channelOpenPolicy.flushSendBufferNow()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_19openNowAndWait(PyObject *__pyx_v_self, PyObject *__pyx_v_timeout); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_19openNowAndWait(PyObject *__pyx_v_self, PyObject *__pyx_v_timeout) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("openNowAndWait (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_18openNowAndWait(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_timeout));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_18openNowAndWait(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_timeout) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("openNowAndWait", 0);

  /* "PyCafe.pyx":167
 * 	##################################################################################
 * 	def openNowAndWait(self, timeout):
 * 		self._c_cafe.channelOpenPolicy.setTimeout(timeout)             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelOpenPolicy.flushSendBufferNow()
 * 		#reset
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_timeout); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->_c_cafe->channelOpenPolicy.setTimeout(__pyx_t_1);

  /* "PyCafe.pyx":168
 * 	def openNowAndWait(self, timeout):
 * 		self._c_cafe.channelOpenPolicy.setTimeout(timeout)
 * 		self._c_cafe.channelOpenPolicy.flushSendBufferNow()             # <<<<<<<<<<<<<<
 * 		#reset
 * 		self._c_cafe.channelOpenPolicy.setWhenToFlushSendBuffer(FLUSH_NOW)
 */
  __pyx_v_self->_c_cafe->channelOpenPolicy.flushSendBufferNow();

  /* "PyCafe.pyx":170
 * 		self._c_cafe.channelOpenPolicy.flushSendBufferNow()
 * 		#reset
 * 		self._c_cafe.channelOpenPolicy.setWhenToFlushSendBuffer(FLUSH_NOW)             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelOpenPolicy.setFlushSendBufferKind(WITH_PEND_EVENT)
 * 		return
 */
  __pyx_v_self->_c_cafe->channelOpenPolicy.setWhenToFlushSendBuffer(FLUSH_NOW);

  /* "PyCafe.pyx":171
 * 		#reset
 * 		self._c_cafe.channelOpenPolicy.setWhenToFlushSendBuffer(FLUSH_NOW)
 * 		self._c_cafe.channelOpenPolicy.setFlushSendBufferKind(WITH_PEND_EVENT)             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
  __pyx_v_self->_c_cafe->channelOpenPolicy.setFlushSendBufferKind(WITH_PEND_EVENT);

  /* "PyCafe.pyx":172
 * 		self._c_cafe.channelOpenPolicy.setWhenToFlushSendBuffer(FLUSH_NOW)
 * 		self._c_cafe.channelOpenPolicy.setFlushSendBufferKind(WITH_PEND_EVENT)
 * 		return             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "PyCafe.pyx":166
 * 
 * 	##################################################################################
 * 	def openNowAndWait(self, timeout):             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelOpenPolicy.setTimeout(timeout)
 * 		self._c_cafe.channelOpenPolicy.flushSendBufferNow()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.openNowAndWait", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":177
 * 
 * 	##################################################################################
 * 	def openGroupNowAndWait(self, timeout):             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelOpenGroupPolicy.setTimeout(timeout)
 * 		self._c_cafe.channelOpenGroupPolicy.flushSendBufferNow()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_21openGroupNowAndWait(PyObject *__pyx_v_self, PyObject *__pyx_v_timeout); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_21openGroupNowAndWait(PyObject *__pyx_v_self, PyObject *__pyx_v_timeout) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("openGroupNowAndWait (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_20openGroupNowAndWait(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_timeout));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_20openGroupNowAndWait(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_timeout) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("openGroupNowAndWait", 0);

  /* "PyCafe.pyx":178
 * 	##################################################################################
 * 	def openGroupNowAndWait(self, timeout):
 * 		self._c_cafe.channelOpenGroupPolicy.setTimeout(timeout)             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelOpenGroupPolicy.flushSendBufferNow()
 * 		#reset
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_timeout); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->_c_cafe->channelOpenGroupPolicy.setTimeout(__pyx_t_1);

  /* "PyCafe.pyx":179
 * 	def openGroupNowAndWait(self, timeout):
 * 		self._c_cafe.channelOpenGroupPolicy.setTimeout(timeout)
 * 		self._c_cafe.channelOpenGroupPolicy.flushSendBufferNow()             # <<<<<<<<<<<<<<
 * 		#reset
 * 		self._c_cafe.channelOpenGroupPolicy.setWhenToFlushSendBuffer(FLUSH_NOW)
 */
  __pyx_v_self->_c_cafe->channelOpenGroupPolicy.flushSendBufferNow();

  /* "PyCafe.pyx":181
 * 		self._c_cafe.channelOpenGroupPolicy.flushSendBufferNow()
 * 		#reset
 * 		self._c_cafe.channelOpenGroupPolicy.setWhenToFlushSendBuffer(FLUSH_NOW)             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelOpenGroupPolicy.setFlushSendBufferKind(WITH_FLUSH_IO)
 * 		return
 */
  __pyx_v_self->_c_cafe->channelOpenGroupPolicy.setWhenToFlushSendBuffer(FLUSH_NOW);

  /* "PyCafe.pyx":182
 * 		#reset
 * 		self._c_cafe.channelOpenGroupPolicy.setWhenToFlushSendBuffer(FLUSH_NOW)
 * 		self._c_cafe.channelOpenGroupPolicy.setFlushSendBufferKind(WITH_FLUSH_IO)             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
  __pyx_v_self->_c_cafe->channelOpenGroupPolicy.setFlushSendBufferKind(WITH_FLUSH_IO);

  /* "PyCafe.pyx":183
 * 		self._c_cafe.channelOpenGroupPolicy.setWhenToFlushSendBuffer(FLUSH_NOW)
 * 		self._c_cafe.channelOpenGroupPolicy.setFlushSendBufferKind(WITH_FLUSH_IO)
 * 		return             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "PyCafe.pyx":177
 * 
 * 	##################################################################################
 * 	def openGroupNowAndWait(self, timeout):             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelOpenGroupPolicy.setTimeout(timeout)
 * 		self._c_cafe.channelOpenGroupPolicy.flushSendBufferNow()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.openGroupNowAndWait", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":189
 * 
 *   ##################################################################################
 * 	def openMonitorNow(self):             # <<<<<<<<<<<<<<
 * 
 * 		self._c_cafe.channelMonitorPolicy.flushSendBufferNow()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_23openMonitorNow(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_23openMonitorNow(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("openMonitorNow (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_22openMonitorNow(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_22openMonitorNow(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("openMonitorNow", 0);

  /* "PyCafe.pyx":191
 * 	def openMonitorNow(self):
 * 
 * 		self._c_cafe.channelMonitorPolicy.flushSendBufferNow()             # <<<<<<<<<<<<<<
 * 		#reset
 * 		self._c_cafe.channelMonitorPolicy.setWhenToFlushSendBuffer(FLUSH_NOW)
 */
  __pyx_v_self->_c_cafe->channelMonitorPolicy.flushSendBufferNow();

  /* "PyCafe.pyx":193
 * 		self._c_cafe.channelMonitorPolicy.flushSendBufferNow()
 * 		#reset
 * 		self._c_cafe.channelMonitorPolicy.setWhenToFlushSendBuffer(FLUSH_NOW)             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelMonitorPolicy.setFlushSendBufferKind(WITH_FLUSH_IO)
 * 		return
 */
  __pyx_v_self->_c_cafe->channelMonitorPolicy.setWhenToFlushSendBuffer(FLUSH_NOW);

  /* "PyCafe.pyx":194
 * 		#reset
 * 		self._c_cafe.channelMonitorPolicy.setWhenToFlushSendBuffer(FLUSH_NOW)
 * 		self._c_cafe.channelMonitorPolicy.setFlushSendBufferKind(WITH_FLUSH_IO)             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
  __pyx_v_self->_c_cafe->channelMonitorPolicy.setFlushSendBufferKind(WITH_FLUSH_IO);

  /* "PyCafe.pyx":195
 * 		self._c_cafe.channelMonitorPolicy.setWhenToFlushSendBuffer(FLUSH_NOW)
 * 		self._c_cafe.channelMonitorPolicy.setFlushSendBufferKind(WITH_FLUSH_IO)
 * 		return             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "PyCafe.pyx":189
 * 
 *   ##################################################################################
 * 	def openMonitorNow(self):             # <<<<<<<<<<<<<<
 * 
 * 		self._c_cafe.channelMonitorPolicy.flushSendBufferNow()
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":200
 * 
 *   ##################################################################################
 * 	def openMonitorNowAndWait(self, timeout):             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelMonitorPolicy.setTimeout(timeout)
 * 		self._c_cafe.channelMonitorPolicy.flushSendBufferNow()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_25openMonitorNowAndWait(PyObject *__pyx_v_self, PyObject *__pyx_v_timeout); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_25openMonitorNowAndWait(PyObject *__pyx_v_self, PyObject *__pyx_v_timeout) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("openMonitorNowAndWait (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_24openMonitorNowAndWait(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_timeout));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_24openMonitorNowAndWait(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_timeout) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("openMonitorNowAndWait", 0);

  /* "PyCafe.pyx":201
 *   ##################################################################################
 * 	def openMonitorNowAndWait(self, timeout):
 * 		self._c_cafe.channelMonitorPolicy.setTimeout(timeout)             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelMonitorPolicy.flushSendBufferNow()
 * 		time.sleep(timeout)
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_timeout); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->_c_cafe->channelMonitorPolicy.setTimeout(__pyx_t_1);

  /* "PyCafe.pyx":202
 * 	def openMonitorNowAndWait(self, timeout):
 * 		self._c_cafe.channelMonitorPolicy.setTimeout(timeout)
 * 		self._c_cafe.channelMonitorPolicy.flushSendBufferNow()             # <<<<<<<<<<<<<<
 * 		time.sleep(timeout)
 * 		#reset
 */
  __pyx_v_self->_c_cafe->channelMonitorPolicy.flushSendBufferNow();

  /* "PyCafe.pyx":203
 * 		self._c_cafe.channelMonitorPolicy.setTimeout(timeout)
 * 		self._c_cafe.channelMonitorPolicy.flushSendBufferNow()
 * 		time.sleep(timeout)             # <<<<<<<<<<<<<<
 * 		#reset
 * 		self._c_cafe.channelMonitorPolicy.setWhenToFlushSendBuffer(FLUSH_NOW)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_sleep); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_timeout); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_v_timeout);
    __Pyx_GIVEREF(__pyx_v_timeout);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_timeout);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PyCafe.pyx":205
 * 		time.sleep(timeout)
 * 		#reset
 * 		self._c_cafe.channelMonitorPolicy.setWhenToFlushSendBuffer(FLUSH_NOW)             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelMonitorPolicy.setFlushSendBufferKind(WITH_FLUSH_IO)
 * 
 */
  __pyx_v_self->_c_cafe->channelMonitorPolicy.setWhenToFlushSendBuffer(FLUSH_NOW);

  /* "PyCafe.pyx":206
 * 		#reset
 * 		self._c_cafe.channelMonitorPolicy.setWhenToFlushSendBuffer(FLUSH_NOW)
 * 		self._c_cafe.channelMonitorPolicy.setFlushSendBufferKind(WITH_FLUSH_IO)             # <<<<<<<<<<<<<<
 * 
 * 		return
 */
  __pyx_v_self->_c_cafe->channelMonitorPolicy.setFlushSendBufferKind(WITH_FLUSH_IO);

  /* "PyCafe.pyx":208
 * 		self._c_cafe.channelMonitorPolicy.setFlushSendBufferKind(WITH_FLUSH_IO)
 * 
 * 		return             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "PyCafe.pyx":200
 * 
 *   ##################################################################################
 * 	def openMonitorNowAndWait(self, timeout):             # <<<<<<<<<<<<<<
 * 		self._c_cafe.channelMonitorPolicy.setTimeout(timeout)
 * 		self._c_cafe.channelMonitorPolicy.flushSendBufferNow()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.openMonitorNowAndWait", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":218
 * 
 * 	##################################################################################
 * 	def attachContext(self, handlePV):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int handle=0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_27attachContext(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_27attachContext(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("attachContext (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_26attachContext(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_26attachContext(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  CYTHON_UNUSED unsigned int __pyx_v_handle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("attachContext", 0);

  /* "PyCafe.pyx":220
 * 	def attachContext(self, handlePV):
 * 
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			return self._c_cafe.attachContextByHandle(handlePV)
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":221
 * 
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			return self._c_cafe.attachContextByHandle(handlePV)
 * 		elif isinstance(handlePV, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":222
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			return self._c_cafe.attachContextByHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			return self._c_cafe.attachContextByPVName(handlePV)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->_c_cafe->attachContextByHandle(__pyx_t_4)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCafe.pyx":221
 * 
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			return self._c_cafe.attachContextByHandle(handlePV)
 * 		elif isinstance(handlePV, (str)) == 1:
 */
  }

  /* "PyCafe.pyx":223
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			return self._c_cafe.attachContextByHandle(handlePV)
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			return self._c_cafe.attachContextByPVName(handlePV)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":224
 * 			return self._c_cafe.attachContextByHandle(handlePV)
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			return self._c_cafe.attachContextByPVName(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def attachContext.\n\
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_handlePV); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->_c_cafe->attachContextByPVName(__pyx_t_6)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCafe.pyx":223
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			return self._c_cafe.attachContextByHandle(handlePV)
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			return self._c_cafe.attachContextByPVName(handlePV)
 * 		else:
 */
  }

  /* "PyCafe.pyx":226
 * 			return self._c_cafe.attachContextByPVName(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def attachContext.\n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__110, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "PyCafe.pyx":218
 * 
 * 	##################################################################################
 * 	def attachContext(self, handlePV):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int handle=0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.attachContext", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":233
 * 
 * 	##################################################################################
 * 	def loadCollectionsFromXML(self, const char * fileName):             # <<<<<<<<<<<<<<
 * 		with nogil:
 * 			self._c_cafe.loadCollectionsFromXML(fileName)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_29loadCollectionsFromXML(PyObject *__pyx_v_self, PyObject *__pyx_arg_fileName); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_29loadCollectionsFromXML(PyObject *__pyx_v_self, PyObject *__pyx_arg_fileName) {
  char const *__pyx_v_fileName;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("loadCollectionsFromXML (wrapper)", 0);
  assert(__pyx_arg_fileName); {
    __pyx_v_fileName = __Pyx_PyObject_AsString(__pyx_arg_fileName); if (unlikely((!__pyx_v_fileName) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.loadCollectionsFromXML", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_28loadCollectionsFromXML(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((char const *)__pyx_v_fileName));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_28loadCollectionsFromXML(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, char const *__pyx_v_fileName) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("loadCollectionsFromXML", 0);

  /* "PyCafe.pyx":234
 * 	##################################################################################
 * 	def loadCollectionsFromXML(self, const char * fileName):
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			self._c_cafe.loadCollectionsFromXML(fileName)
 * 		return
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":235
 * 	def loadCollectionsFromXML(self, const char * fileName):
 * 		with nogil:
 * 			self._c_cafe.loadCollectionsFromXML(fileName)             # <<<<<<<<<<<<<<
 * 		return
 * 	##################################################################################
 */
        __pyx_v_self->_c_cafe->loadCollectionsFromXML(__pyx_v_fileName);
      }

      /* "PyCafe.pyx":234
 * 	##################################################################################
 * 	def loadCollectionsFromXML(self, const char * fileName):
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			self._c_cafe.loadCollectionsFromXML(fileName)
 * 		return
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "PyCafe.pyx":236
 * 		with nogil:
 * 			self._c_cafe.loadCollectionsFromXML(fileName)
 * 		return             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "PyCafe.pyx":233
 * 
 * 	##################################################################################
 * 	def loadCollectionsFromXML(self, const char * fileName):             # <<<<<<<<<<<<<<
 * 		with nogil:
 * 			self._c_cafe.loadCollectionsFromXML(fileName)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":239
 * 	##################################################################################
 * 	##################################################################################
 * 	def loadGroupsFromXML(self, const char * fileName):             # <<<<<<<<<<<<<<
 * 		with nogil:
 * 			self._c_cafe.loadGroupsFromXML(fileName)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_31loadGroupsFromXML(PyObject *__pyx_v_self, PyObject *__pyx_arg_fileName); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_31loadGroupsFromXML(PyObject *__pyx_v_self, PyObject *__pyx_arg_fileName) {
  char const *__pyx_v_fileName;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("loadGroupsFromXML (wrapper)", 0);
  assert(__pyx_arg_fileName); {
    __pyx_v_fileName = __Pyx_PyObject_AsString(__pyx_arg_fileName); if (unlikely((!__pyx_v_fileName) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.loadGroupsFromXML", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_30loadGroupsFromXML(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((char const *)__pyx_v_fileName));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_30loadGroupsFromXML(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, char const *__pyx_v_fileName) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("loadGroupsFromXML", 0);

  /* "PyCafe.pyx":240
 * 	##################################################################################
 * 	def loadGroupsFromXML(self, const char * fileName):
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			self._c_cafe.loadGroupsFromXML(fileName)
 * 		return
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":241
 * 	def loadGroupsFromXML(self, const char * fileName):
 * 		with nogil:
 * 			self._c_cafe.loadGroupsFromXML(fileName)             # <<<<<<<<<<<<<<
 * 		return
 * 	##################################################################################
 */
        __pyx_v_self->_c_cafe->loadGroupsFromXML(__pyx_v_fileName);
      }

      /* "PyCafe.pyx":240
 * 	##################################################################################
 * 	def loadGroupsFromXML(self, const char * fileName):
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			self._c_cafe.loadGroupsFromXML(fileName)
 * 		return
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "PyCafe.pyx":242
 * 		with nogil:
 * 			self._c_cafe.loadGroupsFromXML(fileName)
 * 		return             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "PyCafe.pyx":239
 * 	##################################################################################
 * 	##################################################################################
 * 	def loadGroupsFromXML(self, const char * fileName):             # <<<<<<<<<<<<<<
 * 		with nogil:
 * 			self._c_cafe.loadGroupsFromXML(fileName)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":247
 * 
 * 	##################################################################################
 * 	def groupList(self):             # <<<<<<<<<<<<<<
 * 		cdef vector[string] gList
 * 		#conservative guess
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_33groupList(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_33groupList(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("groupList (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_32groupList(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_32groupList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self) {
  std::vector<std::string>  __pyx_v_gList;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("groupList", 0);

  /* "PyCafe.pyx":250
 * 		cdef vector[string] gList
 * 		#conservative guess
 * 		gList.reserve(36)             # <<<<<<<<<<<<<<
 * 
 * 		self._c_cafe.groupList(gList)
 */
  __pyx_v_gList.reserve(36);

  /* "PyCafe.pyx":252
 * 		gList.reserve(36)
 * 
 * 		self._c_cafe.groupList(gList)             # <<<<<<<<<<<<<<
 * 
 * 		#Place in list to avoid this warning:
 */
  __pyx_v_self->_c_cafe->groupList(__pyx_v_gList);

  /* "PyCafe.pyx":259
 * 		#for i in range (0, len(gList)):
 * 		#	gl.append(gList[i])
 * 		return gList             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_gList); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":247
 * 
 * 	##################################################################################
 * 	def groupList(self):             # <<<<<<<<<<<<<<
 * 		cdef vector[string] gList
 * 		#conservative guess
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCafe.groupList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":263
 * 
 * 
 * 	def getMonitorIDInCallback(self, handle):             # <<<<<<<<<<<<<<
 * 		return self.hh.getUsrArgsAsUInt(handle)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_35getMonitorIDInCallback(PyObject *__pyx_v_self, PyObject *__pyx_v_handle); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_35getMonitorIDInCallback(PyObject *__pyx_v_self, PyObject *__pyx_v_handle) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMonitorIDInCallback (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_34getMonitorIDInCallback(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handle));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_34getMonitorIDInCallback(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMonitorIDInCallback", 0);

  /* "PyCafe.pyx":264
 * 
 * 	def getMonitorIDInCallback(self, handle):
 * 		return self.hh.getUsrArgsAsUInt(handle)             # <<<<<<<<<<<<<<
 * 
 * 	def getDataTypeInCallback(self, handle):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handle); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->hh.getUsrArgsAsUInt(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":263
 * 
 * 
 * 	def getMonitorIDInCallback(self, handle):             # <<<<<<<<<<<<<<
 * 		return self.hh.getUsrArgsAsUInt(handle)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PyCafe.CyCafe.getMonitorIDInCallback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":266
 * 		return self.hh.getUsrArgsAsUInt(handle)
 * 
 * 	def getDataTypeInCallback(self, handle):             # <<<<<<<<<<<<<<
 * 		return <long>self.hh.getDataTypeCB(handle)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_37getDataTypeInCallback(PyObject *__pyx_v_self, PyObject *__pyx_v_handle); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_37getDataTypeInCallback(PyObject *__pyx_v_self, PyObject *__pyx_v_handle) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDataTypeInCallback (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_36getDataTypeInCallback(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handle));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_36getDataTypeInCallback(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDataTypeInCallback", 0);

  /* "PyCafe.pyx":267
 * 
 * 	def getDataTypeInCallback(self, handle):
 * 		return <long>self.hh.getDataTypeCB(handle)             # <<<<<<<<<<<<<<
 * 
 * 	def getDbrDataTypeInCallback(self, handle):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handle); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_From_long(((long)__pyx_v_self->hh.getDataTypeCB(__pyx_t_1))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":266
 * 		return self.hh.getUsrArgsAsUInt(handle)
 * 
 * 	def getDataTypeInCallback(self, handle):             # <<<<<<<<<<<<<<
 * 		return <long>self.hh.getDataTypeCB(handle)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PyCafe.CyCafe.getDataTypeInCallback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":269
 * 		return <long>self.hh.getDataTypeCB(handle)
 * 
 * 	def getDbrDataTypeInCallback(self, handle):             # <<<<<<<<<<<<<<
 * 		return <long>self.hh.getDbrDataTypeCB(handle)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_39getDbrDataTypeInCallback(PyObject *__pyx_v_self, PyObject *__pyx_v_handle); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_39getDbrDataTypeInCallback(PyObject *__pyx_v_self, PyObject *__pyx_v_handle) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDbrDataTypeInCallback (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_38getDbrDataTypeInCallback(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handle));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_38getDbrDataTypeInCallback(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDbrDataTypeInCallback", 0);

  /* "PyCafe.pyx":270
 * 
 * 	def getDbrDataTypeInCallback(self, handle):
 * 		return <long>self.hh.getDbrDataTypeCB(handle)             # <<<<<<<<<<<<<<
 * 
 * 	def getDbrBaseInCallback(self, handle):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handle); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_From_long(((long)__pyx_v_self->hh.getDbrDataTypeCB(__pyx_t_1))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":269
 * 		return <long>self.hh.getDataTypeCB(handle)
 * 
 * 	def getDbrDataTypeInCallback(self, handle):             # <<<<<<<<<<<<<<
 * 		return <long>self.hh.getDbrDataTypeCB(handle)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PyCafe.CyCafe.getDbrDataTypeInCallback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":272
 * 		return <long>self.hh.getDbrDataTypeCB(handle)
 * 
 * 	def getDbrBaseInCallback(self, handle):             # <<<<<<<<<<<<<<
 * 		return <unsigned int>self.hh.getCafeDbrTypeCB(handle)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_41getDbrBaseInCallback(PyObject *__pyx_v_self, PyObject *__pyx_v_handle); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_41getDbrBaseInCallback(PyObject *__pyx_v_self, PyObject *__pyx_v_handle) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDbrBaseInCallback (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_40getDbrBaseInCallback(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handle));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_40getDbrBaseInCallback(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDbrBaseInCallback", 0);

  /* "PyCafe.pyx":273
 * 
 * 	def getDbrBaseInCallback(self, handle):
 * 		return <unsigned int>self.hh.getCafeDbrTypeCB(handle)             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handle); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(((unsigned int)__pyx_v_self->hh.getCafeDbrTypeCB(__pyx_t_1))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":272
 * 		return <long>self.hh.getDbrDataTypeCB(handle)
 * 
 * 	def getDbrBaseInCallback(self, handle):             # <<<<<<<<<<<<<<
 * 		return <unsigned int>self.hh.getCafeDbrTypeCB(handle)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PyCafe.CyCafe.getDbrBaseInCallback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":276
 * 
 * 	##################################################################################
 * 	def getHandlesFromWithinGroup(self, gHandleName):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int groupHandle=0
 * 		if isinstance(gHandleName, (int,long)) == 1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_43getHandlesFromWithinGroup(PyObject *__pyx_v_self, PyObject *__pyx_v_gHandleName); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_43getHandlesFromWithinGroup(PyObject *__pyx_v_self, PyObject *__pyx_v_gHandleName) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getHandlesFromWithinGroup (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_42getHandlesFromWithinGroup(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_gHandleName));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_42getHandlesFromWithinGroup(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_gHandleName) {
  unsigned int __pyx_v_groupHandle;
  std::vector<unsigned int>  __pyx_v_hList;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  char const *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getHandlesFromWithinGroup", 0);

  /* "PyCafe.pyx":277
 * 	##################################################################################
 * 	def getHandlesFromWithinGroup(self, gHandleName):
 * 		cdef unsigned int groupHandle=0             # <<<<<<<<<<<<<<
 * 		if isinstance(gHandleName, (int,long)) == 1:
 * 			groupHandle=gHandleName
 */
  __pyx_v_groupHandle = 0;

  /* "PyCafe.pyx":278
 * 	def getHandlesFromWithinGroup(self, gHandleName):
 * 		cdef unsigned int groupHandle=0
 * 		if isinstance(gHandleName, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			groupHandle=gHandleName
 * 		elif isinstance(gHandleName, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_gHandleName); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_gHandleName); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":279
 * 		cdef unsigned int groupHandle=0
 * 		if isinstance(gHandleName, (int,long)) == 1:
 * 			groupHandle=gHandleName             # <<<<<<<<<<<<<<
 * 		elif isinstance(gHandleName, (str)) == 1:
 * 			groupHandle=self.hh.getGroupHandleFromGroupName(gHandleName)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_gHandleName); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_groupHandle = __pyx_t_4;

    /* "PyCafe.pyx":278
 * 	def getHandlesFromWithinGroup(self, gHandleName):
 * 		cdef unsigned int groupHandle=0
 * 		if isinstance(gHandleName, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			groupHandle=gHandleName
 * 		elif isinstance(gHandleName, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":280
 * 		if isinstance(gHandleName, (int,long)) == 1:
 * 			groupHandle=gHandleName
 * 		elif isinstance(gHandleName, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			groupHandle=self.hh.getGroupHandleFromGroupName(gHandleName)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_gHandleName); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":281
 * 			groupHandle=gHandleName
 * 		elif isinstance(gHandleName, (str)) == 1:
 * 			groupHandle=self.hh.getGroupHandleFromGroupName(gHandleName)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getHandlesFromWithinGroup. \n\
 */
    __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_v_gHandleName); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_groupHandle = __pyx_v_self->hh.getGroupHandleFromGroupName(__pyx_t_5);

    /* "PyCafe.pyx":280
 * 		if isinstance(gHandleName, (int,long)) == 1:
 * 			groupHandle=gHandleName
 * 		elif isinstance(gHandleName, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			groupHandle=self.hh.getGroupHandleFromGroupName(gHandleName)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":283
 * 			groupHandle=self.hh.getGroupHandleFromGroupName(gHandleName)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getHandlesFromWithinGroup. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if groupHandle, else <type 'str'> if groupName")
 * 		cdef vector[unsigned int] hList
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__111, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":286
 * First input argument, should be <type 'int'> if groupHandle, else <type 'str'> if groupName")
 * 		cdef vector[unsigned int] hList
 * 		hList=self.hh.getHandlesFromWithinGroupV(groupHandle)             # <<<<<<<<<<<<<<
 * 		return hList
 * 	##################################################################################
 */
  __pyx_v_hList = __pyx_v_self->hh.getHandlesFromWithinGroupV(__pyx_v_groupHandle);

  /* "PyCafe.pyx":287
 * 		cdef vector[unsigned int] hList
 * 		hList=self.hh.getHandlesFromWithinGroupV(groupHandle)
 * 		return hList             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __pyx_convert_vector_to_py_unsigned_int(__pyx_v_hList); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":276
 * 
 * 	##################################################################################
 * 	def getHandlesFromWithinGroup(self, gHandleName):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int groupHandle=0
 * 		if isinstance(gHandleName, (int,long)) == 1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("PyCafe.CyCafe.getHandlesFromWithinGroup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":293
 * 
 * 	##################################################################################
 * 	def close(self, handlePV):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int handle=0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_45close(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_45close(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_44close(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_44close(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  unsigned int __pyx_v_handle;
  int __pyx_v_stat;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("close", 0);

  /* "PyCafe.pyx":295
 * 	def close(self, handlePV):
 * 
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":296
 * 
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":297
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":296
 * 
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":298
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":299
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def close.\n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":298
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":301
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def close.\n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__112, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":305
 * 
 * 		cdef int stat
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			stat=self._c_cafe.close(handle)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":306
 * 		cdef int stat
 * 		with nogil:
 * 			stat=self._c_cafe.close(handle)             # <<<<<<<<<<<<<<
 * 
 * 		return stat
 */
        __pyx_v_stat = __pyx_v_self->_c_cafe->close(__pyx_v_handle);
      }

      /* "PyCafe.pyx":305
 * 
 * 		cdef int stat
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			stat=self._c_cafe.close(handle)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L8;
        }
        __pyx_L8:;
      }
  }

  /* "PyCafe.pyx":308
 * 			stat=self._c_cafe.close(handle)
 * 
 * 		return stat             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_stat); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":293
 * 
 * 	##################################################################################
 * 	def close(self, handlePV):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int handle=0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":311
 * 
 * 	##################################################################################
 * 	def closeChannels(self):             # <<<<<<<<<<<<<<
 * 		cdef int stat
 * 		with nogil:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_47closeChannels(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_47closeChannels(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("closeChannels (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_46closeChannels(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_46closeChannels(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self) {
  int __pyx_v_stat;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("closeChannels", 0);

  /* "PyCafe.pyx":313
 * 	def closeChannels(self):
 * 		cdef int stat
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			stat=self._c_cafe.closeChannels()
 * 		return stat
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":314
 * 		cdef int stat
 * 		with nogil:
 * 			stat=self._c_cafe.closeChannels()             # <<<<<<<<<<<<<<
 * 		return stat
 * 
 */
        __pyx_v_stat = __pyx_v_self->_c_cafe->closeChannels();
      }

      /* "PyCafe.pyx":313
 * 	def closeChannels(self):
 * 		cdef int stat
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			stat=self._c_cafe.closeChannels()
 * 		return stat
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "PyCafe.pyx":315
 * 		with nogil:
 * 			stat=self._c_cafe.closeChannels()
 * 		return stat             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_stat); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":311
 * 
 * 	##################################################################################
 * 	def closeChannels(self):             # <<<<<<<<<<<<<<
 * 		cdef int stat
 * 		with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCafe.closeChannels", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":318
 * 
 * 	##################################################################################
 * 	def allConnected(self):             # <<<<<<<<<<<<<<
 * 		return <bint>self._c_cafe.allChannelsConnected()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_49allConnected(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_49allConnected(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("allConnected (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_48allConnected(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_48allConnected(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("allConnected", 0);

  /* "PyCafe.pyx":319
 * 	##################################################################################
 * 	def allConnected(self):
 * 		return <bint>self._c_cafe.allChannelsConnected()             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->_c_cafe->allChannelsConnected() != 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":318
 * 
 * 	##################################################################################
 * 	def allConnected(self):             # <<<<<<<<<<<<<<
 * 		return <bint>self._c_cafe.allChannelsConnected()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCafe.allConnected", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":322
 * 
 * 	##################################################################################
 * 	def isConnected(self, handlePV):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_51isConnected(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_51isConnected(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isConnected (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_50isConnected(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_50isConnected(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  unsigned int __pyx_v_handle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isConnected", 0);

  /* "PyCafe.pyx":323
 * 	##################################################################################
 * 	def isConnected(self, handlePV):
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":324
 * 	def isConnected(self, handlePV):
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":325
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":324
 * 	def isConnected(self, handlePV):
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":326
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":327
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def isConnected. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":326
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":329
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def isConnected. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 		return <bint>self._c_cafe.isChannelConnected(handle)
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__113, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":331
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def isConnected. \n\
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 		return <bint>self._c_cafe.isChannelConnected(handle)             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyBool_FromLong((__pyx_v_self->_c_cafe->isChannelConnected(__pyx_v_handle) != 0)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":322
 * 
 * 	##################################################################################
 * 	def isConnected(self, handlePV):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.isConnected", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":334
 * 
 * 	##################################################################################
 * 	def printDisconnected(self):             # <<<<<<<<<<<<<<
 * 		return self._c_cafe.printDisconnectedHandles()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_53printDisconnected(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_53printDisconnected(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printDisconnected (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_52printDisconnected(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_52printDisconnected(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("printDisconnected", 0);

  /* "PyCafe.pyx":335
 * 	##################################################################################
 * 	def printDisconnected(self):
 * 		return self._c_cafe.printDisconnectedHandles()             # <<<<<<<<<<<<<<
 * 
 * 	def printDisconnectedHandles(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_c_cafe->printDisconnectedHandles()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":334
 * 
 * 	##################################################################################
 * 	def printDisconnected(self):             # <<<<<<<<<<<<<<
 * 		return self._c_cafe.printDisconnectedHandles()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCafe.printDisconnected", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":337
 * 		return self._c_cafe.printDisconnectedHandles()
 * 
 * 	def printDisconnectedHandles(self):             # <<<<<<<<<<<<<<
 * 		return self._c_cafe.printDisconnectedHandles()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_55printDisconnectedHandles(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_55printDisconnectedHandles(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printDisconnectedHandles (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_54printDisconnectedHandles(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_54printDisconnectedHandles(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("printDisconnectedHandles", 0);

  /* "PyCafe.pyx":338
 * 
 * 	def printDisconnectedHandles(self):
 * 		return self._c_cafe.printDisconnectedHandles()             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_c_cafe->printDisconnectedHandles()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":337
 * 		return self._c_cafe.printDisconnectedHandles()
 * 
 * 	def printDisconnectedHandles(self):             # <<<<<<<<<<<<<<
 * 		return self._c_cafe.printDisconnectedHandles()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCafe.printDisconnectedHandles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":341
 * 
 * 	##################################################################################
 * 	def printHandles(self):             # <<<<<<<<<<<<<<
 * 		return self._c_cafe.printHandles()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_57printHandles(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_57printHandles(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printHandles (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_56printHandles(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_56printHandles(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("printHandles", 0);

  /* "PyCafe.pyx":342
 * 	##################################################################################
 * 	def printHandles(self):
 * 		return self._c_cafe.printHandles()             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_c_cafe->printHandles()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":341
 * 
 * 	##################################################################################
 * 	def printHandles(self):             # <<<<<<<<<<<<<<
 * 		return self._c_cafe.printHandles()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCafe.printHandles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":345
 * 
 * 	##################################################################################
 * 	def printHandle(self, handlePV):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_59printHandle(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_59printHandle(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printHandle (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_58printHandle(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_58printHandle(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  unsigned int __pyx_v_handle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("printHandle", 0);

  /* "PyCafe.pyx":346
 * 	##################################################################################
 * 	def printHandle(self, handlePV):
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":347
 * 	def printHandle(self, handlePV):
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":348
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":347
 * 	def printHandle(self, handlePV):
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":349
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":350
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def printHandle. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":349
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":352
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def printHandle. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 		return self._c_cafe.printHandle(handle)
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__114, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":354
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def printHandle. \n\
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 		return self._c_cafe.printHandle(handle)             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->_c_cafe->printHandle(__pyx_v_handle)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":345
 * 
 * 	##################################################################################
 * 	def printHandle(self, handlePV):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.printHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":359
 * 
 * 	##################################################################################
 * 	def getStatusSeverity(self, int statusCode):             # <<<<<<<<<<<<<<
 * 		return self._c_cafe.getCafeStatusSeverity().message(statusCode)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_61getStatusSeverity(PyObject *__pyx_v_self, PyObject *__pyx_arg_statusCode); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_61getStatusSeverity(PyObject *__pyx_v_self, PyObject *__pyx_arg_statusCode) {
  int __pyx_v_statusCode;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getStatusSeverity (wrapper)", 0);
  assert(__pyx_arg_statusCode); {
    __pyx_v_statusCode = __Pyx_PyInt_As_int(__pyx_arg_statusCode); if (unlikely((__pyx_v_statusCode == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.getStatusSeverity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_60getStatusSeverity(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((int)__pyx_v_statusCode));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_60getStatusSeverity(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, int __pyx_v_statusCode) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getStatusSeverity", 0);

  /* "PyCafe.pyx":360
 * 	##################################################################################
 * 	def getStatusSeverity(self, int statusCode):
 * 		return self._c_cafe.getCafeStatusSeverity().message(statusCode)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_self->_c_cafe->getCafeStatusSeverity().message(__pyx_v_statusCode)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":359
 * 
 * 	##################################################################################
 * 	def getStatusSeverity(self, int statusCode):             # <<<<<<<<<<<<<<
 * 		return self._c_cafe.getCafeStatusSeverity().message(statusCode)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCafe.getStatusSeverity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":364
 * 
 * 	##################################################################################
 * 	def getStatus(self, handlePV):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_63getStatus(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_63getStatus(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getStatus (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_62getStatus(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_62getStatus(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  unsigned int __pyx_v_handle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getStatus", 0);

  /* "PyCafe.pyx":365
 * 	##################################################################################
 * 	def getStatus(self, handlePV):
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":366
 * 	def getStatus(self, handlePV):
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":367
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":366
 * 	def getStatus(self, handlePV):
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":368
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":369
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getStatus. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":368
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":371
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getStatus. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 		return self.hh.getStatus(handle)
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__115, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":373
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getStatus. \n\
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 		return self.hh.getStatus(handle)             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->hh.getStatus(__pyx_v_handle)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":364
 * 
 * 	##################################################################################
 * 	def getStatus(self, handlePV):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.getStatus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":376
 * 
 * 	##################################################################################
 * 	def getAlarmStatusSeverity(self,handlePV):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_65getAlarmStatusSeverity(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_65getAlarmStatusSeverity(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAlarmStatusSeverity (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_64getAlarmStatusSeverity(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_64getAlarmStatusSeverity(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  unsigned int __pyx_v_handle;
  short __pyx_v_aStatSev[2];
  CYTHON_UNUSED int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getAlarmStatusSeverity", 0);

  /* "PyCafe.pyx":377
 * 	##################################################################################
 * 	def getAlarmStatusSeverity(self,handlePV):
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":378
 * 	def getAlarmStatusSeverity(self,handlePV):
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":379
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":378
 * 	def getAlarmStatusSeverity(self,handlePV):
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":380
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":381
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def get. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":380
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":383
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def get. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__116, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":387
 * 
 * 		cdef short aStatSev[2]
 * 		status=self.hh.getAlarmStatusSeverity(handle,aStatSev)             # <<<<<<<<<<<<<<
 * 		return aStatSev[0], aStatSev[1]
 * 
 */
  __pyx_v_status = __pyx_v_self->hh.getAlarmStatusSeverity(__pyx_v_handle, __pyx_v_aStatSev);

  /* "PyCafe.pyx":388
 * 		cdef short aStatSev[2]
 * 		status=self.hh.getAlarmStatusSeverity(handle,aStatSev)
 * 		return aStatSev[0], aStatSev[1]             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_short((__pyx_v_aStatSev[0])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_short((__pyx_v_aStatSev[1])); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":376
 * 
 * 	##################################################################################
 * 	def getAlarmStatusSeverity(self,handlePV):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("PyCafe.CyCafe.getAlarmStatusSeverity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":391
 * 
 * 	##################################################################################
 * 	def getTimeStamp(self,handlePV):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_67getTimeStamp(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_67getTimeStamp(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTimeStamp (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_66getTimeStamp(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_66getTimeStamp(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  unsigned int __pyx_v_handle;
  HandleHelper __pyx_v_hh;
  PyObject *__pyx_v_ll = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getTimeStamp", 0);

  /* "PyCafe.pyx":392
 * 	##################################################################################
 * 	def getTimeStamp(self,handlePV):
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":393
 * 	def getTimeStamp(self,handlePV):
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":394
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":393
 * 	def getTimeStamp(self,handlePV):
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":395
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":396
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def get. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":395
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":398
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def get. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__117, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":403
 * 		cdef HandleHelper hh
 * 
 * 		hh._etsNorm=self.hh.getEpicsTimeStampAsUInt32(handle)             # <<<<<<<<<<<<<<
 * 
 * 		cpdef ll=[]
 */
  __pyx_v_hh._etsNorm = __pyx_v_self->hh.getEpicsTimeStampAsUInt32(__pyx_v_handle);

  /* "PyCafe.pyx":405
 * 		hh._etsNorm=self.hh.getEpicsTimeStampAsUInt32(handle)
 * 
 * 		cpdef ll=[]             # <<<<<<<<<<<<<<
 * 		ll.append(hh._etsNorm.secPastEpoch)
 * 		ll.append(hh._etsNorm.nsec)
 */
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_ll = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "PyCafe.pyx":406
 * 
 * 		cpdef ll=[]
 * 		ll.append(hh._etsNorm.secPastEpoch)             # <<<<<<<<<<<<<<
 * 		ll.append(hh._etsNorm.nsec)
 * 		return ll
 */
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_hh._etsNorm.secPastEpoch); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_ll, __pyx_t_5); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "PyCafe.pyx":407
 * 		cpdef ll=[]
 * 		ll.append(hh._etsNorm.secPastEpoch)
 * 		ll.append(hh._etsNorm.nsec)             # <<<<<<<<<<<<<<
 * 		return ll
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_hh._etsNorm.nsec); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_ll, __pyx_t_5); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "PyCafe.pyx":408
 * 		ll.append(hh._etsNorm.secPastEpoch)
 * 		ll.append(hh._etsNorm.nsec)
 * 		return ll             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ll);
  __pyx_r = __pyx_v_ll;
  goto __pyx_L0;

  /* "PyCafe.pyx":391
 * 
 * 	##################################################################################
 * 	def getTimeStamp(self,handlePV):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.getTimeStamp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ll);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":411
 * 
 * 	##################################################################################
 * 	def getTimeStampAsDate(self,handlePV):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_69getTimeStampAsDate(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_69getTimeStampAsDate(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTimeStampAsDate (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_68getTimeStampAsDate(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_68getTimeStampAsDate(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  unsigned int __pyx_v_handle;
  HandleHelper __pyx_v_hh;
  PyObject *__pyx_v_ld = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getTimeStampAsDate", 0);

  /* "PyCafe.pyx":412
 * 	##################################################################################
 * 	def getTimeStampAsDate(self,handlePV):
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":413
 * 	def getTimeStampAsDate(self,handlePV):
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":414
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":413
 * 	def getTimeStampAsDate(self,handlePV):
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":415
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":416
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def get. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":415
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":418
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def get. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__118, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":423
 * 		cdef HandleHelper hh
 * 
 * 		hh._etsDate =self.hh.getEpicsTimeStampAsDate(handle)             # <<<<<<<<<<<<<<
 * 
 * 		cpdef ld=[]
 */
  __pyx_v_hh._etsDate = __pyx_v_self->hh.getEpicsTimeStampAsDate(__pyx_v_handle);

  /* "PyCafe.pyx":425
 * 		hh._etsDate =self.hh.getEpicsTimeStampAsDate(handle)
 * 
 * 		cpdef ld=[]             # <<<<<<<<<<<<<<
 * 		ld.append(hh._etsDate.year )
 * 		ld.append(hh._etsDate.mon )
 */
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_ld = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "PyCafe.pyx":426
 * 
 * 		cpdef ld=[]
 * 		ld.append(hh._etsDate.year )             # <<<<<<<<<<<<<<
 * 		ld.append(hh._etsDate.mon )
 * 		ld.append(hh._etsDate.day )
 */
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_short(__pyx_v_hh._etsDate.year); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_ld, __pyx_t_5); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "PyCafe.pyx":427
 * 		cpdef ld=[]
 * 		ld.append(hh._etsDate.year )
 * 		ld.append(hh._etsDate.mon )             # <<<<<<<<<<<<<<
 * 		ld.append(hh._etsDate.day )
 * 		ld.append(hh._etsDate.hour )
 */
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_short(__pyx_v_hh._etsDate.mon); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_ld, __pyx_t_5); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "PyCafe.pyx":428
 * 		ld.append(hh._etsDate.year )
 * 		ld.append(hh._etsDate.mon )
 * 		ld.append(hh._etsDate.day )             # <<<<<<<<<<<<<<
 * 		ld.append(hh._etsDate.hour )
 * 		ld.append(hh._etsDate.min )
 */
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_short(__pyx_v_hh._etsDate.day); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_ld, __pyx_t_5); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "PyCafe.pyx":429
 * 		ld.append(hh._etsDate.mon )
 * 		ld.append(hh._etsDate.day )
 * 		ld.append(hh._etsDate.hour )             # <<<<<<<<<<<<<<
 * 		ld.append(hh._etsDate.min )
 * 		ld.append(hh._etsDate.sec )
 */
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_short(__pyx_v_hh._etsDate.hour); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_ld, __pyx_t_5); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "PyCafe.pyx":430
 * 		ld.append(hh._etsDate.day )
 * 		ld.append(hh._etsDate.hour )
 * 		ld.append(hh._etsDate.min )             # <<<<<<<<<<<<<<
 * 		ld.append(hh._etsDate.sec )
 * 		ld.append(hh._etsDate.nsec )
 */
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_short(__pyx_v_hh._etsDate.min); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_ld, __pyx_t_5); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "PyCafe.pyx":431
 * 		ld.append(hh._etsDate.hour )
 * 		ld.append(hh._etsDate.min )
 * 		ld.append(hh._etsDate.sec )             # <<<<<<<<<<<<<<
 * 		ld.append(hh._etsDate.nsec )
 * 		return ld
 */
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_short(__pyx_v_hh._etsDate.sec); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_ld, __pyx_t_5); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "PyCafe.pyx":432
 * 		ld.append(hh._etsDate.min )
 * 		ld.append(hh._etsDate.sec )
 * 		ld.append(hh._etsDate.nsec )             # <<<<<<<<<<<<<<
 * 		return ld
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_hh._etsDate.nsec); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_ld, __pyx_t_5); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "PyCafe.pyx":433
 * 		ld.append(hh._etsDate.sec )
 * 		ld.append(hh._etsDate.nsec )
 * 		return ld             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ld);
  __pyx_r = __pyx_v_ld;
  goto __pyx_L0;

  /* "PyCafe.pyx":411
 * 
 * 	##################################################################################
 * 	def getTimeStampAsDate(self,handlePV):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.getTimeStampAsDate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ld);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":437
 * 	##################################################################################
 * 	### Allow user to choose whether or not to open #####
 * 	cpdef checkForHandle(self, str pv, bint force=True):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int _handle=0;
 * 		_handle=self.hh.getHandleFromPV(pv)
 */

static PyObject *__pyx_pw_6PyCafe_6CyCafe_71checkForHandle(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_6PyCafe_6CyCafe_checkForHandle(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_pv, int __pyx_skip_dispatch, struct __pyx_opt_args_6PyCafe_6CyCafe_checkForHandle *__pyx_optional_args) {
  int __pyx_v_force = ((int)1);
  unsigned int __pyx_v__handle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  char const *__pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("checkForHandle", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_force = __pyx_optional_args->force;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_checkForHandle); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_71checkForHandle)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_force); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_pv);
      __Pyx_GIVEREF(__pyx_v_pv);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_pv);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PyCafe.pyx":438
 * 	### Allow user to choose whether or not to open #####
 * 	cpdef checkForHandle(self, str pv, bint force=True):
 * 		cdef unsigned int _handle=0;             # <<<<<<<<<<<<<<
 * 		_handle=self.hh.getHandleFromPV(pv)
 * 		if _handle == 0:
 */
  __pyx_v__handle = 0;

  /* "PyCafe.pyx":439
 * 	cpdef checkForHandle(self, str pv, bint force=True):
 * 		cdef unsigned int _handle=0;
 * 		_handle=self.hh.getHandleFromPV(pv)             # <<<<<<<<<<<<<<
 * 		if _handle == 0:
 * 			if (force):
 */
  __pyx_t_8 = __Pyx_PyObject_AsString(__pyx_v_pv); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v__handle = __pyx_v_self->hh.getHandleFromPV(__pyx_t_8);

  /* "PyCafe.pyx":440
 * 		cdef unsigned int _handle=0;
 * 		_handle=self.hh.getHandleFromPV(pv)
 * 		if _handle == 0:             # <<<<<<<<<<<<<<
 * 			if (force):
 * 				return self.open(pv)
 */
  __pyx_t_9 = ((__pyx_v__handle == 0) != 0);
  if (__pyx_t_9) {

    /* "PyCafe.pyx":441
 * 		_handle=self.hh.getHandleFromPV(pv)
 * 		if _handle == 0:
 * 			if (force):             # <<<<<<<<<<<<<<
 * 				return self.open(pv)
 * 			else:
 */
    __pyx_t_9 = (__pyx_v_force != 0);
    if (__pyx_t_9) {

      /* "PyCafe.pyx":442
 * 		if _handle == 0:
 * 			if (force):
 * 				return self.open(pv)             # <<<<<<<<<<<<<<
 * 			else:
 * 				return 0
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_open); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_pv); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_pv);
        __Pyx_GIVEREF(__pyx_v_pv);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_pv);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "PyCafe.pyx":441
 * 		_handle=self.hh.getHandleFromPV(pv)
 * 		if _handle == 0:
 * 			if (force):             # <<<<<<<<<<<<<<
 * 				return self.open(pv)
 * 			else:
 */
    }

    /* "PyCafe.pyx":444
 * 				return self.open(pv)
 * 			else:
 * 				return 0             # <<<<<<<<<<<<<<
 * 		else:
 * 			return _handle
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_int_0);
      __pyx_r = __pyx_int_0;
      goto __pyx_L0;
    }

    /* "PyCafe.pyx":440
 * 		cdef unsigned int _handle=0;
 * 		_handle=self.hh.getHandleFromPV(pv)
 * 		if _handle == 0:             # <<<<<<<<<<<<<<
 * 			if (force):
 * 				return self.open(pv)
 */
  }

  /* "PyCafe.pyx":446
 * 				return 0
 * 		else:
 * 			return _handle             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v__handle); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "PyCafe.pyx":437
 * 	##################################################################################
 * 	### Allow user to choose whether or not to open #####
 * 	cpdef checkForHandle(self, str pv, bint force=True):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int _handle=0;
 * 		_handle=self.hh.getHandleFromPV(pv)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("PyCafe.CyCafe.checkForHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_71checkForHandle(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_71checkForHandle(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pv = 0;
  int __pyx_v_force;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("checkForHandle (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pv,&__pyx_n_s_force,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pv)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_force);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "checkForHandle") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pv = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_force = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_force == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_force = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("checkForHandle", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.checkForHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pv), (&PyUnicode_Type), 1, "pv", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_70checkForHandle(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_pv, __pyx_v_force);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_70checkForHandle(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_pv, int __pyx_v_force) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6PyCafe_6CyCafe_checkForHandle __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("checkForHandle", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.force = __pyx_v_force;
  __pyx_t_1 = __pyx_vtabptr_6PyCafe_CyCafe->checkForHandle(__pyx_v_self, __pyx_v_pv, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCafe.checkForHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":451
 * 
 * 	##################################################################################
 * 	cpdef checkForHandleList(self, list pvList, bint force=True):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int nToOpen=0
 */

static PyObject *__pyx_pw_6PyCafe_6CyCafe_73checkForHandleList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_6PyCafe_6CyCafe_checkForHandleList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_pvList, int __pyx_skip_dispatch, struct __pyx_opt_args_6PyCafe_6CyCafe_checkForHandleList *__pyx_optional_args) {
  int __pyx_v_force = ((int)1);
  unsigned int __pyx_v_nToOpen;
  PyObject *__pyx_v_handleList = NULL;
  unsigned int __pyx_v__handle;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  char const *__pyx_t_9;
  int __pyx_t_10;
  unsigned int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("checkForHandleList", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_force = __pyx_optional_args->force;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_checkForHandleList); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_73checkForHandleList)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_force); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_pvList);
      __Pyx_GIVEREF(__pyx_v_pvList);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_pvList);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PyCafe.pyx":453
 * 	cpdef checkForHandleList(self, list pvList, bint force=True):
 * 
 * 		cdef unsigned int nToOpen=0             # <<<<<<<<<<<<<<
 * 
 * 		handleList=[]
 */
  __pyx_v_nToOpen = 0;

  /* "PyCafe.pyx":455
 * 		cdef unsigned int nToOpen=0
 * 
 * 		handleList=[]             # <<<<<<<<<<<<<<
 * 		cdef unsigned int _handle=0
 * 		for i in range(0, len(pvList)):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_handleList = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCafe.pyx":456
 * 
 * 		handleList=[]
 * 		cdef unsigned int _handle=0             # <<<<<<<<<<<<<<
 * 		for i in range(0, len(pvList)):
 * 			_handle=self.hh.getHandleFromPV(pvList[i])
 */
  __pyx_v__handle = 0;

  /* "PyCafe.pyx":457
 * 		handleList=[]
 * 		cdef unsigned int _handle=0
 * 		for i in range(0, len(pvList)):             # <<<<<<<<<<<<<<
 * 			_handle=self.hh.getHandleFromPV(pvList[i])
 * 			if _handle == 0:
 */
  if (unlikely(__pyx_v_pvList == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_6 = PyList_GET_SIZE(__pyx_v_pvList); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_6; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "PyCafe.pyx":458
 * 		cdef unsigned int _handle=0
 * 		for i in range(0, len(pvList)):
 * 			_handle=self.hh.getHandleFromPV(pvList[i])             # <<<<<<<<<<<<<<
 * 			if _handle == 0:
 * 				if (force):
 */
    if (unlikely(__pyx_v_pvList == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_pvList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v__handle = __pyx_v_self->hh.getHandleFromPV(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "PyCafe.pyx":459
 * 		for i in range(0, len(pvList)):
 * 			_handle=self.hh.getHandleFromPV(pvList[i])
 * 			if _handle == 0:             # <<<<<<<<<<<<<<
 * 				if (force):
 * 					nToOpen=nToOpen+1;
 */
    __pyx_t_10 = ((__pyx_v__handle == 0) != 0);
    if (__pyx_t_10) {

      /* "PyCafe.pyx":460
 * 			_handle=self.hh.getHandleFromPV(pvList[i])
 * 			if _handle == 0:
 * 				if (force):             # <<<<<<<<<<<<<<
 * 					nToOpen=nToOpen+1;
 * 					self.openNoWait()
 */
      __pyx_t_10 = (__pyx_v_force != 0);
      if (__pyx_t_10) {

        /* "PyCafe.pyx":461
 * 			if _handle == 0:
 * 				if (force):
 * 					nToOpen=nToOpen+1;             # <<<<<<<<<<<<<<
 * 					self.openNoWait()
 * 					_handle=self.open(pvList[i])
 */
        __pyx_v_nToOpen = (__pyx_v_nToOpen + 1);

        /* "PyCafe.pyx":462
 * 				if (force):
 * 					nToOpen=nToOpen+1;
 * 					self.openNoWait()             # <<<<<<<<<<<<<<
 * 					_handle=self.open(pvList[i])
 * 				handleList.append(_handle)
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_openNoWait); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        if (__pyx_t_4) {
          __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else {
          __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "PyCafe.pyx":463
 * 					nToOpen=nToOpen+1;
 * 					self.openNoWait()
 * 					_handle=self.open(pvList[i])             # <<<<<<<<<<<<<<
 * 				handleList.append(_handle)
 * 			else:
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_open); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        if (unlikely(__pyx_v_pvList == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_pvList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        if (!__pyx_t_7) {
          __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_1);
        } else {
          __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7); __pyx_t_7 = NULL;
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
          __pyx_t_4 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_11 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_11 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_v__handle = __pyx_t_11;

        /* "PyCafe.pyx":460
 * 			_handle=self.hh.getHandleFromPV(pvList[i])
 * 			if _handle == 0:
 * 				if (force):             # <<<<<<<<<<<<<<
 * 					nToOpen=nToOpen+1;
 * 					self.openNoWait()
 */
      }

      /* "PyCafe.pyx":464
 * 					self.openNoWait()
 * 					_handle=self.open(pvList[i])
 * 				handleList.append(_handle)             # <<<<<<<<<<<<<<
 * 			else:
 * 				handleList.append(_handle)
 */
      __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v__handle); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_handleList, __pyx_t_1); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "PyCafe.pyx":459
 * 		for i in range(0, len(pvList)):
 * 			_handle=self.hh.getHandleFromPV(pvList[i])
 * 			if _handle == 0:             # <<<<<<<<<<<<<<
 * 				if (force):
 * 					nToOpen=nToOpen+1;
 */
      goto __pyx_L5;
    }

    /* "PyCafe.pyx":466
 * 				handleList.append(_handle)
 * 			else:
 * 				handleList.append(_handle)             # <<<<<<<<<<<<<<
 * 		if nToOpen > 0:
 * 			self.openNowAndWait(2.0+nToOpen*0.001)
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v__handle); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_handleList, __pyx_t_1); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L5:;
  }

  /* "PyCafe.pyx":467
 * 			else:
 * 				handleList.append(_handle)
 * 		if nToOpen > 0:             # <<<<<<<<<<<<<<
 * 			self.openNowAndWait(2.0+nToOpen*0.001)
 * 		return handleList
 */
  __pyx_t_10 = ((__pyx_v_nToOpen > 0) != 0);
  if (__pyx_t_10) {

    /* "PyCafe.pyx":468
 * 				handleList.append(_handle)
 * 		if nToOpen > 0:
 * 			self.openNowAndWait(2.0+nToOpen*0.001)             # <<<<<<<<<<<<<<
 * 		return handleList
 * 	##################################################################################
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_openNowAndWait); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyFloat_FromDouble((2.0 + (__pyx_v_nToOpen * 0.001))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "PyCafe.pyx":467
 * 			else:
 * 				handleList.append(_handle)
 * 		if nToOpen > 0:             # <<<<<<<<<<<<<<
 * 			self.openNowAndWait(2.0+nToOpen*0.001)
 * 		return handleList
 */
  }

  /* "PyCafe.pyx":469
 * 		if nToOpen > 0:
 * 			self.openNowAndWait(2.0+nToOpen*0.001)
 * 		return handleList             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_handleList);
  __pyx_r = __pyx_v_handleList;
  goto __pyx_L0;

  /* "PyCafe.pyx":451
 * 
 * 	##################################################################################
 * 	cpdef checkForHandleList(self, list pvList, bint force=True):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int nToOpen=0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("PyCafe.CyCafe.checkForHandleList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_handleList);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_73checkForHandleList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_73checkForHandleList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pvList = 0;
  int __pyx_v_force;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("checkForHandleList (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pvList,&__pyx_n_s_force,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pvList)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_force);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "checkForHandleList") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pvList = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_force = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_force == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_force = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("checkForHandleList", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.checkForHandleList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pvList), (&PyList_Type), 1, "pvList", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_72checkForHandleList(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_pvList, __pyx_v_force);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_72checkForHandleList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_pvList, int __pyx_v_force) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6PyCafe_6CyCafe_checkForHandleList __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("checkForHandleList", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.force = __pyx_v_force;
  __pyx_t_1 = __pyx_vtabptr_6PyCafe_CyCafe->checkForHandleList(__pyx_v_self, __pyx_v_pvList, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCafe.checkForHandleList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":474
 * 
 * 	##################################################################################
 * 	cpdef checkForGroupHandle(self, str gName, bint force=True):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int _ghandle=0;
 * 		_ghandle=self.hh.getGroupHandleFromGroupName(gName)
 */

static PyObject *__pyx_pw_6PyCafe_6CyCafe_75checkForGroupHandle(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_6PyCafe_6CyCafe_checkForGroupHandle(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_gName, int __pyx_skip_dispatch, struct __pyx_opt_args_6PyCafe_6CyCafe_checkForGroupHandle *__pyx_optional_args) {
  int __pyx_v_force = ((int)1);
  unsigned int __pyx_v__ghandle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  char const *__pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("checkForGroupHandle", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_force = __pyx_optional_args->force;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_checkForGroupHandle); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_75checkForGroupHandle)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_force); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_gName);
      __Pyx_GIVEREF(__pyx_v_gName);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_gName);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "PyCafe.pyx":475
 * 	##################################################################################
 * 	cpdef checkForGroupHandle(self, str gName, bint force=True):
 * 		cdef unsigned int _ghandle=0;             # <<<<<<<<<<<<<<
 * 		_ghandle=self.hh.getGroupHandleFromGroupName(gName)
 * 		if _ghandle == 0:
 */
  __pyx_v__ghandle = 0;

  /* "PyCafe.pyx":476
 * 	cpdef checkForGroupHandle(self, str gName, bint force=True):
 * 		cdef unsigned int _ghandle=0;
 * 		_ghandle=self.hh.getGroupHandleFromGroupName(gName)             # <<<<<<<<<<<<<<
 * 		if _ghandle == 0:
 * 			if (force):
 */
  __pyx_t_8 = __Pyx_PyObject_AsString(__pyx_v_gName); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v__ghandle = __pyx_v_self->hh.getGroupHandleFromGroupName(__pyx_t_8);

  /* "PyCafe.pyx":477
 * 		cdef unsigned int _ghandle=0;
 * 		_ghandle=self.hh.getGroupHandleFromGroupName(gName)
 * 		if _ghandle == 0:             # <<<<<<<<<<<<<<
 * 			if (force):
 * 				return self.groupOpen(gName)
 */
  __pyx_t_9 = ((__pyx_v__ghandle == 0) != 0);
  if (__pyx_t_9) {

    /* "PyCafe.pyx":478
 * 		_ghandle=self.hh.getGroupHandleFromGroupName(gName)
 * 		if _ghandle == 0:
 * 			if (force):             # <<<<<<<<<<<<<<
 * 				return self.groupOpen(gName)
 * 			else:
 */
    __pyx_t_9 = (__pyx_v_force != 0);
    if (__pyx_t_9) {

      /* "PyCafe.pyx":479
 * 		if _ghandle == 0:
 * 			if (force):
 * 				return self.groupOpen(gName)             # <<<<<<<<<<<<<<
 * 			else:
 * 				return 0
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_groupOpen); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_gName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_gName);
        __Pyx_GIVEREF(__pyx_v_gName);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_gName);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "PyCafe.pyx":478
 * 		_ghandle=self.hh.getGroupHandleFromGroupName(gName)
 * 		if _ghandle == 0:
 * 			if (force):             # <<<<<<<<<<<<<<
 * 				return self.groupOpen(gName)
 * 			else:
 */
    }

    /* "PyCafe.pyx":481
 * 				return self.groupOpen(gName)
 * 			else:
 * 				return 0             # <<<<<<<<<<<<<<
 * 		else:
 * 			return _ghandle
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_int_0);
      __pyx_r = __pyx_int_0;
      goto __pyx_L0;
    }

    /* "PyCafe.pyx":477
 * 		cdef unsigned int _ghandle=0;
 * 		_ghandle=self.hh.getGroupHandleFromGroupName(gName)
 * 		if _ghandle == 0:             # <<<<<<<<<<<<<<
 * 			if (force):
 * 				return self.groupOpen(gName)
 */
  }

  /* "PyCafe.pyx":483
 * 				return 0
 * 		else:
 * 			return _ghandle             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v__ghandle); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "PyCafe.pyx":474
 * 
 * 	##################################################################################
 * 	cpdef checkForGroupHandle(self, str gName, bint force=True):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int _ghandle=0;
 * 		_ghandle=self.hh.getGroupHandleFromGroupName(gName)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("PyCafe.CyCafe.checkForGroupHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_75checkForGroupHandle(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_75checkForGroupHandle(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_gName = 0;
  int __pyx_v_force;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("checkForGroupHandle (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gName,&__pyx_n_s_force,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gName)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_force);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "checkForGroupHandle") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_gName = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_force = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_force == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_force = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("checkForGroupHandle", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.checkForGroupHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gName), (&PyUnicode_Type), 1, "gName", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_74checkForGroupHandle(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_gName, __pyx_v_force);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_74checkForGroupHandle(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_gName, int __pyx_v_force) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6PyCafe_6CyCafe_checkForGroupHandle __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("checkForGroupHandle", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.force = __pyx_v_force;
  __pyx_t_1 = __pyx_vtabptr_6PyCafe_CyCafe->checkForGroupHandle(__pyx_v_self, __pyx_v_gName, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCafe.checkForGroupHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":488
 * 
 * 	##################################################################################
 * 	def getPVNameFromHandle(self, int h):             # <<<<<<<<<<<<<<
 * 		return self._c_cafe.getPVFromHandle(h)
 * 	##################################################################################
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_77getPVNameFromHandle(PyObject *__pyx_v_self, PyObject *__pyx_arg_h); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_77getPVNameFromHandle(PyObject *__pyx_v_self, PyObject *__pyx_arg_h) {
  int __pyx_v_h;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPVNameFromHandle (wrapper)", 0);
  assert(__pyx_arg_h); {
    __pyx_v_h = __Pyx_PyInt_As_int(__pyx_arg_h); if (unlikely((__pyx_v_h == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.getPVNameFromHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_76getPVNameFromHandle(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((int)__pyx_v_h));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_76getPVNameFromHandle(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, int __pyx_v_h) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPVNameFromHandle", 0);

  /* "PyCafe.pyx":489
 * 	##################################################################################
 * 	def getPVNameFromHandle(self, int h):
 * 		return self._c_cafe.getPVFromHandle(h)             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromString(__pyx_v_self->_c_cafe->getPVFromHandle(__pyx_v_h)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":488
 * 
 * 	##################################################################################
 * 	def getPVNameFromHandle(self, int h):             # <<<<<<<<<<<<<<
 * 		return self._c_cafe.getPVFromHandle(h)
 * 	##################################################################################
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyCafe.CyCafe.getPVNameFromHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":494
 * 
 * 	##################################################################################
 * 	def getHandleFromPVName(self, str name):             # <<<<<<<<<<<<<<
 * 		return self._c_cafe.getHandleFromPV(name)
 * 	##################################################################################
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_79getHandleFromPVName(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_79getHandleFromPVName(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getHandleFromPVName (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyUnicode_Type), 1, "name", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_78getHandleFromPVName(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject*)__pyx_v_name));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_78getHandleFromPVName(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getHandleFromPVName", 0);

  /* "PyCafe.pyx":495
 * 	##################################################################################
 * 	def getHandleFromPVName(self, str name):
 * 		return self._c_cafe.getHandleFromPV(name)             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_name); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_c_cafe->getHandleFromPV(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":494
 * 
 * 	##################################################################################
 * 	def getHandleFromPVName(self, str name):             # <<<<<<<<<<<<<<
 * 		return self._c_cafe.getHandleFromPV(name)
 * 	##################################################################################
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PyCafe.CyCafe.getHandleFromPVName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":500
 * 
 * 	##################################################################################
 * 	def getChannelInfo(self, handlePV):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_81getChannelInfo(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_81getChannelInfo(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getChannelInfo (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_80getChannelInfo(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_80getChannelInfo(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  unsigned int __pyx_v_handle;
  ChannelRegalia __pyx_v_cr;
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  struct __pyx_opt_args_6PyCafe_6CyCafe_checkForHandle __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getChannelInfo", 0);

  /* "PyCafe.pyx":501
 * 	##################################################################################
 * 	def getChannelInfo(self, handlePV):
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 		if isinstance(handlePV, (int,long)):
 * 			handle=handlePV
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":502
 * 	def getChannelInfo(self, handlePV):
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)):             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)):
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":503
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)):
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)):
 * 			handle=self.checkForHandle(handlePV, force=True)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":502
 * 	def getChannelInfo(self, handlePV):
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)):             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)):
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":504
 * 		if isinstance(handlePV, (int,long)):
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)):             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV, force=True)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":505
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)):
 * 			handle=self.checkForHandle(handlePV, force=True)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getChannelInfor \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6.__pyx_n = 1;
    __pyx_t_6.force = 1;
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, &__pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":504
 * 		if isinstance(handlePV, (int,long)):
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)):             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV, force=True)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":507
 * 			handle=self.checkForHandle(handlePV, force=True)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getChannelInfor \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__119, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 507; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 507; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":510
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 * 		if handle == 0:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)
 */
  __pyx_t_1 = ((__pyx_v_handle == 0) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":511
 * 
 * 		if handle == 0:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getChannelInfo")
 */
    __pyx_t_1 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":512
 * 		if handle == 0:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getChannelInfo")
 * 
 */
      __pyx_v_self->_c_cafe->printStatusMessage(ECAFE_INVALID_HANDLE);

      /* "PyCafe.pyx":511
 * 
 * 		if handle == 0:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getChannelInfo")
 */
    }

    /* "PyCafe.pyx":513
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getChannelInfo")             # <<<<<<<<<<<<<<
 * 
 * 		cdef ChannelRegalia cr
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__120, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":510
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 * 		if handle == 0:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)
 */
  }

  /* "PyCafe.pyx":517
 * 		cdef ChannelRegalia cr
 * 
 * 		status=self._c_cafe.getChannelInfo(handle,cr)             # <<<<<<<<<<<<<<
 * 
 * 		if status !=ICAFE_NORMAL:
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->_c_cafe->getChannelInfo(__pyx_v_handle, __pyx_v_cr)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_status = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "PyCafe.pyx":519
 * 		status=self._c_cafe.getChannelInfo(handle,cr)
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(ICAFE_NORMAL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyObject_RichCompare(__pyx_v_status, __pyx_t_5, Py_NE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_1) {

    /* "PyCafe.pyx":520
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getChannelInfo. Status = %d" %status)
 */
    __pyx_t_1 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":521
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getChannelInfo. Status = %d" %status)
 * 
 */
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_status); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_self->_c_cafe->printStatusMessage(__pyx_t_8);

      /* "PyCafe.pyx":520
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getChannelInfo. Status = %d" %status)
 */
    }

    /* "PyCafe.pyx":522
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getChannelInfo. Status = %d" %status)             # <<<<<<<<<<<<<<
 * 
 * 		return channelRegaliaToStruct(cr)
 */
    __pyx_t_7 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_2, __pyx_v_status); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_5, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":519
 * 		status=self._c_cafe.getChannelInfo(handle,cr)
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  }

  /* "PyCafe.pyx":524
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getChannelInfo. Status = %d" %status)
 * 
 * 		return channelRegaliaToStruct(cr)             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = ((PyObject *)__pyx_f_6PyCafe_channelRegaliaToStruct(__pyx_v_cr)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":500
 * 
 * 	##################################################################################
 * 	def getChannelInfo(self, handlePV):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("PyCafe.CyCafe.getChannelInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":528
 * 
 * 
 * 	def getChannelList(self, list listStrings):             # <<<<<<<<<<<<<<
 * 		return self._c_cafe.getFromGlobalChannelList(listStrings)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_83getChannelList(PyObject *__pyx_v_self, PyObject *__pyx_v_listStrings); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_83getChannelList(PyObject *__pyx_v_self, PyObject *__pyx_v_listStrings) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getChannelList (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_listStrings), (&PyList_Type), 1, "listStrings", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_82getChannelList(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject*)__pyx_v_listStrings));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_82getChannelList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_listStrings) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::string>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getChannelList", 0);

  /* "PyCafe.pyx":529
 * 
 * 	def getChannelList(self, list listStrings):
 * 		return self._c_cafe.getFromGlobalChannelList(listStrings)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_listStrings); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_self->_c_cafe->getFromGlobalChannelList(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":528
 * 
 * 
 * 	def getChannelList(self, list listStrings):             # <<<<<<<<<<<<<<
 * 		return self._c_cafe.getFromGlobalChannelList(listStrings)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PyCafe.CyCafe.getChannelList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":536
 * 
 * 	##################################################################################
 * 	def setDbrBase(self, handlePV, DBR_TYPE dbrBase):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int handle=0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_85setDbrBase(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_85setDbrBase(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handlePV = 0;
  DBR_TYPE __pyx_v_dbrBase;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setDbrBase (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handlePV,&__pyx_n_s_dbrBase,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handlePV)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dbrBase)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setDbrBase", 1, 2, 2, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setDbrBase") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_handlePV = values[0];
    __pyx_v_dbrBase = ((DBR_TYPE)__Pyx_PyInt_As_DBR_TYPE(values[1])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setDbrBase", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.setDbrBase", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_84setDbrBase(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handlePV, __pyx_v_dbrBase);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_84setDbrBase(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, DBR_TYPE __pyx_v_dbrBase) {
  unsigned int __pyx_v_handle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setDbrBase", 0);

  /* "PyCafe.pyx":538
 * 	def setDbrBase(self, handlePV, DBR_TYPE dbrBase):
 * 
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":539
 * 
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":540
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":539
 * 
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":541
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":542
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setDbrBase. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":541
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":544
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setDbrBase. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__121, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":548
 * 
 * 		#Print Warning Message
 * 		if dbrBase > DBR_TIME:             # <<<<<<<<<<<<<<
 * 			print ("WARNING: PyCafe def setDbrBase(handle/PV, DBR_TYPE)")
 * 			print ("Allowed DBR_TYPEs are DBR_PLAIN (0), DBR_STS(1), DBR_TIME(2)")
 */
  __pyx_t_1 = ((__pyx_v_dbrBase > DBR_TIME) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":549
 * 		#Print Warning Message
 * 		if dbrBase > DBR_TIME:
 * 			print ("WARNING: PyCafe def setDbrBase(handle/PV, DBR_TYPE)")             # <<<<<<<<<<<<<<
 * 			print ("Allowed DBR_TYPEs are DBR_PLAIN (0), DBR_STS(1), DBR_TIME(2)")
 * 			print ("The value entered was", dbrBase, "hence assuming DBR_TIME" )
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__122, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "PyCafe.pyx":550
 * 		if dbrBase > DBR_TIME:
 * 			print ("WARNING: PyCafe def setDbrBase(handle/PV, DBR_TYPE)")
 * 			print ("Allowed DBR_TYPEs are DBR_PLAIN (0), DBR_STS(1), DBR_TIME(2)")             # <<<<<<<<<<<<<<
 * 			print ("The value entered was", dbrBase, "hence assuming DBR_TIME" )
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__123, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "PyCafe.pyx":551
 * 			print ("WARNING: PyCafe def setDbrBase(handle/PV, DBR_TYPE)")
 * 			print ("Allowed DBR_TYPEs are DBR_PLAIN (0), DBR_STS(1), DBR_TIME(2)")
 * 			print ("The value entered was", dbrBase, "hence assuming DBR_TIME" )             # <<<<<<<<<<<<<<
 * 
 * 		return 	self.hh.setCafeDbrType(handle, dbrBase)
 */
    __pyx_t_5 = __Pyx_PyInt_From_DBR_TYPE(__pyx_v_dbrBase); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_kp_u_The_value_entered_was);
    __Pyx_GIVEREF(__pyx_kp_u_The_value_entered_was);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u_The_value_entered_was);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
    __Pyx_INCREF(__pyx_kp_u_hence_assuming_DBR_TIME);
    __Pyx_GIVEREF(__pyx_kp_u_hence_assuming_DBR_TIME);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_kp_u_hence_assuming_DBR_TIME);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "PyCafe.pyx":548
 * 
 * 		#Print Warning Message
 * 		if dbrBase > DBR_TIME:             # <<<<<<<<<<<<<<
 * 			print ("WARNING: PyCafe def setDbrBase(handle/PV, DBR_TYPE)")
 * 			print ("Allowed DBR_TYPEs are DBR_PLAIN (0), DBR_STS(1), DBR_TIME(2)")
 */
  }

  /* "PyCafe.pyx":553
 * 			print ("The value entered was", dbrBase, "hence assuming DBR_TIME" )
 * 
 * 		return 	self.hh.setCafeDbrType(handle, dbrBase)             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->hh.setCafeDbrType(__pyx_v_handle, __pyx_v_dbrBase)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 553; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":536
 * 
 * 	##################################################################################
 * 	def setDbrBase(self, handlePV, DBR_TYPE dbrBase):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int handle=0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("PyCafe.CyCafe.setDbrBase", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":558
 * 
 * 	##################################################################################
 * 	def getDbrBase(self, handlePV):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int handle=0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_87getDbrBase(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_87getDbrBase(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDbrBase (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_86getDbrBase(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_86getDbrBase(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  unsigned int __pyx_v_handle;
  DBR_TYPE __pyx_v__cafeDbrType;
  CYTHON_UNUSED int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDbrBase", 0);

  /* "PyCafe.pyx":560
 * 	def getDbrBase(self, handlePV):
 * 
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":561
 * 
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":562
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":561
 * 
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":563
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":564
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setDbrBase. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":563
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":566
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setDbrBase. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__124, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":569
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 * 		cdef DBR_TYPE _cafeDbrType=DBR_PLAIN             # <<<<<<<<<<<<<<
 * 		cdef int status=self.hh.getCafeDbrType(handle,_cafeDbrType)
 * 
 */
  __pyx_v__cafeDbrType = DBR_PLAIN;

  /* "PyCafe.pyx":570
 * 
 * 		cdef DBR_TYPE _cafeDbrType=DBR_PLAIN
 * 		cdef int status=self.hh.getCafeDbrType(handle,_cafeDbrType)             # <<<<<<<<<<<<<<
 * 
 * 		return _cafeDbrType
 */
  __pyx_v_status = __pyx_v_self->hh.getCafeDbrType(__pyx_v_handle, __pyx_v__cafeDbrType);

  /* "PyCafe.pyx":572
 * 		cdef int status=self.hh.getCafeDbrType(handle,_cafeDbrType)
 * 
 * 		return _cafeDbrType             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_DBR_TYPE(__pyx_v__cafeDbrType); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":558
 * 
 * 	##################################################################################
 * 	def getDbrBase(self, handlePV):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int handle=0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.getDbrBase", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":579
 * 
 * 	##################################################################################
 * 	def  getNonBlocking(self, handlePV):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_89getNonBlocking(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_89getNonBlocking(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNonBlocking (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_88getNonBlocking(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_88getNonBlocking(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  unsigned int __pyx_v_handle;
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNonBlocking", 0);

  /* "PyCafe.pyx":582
 * 	##################################################################################
 * 
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 		cdef int status
 * 
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":585
 * 		cdef int status
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":586
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":585
 * 		cdef int status
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":587
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":588
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def get. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":587
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":590
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def get. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 		with nogil:
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__125, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 590; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 590; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":592
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def get. \n\
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.getNonBlocking(handle)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":593
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 		with nogil:
 * 			status=self._c_cafe.getNonBlocking(handle)             # <<<<<<<<<<<<<<
 * 
 * 		if status != ICAFE_NORMAL:
 */
        __pyx_v_status = __pyx_v_self->_c_cafe->getNonBlocking(__pyx_v_handle);
      }

      /* "PyCafe.pyx":592
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def get. \n\
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.getNonBlocking(handle)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L8;
        }
        __pyx_L8:;
      }
  }

  /* "PyCafe.pyx":595
 * 			status=self._c_cafe.getNonBlocking(handle)
 * 
 * 		if status != ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  __pyx_t_1 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":596
 * 
 * 		if status != ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    __pyx_t_1 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":597
 * 		if status != ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
      __pyx_t_1 = ((__pyx_v_handle == 0) != 0);
      if (__pyx_t_1) {

        /* "PyCafe.pyx":598
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 */
        __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

        /* "PyCafe.pyx":597
 * 		if status != ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
        goto __pyx_L11;
      }

      /* "PyCafe.pyx":600
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def get. Status = %d" %status)
 * 
 */
      /*else*/ {
        __pyx_v_self->_c_cafe->printStatus(__pyx_v_handle, __pyx_v_status);
      }
      __pyx_L11:;

      /* "PyCafe.pyx":596
 * 
 * 		if status != ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    }

    /* "PyCafe.pyx":601
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def get. Status = %d" %status)             # <<<<<<<<<<<<<<
 * 
 * 		return status
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":595
 * 			status=self._c_cafe.getNonBlocking(handle)
 * 
 * 		if status != ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  }

  /* "PyCafe.pyx":603
 * 			raise Exception("EXCEPTION RAISED in PyCafe def get. Status = %d" %status)
 * 
 * 		return status             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":579
 * 
 * 	##################################################################################
 * 	def  getNonBlocking(self, handlePV):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("PyCafe.CyCafe.getNonBlocking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":607
 * 
 * 	##################################################################################
 * 	def  getStr(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.get(handlePV,'str')
 * 	##################################################################################
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_91getStr(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_91getStr(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getStr (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_90getStr(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_90getStr(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getStr", 0);

  /* "PyCafe.pyx":608
 * 	##################################################################################
 * 	def  getStr(self, handlePV):
 * 		return self.get(handlePV,'str')             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_3) {
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_handlePV);
  __Pyx_GIVEREF(__pyx_v_handlePV);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_handlePV);
  __Pyx_INCREF(__pyx_n_u_str);
  __Pyx_GIVEREF(__pyx_n_u_str);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_u_str);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":607
 * 
 * 	##################################################################################
 * 	def  getStr(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.get(handlePV,'str')
 * 	##################################################################################
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.getStr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":612
 * 
 * 	##################################################################################
 * 	def  getInt(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.get(handlePV,'int')
 * 	##################################################################################
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_93getInt(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_93getInt(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getInt (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_92getInt(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_92getInt(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getInt", 0);

  /* "PyCafe.pyx":613
 * 	##################################################################################
 * 	def  getInt(self, handlePV):
 * 		return self.get(handlePV,'int')             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_3) {
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_handlePV);
  __Pyx_GIVEREF(__pyx_v_handlePV);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_handlePV);
  __Pyx_INCREF(__pyx_n_u_int);
  __Pyx_GIVEREF(__pyx_n_u_int);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_u_int);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":612
 * 
 * 	##################################################################################
 * 	def  getInt(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.get(handlePV,'int')
 * 	##################################################################################
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.getInt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":617
 * 
 * 	##################################################################################
 * 	def  getFloat(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.get(handlePV,'float')
 * 	##################################################################################
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_95getFloat(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_95getFloat(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getFloat (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_94getFloat(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_94getFloat(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFloat", 0);

  /* "PyCafe.pyx":618
 * 	##################################################################################
 * 	def  getFloat(self, handlePV):
 * 		return self.get(handlePV,'float')             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_3) {
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_handlePV);
  __Pyx_GIVEREF(__pyx_v_handlePV);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_handlePV);
  __Pyx_INCREF(__pyx_n_u_float);
  __Pyx_GIVEREF(__pyx_n_u_float);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_u_float);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":617
 * 
 * 	##################################################################################
 * 	def  getFloat(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.get(handlePV,'float')
 * 	##################################################################################
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.getFloat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":622
 * 
 * 	##################################################################################
 * 	def  get(self, handlePV, str dt='native'):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_97get(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_97get(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handlePV = 0;
  PyObject *__pyx_v_dt = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handlePV,&__pyx_n_s_dt,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject*)__pyx_n_u_native);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handlePV)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_handlePV = values[0];
    __pyx_v_dt = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dt), (&PyUnicode_Type), 1, "dt", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_96get(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handlePV, __pyx_v_dt);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_96get(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, PyObject *__pyx_v_dt) {
  unsigned int __pyx_v_handle;
  int __pyx_v_status;
  long __pyx_v_dtr;
  unsigned int __pyx_v_dtcheck;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  unsigned int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get", 0);

  /* "PyCafe.pyx":625
 * 	##################################################################################
 * 
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 
 * 		print (type (handlePV))
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":627
 * 		cdef unsigned int handle=0
 * 
 * 		print (type (handlePV))             # <<<<<<<<<<<<<<
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_handlePV)));
  __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_handlePV)));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(__pyx_v_handlePV)));
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "PyCafe.pyx":629
 * 		print (type (handlePV))
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
  __pyx_t_4 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  __pyx_t_4 = ((__pyx_t_3 == 1) != 0);
  if (__pyx_t_4) {

    /* "PyCafe.pyx":630
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)
 */
    __pyx_t_6 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_6 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_6;

    /* "PyCafe.pyx":629
 * 		print (type (handlePV))
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":631
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
  __pyx_t_4 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_3 = ((__pyx_t_4 == 1) != 0);
  if (__pyx_t_3) {

    /* "PyCafe.pyx":632
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def get. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyInt_As_unsigned_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_handle = __pyx_t_6;

    /* "PyCafe.pyx":631
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":634
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def get. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 		cdef int status
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__126, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":637
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 		cdef int status
 * 		cdef long dtr=0             # <<<<<<<<<<<<<<
 * 		status=self.hh.getDataTypeRequest(handle, dtr)
 * 
 */
  __pyx_v_dtr = 0;

  /* "PyCafe.pyx":638
 * 		cdef int status
 * 		cdef long dtr=0
 * 		status=self.hh.getDataTypeRequest(handle, dtr)             # <<<<<<<<<<<<<<
 * 
 * 		if status != ICAFE_NORMAL:
 */
  __pyx_v_status = __pyx_v_self->hh.getDataTypeRequest(__pyx_v_handle, __pyx_v_dtr);

  /* "PyCafe.pyx":640
 * 		status=self.hh.getDataTypeRequest(handle, dtr)
 * 
 * 		if status != ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  __pyx_t_3 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_3) {

    /* "PyCafe.pyx":641
 * 
 * 		if status != ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    __pyx_t_3 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_3) {

      /* "PyCafe.pyx":642
 * 		if status != ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
      __pyx_t_3 = ((__pyx_v_handle == 0) != 0);
      if (__pyx_t_3) {

        /* "PyCafe.pyx":643
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 */
        __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

        /* "PyCafe.pyx":642
 * 		if status != ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
        goto __pyx_L8;
      }

      /* "PyCafe.pyx":645
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def get. Status = %d" %status)
 * 
 */
      /*else*/ {
        __pyx_v_self->_c_cafe->printStatus(__pyx_v_handle, __pyx_v_status);
      }
      __pyx_L8:;

      /* "PyCafe.pyx":641
 * 
 * 		if status != ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    }

    /* "PyCafe.pyx":646
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def get. Status = %d" %status)             # <<<<<<<<<<<<<<
 * 
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":640
 * 		status=self.hh.getDataTypeRequest(handle, dtr)
 * 
 * 		if status != ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  }

  /* "PyCafe.pyx":648
 * 			raise Exception("EXCEPTION RAISED in PyCafe def get. Status = %d" %status)
 * 
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  switch (__pyx_v_dtr) {
    case CAFE_NO_ACCESS:
    case CAFE_TYPENOTCONN:
    __pyx_t_3 = 1;
    break;
    default:
    __pyx_t_3 = 0;
    break;
  }
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "PyCafe.pyx":649
 * 
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)
 */
    __pyx_t_4 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_4) {

      /* "PyCafe.pyx":650
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)
 * 				else:
 */
      __pyx_t_4 = ((__pyx_v_handle == 0) != 0);
      if (__pyx_t_4) {

        /* "PyCafe.pyx":651
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)             # <<<<<<<<<<<<<<
 * 				else:
 * 					self._c_cafe.printStatus(handle,ICAFE_TYPENOTCONN)
 */
        __pyx_v_self->_c_cafe->printStatusMessage(ICAFE_TYPENOTCONN);

        /* "PyCafe.pyx":650
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)
 * 				else:
 */
        goto __pyx_L10;
      }

      /* "PyCafe.pyx":653
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)
 * 				else:
 * 					self._c_cafe.printStatus(handle,ICAFE_TYPENOTCONN)             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def get. Status = %d" %ICAFE_TYPENOTCONN)
 * 
 */
      /*else*/ {
        __pyx_v_self->_c_cafe->printStatus(__pyx_v_handle, ICAFE_TYPENOTCONN);
      }
      __pyx_L10:;

      /* "PyCafe.pyx":649
 * 
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)
 */
    }

    /* "PyCafe.pyx":654
 * 				else:
 * 					self._c_cafe.printStatus(handle,ICAFE_TYPENOTCONN)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def get. Status = %d" %ICAFE_TYPENOTCONN)             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int dtcheck =	dtr
 */
    __pyx_t_1 = __Pyx_PyInt_From_CAFE_CFT_STATE(ICAFE_TYPENOTCONN); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":648
 * 			raise Exception("EXCEPTION RAISED in PyCafe def get. Status = %d" %status)
 * 
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  }

  /* "PyCafe.pyx":656
 * 			raise Exception("EXCEPTION RAISED in PyCafe def get. Status = %d" %ICAFE_TYPENOTCONN)
 * 
 * 		cdef unsigned int dtcheck =	dtr             # <<<<<<<<<<<<<<
 * 		dtcheck=getMatchedDataType(dt, dtr)
 * 
 */
  __pyx_v_dtcheck = __pyx_v_dtr;

  /* "PyCafe.pyx":657
 * 
 * 		cdef unsigned int dtcheck =	dtr
 * 		dtcheck=getMatchedDataType(dt, dtr)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_dtr); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __pyx_f_6PyCafe_getMatchedDataType(__pyx_v_dt, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dtcheck = __pyx_t_6;

  /* "PyCafe.pyx":660
 * 
 * 
 * 		if dtcheck in [CAFE_STRING]:             # <<<<<<<<<<<<<<
 * 			with nogil:
 * 				status=self._c_cafe.getString(handle, self.valStr)
 */
  switch (__pyx_v_dtcheck) {
    case CAFE_STRING:

    /* "PyCafe.pyx":661
 * 
 * 		if dtcheck in [CAFE_STRING]:
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.getString(handle, self.valStr)
 * 			if status==ICAFE_NORMAL:
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "PyCafe.pyx":662
 * 		if dtcheck in [CAFE_STRING]:
 * 			with nogil:
 * 				status=self._c_cafe.getString(handle, self.valStr)             # <<<<<<<<<<<<<<
 * 			if status==ICAFE_NORMAL:
 * 				return self.valStr
 */
          __pyx_v_status = __pyx_v_self->_c_cafe->getString(__pyx_v_handle, __pyx_v_self->valStr);
        }

        /* "PyCafe.pyx":661
 * 
 * 		if dtcheck in [CAFE_STRING]:
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.getString(handle, self.valStr)
 * 			if status==ICAFE_NORMAL:
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L13;
          }
          __pyx_L13:;
        }
    }

    /* "PyCafe.pyx":663
 * 			with nogil:
 * 				status=self._c_cafe.getString(handle, self.valStr)
 * 			if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 				return self.valStr
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:
 */
    __pyx_t_4 = ((__pyx_v_status == ICAFE_NORMAL) != 0);
    if (__pyx_t_4) {

      /* "PyCafe.pyx":664
 * 				status=self._c_cafe.getString(handle, self.valStr)
 * 			if status==ICAFE_NORMAL:
 * 				return self.valStr             # <<<<<<<<<<<<<<
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:
 * 			with nogil:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_self->valStr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "PyCafe.pyx":663
 * 			with nogil:
 * 				status=self._c_cafe.getString(handle, self.valStr)
 * 			if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 				return self.valStr
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:
 */
    }

    /* "PyCafe.pyx":660
 * 
 * 
 * 		if dtcheck in [CAFE_STRING]:             # <<<<<<<<<<<<<<
 * 			with nogil:
 * 				status=self._c_cafe.getString(handle, self.valStr)
 */
    break;

    /* "PyCafe.pyx":665
 * 			if status==ICAFE_NORMAL:
 * 				return self.valStr
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:             # <<<<<<<<<<<<<<
 * 			with nogil:
 * 				status=self._c_cafe.getLong(handle, self.valInt)
 */
    case CAFE_SHORT:
    case CAFE_CHAR:
    case CAFE_LONG:

    /* "PyCafe.pyx":666
 * 				return self.valStr
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.getLong(handle, self.valInt)
 * 			if status==ICAFE_NORMAL:
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "PyCafe.pyx":667
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:
 * 			with nogil:
 * 				status=self._c_cafe.getLong(handle, self.valInt)             # <<<<<<<<<<<<<<
 * 			if status==ICAFE_NORMAL:
 * 				return self.valInt
 */
          __pyx_v_status = __pyx_v_self->_c_cafe->getLong(__pyx_v_handle, __pyx_v_self->valInt);
        }

        /* "PyCafe.pyx":666
 * 				return self.valStr
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.getLong(handle, self.valInt)
 * 			if status==ICAFE_NORMAL:
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L17;
          }
          __pyx_L17:;
        }
    }

    /* "PyCafe.pyx":668
 * 			with nogil:
 * 				status=self._c_cafe.getLong(handle, self.valInt)
 * 			if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 				return self.valInt
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:
 */
    __pyx_t_4 = ((__pyx_v_status == ICAFE_NORMAL) != 0);
    if (__pyx_t_4) {

      /* "PyCafe.pyx":669
 * 				status=self._c_cafe.getLong(handle, self.valInt)
 * 			if status==ICAFE_NORMAL:
 * 				return self.valInt             # <<<<<<<<<<<<<<
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:
 * 			with nogil:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->valInt); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "PyCafe.pyx":668
 * 			with nogil:
 * 				status=self._c_cafe.getLong(handle, self.valInt)
 * 			if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 				return self.valInt
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:
 */
    }

    /* "PyCafe.pyx":665
 * 			if status==ICAFE_NORMAL:
 * 				return self.valStr
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:             # <<<<<<<<<<<<<<
 * 			with nogil:
 * 				status=self._c_cafe.getLong(handle, self.valInt)
 */
    break;

    /* "PyCafe.pyx":670
 * 			if status==ICAFE_NORMAL:
 * 				return self.valInt
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:             # <<<<<<<<<<<<<<
 * 			with nogil:
 * 				status=self._c_cafe.getDouble(handle, self.valFloat)
 */
    case CAFE_FLOAT:
    case CAFE_DOUBLE:

    /* "PyCafe.pyx":671
 * 				return self.valInt
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.getDouble(handle, self.valFloat)
 * 			if status==ICAFE_NORMAL:
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "PyCafe.pyx":672
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:
 * 			with nogil:
 * 				status=self._c_cafe.getDouble(handle, self.valFloat)             # <<<<<<<<<<<<<<
 * 			if status==ICAFE_NORMAL:
 * 				return self.valFloat
 */
          __pyx_v_status = __pyx_v_self->_c_cafe->getDouble(__pyx_v_handle, __pyx_v_self->valFloat);
        }

        /* "PyCafe.pyx":671
 * 				return self.valInt
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.getDouble(handle, self.valFloat)
 * 			if status==ICAFE_NORMAL:
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L21;
          }
          __pyx_L21:;
        }
    }

    /* "PyCafe.pyx":673
 * 			with nogil:
 * 				status=self._c_cafe.getDouble(handle, self.valFloat)
 * 			if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 				return self.valFloat
 * 		elif dtcheck==CAFE_ENUM:
 */
    __pyx_t_4 = ((__pyx_v_status == ICAFE_NORMAL) != 0);
    if (__pyx_t_4) {

      /* "PyCafe.pyx":674
 * 				status=self._c_cafe.getDouble(handle, self.valFloat)
 * 			if status==ICAFE_NORMAL:
 * 				return self.valFloat             # <<<<<<<<<<<<<<
 * 		elif dtcheck==CAFE_ENUM:
 * 			#if enum, string taken as native
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->valFloat); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "PyCafe.pyx":673
 * 			with nogil:
 * 				status=self._c_cafe.getDouble(handle, self.valFloat)
 * 			if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 				return self.valFloat
 * 		elif dtcheck==CAFE_ENUM:
 */
    }

    /* "PyCafe.pyx":670
 * 			if status==ICAFE_NORMAL:
 * 				return self.valInt
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:             # <<<<<<<<<<<<<<
 * 			with nogil:
 * 				status=self._c_cafe.getDouble(handle, self.valFloat)
 */
    break;

    /* "PyCafe.pyx":675
 * 			if status==ICAFE_NORMAL:
 * 				return self.valFloat
 * 		elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 			#if enum, string taken as native
 * 			if self._c_cafe.isEnum(handle):
 */
    case CAFE_ENUM:

    /* "PyCafe.pyx":677
 * 		elif dtcheck==CAFE_ENUM:
 * 			#if enum, string taken as native
 * 			if self._c_cafe.isEnum(handle):             # <<<<<<<<<<<<<<
 * 				with nogil:
 * 					status=self._c_cafe.getString(handle, self.valStr)
 */
    __pyx_t_4 = (__pyx_v_self->_c_cafe->isEnum(__pyx_v_handle) != 0);
    if (__pyx_t_4) {

      /* "PyCafe.pyx":678
 * 			#if enum, string taken as native
 * 			if self._c_cafe.isEnum(handle):
 * 				with nogil:             # <<<<<<<<<<<<<<
 * 					status=self._c_cafe.getString(handle, self.valStr)
 * 				if status==ICAFE_NORMAL:
 */
      {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          Py_UNBLOCK_THREADS
          #endif
          /*try:*/ {

            /* "PyCafe.pyx":679
 * 			if self._c_cafe.isEnum(handle):
 * 				with nogil:
 * 					status=self._c_cafe.getString(handle, self.valStr)             # <<<<<<<<<<<<<<
 * 				if status==ICAFE_NORMAL:
 * 					return self.valStr
 */
            __pyx_v_status = __pyx_v_self->_c_cafe->getString(__pyx_v_handle, __pyx_v_self->valStr);
          }

          /* "PyCafe.pyx":678
 * 			#if enum, string taken as native
 * 			if self._c_cafe.isEnum(handle):
 * 				with nogil:             # <<<<<<<<<<<<<<
 * 					status=self._c_cafe.getString(handle, self.valStr)
 * 				if status==ICAFE_NORMAL:
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L26;
            }
            __pyx_L26:;
          }
      }

      /* "PyCafe.pyx":680
 * 				with nogil:
 * 					status=self._c_cafe.getString(handle, self.valStr)
 * 				if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 					return self.valStr
 * 			else:
 */
      __pyx_t_4 = ((__pyx_v_status == ICAFE_NORMAL) != 0);
      if (__pyx_t_4) {

        /* "PyCafe.pyx":681
 * 					status=self._c_cafe.getString(handle, self.valStr)
 * 				if status==ICAFE_NORMAL:
 * 					return self.valStr             # <<<<<<<<<<<<<<
 * 			else:
 * 				with nogil:
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_self->valStr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* "PyCafe.pyx":680
 * 				with nogil:
 * 					status=self._c_cafe.getString(handle, self.valStr)
 * 				if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 					return self.valStr
 * 			else:
 */
      }

      /* "PyCafe.pyx":677
 * 		elif dtcheck==CAFE_ENUM:
 * 			#if enum, string taken as native
 * 			if self._c_cafe.isEnum(handle):             # <<<<<<<<<<<<<<
 * 				with nogil:
 * 					status=self._c_cafe.getString(handle, self.valStr)
 */
      goto __pyx_L23;
    }

    /* "PyCafe.pyx":683
 * 					return self.valStr
 * 			else:
 * 				with nogil:             # <<<<<<<<<<<<<<
 * 					status=self._c_cafe.getLong(handle, self.valInt)
 * 				if status ==ICAFE_NORMAL:
 */
    /*else*/ {
      {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          Py_UNBLOCK_THREADS
          #endif
          /*try:*/ {

            /* "PyCafe.pyx":684
 * 			else:
 * 				with nogil:
 * 					status=self._c_cafe.getLong(handle, self.valInt)             # <<<<<<<<<<<<<<
 * 				if status ==ICAFE_NORMAL:
 * 					return self.valInt
 */
            __pyx_v_status = __pyx_v_self->_c_cafe->getLong(__pyx_v_handle, __pyx_v_self->valInt);
          }

          /* "PyCafe.pyx":683
 * 					return self.valStr
 * 			else:
 * 				with nogil:             # <<<<<<<<<<<<<<
 * 					status=self._c_cafe.getLong(handle, self.valInt)
 * 				if status ==ICAFE_NORMAL:
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L30;
            }
            __pyx_L30:;
          }
      }

      /* "PyCafe.pyx":685
 * 				with nogil:
 * 					status=self._c_cafe.getLong(handle, self.valInt)
 * 				if status ==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 					return self.valInt
 * 		else:
 */
      __pyx_t_4 = ((__pyx_v_status == ICAFE_NORMAL) != 0);
      if (__pyx_t_4) {

        /* "PyCafe.pyx":686
 * 					status=self._c_cafe.getLong(handle, self.valInt)
 * 				if status ==ICAFE_NORMAL:
 * 					return self.valInt             # <<<<<<<<<<<<<<
 * 		else:
 * 			print ("This line in PyCafe def get should never appear!")
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->valInt); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* "PyCafe.pyx":685
 * 				with nogil:
 * 					status=self._c_cafe.getLong(handle, self.valInt)
 * 				if status ==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 					return self.valInt
 * 		else:
 */
      }
    }
    __pyx_L23:;

    /* "PyCafe.pyx":675
 * 			if status==ICAFE_NORMAL:
 * 				return self.valFloat
 * 		elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 			#if enum, string taken as native
 * 			if self._c_cafe.isEnum(handle):
 */
    break;
    default:

    /* "PyCafe.pyx":688
 * 					return self.valInt
 * 		else:
 * 			print ("This line in PyCafe def get should never appear!")             # <<<<<<<<<<<<<<
 * 			return 0
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__127, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "PyCafe.pyx":689
 * 		else:
 * 			print ("This line in PyCafe def get should never appear!")
 * 			return 0             # <<<<<<<<<<<<<<
 * 
 * 		if status !=ICAFE_NORMAL:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;
    break;
  }

  /* "PyCafe.pyx":691
 * 			return 0
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  __pyx_t_4 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_4) {

    /* "PyCafe.pyx":692
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    __pyx_t_4 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_4) {

      /* "PyCafe.pyx":693
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
      __pyx_t_4 = ((__pyx_v_handle == 0) != 0);
      if (__pyx_t_4) {

        /* "PyCafe.pyx":694
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 */
        __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

        /* "PyCafe.pyx":693
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
        goto __pyx_L34;
      }

      /* "PyCafe.pyx":696
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def get. Status = %d" %status)
 * 
 */
      /*else*/ {
        __pyx_v_self->_c_cafe->printStatus(__pyx_v_handle, __pyx_v_status);
      }
      __pyx_L34:;

      /* "PyCafe.pyx":692
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    }

    /* "PyCafe.pyx":697
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def get. Status = %d" %status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":691
 * 			return 0
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  }

  /* "PyCafe.pyx":622
 * 
 * 	##################################################################################
 * 	def  get(self, handlePV, str dt='native'):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PyCafe.CyCafe.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":706
 * 
 * 	##################################################################################
 * 	def  getIntList(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.getList(handlePV, 'int')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_99getIntList(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_99getIntList(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getIntList (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_98getIntList(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_98getIntList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getIntList", 0);

  /* "PyCafe.pyx":707
 * 	##################################################################################
 * 	def  getIntList(self, handlePV):
 * 		return self.getList(handlePV, 'int')             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getList); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_3) {
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_handlePV);
  __Pyx_GIVEREF(__pyx_v_handlePV);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_handlePV);
  __Pyx_INCREF(__pyx_n_u_int);
  __Pyx_GIVEREF(__pyx_n_u_int);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_u_int);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":706
 * 
 * 	##################################################################################
 * 	def  getIntList(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.getList(handlePV, 'int')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.getIntList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":710
 * 
 * 	##################################################################################
 * 	def  getFloatList(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.getList(handlePV, 'float')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_101getFloatList(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_101getFloatList(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getFloatList (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_100getFloatList(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_100getFloatList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFloatList", 0);

  /* "PyCafe.pyx":711
 * 	##################################################################################
 * 	def  getFloatList(self, handlePV):
 * 		return self.getList(handlePV, 'float')             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getList); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_3) {
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_handlePV);
  __Pyx_GIVEREF(__pyx_v_handlePV);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_handlePV);
  __Pyx_INCREF(__pyx_n_u_float);
  __Pyx_GIVEREF(__pyx_n_u_float);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_u_float);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":710
 * 
 * 	##################################################################################
 * 	def  getFloatList(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.getList(handlePV, 'float')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.getFloatList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":714
 * 
 * 	##################################################################################
 * 	def  getStrList(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.getList(handlePV, 'str')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_103getStrList(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_103getStrList(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getStrList (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_102getStrList(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_102getStrList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getStrList", 0);

  /* "PyCafe.pyx":715
 * 	##################################################################################
 * 	def  getStrList(self, handlePV):
 * 		return self.getList(handlePV, 'str')             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getList); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_3) {
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_handlePV);
  __Pyx_GIVEREF(__pyx_v_handlePV);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_handlePV);
  __Pyx_INCREF(__pyx_n_u_str);
  __Pyx_GIVEREF(__pyx_n_u_str);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_u_str);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":714
 * 
 * 	##################################################################################
 * 	def  getStrList(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.getList(handlePV, 'str')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.getStrList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":718
 * 
 * 	##################################################################################
 * 	def  getList(self, handlePV, str dt='native'):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int handle=0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_105getList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_105getList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handlePV = 0;
  PyObject *__pyx_v_dt = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getList (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handlePV,&__pyx_n_s_dt,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject*)__pyx_n_u_native);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handlePV)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getList") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_handlePV = values[0];
    __pyx_v_dt = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getList", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.getList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dt), (&PyUnicode_Type), 1, "dt", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_104getList(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handlePV, __pyx_v_dt);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_104getList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, PyObject *__pyx_v_dt) {
  unsigned int __pyx_v_handle;
  int __pyx_v_status;
  long __pyx_v_dtr;
  unsigned int __pyx_v_dtcheck;
  unsigned int __pyx_v_nelemNative;
  dbr_string_t *__pyx_v_valStringArray;
  int *__pyx_v_valIntArray;
  double *__pyx_v_valDoubleArray;
  PyObject *__pyx_v_ll = NULL;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  long __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getList", 0);

  /* "PyCafe.pyx":720
 * 	def  getList(self, handlePV, str dt='native'):
 * 
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":721
 * 
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":722
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 722; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":721
 * 
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":723
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":724
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getList. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":723
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":726
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getList. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__128, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":730
 * 
 * 		cdef int status
 * 		cdef long dtr=0             # <<<<<<<<<<<<<<
 * 		status=self.hh.getDataTypeRequest(handle, dtr)
 * 
 */
  __pyx_v_dtr = 0;

  /* "PyCafe.pyx":731
 * 		cdef int status
 * 		cdef long dtr=0
 * 		status=self.hh.getDataTypeRequest(handle, dtr)             # <<<<<<<<<<<<<<
 * 
 * 		if status != ICAFE_NORMAL:
 */
  __pyx_v_status = __pyx_v_self->hh.getDataTypeRequest(__pyx_v_handle, __pyx_v_dtr);

  /* "PyCafe.pyx":733
 * 		status=self.hh.getDataTypeRequest(handle, dtr)
 * 
 * 		if status != ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 
 */
  __pyx_t_1 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":734
 * 
 * 		if status != ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 
 * 				if handle == 0:
 */
    __pyx_t_1 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":736
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
      __pyx_t_1 = ((__pyx_v_handle == 0) != 0);
      if (__pyx_t_1) {

        /* "PyCafe.pyx":737
 * 
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 */
        __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

        /* "PyCafe.pyx":736
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
        goto __pyx_L8;
      }

      /* "PyCafe.pyx":739
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)             # <<<<<<<<<<<<<<
 * 
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getList. Status = %d" %status)
 */
      /*else*/ {
        __pyx_v_self->_c_cafe->printStatus(__pyx_v_handle, __pyx_v_status);
      }
      __pyx_L8:;

      /* "PyCafe.pyx":734
 * 
 * 		if status != ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 
 * 				if handle == 0:
 */
    }

    /* "PyCafe.pyx":741
 * 					self._c_cafe.printStatus(handle, status)
 * 
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getList. Status = %d" %status)             # <<<<<<<<<<<<<<
 * 
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":733
 * 		status=self.hh.getDataTypeRequest(handle, dtr)
 * 
 * 		if status != ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 
 */
  }

  /* "PyCafe.pyx":743
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getList. Status = %d" %status)
 * 
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 
 */
  switch (__pyx_v_dtr) {
    case CAFE_NO_ACCESS:
    case CAFE_TYPENOTCONN:
    __pyx_t_1 = 1;
    break;
    default:
    __pyx_t_1 = 0;
    break;
  }
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":744
 * 
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 
 * 				if handle == 0:
 */
    __pyx_t_2 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":746
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)
 * 				else:
 */
      __pyx_t_2 = ((__pyx_v_handle == 0) != 0);
      if (__pyx_t_2) {

        /* "PyCafe.pyx":747
 * 
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)             # <<<<<<<<<<<<<<
 * 				else:
 * 					self._c_cafe.printStatus(handle,ICAFE_TYPENOTCONN)
 */
        __pyx_v_self->_c_cafe->printStatusMessage(ICAFE_TYPENOTCONN);

        /* "PyCafe.pyx":746
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)
 * 				else:
 */
        goto __pyx_L10;
      }

      /* "PyCafe.pyx":749
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)
 * 				else:
 * 					self._c_cafe.printStatus(handle,ICAFE_TYPENOTCONN)             # <<<<<<<<<<<<<<
 * 
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getList. Status = %d" %ICAFE_TYPENOTCONN)
 */
      /*else*/ {
        __pyx_v_self->_c_cafe->printStatus(__pyx_v_handle, ICAFE_TYPENOTCONN);
      }
      __pyx_L10:;

      /* "PyCafe.pyx":744
 * 
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 
 * 				if handle == 0:
 */
    }

    /* "PyCafe.pyx":751
 * 					self._c_cafe.printStatus(handle,ICAFE_TYPENOTCONN)
 * 
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getList. Status = %d" %ICAFE_TYPENOTCONN)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_6 = __Pyx_PyInt_From_CAFE_CFT_STATE(ICAFE_TYPENOTCONN); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_4, __pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":743
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getList. Status = %d" %status)
 * 
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 
 */
  }

  /* "PyCafe.pyx":754
 * 
 * 
 * 		cdef unsigned int dtcheck =	dtr             # <<<<<<<<<<<<<<
 * 		dtcheck=getMatchedDataType(dt, dtr)
 * 
 */
  __pyx_v_dtcheck = __pyx_v_dtr;

  /* "PyCafe.pyx":755
 * 
 * 		cdef unsigned int dtcheck =	dtr
 * 		dtcheck=getMatchedDataType(dt, dtr)             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int nelemNative=self.hh.getNelemNative(handle)
 */
  __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_dtr); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __pyx_f_6PyCafe_getMatchedDataType(__pyx_v_dt, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_6); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_dtcheck = __pyx_t_4;

  /* "PyCafe.pyx":757
 * 		dtcheck=getMatchedDataType(dt, dtr)
 * 
 * 		cdef unsigned int nelemNative=self.hh.getNelemNative(handle)             # <<<<<<<<<<<<<<
 * 
 * 		cdef dbr_string_t *  valStringArray
 */
  __pyx_v_nelemNative = __pyx_v_self->hh.getNelemNative(__pyx_v_handle);

  /* "PyCafe.pyx":763
 * 		cdef double * valDoubleArray
 * 
 * 		if dtcheck in [CAFE_STRING]:             # <<<<<<<<<<<<<<
 * 
 * 			valStringArray = <char[40]*>malloc( nelemNative * sizeof(dbr_string_t))
 */
  switch (__pyx_v_dtcheck) {
    case CAFE_STRING:

    /* "PyCafe.pyx":765
 * 		if dtcheck in [CAFE_STRING]:
 * 
 * 			valStringArray = <char[40]*>malloc( nelemNative * sizeof(dbr_string_t))             # <<<<<<<<<<<<<<
 * 
 * 			with nogil:
 */
    __pyx_v_valStringArray = ((char (*)[40])malloc((__pyx_v_nelemNative * (sizeof(dbr_string_t)))));

    /* "PyCafe.pyx":767
 * 			valStringArray = <char[40]*>malloc( nelemNative * sizeof(dbr_string_t))
 * 
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.getDbrStringArray(handle, valStringArray)
 * 
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "PyCafe.pyx":768
 * 
 * 			with nogil:
 * 				status=self._c_cafe.getDbrStringArray(handle, valStringArray)             # <<<<<<<<<<<<<<
 * 
 * 			ll=[]
 */
          __pyx_v_status = __pyx_v_self->_c_cafe->getDbrStringArray(__pyx_v_handle, __pyx_v_valStringArray);
        }

        /* "PyCafe.pyx":767
 * 			valStringArray = <char[40]*>malloc( nelemNative * sizeof(dbr_string_t))
 * 
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.getDbrStringArray(handle, valStringArray)
 * 
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L13;
          }
          __pyx_L13:;
        }
    }

    /* "PyCafe.pyx":770
 * 				status=self._c_cafe.getDbrStringArray(handle, valStringArray)
 * 
 * 			ll=[]             # <<<<<<<<<<<<<<
 * 			for i in range(0,nelemNative):
 * 				ll.append(valStringArray[i])
 */
    __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_v_ll = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "PyCafe.pyx":771
 * 
 * 			ll=[]
 * 			for i in range(0,nelemNative):             # <<<<<<<<<<<<<<
 * 				ll.append(valStringArray[i])
 * 			free(valStringArray)
 */
    __pyx_t_4 = __pyx_v_nelemNative;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_4; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "PyCafe.pyx":772
 * 			ll=[]
 * 			for i in range(0,nelemNative):
 * 				ll.append(valStringArray[i])             # <<<<<<<<<<<<<<
 * 			free(valStringArray)
 * 			if status == ICAFE_NORMAL:
 */
      __pyx_t_6 = __Pyx_PyObject_FromString((__pyx_v_valStringArray[__pyx_v_i])); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_ll, __pyx_t_6); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }

    /* "PyCafe.pyx":773
 * 			for i in range(0,nelemNative):
 * 				ll.append(valStringArray[i])
 * 			free(valStringArray)             # <<<<<<<<<<<<<<
 * 			if status == ICAFE_NORMAL:
 * 				return ll
 */
    free(__pyx_v_valStringArray);

    /* "PyCafe.pyx":774
 * 				ll.append(valStringArray[i])
 * 			free(valStringArray)
 * 			if status == ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 				return ll
 * 
 */
    __pyx_t_2 = ((__pyx_v_status == ICAFE_NORMAL) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":775
 * 			free(valStringArray)
 * 			if status == ICAFE_NORMAL:
 * 				return ll             # <<<<<<<<<<<<<<
 * 
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_ll);
      __pyx_r = __pyx_v_ll;
      goto __pyx_L0;

      /* "PyCafe.pyx":774
 * 				ll.append(valStringArray[i])
 * 			free(valStringArray)
 * 			if status == ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 				return ll
 * 
 */
    }

    /* "PyCafe.pyx":763
 * 		cdef double * valDoubleArray
 * 
 * 		if dtcheck in [CAFE_STRING]:             # <<<<<<<<<<<<<<
 * 
 * 			valStringArray = <char[40]*>malloc( nelemNative * sizeof(dbr_string_t))
 */
    break;

    /* "PyCafe.pyx":777
 * 				return ll
 * 
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:             # <<<<<<<<<<<<<<
 * 
 * 			valIntArray = <int *>malloc( nelemNative * sizeof(int))
 */
    case CAFE_SHORT:
    case CAFE_CHAR:
    case CAFE_LONG:

    /* "PyCafe.pyx":779
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:
 * 
 * 			valIntArray = <int *>malloc( nelemNative * sizeof(int))             # <<<<<<<<<<<<<<
 * 
 * 			with nogil:
 */
    __pyx_v_valIntArray = ((int *)malloc((__pyx_v_nelemNative * (sizeof(int)))));

    /* "PyCafe.pyx":781
 * 			valIntArray = <int *>malloc( nelemNative * sizeof(int))
 * 
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.getLongArray(handle, valIntArray)
 * 
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "PyCafe.pyx":782
 * 
 * 			with nogil:
 * 				status=self._c_cafe.getLongArray(handle, valIntArray)             # <<<<<<<<<<<<<<
 * 
 * 			ll=[]
 */
          __pyx_v_status = __pyx_v_self->_c_cafe->getLongArray(__pyx_v_handle, __pyx_v_valIntArray);
        }

        /* "PyCafe.pyx":781
 * 			valIntArray = <int *>malloc( nelemNative * sizeof(int))
 * 
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.getLongArray(handle, valIntArray)
 * 
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L19;
          }
          __pyx_L19:;
        }
    }

    /* "PyCafe.pyx":784
 * 				status=self._c_cafe.getLongArray(handle, valIntArray)
 * 
 * 			ll=[]             # <<<<<<<<<<<<<<
 * 			for i in range(0, nelemNative):
 * 				ll.append(valIntArray[i])
 */
    __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 784; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_v_ll = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "PyCafe.pyx":785
 * 
 * 			ll=[]
 * 			for i in range(0, nelemNative):             # <<<<<<<<<<<<<<
 * 				ll.append(valIntArray[i])
 * 			free(valIntArray)
 */
    __pyx_t_4 = __pyx_v_nelemNative;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_4; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "PyCafe.pyx":786
 * 			ll=[]
 * 			for i in range(0, nelemNative):
 * 				ll.append(valIntArray[i])             # <<<<<<<<<<<<<<
 * 			free(valIntArray)
 * 			if status == ICAFE_NORMAL:
 */
      __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_valIntArray[__pyx_v_i])); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_ll, __pyx_t_6); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }

    /* "PyCafe.pyx":787
 * 			for i in range(0, nelemNative):
 * 				ll.append(valIntArray[i])
 * 			free(valIntArray)             # <<<<<<<<<<<<<<
 * 			if status == ICAFE_NORMAL:
 * 				return ll
 */
    free(__pyx_v_valIntArray);

    /* "PyCafe.pyx":788
 * 				ll.append(valIntArray[i])
 * 			free(valIntArray)
 * 			if status == ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 				return ll
 * 
 */
    __pyx_t_2 = ((__pyx_v_status == ICAFE_NORMAL) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":789
 * 			free(valIntArray)
 * 			if status == ICAFE_NORMAL:
 * 				return ll             # <<<<<<<<<<<<<<
 * 
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_ll);
      __pyx_r = __pyx_v_ll;
      goto __pyx_L0;

      /* "PyCafe.pyx":788
 * 				ll.append(valIntArray[i])
 * 			free(valIntArray)
 * 			if status == ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 				return ll
 * 
 */
    }

    /* "PyCafe.pyx":777
 * 				return ll
 * 
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:             # <<<<<<<<<<<<<<
 * 
 * 			valIntArray = <int *>malloc( nelemNative * sizeof(int))
 */
    break;

    /* "PyCafe.pyx":791
 * 				return ll
 * 
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:             # <<<<<<<<<<<<<<
 * 
 * 			valDoubleArray = <double *>malloc( nelemNative * sizeof(double))
 */
    case CAFE_FLOAT:
    case CAFE_DOUBLE:

    /* "PyCafe.pyx":793
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:
 * 
 * 			valDoubleArray = <double *>malloc( nelemNative * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 			with nogil:
 */
    __pyx_v_valDoubleArray = ((double *)malloc((__pyx_v_nelemNative * (sizeof(double)))));

    /* "PyCafe.pyx":795
 * 			valDoubleArray = <double *>malloc( nelemNative * sizeof(double))
 * 
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.getDoubleArray(handle, valDoubleArray)
 * 
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "PyCafe.pyx":796
 * 
 * 			with nogil:
 * 				status=self._c_cafe.getDoubleArray(handle, valDoubleArray)             # <<<<<<<<<<<<<<
 * 
 * 			ll=[]
 */
          __pyx_v_status = __pyx_v_self->_c_cafe->getDoubleArray(__pyx_v_handle, __pyx_v_valDoubleArray);
        }

        /* "PyCafe.pyx":795
 * 			valDoubleArray = <double *>malloc( nelemNative * sizeof(double))
 * 
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.getDoubleArray(handle, valDoubleArray)
 * 
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L25;
          }
          __pyx_L25:;
        }
    }

    /* "PyCafe.pyx":798
 * 				status=self._c_cafe.getDoubleArray(handle, valDoubleArray)
 * 
 * 			ll=[]             # <<<<<<<<<<<<<<
 * 			for i in range(0, nelemNative):
 * 				ll.append(valDoubleArray[i])
 */
    __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_v_ll = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "PyCafe.pyx":799
 * 
 * 			ll=[]
 * 			for i in range(0, nelemNative):             # <<<<<<<<<<<<<<
 * 				ll.append(valDoubleArray[i])
 * 			free(valDoubleArray)
 */
    __pyx_t_4 = __pyx_v_nelemNative;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_4; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "PyCafe.pyx":800
 * 			ll=[]
 * 			for i in range(0, nelemNative):
 * 				ll.append(valDoubleArray[i])             # <<<<<<<<<<<<<<
 * 			free(valDoubleArray)
 * 			if status == ICAFE_NORMAL:
 */
      __pyx_t_6 = PyFloat_FromDouble((__pyx_v_valDoubleArray[__pyx_v_i])); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 800; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_ll, __pyx_t_6); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 800; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }

    /* "PyCafe.pyx":801
 * 			for i in range(0, nelemNative):
 * 				ll.append(valDoubleArray[i])
 * 			free(valDoubleArray)             # <<<<<<<<<<<<<<
 * 			if status == ICAFE_NORMAL:
 * 				return ll
 */
    free(__pyx_v_valDoubleArray);

    /* "PyCafe.pyx":802
 * 				ll.append(valDoubleArray[i])
 * 			free(valDoubleArray)
 * 			if status == ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 				return ll
 * 
 */
    __pyx_t_2 = ((__pyx_v_status == ICAFE_NORMAL) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":803
 * 			free(valDoubleArray)
 * 			if status == ICAFE_NORMAL:
 * 				return ll             # <<<<<<<<<<<<<<
 * 
 * 		elif dtcheck==CAFE_ENUM:
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_ll);
      __pyx_r = __pyx_v_ll;
      goto __pyx_L0;

      /* "PyCafe.pyx":802
 * 				ll.append(valDoubleArray[i])
 * 			free(valDoubleArray)
 * 			if status == ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 				return ll
 * 
 */
    }

    /* "PyCafe.pyx":791
 * 				return ll
 * 
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:             # <<<<<<<<<<<<<<
 * 
 * 			valDoubleArray = <double *>malloc( nelemNative * sizeof(double))
 */
    break;

    /* "PyCafe.pyx":805
 * 				return ll
 * 
 * 		elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 
 * 			#if enum, string taken as native
 */
    case CAFE_ENUM:

    /* "PyCafe.pyx":808
 * 
 * 			#if enum, string taken as native
 * 			if self._c_cafe.isEnum(handle):             # <<<<<<<<<<<<<<
 * 				valStringArray = <char[40]*>malloc( nelemNative * sizeof(dbr_string_t))
 * 
 */
    __pyx_t_2 = (__pyx_v_self->_c_cafe->isEnum(__pyx_v_handle) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":809
 * 			#if enum, string taken as native
 * 			if self._c_cafe.isEnum(handle):
 * 				valStringArray = <char[40]*>malloc( nelemNative * sizeof(dbr_string_t))             # <<<<<<<<<<<<<<
 * 
 * 				with nogil:
 */
      __pyx_v_valStringArray = ((char (*)[40])malloc((__pyx_v_nelemNative * (sizeof(dbr_string_t)))));

      /* "PyCafe.pyx":811
 * 				valStringArray = <char[40]*>malloc( nelemNative * sizeof(dbr_string_t))
 * 
 * 				with nogil:             # <<<<<<<<<<<<<<
 * 					status=self._c_cafe.getDbrStringArray(handle, valStringArray)
 * 
 */
      {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          Py_UNBLOCK_THREADS
          #endif
          /*try:*/ {

            /* "PyCafe.pyx":812
 * 
 * 				with nogil:
 * 					status=self._c_cafe.getDbrStringArray(handle, valStringArray)             # <<<<<<<<<<<<<<
 * 
 * 				ll=[]
 */
            __pyx_v_status = __pyx_v_self->_c_cafe->getDbrStringArray(__pyx_v_handle, __pyx_v_valStringArray);
          }

          /* "PyCafe.pyx":811
 * 				valStringArray = <char[40]*>malloc( nelemNative * sizeof(dbr_string_t))
 * 
 * 				with nogil:             # <<<<<<<<<<<<<<
 * 					status=self._c_cafe.getDbrStringArray(handle, valStringArray)
 * 
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L32;
            }
            __pyx_L32:;
          }
      }

      /* "PyCafe.pyx":814
 * 					status=self._c_cafe.getDbrStringArray(handle, valStringArray)
 * 
 * 				ll=[]             # <<<<<<<<<<<<<<
 * 				for i in range(0,nelemNative):
 * 					ll.append(valStringArray[i])
 */
      __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 814; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_v_ll = ((PyObject*)__pyx_t_6);
      __pyx_t_6 = 0;

      /* "PyCafe.pyx":815
 * 
 * 				ll=[]
 * 				for i in range(0,nelemNative):             # <<<<<<<<<<<<<<
 * 					ll.append(valStringArray[i])
 * 				free(valStringArray)
 */
      __pyx_t_4 = __pyx_v_nelemNative;
      for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_4; __pyx_t_7+=1) {
        __pyx_v_i = __pyx_t_7;

        /* "PyCafe.pyx":816
 * 				ll=[]
 * 				for i in range(0,nelemNative):
 * 					ll.append(valStringArray[i])             # <<<<<<<<<<<<<<
 * 				free(valStringArray)
 * 				if status ==ICAFE_NORMAL:
 */
        __pyx_t_6 = __Pyx_PyObject_FromString((__pyx_v_valStringArray[__pyx_v_i])); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_ll, __pyx_t_6); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }

      /* "PyCafe.pyx":817
 * 				for i in range(0,nelemNative):
 * 					ll.append(valStringArray[i])
 * 				free(valStringArray)             # <<<<<<<<<<<<<<
 * 				if status ==ICAFE_NORMAL:
 * 					return ll
 */
      free(__pyx_v_valStringArray);

      /* "PyCafe.pyx":818
 * 					ll.append(valStringArray[i])
 * 				free(valStringArray)
 * 				if status ==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 					return ll
 * 			else:
 */
      __pyx_t_2 = ((__pyx_v_status == ICAFE_NORMAL) != 0);
      if (__pyx_t_2) {

        /* "PyCafe.pyx":819
 * 				free(valStringArray)
 * 				if status ==ICAFE_NORMAL:
 * 					return ll             # <<<<<<<<<<<<<<
 * 			else:
 * 				valIntArray = <int *>malloc( nelemNative * sizeof(int))
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_v_ll);
        __pyx_r = __pyx_v_ll;
        goto __pyx_L0;

        /* "PyCafe.pyx":818
 * 					ll.append(valStringArray[i])
 * 				free(valStringArray)
 * 				if status ==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 					return ll
 * 			else:
 */
      }

      /* "PyCafe.pyx":808
 * 
 * 			#if enum, string taken as native
 * 			if self._c_cafe.isEnum(handle):             # <<<<<<<<<<<<<<
 * 				valStringArray = <char[40]*>malloc( nelemNative * sizeof(dbr_string_t))
 * 
 */
      goto __pyx_L29;
    }

    /* "PyCafe.pyx":821
 * 					return ll
 * 			else:
 * 				valIntArray = <int *>malloc( nelemNative * sizeof(int))             # <<<<<<<<<<<<<<
 * 				with nogil:
 * 					status=self._c_cafe.getLongArray(handle, valIntArray)
 */
    /*else*/ {
      __pyx_v_valIntArray = ((int *)malloc((__pyx_v_nelemNative * (sizeof(int)))));

      /* "PyCafe.pyx":822
 * 			else:
 * 				valIntArray = <int *>malloc( nelemNative * sizeof(int))
 * 				with nogil:             # <<<<<<<<<<<<<<
 * 					status=self._c_cafe.getLongArray(handle, valIntArray)
 * 
 */
      {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          Py_UNBLOCK_THREADS
          #endif
          /*try:*/ {

            /* "PyCafe.pyx":823
 * 				valIntArray = <int *>malloc( nelemNative * sizeof(int))
 * 				with nogil:
 * 					status=self._c_cafe.getLongArray(handle, valIntArray)             # <<<<<<<<<<<<<<
 * 
 * 				ll=[]
 */
            __pyx_v_status = __pyx_v_self->_c_cafe->getLongArray(__pyx_v_handle, __pyx_v_valIntArray);
          }

          /* "PyCafe.pyx":822
 * 			else:
 * 				valIntArray = <int *>malloc( nelemNative * sizeof(int))
 * 				with nogil:             # <<<<<<<<<<<<<<
 * 					status=self._c_cafe.getLongArray(handle, valIntArray)
 * 
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L38;
            }
            __pyx_L38:;
          }
      }

      /* "PyCafe.pyx":825
 * 					status=self._c_cafe.getLongArray(handle, valIntArray)
 * 
 * 				ll=[]             # <<<<<<<<<<<<<<
 * 				for i in range(0,nelemNative):
 * 					ll.append(valIntArray[i])
 */
      __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_v_ll = ((PyObject*)__pyx_t_6);
      __pyx_t_6 = 0;

      /* "PyCafe.pyx":826
 * 
 * 				ll=[]
 * 				for i in range(0,nelemNative):             # <<<<<<<<<<<<<<
 * 					ll.append(valIntArray[i])
 * 				free(valIntArray)
 */
      __pyx_t_4 = __pyx_v_nelemNative;
      for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_4; __pyx_t_7+=1) {
        __pyx_v_i = __pyx_t_7;

        /* "PyCafe.pyx":827
 * 				ll=[]
 * 				for i in range(0,nelemNative):
 * 					ll.append(valIntArray[i])             # <<<<<<<<<<<<<<
 * 				free(valIntArray)
 * 				if status ==ICAFE_NORMAL:
 */
        __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_valIntArray[__pyx_v_i])); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_ll, __pyx_t_6); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }

      /* "PyCafe.pyx":828
 * 				for i in range(0,nelemNative):
 * 					ll.append(valIntArray[i])
 * 				free(valIntArray)             # <<<<<<<<<<<<<<
 * 				if status ==ICAFE_NORMAL:
 * 					return ll
 */
      free(__pyx_v_valIntArray);

      /* "PyCafe.pyx":829
 * 					ll.append(valIntArray[i])
 * 				free(valIntArray)
 * 				if status ==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 					return ll
 * 		elif dtcheck in [CAFE_NO_ACCESS,CAFE_TYPENOTCONN]:
 */
      __pyx_t_2 = ((__pyx_v_status == ICAFE_NORMAL) != 0);
      if (__pyx_t_2) {

        /* "PyCafe.pyx":830
 * 				free(valIntArray)
 * 				if status ==ICAFE_NORMAL:
 * 					return ll             # <<<<<<<<<<<<<<
 * 		elif dtcheck in [CAFE_NO_ACCESS,CAFE_TYPENOTCONN]:
 * 			print ("Channel", self._c_cafe.getPVFromHandle(handle), " not connected")
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_v_ll);
        __pyx_r = __pyx_v_ll;
        goto __pyx_L0;

        /* "PyCafe.pyx":829
 * 					ll.append(valIntArray[i])
 * 				free(valIntArray)
 * 				if status ==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 					return ll
 * 		elif dtcheck in [CAFE_NO_ACCESS,CAFE_TYPENOTCONN]:
 */
      }
    }
    __pyx_L29:;

    /* "PyCafe.pyx":805
 * 				return ll
 * 
 * 		elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 
 * 			#if enum, string taken as native
 */
    break;

    /* "PyCafe.pyx":831
 * 				if status ==ICAFE_NORMAL:
 * 					return ll
 * 		elif dtcheck in [CAFE_NO_ACCESS,CAFE_TYPENOTCONN]:             # <<<<<<<<<<<<<<
 * 			print ("Channel", self._c_cafe.getPVFromHandle(handle), " not connected")
 * 			return 0
 */
    case CAFE_NO_ACCESS:
    case CAFE_TYPENOTCONN:

    /* "PyCafe.pyx":832
 * 					return ll
 * 		elif dtcheck in [CAFE_NO_ACCESS,CAFE_TYPENOTCONN]:
 * 			print ("Channel", self._c_cafe.getPVFromHandle(handle), " not connected")             # <<<<<<<<<<<<<<
 * 			return 0
 * 		else:
 */
    __pyx_t_6 = __Pyx_PyStr_FromString(__pyx_v_self->_c_cafe->getPVFromHandle(__pyx_v_handle)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_n_u_Channel);
    __Pyx_GIVEREF(__pyx_n_u_Channel);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_n_u_Channel);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
    __Pyx_INCREF(__pyx_kp_u_not_connected);
    __Pyx_GIVEREF(__pyx_kp_u_not_connected);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_not_connected);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "PyCafe.pyx":833
 * 		elif dtcheck in [CAFE_NO_ACCESS,CAFE_TYPENOTCONN]:
 * 			print ("Channel", self._c_cafe.getPVFromHandle(handle), " not connected")
 * 			return 0             # <<<<<<<<<<<<<<
 * 		else:
 * 			print ("This line in PyCafe def getAsList should never appear!")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;

    /* "PyCafe.pyx":831
 * 				if status ==ICAFE_NORMAL:
 * 					return ll
 * 		elif dtcheck in [CAFE_NO_ACCESS,CAFE_TYPENOTCONN]:             # <<<<<<<<<<<<<<
 * 			print ("Channel", self._c_cafe.getPVFromHandle(handle), " not connected")
 * 			return 0
 */
    break;
    default:

    /* "PyCafe.pyx":835
 * 			return 0
 * 		else:
 * 			print ("This line in PyCafe def getAsList should never appear!")             # <<<<<<<<<<<<<<
 * 			return 0
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__129, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "PyCafe.pyx":836
 * 		else:
 * 			print ("This line in PyCafe def getAsList should never appear!")
 * 			return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;
    break;
  }

  /* "PyCafe.pyx":839
 * 
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 
 */
  __pyx_t_2 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":840
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 
 * 				if handle == 0:
 */
    __pyx_t_2 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":842
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
      __pyx_t_2 = ((__pyx_v_handle == 0) != 0);
      if (__pyx_t_2) {

        /* "PyCafe.pyx":843
 * 
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 */
        __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

        /* "PyCafe.pyx":842
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
        goto __pyx_L44;
      }

      /* "PyCafe.pyx":845
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)             # <<<<<<<<<<<<<<
 * 
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getList. Status = %d" %status)
 */
      /*else*/ {
        __pyx_v_self->_c_cafe->printStatus(__pyx_v_handle, __pyx_v_status);
      }
      __pyx_L44:;

      /* "PyCafe.pyx":840
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 
 * 				if handle == 0:
 */
    }

    /* "PyCafe.pyx":847
 * 					self._c_cafe.printStatus(handle, status)
 * 
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getList. Status = %d" %status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_4, __pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":839
 * 
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 
 */
  }

  /* "PyCafe.pyx":718
 * 
 * 	##################################################################################
 * 	def  getList(self, handlePV, str dt='native'):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int handle=0
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("PyCafe.CyCafe.getList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ll);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":852
 * 
 * 	##################################################################################
 * 	def  getStrArray(self, handlePV, bint asnumpy=False):             # <<<<<<<<<<<<<<
 * 		return self.getArray(handlePV,dt='str', asnumpy=asnumpy)
 * 	##################################################################################
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_107getStrArray(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_107getStrArray(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handlePV = 0;
  int __pyx_v_asnumpy;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getStrArray (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handlePV,&__pyx_n_s_asnumpy,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handlePV)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_asnumpy);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getStrArray") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 852; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_handlePV = values[0];
    if (values[1]) {
      __pyx_v_asnumpy = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_asnumpy == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 852; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_asnumpy = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getStrArray", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 852; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.getStrArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_106getStrArray(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handlePV, __pyx_v_asnumpy);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_106getStrArray(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, int __pyx_v_asnumpy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getStrArray", 0);

  /* "PyCafe.pyx":853
 * 	##################################################################################
 * 	def  getStrArray(self, handlePV, bint asnumpy=False):
 * 		return self.getArray(handlePV,dt='str', asnumpy=asnumpy)             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getArray); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_handlePV);
  __Pyx_GIVEREF(__pyx_v_handlePV);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_handlePV);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dt, __pyx_n_u_str) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_asnumpy); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_asnumpy, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":852
 * 
 * 	##################################################################################
 * 	def  getStrArray(self, handlePV, bint asnumpy=False):             # <<<<<<<<<<<<<<
 * 		return self.getArray(handlePV,dt='str', asnumpy=asnumpy)
 * 	##################################################################################
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PyCafe.CyCafe.getStrArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":857
 * 
 * 	##################################################################################
 * 	def  getIntArray(self, handlePV, bint asnumpy=False):             # <<<<<<<<<<<<<<
 * 		return self.getArray(handlePV,dt='int', asnumpy=asnumpy)
 * 	##################################################################################
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_109getIntArray(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_109getIntArray(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handlePV = 0;
  int __pyx_v_asnumpy;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getIntArray (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handlePV,&__pyx_n_s_asnumpy,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handlePV)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_asnumpy);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getIntArray") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_handlePV = values[0];
    if (values[1]) {
      __pyx_v_asnumpy = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_asnumpy == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_asnumpy = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getIntArray", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.getIntArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_108getIntArray(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handlePV, __pyx_v_asnumpy);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_108getIntArray(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, int __pyx_v_asnumpy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getIntArray", 0);

  /* "PyCafe.pyx":858
 * 	##################################################################################
 * 	def  getIntArray(self, handlePV, bint asnumpy=False):
 * 		return self.getArray(handlePV,dt='int', asnumpy=asnumpy)             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getArray); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 858; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 858; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_handlePV);
  __Pyx_GIVEREF(__pyx_v_handlePV);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_handlePV);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 858; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dt, __pyx_n_u_int) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 858; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_asnumpy); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 858; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_asnumpy, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 858; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 858; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":857
 * 
 * 	##################################################################################
 * 	def  getIntArray(self, handlePV, bint asnumpy=False):             # <<<<<<<<<<<<<<
 * 		return self.getArray(handlePV,dt='int', asnumpy=asnumpy)
 * 	##################################################################################
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PyCafe.CyCafe.getIntArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":862
 * 
 * 	##################################################################################
 * 	def  getFloatArray(self, handlePV, bint asnumpy=False):             # <<<<<<<<<<<<<<
 * 		return self.getArray(handlePV,dt='float', asnumpy=asnumpy )
 * 	##################################################################################
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_111getFloatArray(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_111getFloatArray(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handlePV = 0;
  int __pyx_v_asnumpy;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getFloatArray (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handlePV,&__pyx_n_s_asnumpy,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handlePV)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_asnumpy);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getFloatArray") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 862; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_handlePV = values[0];
    if (values[1]) {
      __pyx_v_asnumpy = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_asnumpy == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 862; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_asnumpy = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getFloatArray", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 862; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.getFloatArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_110getFloatArray(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handlePV, __pyx_v_asnumpy);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_110getFloatArray(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, int __pyx_v_asnumpy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFloatArray", 0);

  /* "PyCafe.pyx":863
 * 	##################################################################################
 * 	def  getFloatArray(self, handlePV, bint asnumpy=False):
 * 		return self.getArray(handlePV,dt='float', asnumpy=asnumpy )             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getArray); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_handlePV);
  __Pyx_GIVEREF(__pyx_v_handlePV);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_handlePV);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dt, __pyx_n_u_float) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_asnumpy); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_asnumpy, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":862
 * 
 * 	##################################################################################
 * 	def  getFloatArray(self, handlePV, bint asnumpy=False):             # <<<<<<<<<<<<<<
 * 		return self.getArray(handlePV,dt='float', asnumpy=asnumpy )
 * 	##################################################################################
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PyCafe.CyCafe.getFloatArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":867
 * 
 * 	##################################################################################
 * 	def  getArray(self, handlePV, dt='native', bint asnumpy=False):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 	#Typed Memoryviews from K.W. Smith
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_113getArray(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_113getArray(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handlePV = 0;
  PyObject *__pyx_v_dt = 0;
  int __pyx_v_asnumpy;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getArray (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handlePV,&__pyx_n_s_dt,&__pyx_n_s_asnumpy,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_n_u_native);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handlePV)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_asnumpy);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getArray") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_handlePV = values[0];
    __pyx_v_dt = values[1];
    if (values[2]) {
      __pyx_v_asnumpy = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_asnumpy == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_asnumpy = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getArray", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.getArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_112getArray(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handlePV, __pyx_v_dt, __pyx_v_asnumpy);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_112getArray(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, PyObject *__pyx_v_dt, int __pyx_v_asnumpy) {
  unsigned int __pyx_v_handle;
  int *__pyx_v_ival;
  double *__pyx_v_dval;
  dbr_string_t *__pyx_v_sval;
  __Pyx_memviewslice __pyx_v_mvInt = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_mvDouble = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyArrayObject *__pyx_v_arr = 0;
  long __pyx_v_dtr;
  int __pyx_v_status;
  unsigned int __pyx_v_dtcheck;
  unsigned int __pyx_v_nelemNative;
  CYTHON_UNUSED unsigned int __pyx_v_nelemClient;
  PyObject *__pyx_v_locallist = NULL;
  unsigned int __pyx_v_nelemRequest;
  long __pyx_v_i;
  long __pyx_v_ij;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  long __pyx_t_7;
  int __pyx_t_8;
  struct __pyx_array_obj *__pyx_t_9 = NULL;
  __Pyx_memviewslice __pyx_t_10 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  int __pyx_t_15;
  __Pyx_memviewslice __pyx_t_16 = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getArray", 0);

  /* "PyCafe.pyx":885
 * 
 * 
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":886
 * 
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":887
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":886
 * 
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":888
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":889
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getArray. \n \
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":888
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":891
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getArray. \n \             # <<<<<<<<<<<<<<
 * 			First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__130, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":902
 * 			#str [:,::1] mvStr
 * 			cnp.ndarray arr
 * 			long dtr=0             # <<<<<<<<<<<<<<
 * 			int status
 * 			cvarray mvDoubleArray
 */
  __pyx_v_dtr = 0;

  /* "PyCafe.pyx":906
 * 			cvarray mvDoubleArray
 * 
 * 		status=self.hh.getDataTypeRequest(handle, dtr)             # <<<<<<<<<<<<<<
 * 
 * 		if status != ICAFE_NORMAL:
 */
  __pyx_v_status = __pyx_v_self->hh.getDataTypeRequest(__pyx_v_handle, __pyx_v_dtr);

  /* "PyCafe.pyx":908
 * 		status=self.hh.getDataTypeRequest(handle, dtr)
 * 
 * 		if status != ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  __pyx_t_1 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":909
 * 
 * 		if status != ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    __pyx_t_1 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":910
 * 		if status != ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
      __pyx_t_1 = ((__pyx_v_handle == 0) != 0);
      if (__pyx_t_1) {

        /* "PyCafe.pyx":911
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 */
        __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

        /* "PyCafe.pyx":910
 * 		if status != ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
        goto __pyx_L8;
      }

      /* "PyCafe.pyx":913
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getArray. Status = %d" %status)
 * 
 */
      /*else*/ {
        __pyx_v_self->_c_cafe->printStatus(__pyx_v_handle, __pyx_v_status);
      }
      __pyx_L8:;

      /* "PyCafe.pyx":909
 * 
 * 		if status != ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    }

    /* "PyCafe.pyx":914
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getArray. Status = %d" %status)             # <<<<<<<<<<<<<<
 * 
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 914; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_5, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 914; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 914; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 914; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 914; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":908
 * 		status=self.hh.getDataTypeRequest(handle, dtr)
 * 
 * 		if status != ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  }

  /* "PyCafe.pyx":916
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getArray. Status = %d" %status)
 * 
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  switch (__pyx_v_dtr) {
    case CAFE_NO_ACCESS:
    case CAFE_TYPENOTCONN:
    __pyx_t_1 = 1;
    break;
    default:
    __pyx_t_1 = 0;
    break;
  }
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":917
 * 
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)
 */
    __pyx_t_2 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":918
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)
 * 				else:
 */
      __pyx_t_2 = ((__pyx_v_handle == 0) != 0);
      if (__pyx_t_2) {

        /* "PyCafe.pyx":919
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)             # <<<<<<<<<<<<<<
 * 				else:
 * 					self._c_cafe.printStatus(handle,ICAFE_TYPENOTCONN)
 */
        __pyx_v_self->_c_cafe->printStatusMessage(ICAFE_TYPENOTCONN);

        /* "PyCafe.pyx":918
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)
 * 				else:
 */
        goto __pyx_L10;
      }

      /* "PyCafe.pyx":921
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)
 * 				else:
 * 					self._c_cafe.printStatus(handle,ICAFE_TYPENOTCONN)             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getArray. Status = %d" %ICAFE_TYPENOTCONN)
 * 
 */
      /*else*/ {
        __pyx_v_self->_c_cafe->printStatus(__pyx_v_handle, ICAFE_TYPENOTCONN);
      }
      __pyx_L10:;

      /* "PyCafe.pyx":917
 * 
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)
 */
    }

    /* "PyCafe.pyx":922
 * 				else:
 * 					self._c_cafe.printStatus(handle,ICAFE_TYPENOTCONN)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getArray. Status = %d" %ICAFE_TYPENOTCONN)             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int dtcheck =	dtr
 */
    __pyx_t_6 = __Pyx_PyInt_From_CAFE_CFT_STATE(ICAFE_TYPENOTCONN); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_5, __pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":916
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getArray. Status = %d" %status)
 * 
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  }

  /* "PyCafe.pyx":924
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getArray. Status = %d" %ICAFE_TYPENOTCONN)
 * 
 * 		cdef unsigned int dtcheck =	dtr             # <<<<<<<<<<<<<<
 * 		dtcheck=getMatchedDataType(dt, dtr)
 * 
 */
  __pyx_v_dtcheck = __pyx_v_dtr;

  /* "PyCafe.pyx":925
 * 
 * 		cdef unsigned int dtcheck =	dtr
 * 		dtcheck=getMatchedDataType(dt, dtr)             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int nelemNative=self.hh.getNelemNative(handle)
 */
  __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_dtr); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __pyx_f_6PyCafe_getMatchedDataType(__pyx_v_dt, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_6); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_dtcheck = __pyx_t_4;

  /* "PyCafe.pyx":927
 * 		dtcheck=getMatchedDataType(dt, dtr)
 * 
 * 		cdef unsigned int nelemNative=self.hh.getNelemNative(handle)             # <<<<<<<<<<<<<<
 * 		cdef unsigned int nelemClient=self.hh.getNelemClient(handle)
 * 		'''
 */
  __pyx_v_nelemNative = __pyx_v_self->hh.getNelemNative(__pyx_v_handle);

  /* "PyCafe.pyx":928
 * 
 * 		cdef unsigned int nelemNative=self.hh.getNelemNative(handle)
 * 		cdef unsigned int nelemClient=self.hh.getNelemClient(handle)             # <<<<<<<<<<<<<<
 * 		'''
 * 		cdef cvarray cyarr
 */
  __pyx_v_nelemClient = __pyx_v_self->hh.getNelemClient(__pyx_v_handle);

  /* "PyCafe.pyx":976
 * 		#It may be a ctypedef alias, or it may be a structured type declared with e.g. cdef struct
 * 
 * 		if dtcheck in [CAFE_STRING]:             # <<<<<<<<<<<<<<
 * 			sval = <char[40]*>malloc( nelemNative * sizeof(dbr_string_t))
 * 			with nogil:
 */
  switch (__pyx_v_dtcheck) {
    case CAFE_STRING:

    /* "PyCafe.pyx":977
 * 
 * 		if dtcheck in [CAFE_STRING]:
 * 			sval = <char[40]*>malloc( nelemNative * sizeof(dbr_string_t))             # <<<<<<<<<<<<<<
 * 			with nogil:
 * 				status=self._c_cafe.getDbrStringArray(handle, sval)
 */
    __pyx_v_sval = ((char (*)[40])malloc((__pyx_v_nelemNative * (sizeof(dbr_string_t)))));

    /* "PyCafe.pyx":978
 * 		if dtcheck in [CAFE_STRING]:
 * 			sval = <char[40]*>malloc( nelemNative * sizeof(dbr_string_t))
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.getDbrStringArray(handle, sval)
 * 
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "PyCafe.pyx":979
 * 			sval = <char[40]*>malloc( nelemNative * sizeof(dbr_string_t))
 * 			with nogil:
 * 				status=self._c_cafe.getDbrStringArray(handle, sval)             # <<<<<<<<<<<<<<
 * 
 * 			#http://cython.readthedocs.org/en/latest/src/tutorial/numpy.html
 */
          __pyx_v_status = __pyx_v_self->_c_cafe->getDbrStringArray(__pyx_v_handle, __pyx_v_sval);
        }

        /* "PyCafe.pyx":978
 * 		if dtcheck in [CAFE_STRING]:
 * 			sval = <char[40]*>malloc( nelemNative * sizeof(dbr_string_t))
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.getDbrStringArray(handle, sval)
 * 
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L13;
          }
          __pyx_L13:;
        }
    }

    /* "PyCafe.pyx":984
 * 			#Some data types are not yet supported, like boolean arrays and string arrays.
 * 
 * 			locallist=[]             # <<<<<<<<<<<<<<
 * 
 * 			if status==ICAFE_NORMAL:
 */
    __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_v_locallist = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "PyCafe.pyx":986
 * 			locallist=[]
 * 
 * 			if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 				#mvStr  = np.empty(self.hh.getNelemRequest(handle), dtype=(np.str,16))
 * 				#mvStr=np.array(self.hh.getNelemRequest(handle), dtype='S40')
 */
    __pyx_t_2 = ((__pyx_v_status == ICAFE_NORMAL) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":990
 * 				#mvStr=np.array(self.hh.getNelemRequest(handle), dtype='S40')
 * 
 * 				nelemRequest=self.hh.getNelemRequest(handle)             # <<<<<<<<<<<<<<
 * 
 * 				for i in range(0, nelemRequest):
 */
      __pyx_v_nelemRequest = __pyx_v_self->hh.getNelemRequest(__pyx_v_handle);

      /* "PyCafe.pyx":992
 * 				nelemRequest=self.hh.getNelemRequest(handle)
 * 
 * 				for i in range(0, nelemRequest):             # <<<<<<<<<<<<<<
 * 					#print sval[i].decode('utf8'), i
 * 					#mvStr[i]=<str>sval[i].decode('utf8')
 */
      __pyx_t_4 = __pyx_v_nelemRequest;
      for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_4; __pyx_t_7+=1) {
        __pyx_v_i = __pyx_t_7;

        /* "PyCafe.pyx":995
 * 					#print sval[i].decode('utf8'), i
 * 					#mvStr[i]=<str>sval[i].decode('utf8')
 * 					locallist.append(sval[i])             # <<<<<<<<<<<<<<
 * 
 * 				free(sval)
 */
        __pyx_t_6 = __Pyx_PyObject_FromString((__pyx_v_sval[__pyx_v_i])); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 995; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_locallist, __pyx_t_6); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 995; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }

      /* "PyCafe.pyx":997
 * 					locallist.append(sval[i])
 * 
 * 				free(sval)             # <<<<<<<<<<<<<<
 * 
 * 				return locallist
 */
      free(__pyx_v_sval);

      /* "PyCafe.pyx":999
 * 				free(sval)
 * 
 * 				return locallist             # <<<<<<<<<<<<<<
 * 
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_locallist);
      __pyx_r = __pyx_v_locallist;
      goto __pyx_L0;

      /* "PyCafe.pyx":986
 * 			locallist=[]
 * 
 * 			if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 				#mvStr  = np.empty(self.hh.getNelemRequest(handle), dtype=(np.str,16))
 * 				#mvStr=np.array(self.hh.getNelemRequest(handle), dtype='S40')
 */
    }

    /* "PyCafe.pyx":976
 * 		#It may be a ctypedef alias, or it may be a structured type declared with e.g. cdef struct
 * 
 * 		if dtcheck in [CAFE_STRING]:             # <<<<<<<<<<<<<<
 * 			sval = <char[40]*>malloc( nelemNative * sizeof(dbr_string_t))
 * 			with nogil:
 */
    break;

    /* "PyCafe.pyx":1001
 * 				return locallist
 * 
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:             # <<<<<<<<<<<<<<
 * 
 * 			ival = <int *>malloc( nelemNative * sizeof(int))
 */
    case CAFE_SHORT:
    case CAFE_CHAR:
    case CAFE_LONG:

    /* "PyCafe.pyx":1003
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:
 * 
 * 			ival = <int *>malloc( nelemNative * sizeof(int))             # <<<<<<<<<<<<<<
 * 			with nogil:
 * 				status=self._c_cafe.getLongArray(handle, ival)
 */
    __pyx_v_ival = ((int *)malloc((__pyx_v_nelemNative * (sizeof(int)))));

    /* "PyCafe.pyx":1004
 * 
 * 			ival = <int *>malloc( nelemNative * sizeof(int))
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.getLongArray(handle, ival)
 * 
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "PyCafe.pyx":1005
 * 			ival = <int *>malloc( nelemNative * sizeof(int))
 * 			with nogil:
 * 				status=self._c_cafe.getLongArray(handle, ival)             # <<<<<<<<<<<<<<
 * 
 * 			if status==ICAFE_NORMAL:
 */
          __pyx_v_status = __pyx_v_self->_c_cafe->getLongArray(__pyx_v_handle, __pyx_v_ival);
        }

        /* "PyCafe.pyx":1004
 * 
 * 			ival = <int *>malloc( nelemNative * sizeof(int))
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.getLongArray(handle, ival)
 * 
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L19;
          }
          __pyx_L19:;
        }
    }

    /* "PyCafe.pyx":1007
 * 				status=self._c_cafe.getLongArray(handle, ival)
 * 
 * 			if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 				#np.empty preferred, else mvInt does not get correct value for first couple of array elements
 * 
 */
    __pyx_t_2 = ((__pyx_v_status == ICAFE_NORMAL) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":1010
 * 				#np.empty preferred, else mvInt does not get correct value for first couple of array elements
 * 
 * 				nelemRequest=self.hh.getNelemRequest(handle)             # <<<<<<<<<<<<<<
 * 
 * 				if asnumpy:
 */
      __pyx_v_nelemRequest = __pyx_v_self->hh.getNelemRequest(__pyx_v_handle);

      /* "PyCafe.pyx":1012
 * 				nelemRequest=self.hh.getNelemRequest(handle)
 * 
 * 				if asnumpy:             # <<<<<<<<<<<<<<
 * 					#cnp.PyArray_SimpleNew(1,[4080], cnp.NPY_INT32)
 * 					#array = (ctypes.c_ubyte * frameInfo.lHeight * frameInfo.lWidth * 1
 */
      __pyx_t_2 = (__pyx_v_asnumpy != 0);
      if (__pyx_t_2) {

        /* "PyCafe.pyx":1018
 * 					#array=(ctypes.c_int*4080).from_address(ival) #ctypes.addressof(ival))
 * 
 * 					mvInt=<int[:nelemRequest]>ival             # <<<<<<<<<<<<<<
 * 
 * 					arr = np.ascontiguousarray(mvInt)
 */
        if (!__pyx_v_ival) {
          PyErr_SetString(PyExc_ValueError,"Cannot create cython.array from NULL pointer");
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_5 = __pyx_format_from_typeinfo(&__Pyx_TypeInfo_int);
        __pyx_t_6 = Py_BuildValue((char*) "("  __PYX_BUILD_PY_SSIZE_T  ")", ((Py_ssize_t)__pyx_v_nelemRequest));
        if (unlikely(!__pyx_t_5 || !__pyx_t_6 || !PyBytes_AsString(__pyx_t_5))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_9 = __pyx_array_new(__pyx_t_6, sizeof(int), PyBytes_AS_STRING(__pyx_t_5), (char *) "c", (char *) __pyx_v_ival);
        if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_10 = __Pyx_PyObject_to_MemoryviewSlice_dc_int(((PyObject *)__pyx_t_9));
        if (unlikely(!__pyx_t_10.memview)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
        __pyx_v_mvInt = __pyx_t_10;
        __pyx_t_10.memview = NULL;
        __pyx_t_10.data = NULL;

        /* "PyCafe.pyx":1020
 * 					mvInt=<int[:nelemRequest]>ival
 * 
 * 					arr = np.ascontiguousarray(mvInt)             # <<<<<<<<<<<<<<
 * 					#arr=np.asarray(mvInt)
 * 					#arr=np.array(mvInt)
 */
        __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __pyx_memoryview_fromslice(__pyx_v_mvInt, 1, (PyObject *(*)(char *)) __pyx_memview_get_int, (int (*)(char *, PyObject *)) __pyx_memview_set_int, 0);; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_12 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
          }
        }
        if (!__pyx_t_12) {
          __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_5);
        } else {
          __pyx_t_13 = PyTuple_New(1+1); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_12); __pyx_t_12 = NULL;
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_13, 0+1, __pyx_t_6);
          __pyx_t_6 = 0;
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_13, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_v_arr = ((PyArrayObject *)__pyx_t_5);
        __pyx_t_5 = 0;

        /* "PyCafe.pyx":1025
 * 					#gives; expected a readable buffer object
 * 					#arr=np.ndarray(buffer=np.array(mvInt), dtype=int, shape=(self.hh.getNelemRequest(handle),1), order='C')
 * 					set_base(arr, ival)             # <<<<<<<<<<<<<<
 * 					return arr
 * 				else:
 */
        __pyx_f_6PyCafe_set_base(__pyx_v_arr, __pyx_v_ival);

        /* "PyCafe.pyx":1026
 * 					#arr=np.ndarray(buffer=np.array(mvInt), dtype=int, shape=(self.hh.getNelemRequest(handle),1), order='C')
 * 					set_base(arr, ival)
 * 					return arr             # <<<<<<<<<<<<<<
 * 				else:
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(((PyObject *)__pyx_v_arr));
        __pyx_r = ((PyObject *)__pyx_v_arr);
        goto __pyx_L0;

        /* "PyCafe.pyx":1012
 * 				nelemRequest=self.hh.getNelemRequest(handle)
 * 
 * 				if asnumpy:             # <<<<<<<<<<<<<<
 * 					#cnp.PyArray_SimpleNew(1,[4080], cnp.NPY_INT32)
 * 					#array = (ctypes.c_ubyte * frameInfo.lHeight * frameInfo.lWidth * 1
 */
      }

      /* "PyCafe.pyx":1030
 * 
 * 
 * 					mvInt  = np.empty(nelemRequest, dtype=np.int32)             # <<<<<<<<<<<<<<
 * 					for ij in range(0, nelemRequest):
 * 						mvInt[ij]=ival[ij]
 */
      /*else*/ {
        __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1030; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1030; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_nelemRequest); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1030; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_13 = PyTuple_New(1); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1030; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1030; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1030; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int32); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1030; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_12) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1030; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_13, __pyx_t_5); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1030; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_10 = __Pyx_PyObject_to_MemoryviewSlice_dc_int(__pyx_t_12);
        if (unlikely(!__pyx_t_10.memview)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1030; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_v_mvInt = __pyx_t_10;
        __pyx_t_10.memview = NULL;
        __pyx_t_10.data = NULL;

        /* "PyCafe.pyx":1031
 * 
 * 					mvInt  = np.empty(nelemRequest, dtype=np.int32)
 * 					for ij in range(0, nelemRequest):             # <<<<<<<<<<<<<<
 * 						mvInt[ij]=ival[ij]
 * 					free(ival)
 */
        __pyx_t_4 = __pyx_v_nelemRequest;
        for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_4; __pyx_t_7+=1) {
          __pyx_v_ij = __pyx_t_7;

          /* "PyCafe.pyx":1032
 * 					mvInt  = np.empty(nelemRequest, dtype=np.int32)
 * 					for ij in range(0, nelemRequest):
 * 						mvInt[ij]=ival[ij]             # <<<<<<<<<<<<<<
 * 					free(ival)
 * 
 */
          __pyx_t_14 = __pyx_v_ij;
          __pyx_t_15 = -1;
          if (__pyx_t_14 < 0) {
            __pyx_t_14 += __pyx_v_mvInt.shape[0];
            if (unlikely(__pyx_t_14 < 0)) __pyx_t_15 = 0;
          } else if (unlikely(__pyx_t_14 >= __pyx_v_mvInt.shape[0])) __pyx_t_15 = 0;
          if (unlikely(__pyx_t_15 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_15);
            {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1032; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          *((int *) ( /* dim=0 */ ((char *) (((int *) __pyx_v_mvInt.data) + __pyx_t_14)) )) = (__pyx_v_ival[__pyx_v_ij]);
        }

        /* "PyCafe.pyx":1033
 * 					for ij in range(0, nelemRequest):
 * 						mvInt[ij]=ival[ij]
 * 					free(ival)             # <<<<<<<<<<<<<<
 * 
 * 					return mvInt
 */
        free(__pyx_v_ival);

        /* "PyCafe.pyx":1035
 * 					free(ival)
 * 
 * 					return mvInt             # <<<<<<<<<<<<<<
 * 
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_12 = __pyx_memoryview_fromslice(__pyx_v_mvInt, 1, (PyObject *(*)(char *)) __pyx_memview_get_int, (int (*)(char *, PyObject *)) __pyx_memview_set_int, 0);; if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_r = __pyx_t_12;
        __pyx_t_12 = 0;
        goto __pyx_L0;
      }

      /* "PyCafe.pyx":1007
 * 				status=self._c_cafe.getLongArray(handle, ival)
 * 
 * 			if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 				#np.empty preferred, else mvInt does not get correct value for first couple of array elements
 * 
 */
    }

    /* "PyCafe.pyx":1001
 * 				return locallist
 * 
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:             # <<<<<<<<<<<<<<
 * 
 * 			ival = <int *>malloc( nelemNative * sizeof(int))
 */
    break;

    /* "PyCafe.pyx":1037
 * 					return mvInt
 * 
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:             # <<<<<<<<<<<<<<
 * 			dval = <double *>malloc( nelemNative * sizeof(double))
 * 			with nogil:
 */
    case CAFE_FLOAT:
    case CAFE_DOUBLE:

    /* "PyCafe.pyx":1038
 * 
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:
 * 			dval = <double *>malloc( nelemNative * sizeof(double))             # <<<<<<<<<<<<<<
 * 			with nogil:
 * 				status=self._c_cafe.getDoubleArray(handle, dval)
 */
    __pyx_v_dval = ((double *)malloc((__pyx_v_nelemNative * (sizeof(double)))));

    /* "PyCafe.pyx":1039
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:
 * 			dval = <double *>malloc( nelemNative * sizeof(double))
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.getDoubleArray(handle, dval)
 * 
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "PyCafe.pyx":1040
 * 			dval = <double *>malloc( nelemNative * sizeof(double))
 * 			with nogil:
 * 				status=self._c_cafe.getDoubleArray(handle, dval)             # <<<<<<<<<<<<<<
 * 
 * 
 */
          __pyx_v_status = __pyx_v_self->_c_cafe->getDoubleArray(__pyx_v_handle, __pyx_v_dval);
        }

        /* "PyCafe.pyx":1039
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:
 * 			dval = <double *>malloc( nelemNative * sizeof(double))
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.getDoubleArray(handle, dval)
 * 
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L26;
          }
          __pyx_L26:;
        }
    }

    /* "PyCafe.pyx":1043
 * 
 * 
 * 			if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 				nelemRequest=self.hh.getNelemRequest(handle)
 * 
 */
    __pyx_t_2 = ((__pyx_v_status == ICAFE_NORMAL) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":1044
 * 
 * 			if status==ICAFE_NORMAL:
 * 				nelemRequest=self.hh.getNelemRequest(handle)             # <<<<<<<<<<<<<<
 * 
 * 				if asnumpy:
 */
      __pyx_v_nelemRequest = __pyx_v_self->hh.getNelemRequest(__pyx_v_handle);

      /* "PyCafe.pyx":1046
 * 				nelemRequest=self.hh.getNelemRequest(handle)
 * 
 * 				if asnumpy:             # <<<<<<<<<<<<<<
 * 					mvDouble=<double[:nelemRequest]>dval
 * 					arr = np.ascontiguousarray(mvDouble)
 */
      __pyx_t_2 = (__pyx_v_asnumpy != 0);
      if (__pyx_t_2) {

        /* "PyCafe.pyx":1047
 * 
 * 				if asnumpy:
 * 					mvDouble=<double[:nelemRequest]>dval             # <<<<<<<<<<<<<<
 * 					arr = np.ascontiguousarray(mvDouble)
 * 					set_base(arr, dval)
 */
        if (!__pyx_v_dval) {
          PyErr_SetString(PyExc_ValueError,"Cannot create cython.array from NULL pointer");
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1047; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_5 = __pyx_format_from_typeinfo(&__Pyx_TypeInfo_double);
        __pyx_t_12 = Py_BuildValue((char*) "("  __PYX_BUILD_PY_SSIZE_T  ")", ((Py_ssize_t)__pyx_v_nelemRequest));
        if (unlikely(!__pyx_t_5 || !__pyx_t_12 || !PyBytes_AsString(__pyx_t_5))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1047; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_9 = __pyx_array_new(__pyx_t_12, sizeof(double), PyBytes_AS_STRING(__pyx_t_5), (char *) "c", (char *) __pyx_v_dval);
        if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1047; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_16 = __Pyx_PyObject_to_MemoryviewSlice_dc_double(((PyObject *)__pyx_t_9));
        if (unlikely(!__pyx_t_16.memview)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1047; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
        __pyx_v_mvDouble = __pyx_t_16;
        __pyx_t_16.memview = NULL;
        __pyx_t_16.data = NULL;

        /* "PyCafe.pyx":1048
 * 				if asnumpy:
 * 					mvDouble=<double[:nelemRequest]>dval
 * 					arr = np.ascontiguousarray(mvDouble)             # <<<<<<<<<<<<<<
 * 					set_base(arr, dval)
 * 					return arr
 */
        __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = __pyx_memoryview_fromslice(__pyx_v_mvDouble, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_11 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_13))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_13);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_13, function);
          }
        }
        if (!__pyx_t_11) {
          __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_12); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_GOTREF(__pyx_t_5);
        } else {
          __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_11); __pyx_t_11 = NULL;
          __Pyx_GIVEREF(__pyx_t_12);
          PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_12);
          __pyx_t_12 = 0;
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_v_arr = ((PyArrayObject *)__pyx_t_5);
        __pyx_t_5 = 0;

        /* "PyCafe.pyx":1049
 * 					mvDouble=<double[:nelemRequest]>dval
 * 					arr = np.ascontiguousarray(mvDouble)
 * 					set_base(arr, dval)             # <<<<<<<<<<<<<<
 * 					return arr
 * 				else:
 */
        __pyx_f_6PyCafe_set_base(__pyx_v_arr, __pyx_v_dval);

        /* "PyCafe.pyx":1050
 * 					arr = np.ascontiguousarray(mvDouble)
 * 					set_base(arr, dval)
 * 					return arr             # <<<<<<<<<<<<<<
 * 				else:
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(((PyObject *)__pyx_v_arr));
        __pyx_r = ((PyObject *)__pyx_v_arr);
        goto __pyx_L0;

        /* "PyCafe.pyx":1046
 * 				nelemRequest=self.hh.getNelemRequest(handle)
 * 
 * 				if asnumpy:             # <<<<<<<<<<<<<<
 * 					mvDouble=<double[:nelemRequest]>dval
 * 					arr = np.ascontiguousarray(mvDouble)
 */
      }

      /* "PyCafe.pyx":1055
 * 
 * 					#Method A to return memory view
 * 					mvDouble  = np.empty(nelemRequest, dtype=np.float64)             # <<<<<<<<<<<<<<
 * 					for i in range(0, nelemRequest):
 * 						mvDouble[i]=dval[i]
 */
      /*else*/ {
        __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_nelemRequest); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_float64); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_11) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_16 = __Pyx_PyObject_to_MemoryviewSlice_dc_double(__pyx_t_11);
        if (unlikely(!__pyx_t_16.memview)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_v_mvDouble = __pyx_t_16;
        __pyx_t_16.memview = NULL;
        __pyx_t_16.data = NULL;

        /* "PyCafe.pyx":1056
 * 					#Method A to return memory view
 * 					mvDouble  = np.empty(nelemRequest, dtype=np.float64)
 * 					for i in range(0, nelemRequest):             # <<<<<<<<<<<<<<
 * 						mvDouble[i]=dval[i]
 * 					free(dval)
 */
        __pyx_t_4 = __pyx_v_nelemRequest;
        for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_4; __pyx_t_7+=1) {
          __pyx_v_i = __pyx_t_7;

          /* "PyCafe.pyx":1057
 * 					mvDouble  = np.empty(nelemRequest, dtype=np.float64)
 * 					for i in range(0, nelemRequest):
 * 						mvDouble[i]=dval[i]             # <<<<<<<<<<<<<<
 * 					free(dval)
 * 					return mvDouble
 */
          __pyx_t_17 = __pyx_v_i;
          __pyx_t_15 = -1;
          if (__pyx_t_17 < 0) {
            __pyx_t_17 += __pyx_v_mvDouble.shape[0];
            if (unlikely(__pyx_t_17 < 0)) __pyx_t_15 = 0;
          } else if (unlikely(__pyx_t_17 >= __pyx_v_mvDouble.shape[0])) __pyx_t_15 = 0;
          if (unlikely(__pyx_t_15 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_15);
            {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1057; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          *((double *) ( /* dim=0 */ ((char *) (((double *) __pyx_v_mvDouble.data) + __pyx_t_17)) )) = (__pyx_v_dval[__pyx_v_i]);
        }

        /* "PyCafe.pyx":1058
 * 					for i in range(0, nelemRequest):
 * 						mvDouble[i]=dval[i]
 * 					free(dval)             # <<<<<<<<<<<<<<
 * 					return mvDouble
 * 					#Method B to return memory view
 */
        free(__pyx_v_dval);

        /* "PyCafe.pyx":1059
 * 						mvDouble[i]=dval[i]
 * 					free(dval)
 * 					return mvDouble             # <<<<<<<<<<<<<<
 * 					#Method B to return memory view
 * 					'''
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_11 = __pyx_memoryview_fromslice(__pyx_v_mvDouble, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_r = __pyx_t_11;
        __pyx_t_11 = 0;
        goto __pyx_L0;
      }

      /* "PyCafe.pyx":1043
 * 
 * 
 * 			if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 				nelemRequest=self.hh.getNelemRequest(handle)
 * 
 */
    }

    /* "PyCafe.pyx":1037
 * 					return mvInt
 * 
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:             # <<<<<<<<<<<<<<
 * 			dval = <double *>malloc( nelemNative * sizeof(double))
 * 			with nogil:
 */
    break;
    default: break;
  }

  /* "PyCafe.pyx":1088
 * 					'''
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  __pyx_t_2 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":1089
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    __pyx_t_2 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":1090
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
      __pyx_t_2 = ((__pyx_v_handle == 0) != 0);
      if (__pyx_t_2) {

        /* "PyCafe.pyx":1091
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 */
        __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

        /* "PyCafe.pyx":1090
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
        goto __pyx_L33;
      }

      /* "PyCafe.pyx":1093
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getArray. Status = %d" %status)
 * 
 */
      /*else*/ {
        __pyx_v_self->_c_cafe->printStatus(__pyx_v_handle, __pyx_v_status);
      }
      __pyx_L33:;

      /* "PyCafe.pyx":1089
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    }

    /* "PyCafe.pyx":1094
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getArray. Status = %d" %status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_5 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_5, __pyx_t_11); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_11, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":1088
 * 					'''
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  }

  /* "PyCafe.pyx":867
 * 
 * 	##################################################################################
 * 	def  getArray(self, handlePV, dt='native', bint asnumpy=False):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 	#Typed Memoryviews from K.W. Smith
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(((PyObject *)__pyx_t_9));
  __PYX_XDEC_MEMVIEW(&__pyx_t_10, 1);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __PYX_XDEC_MEMVIEW(&__pyx_t_16, 1);
  __Pyx_AddTraceback("PyCafe.CyCafe.getArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_mvInt, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_mvDouble, 1);
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __Pyx_XDECREF(__pyx_v_locallist);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":1104
 * 
 * 	##################################################################################
 * 	def  getPVInt(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.getPV(handlePV,'int')
 * 	##################################################################################
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_115getPVInt(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_115getPVInt(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPVInt (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_114getPVInt(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_114getPVInt(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPVInt", 0);

  /* "PyCafe.pyx":1105
 * 	##################################################################################
 * 	def  getPVInt(self, handlePV):
 * 		return self.getPV(handlePV,'int')             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getPV); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_3) {
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_handlePV);
  __Pyx_GIVEREF(__pyx_v_handlePV);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_handlePV);
  __Pyx_INCREF(__pyx_n_u_int);
  __Pyx_GIVEREF(__pyx_n_u_int);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_u_int);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":1104
 * 
 * 	##################################################################################
 * 	def  getPVInt(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.getPV(handlePV,'int')
 * 	##################################################################################
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.getPVInt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":1109
 * 
 * 	##################################################################################
 * 	def  getPVFloat(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.getPV(handlePV,'float')
 * 	##################################################################################
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_117getPVFloat(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_117getPVFloat(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPVFloat (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_116getPVFloat(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_116getPVFloat(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPVFloat", 0);

  /* "PyCafe.pyx":1110
 * 	##################################################################################
 * 	def  getPVFloat(self, handlePV):
 * 		return self.getPV(handlePV,'float')             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getPV); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_3) {
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_handlePV);
  __Pyx_GIVEREF(__pyx_v_handlePV);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_handlePV);
  __Pyx_INCREF(__pyx_n_u_float);
  __Pyx_GIVEREF(__pyx_n_u_float);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_u_float);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":1109
 * 
 * 	##################################################################################
 * 	def  getPVFloat(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.getPV(handlePV,'float')
 * 	##################################################################################
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.getPVFloat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":1114
 * 
 * 	##################################################################################
 * 	def  getPVStr(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.getPV(handlePV,'str')
 * 	##################################################################################
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_119getPVStr(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_119getPVStr(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPVStr (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_118getPVStr(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_118getPVStr(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPVStr", 0);

  /* "PyCafe.pyx":1115
 * 	##################################################################################
 * 	def  getPVStr(self, handlePV):
 * 		return self.getPV(handlePV,'str')             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getPV); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_3) {
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_handlePV);
  __Pyx_GIVEREF(__pyx_v_handlePV);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_handlePV);
  __Pyx_INCREF(__pyx_n_u_str);
  __Pyx_GIVEREF(__pyx_n_u_str);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_u_str);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":1114
 * 
 * 	##################################################################################
 * 	def  getPVStr(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.getPV(handlePV,'str')
 * 	##################################################################################
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.getPVStr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":1119
 * 
 * 	##################################################################################
 * 	def  getPV(self, handlePV, str dt='native'):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_121getPV(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_121getPV(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handlePV = 0;
  PyObject *__pyx_v_dt = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPV (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handlePV,&__pyx_n_s_dt,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject*)__pyx_n_u_native);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handlePV)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getPV") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1119; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_handlePV = values[0];
    __pyx_v_dt = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getPV", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1119; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.getPV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dt), (&PyUnicode_Type), 1, "dt", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_120getPV(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handlePV, __pyx_v_dt);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_120getPV(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, PyObject *__pyx_v_dt) {
  unsigned int __pyx_v_handle;
  int __pyx_v_status;
  PVDataHolder __pyx_v_pvd;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  struct __pyx_opt_args_6PyCafe_PVDataHolderToStruct __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPV", 0);

  /* "PyCafe.pyx":1122
 * 	##################################################################################
 * 
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":1124
 * 		cdef unsigned int handle=0
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":1125
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":1124
 * 		cdef unsigned int handle=0
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":1126
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":1127
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getPV. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":1126
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":1129
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getPV. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__131, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":1134
 * 
 * 		cdef int status
 * 		cdef PVDataHolder pvd = PVDataHolder(self.hh.getNelemNative(handle))             # <<<<<<<<<<<<<<
 * 
 * 		with nogil:
 */
  __pyx_v_pvd = PVDataHolder(__pyx_v_self->hh.getNelemNative(__pyx_v_handle));

  /* "PyCafe.pyx":1136
 * 		cdef PVDataHolder pvd = PVDataHolder(self.hh.getNelemNative(handle))
 * 
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.get(handle, pvd)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":1137
 * 
 * 		with nogil:
 * 			status=self._c_cafe.get(handle, pvd)             # <<<<<<<<<<<<<<
 * 
 * 		if status !=ICAFE_NORMAL:
 */
        __pyx_v_status = __pyx_v_self->_c_cafe->get(__pyx_v_handle, __pyx_v_pvd);
      }

      /* "PyCafe.pyx":1136
 * 		cdef PVDataHolder pvd = PVDataHolder(self.hh.getNelemNative(handle))
 * 
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.get(handle, pvd)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L8;
        }
        __pyx_L8:;
      }
  }

  /* "PyCafe.pyx":1139
 * 			status=self._c_cafe.get(handle, pvd)
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  __pyx_t_1 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":1140
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    __pyx_t_1 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":1141
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
      __pyx_t_1 = ((__pyx_v_handle == 0) != 0);
      if (__pyx_t_1) {

        /* "PyCafe.pyx":1142
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 */
        __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

        /* "PyCafe.pyx":1141
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
        goto __pyx_L11;
      }

      /* "PyCafe.pyx":1144
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)             # <<<<<<<<<<<<<<
 * 
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getPV Status = %d" %status)
 */
      /*else*/ {
        __pyx_v_self->_c_cafe->printStatus(__pyx_v_handle, __pyx_v_status);
      }
      __pyx_L11:;

      /* "PyCafe.pyx":1140
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    }

    /* "PyCafe.pyx":1146
 * 					self._c_cafe.printStatus(handle, status)
 * 
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getPV Status = %d" %status)             # <<<<<<<<<<<<<<
 * 
 * 		return PVDataHolderToStruct(pvd, dt)
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_6, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":1139
 * 			status=self._c_cafe.get(handle, pvd)
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  }

  /* "PyCafe.pyx":1148
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getPV Status = %d" %status)
 * 
 * 		return PVDataHolderToStruct(pvd, dt)             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7.__pyx_n = 1;
  __pyx_t_7.dt = __pyx_v_dt;
  __pyx_t_6 = ((PyObject *)__pyx_f_6PyCafe_PVDataHolderToStruct(__pyx_v_pvd, &__pyx_t_7)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":1119
 * 
 * 	##################################################################################
 * 	def  getPV(self, handlePV, str dt='native'):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("PyCafe.CyCafe.getPV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":1156
 * 
 * 	##################################################################################
 * 	def  getPVStrList(self, handleList):             # <<<<<<<<<<<<<<
 * 		return self.getPVList(handleList,  dt='str')
 * 	##################################################################################
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_123getPVStrList(PyObject *__pyx_v_self, PyObject *__pyx_v_handleList); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_123getPVStrList(PyObject *__pyx_v_self, PyObject *__pyx_v_handleList) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPVStrList (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_122getPVStrList(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handleList));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_122getPVStrList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPVStrList", 0);

  /* "PyCafe.pyx":1157
 * 	##################################################################################
 * 	def  getPVStrList(self, handleList):
 * 		return self.getPVList(handleList,  dt='str')             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getPVList); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_handleList);
  __Pyx_GIVEREF(__pyx_v_handleList);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_handleList);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dt, __pyx_n_u_str) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":1156
 * 
 * 	##################################################################################
 * 	def  getPVStrList(self, handleList):             # <<<<<<<<<<<<<<
 * 		return self.getPVList(handleList,  dt='str')
 * 	##################################################################################
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PyCafe.CyCafe.getPVStrList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":1161
 * 
 * 	##################################################################################
 * 	def  getPVIntList(self, handleList):             # <<<<<<<<<<<<<<
 * 		return self.getPVList(handleList,  dt='int')
 * 	##################################################################################
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_125getPVIntList(PyObject *__pyx_v_self, PyObject *__pyx_v_handleList); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_125getPVIntList(PyObject *__pyx_v_self, PyObject *__pyx_v_handleList) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPVIntList (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_124getPVIntList(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handleList));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_124getPVIntList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPVIntList", 0);

  /* "PyCafe.pyx":1162
 * 	##################################################################################
 * 	def  getPVIntList(self, handleList):
 * 		return self.getPVList(handleList,  dt='int')             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getPVList); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_handleList);
  __Pyx_GIVEREF(__pyx_v_handleList);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_handleList);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dt, __pyx_n_u_int) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":1161
 * 
 * 	##################################################################################
 * 	def  getPVIntList(self, handleList):             # <<<<<<<<<<<<<<
 * 		return self.getPVList(handleList,  dt='int')
 * 	##################################################################################
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PyCafe.CyCafe.getPVIntList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":1166
 * 
 * 	##################################################################################
 * 	def  getPVFloatList(self, handleList):             # <<<<<<<<<<<<<<
 * 		return self.getPVList(handleList,  dt='float')
 * 	##################################################################################
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_127getPVFloatList(PyObject *__pyx_v_self, PyObject *__pyx_v_handleList); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_127getPVFloatList(PyObject *__pyx_v_self, PyObject *__pyx_v_handleList) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPVFloatList (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_126getPVFloatList(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handleList));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_126getPVFloatList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPVFloatList", 0);

  /* "PyCafe.pyx":1167
 * 	##################################################################################
 * 	def  getPVFloatList(self, handleList):
 * 		return self.getPVList(handleList,  dt='float')             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getPVList); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_handleList);
  __Pyx_GIVEREF(__pyx_v_handleList);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_handleList);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dt, __pyx_n_u_float) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":1166
 * 
 * 	##################################################################################
 * 	def  getPVFloatList(self, handleList):             # <<<<<<<<<<<<<<
 * 		return self.getPVList(handleList,  dt='float')
 * 	##################################################################################
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PyCafe.CyCafe.getPVFloatList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":1171
 * 
 * 	##################################################################################
 * 	def  getPVList(self, handleList, str dt='native'):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_129getPVList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_129getPVList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handleList = 0;
  PyObject *__pyx_v_dt = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPVList (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handleList,&__pyx_n_s_dt,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject*)__pyx_n_u_native);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handleList)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getPVList") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1171; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_handleList = values[0];
    __pyx_v_dt = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getPVList", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1171; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.getPVList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dt), (&PyUnicode_Type), 1, "dt", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_128getPVList(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handleList, __pyx_v_dt);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_128getPVList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList, PyObject *__pyx_v_dt) {
  std::vector<unsigned int>  __pyx_v_v;
  Py_ssize_t __pyx_v_i;
  PVDataHolder *__pyx_v_pvd;
  int __pyx_v_status;
  unsigned int __pyx_v_dtn;
  unsigned int __pyx_v_dtcheck;
  PyObject *__pyx_v_pvdList = NULL;
  struct __pyx_obj_6PyCafe_pvdata *__pyx_v_p1 = 0;
  PyObject *__pyx_v_localList = NULL;
  PyObject *__pyx_v_localListInner = NULL;
  long __pyx_v_j;
  PyObject *__pyx_v_ll = NULL;
  PyObject *__pyx_v_ld = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  unsigned int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  long __pyx_t_11;
  unsigned int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPVList", 0);
  __Pyx_INCREF(__pyx_v_handleList);

  /* "PyCafe.pyx":1175
 * 
 * 
 * 		if not isinstance(handleList, (list)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getPVList. \n\
 * First input argument, should be <type 'list'> of handles or PVs")
 */
  __pyx_t_1 = PyList_Check(__pyx_v_handleList); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":1176
 * 
 * 		if not isinstance(handleList, (list)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getPVList. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__132, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":1175
 * 
 * 
 * 		if not isinstance(handleList, (list)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getPVList. \n\
 * First input argument, should be <type 'list'> of handles or PVs")
 */
  }

  /* "PyCafe.pyx":1179
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 * 		if 	isinstance(handleList[0], (str)):             # <<<<<<<<<<<<<<
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_handleList, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1179; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyUnicode_Check(__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":1180
 * 
 * 		if 	isinstance(handleList[0], (str)):
 * 			handleList=self.checkForHandleList(handleList)             # <<<<<<<<<<<<<<
 * 		elif not isinstance(handleList[0], (int, long)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getPVList. \n\
 */
    if (!(likely(PyList_CheckExact(__pyx_v_handleList))||((__pyx_v_handleList) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_handleList)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandleList(__pyx_v_self, ((PyObject*)__pyx_v_handleList), 0, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_handleList, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "PyCafe.pyx":1179
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 * 		if 	isinstance(handleList[0], (str)):             # <<<<<<<<<<<<<<
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):
 */
    goto __pyx_L4;
  }

  /* "PyCafe.pyx":1181
 * 		if 	isinstance(handleList[0], (str)):
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getPVList. \n\
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_handleList, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1181; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyInt_Check(__pyx_t_3); 
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_4 = PyLong_Check(__pyx_t_3); 
  __pyx_t_2 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L5_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":1182
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getPVList. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__133, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":1181
 * 		if 	isinstance(handleList[0], (str)):
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getPVList. \n\
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 */
  }
  __pyx_L4:;

  /* "PyCafe.pyx":1199
 * 		#do this to avoid compiler warning messages
 * 
 * 		for i in range(0, len(handleList)):             # <<<<<<<<<<<<<<
 * 			v.push_back(handleList[i])
 * 
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "PyCafe.pyx":1200
 * 
 * 		for i in range(0, len(handleList)):
 * 			v.push_back(handleList[i])             # <<<<<<<<<<<<<<
 * 
 * 		cdef PVDataHolder * pvd = self._c_cafe.getPVData(v)
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1200; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    try {
      __pyx_v_v.push_back(__pyx_t_7);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }

  /* "PyCafe.pyx":1202
 * 			v.push_back(handleList[i])
 * 
 * 		cdef PVDataHolder * pvd = self._c_cafe.getPVData(v)             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(0, len(handleList)):
 */
  __pyx_v_pvd = __pyx_v_self->_c_cafe->getPVData(__pyx_v_v);

  /* "PyCafe.pyx":1204
 * 		cdef PVDataHolder * pvd = self._c_cafe.getPVData(v)
 * 
 * 		for i in range(0, len(handleList)):             # <<<<<<<<<<<<<<
 * 			pvd[i].setNelem(self.hh.getNelemNative(handleList[i]))
 * 			#print " ",	pvd[i].getNelem(), self.hh.getNelemNative(handleList[i]), i
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "PyCafe.pyx":1205
 * 
 * 		for i in range(0, len(handleList)):
 * 			pvd[i].setNelem(self.hh.getNelemNative(handleList[i]))             # <<<<<<<<<<<<<<
 * 			#print " ",	pvd[i].getNelem(), self.hh.getNelemNative(handleList[i]), i
 * 
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1205; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_pvd[__pyx_v_i]).setNelem(__pyx_v_self->hh.getNelemNative(__pyx_t_7));
  }

  /* "PyCafe.pyx":1210
 * 		cdef int status
 * 
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.getPVArray(v, pvd)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":1211
 * 
 * 		with nogil:
 * 			status=self._c_cafe.getPVArray(v, pvd)             # <<<<<<<<<<<<<<
 * 
 * 		if status !=ICAFE_NORMAL:
 */
        __pyx_v_status = __pyx_v_self->_c_cafe->getPVArray(__pyx_v_v, __pyx_v_pvd);
      }

      /* "PyCafe.pyx":1210
 * 		cdef int status
 * 
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.getPVArray(v, pvd)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L13;
        }
        __pyx_L13:;
      }
  }

  /* "PyCafe.pyx":1213
 * 			status=self._c_cafe.getPVArray(v, pvd)
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  __pyx_t_2 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":1214
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 			for i in range(0, len(handleList)):
 */
    __pyx_t_2 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":1215
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 			for i in range(0, len(handleList)):
 * 				if (pvd[i].getStatus() != ICAFE_NORMAL):
 */
      __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

      /* "PyCafe.pyx":1214
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 			for i in range(0, len(handleList)):
 */
    }

    /* "PyCafe.pyx":1216
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 * 			for i in range(0, len(handleList)):             # <<<<<<<<<<<<<<
 * 				if (pvd[i].getStatus() != ICAFE_NORMAL):
 * 					print ("Handle=", handleList[i], "PV=", self.hh.getPVFromHandle(handleList[i]) )
 */
    __pyx_t_5 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "PyCafe.pyx":1217
 * 				self._c_cafe.printStatusMessage(status)
 * 			for i in range(0, len(handleList)):
 * 				if (pvd[i].getStatus() != ICAFE_NORMAL):             # <<<<<<<<<<<<<<
 * 					print ("Handle=", handleList[i], "PV=", self.hh.getPVFromHandle(handleList[i]) )
 * 					print ("with error status=", 	pvd[i].getStatus()	)
 */
      __pyx_t_2 = (((__pyx_v_pvd[__pyx_v_i]).getStatus() != ICAFE_NORMAL) != 0);
      if (__pyx_t_2) {

        /* "PyCafe.pyx":1218
 * 			for i in range(0, len(handleList)):
 * 				if (pvd[i].getStatus() != ICAFE_NORMAL):
 * 					print ("Handle=", handleList[i], "PV=", self.hh.getPVFromHandle(handleList[i]) )             # <<<<<<<<<<<<<<
 * 					print ("with error status=", 	pvd[i].getStatus()	)
 * 					self._c_cafe.printStatusMessage(status)
 */
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1218; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1218; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_8); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyStr_FromString(__pyx_v_self->hh.getPVFromHandle(__pyx_t_7)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = PyTuple_New(4); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_kp_u_Handle);
        __Pyx_GIVEREF(__pyx_kp_u_Handle);
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_kp_u_Handle);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_3);
        __Pyx_INCREF(__pyx_kp_u_PV_2);
        __Pyx_GIVEREF(__pyx_kp_u_PV_2);
        PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_kp_u_PV_2);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_8);
        __pyx_t_3 = 0;
        __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "PyCafe.pyx":1219
 * 				if (pvd[i].getStatus() != ICAFE_NORMAL):
 * 					print ("Handle=", handleList[i], "PV=", self.hh.getPVFromHandle(handleList[i]) )
 * 					print ("with error status=", 	pvd[i].getStatus()	)             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 					print ("")
 */
        __pyx_t_8 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getStatus()); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_kp_u_with_error_status);
        __Pyx_GIVEREF(__pyx_kp_u_with_error_status);
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_kp_u_with_error_status);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "PyCafe.pyx":1220
 * 					print ("Handle=", handleList[i], "PV=", self.hh.getPVFromHandle(handleList[i]) )
 * 					print ("with error status=", 	pvd[i].getStatus()	)
 * 					self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 					print ("")
 * 			#raise Exception("EXCEPTION RAISED in PyCafe def getPVList. Status = %d" %status)
 */
        __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

        /* "PyCafe.pyx":1221
 * 					print ("with error status=", 	pvd[i].getStatus()	)
 * 					self._c_cafe.printStatusMessage(status)
 * 					print ("")             # <<<<<<<<<<<<<<
 * 			#raise Exception("EXCEPTION RAISED in PyCafe def getPVList. Status = %d" %status)
 * 
 */
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__134, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "PyCafe.pyx":1217
 * 				self._c_cafe.printStatusMessage(status)
 * 			for i in range(0, len(handleList)):
 * 				if (pvd[i].getStatus() != ICAFE_NORMAL):             # <<<<<<<<<<<<<<
 * 					print ("Handle=", handleList[i], "PV=", self.hh.getPVFromHandle(handleList[i]) )
 * 					print ("with error status=", 	pvd[i].getStatus()	)
 */
      }
    }

    /* "PyCafe.pyx":1213
 * 			status=self._c_cafe.getPVArray(v, pvd)
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  }

  /* "PyCafe.pyx":1228
 * 		cdef unsigned int dtcheck
 * 
 * 		pvdList=[]             # <<<<<<<<<<<<<<
 * 		cpdef pvdata p1
 * 
 */
  __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_v_pvdList = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "PyCafe.pyx":1231
 * 		cpdef pvdata p1
 * 
 * 		for i in range(0, len(handleList)):             # <<<<<<<<<<<<<<
 * 			dtn = pvd[i].getDataType();
 * 
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "PyCafe.pyx":1232
 * 
 * 		for i in range(0, len(handleList)):
 * 			dtn = pvd[i].getDataType();             # <<<<<<<<<<<<<<
 * 
 * 			dtcheck=getMatchedDataType(dt, dtn)
 */
    __pyx_v_dtn = (__pyx_v_pvd[__pyx_v_i]).getDataType();

    /* "PyCafe.pyx":1234
 * 			dtn = pvd[i].getDataType();
 * 
 * 			dtcheck=getMatchedDataType(dt, dtn)             # <<<<<<<<<<<<<<
 * 			localList=[]
 * 
 */
    __pyx_t_8 = __Pyx_PyInt_From_unsigned_int(__pyx_v_dtn); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __pyx_f_6PyCafe_getMatchedDataType(__pyx_v_dt, __pyx_t_8); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_9); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_v_dtcheck = __pyx_t_7;

    /* "PyCafe.pyx":1235
 * 
 * 			dtcheck=getMatchedDataType(dt, dtn)
 * 			localList=[]             # <<<<<<<<<<<<<<
 * 
 * 			if pvd[i].getNelem() == 1:
 */
    __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v_localList, ((PyObject*)__pyx_t_9));
    __pyx_t_9 = 0;

    /* "PyCafe.pyx":1237
 * 			localList=[]
 * 
 * 			if pvd[i].getNelem() == 1:             # <<<<<<<<<<<<<<
 * 				if dtcheck==CAFE_STRING:
 * 					localList.append(pvd[i].getAsString())
 */
    __pyx_t_2 = (((__pyx_v_pvd[__pyx_v_i]).getNelem() == 1) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":1238
 * 
 * 			if pvd[i].getNelem() == 1:
 * 				if dtcheck==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsString())
 * 				elif dtcheck==CAFE_SHORT:
 */
      switch (__pyx_v_dtcheck) {
        case CAFE_STRING:

        /* "PyCafe.pyx":1239
 * 			if pvd[i].getNelem() == 1:
 * 				if dtcheck==CAFE_STRING:
 * 					localList.append(pvd[i].getAsString())             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_SHORT:
 * 					localList.append(pvd[i].getAsLong())
 */
        __pyx_t_9 = __pyx_convert_PyStr_string_to_py_std__in_string((__pyx_v_pvd[__pyx_v_i]).getAsString()); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "PyCafe.pyx":1238
 * 
 * 			if pvd[i].getNelem() == 1:
 * 				if dtcheck==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsString())
 * 				elif dtcheck==CAFE_SHORT:
 */
        break;

        /* "PyCafe.pyx":1240
 * 				if dtcheck==CAFE_STRING:
 * 					localList.append(pvd[i].getAsString())
 * 				elif dtcheck==CAFE_SHORT:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_FLOAT:
 */
        case CAFE_SHORT:

        /* "PyCafe.pyx":1241
 * 					localList.append(pvd[i].getAsString())
 * 				elif dtcheck==CAFE_SHORT:
 * 					localList.append(pvd[i].getAsLong())             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_FLOAT:
 * 					localList.append(pvd[i].getAsDouble())
 */
        __pyx_t_9 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong()); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "PyCafe.pyx":1240
 * 				if dtcheck==CAFE_STRING:
 * 					localList.append(pvd[i].getAsString())
 * 				elif dtcheck==CAFE_SHORT:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_FLOAT:
 */
        break;

        /* "PyCafe.pyx":1242
 * 				elif dtcheck==CAFE_SHORT:
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_FLOAT:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsDouble())
 * 				elif dtcheck==CAFE_ENUM:
 */
        case CAFE_FLOAT:

        /* "PyCafe.pyx":1243
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_FLOAT:
 * 					localList.append(pvd[i].getAsDouble())             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_ENUM:
 * 					#if enum, string taken as native
 */
        __pyx_t_9 = PyFloat_FromDouble((__pyx_v_pvd[__pyx_v_i]).getAsDouble()); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "PyCafe.pyx":1242
 * 				elif dtcheck==CAFE_SHORT:
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_FLOAT:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsDouble())
 * 				elif dtcheck==CAFE_ENUM:
 */
        break;

        /* "PyCafe.pyx":1244
 * 				elif dtcheck==CAFE_FLOAT:
 * 					localList.append(pvd[i].getAsDouble())
 * 				elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 					#if enum, string taken as native
 * 					if self._c_cafe.isEnum(handleList[i]):
 */
        case CAFE_ENUM:

        /* "PyCafe.pyx":1246
 * 				elif dtcheck==CAFE_ENUM:
 * 					#if enum, string taken as native
 * 					if self._c_cafe.isEnum(handleList[i]):             # <<<<<<<<<<<<<<
 * 						localList.append(pvd[i].getAsString())
 * 					else:
 */
        __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1246; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_9); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_2 = (__pyx_v_self->_c_cafe->isEnum(__pyx_t_7) != 0);
        if (__pyx_t_2) {

          /* "PyCafe.pyx":1247
 * 					#if enum, string taken as native
 * 					if self._c_cafe.isEnum(handleList[i]):
 * 						localList.append(pvd[i].getAsString())             # <<<<<<<<<<<<<<
 * 					else:
 * 						localList.append(pvd[i].getAsLong())
 */
          __pyx_t_9 = __pyx_convert_PyStr_string_to_py_std__in_string((__pyx_v_pvd[__pyx_v_i]).getAsString()); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

          /* "PyCafe.pyx":1246
 * 				elif dtcheck==CAFE_ENUM:
 * 					#if enum, string taken as native
 * 					if self._c_cafe.isEnum(handleList[i]):             # <<<<<<<<<<<<<<
 * 						localList.append(pvd[i].getAsString())
 * 					else:
 */
          goto __pyx_L22;
        }

        /* "PyCafe.pyx":1249
 * 						localList.append(pvd[i].getAsString())
 * 					else:
 * 						localList.append(pvd[i].getAsLong())             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_CHAR:
 * 					localList.append(pvd[i].getAsLong()) #(<unsigned char> pvd[i].getAsChar())
 */
        /*else*/ {
          __pyx_t_9 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong()); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __pyx_L22:;

        /* "PyCafe.pyx":1244
 * 				elif dtcheck==CAFE_FLOAT:
 * 					localList.append(pvd[i].getAsDouble())
 * 				elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 					#if enum, string taken as native
 * 					if self._c_cafe.isEnum(handleList[i]):
 */
        break;

        /* "PyCafe.pyx":1250
 * 					else:
 * 						localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_CHAR:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsLong()) #(<unsigned char> pvd[i].getAsChar())
 * 				elif dtcheck==CAFE_LONG:
 */
        case CAFE_CHAR:

        /* "PyCafe.pyx":1251
 * 						localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_CHAR:
 * 					localList.append(pvd[i].getAsLong()) #(<unsigned char> pvd[i].getAsChar())             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_LONG:
 * 					localList.append(pvd[i].getAsLong())
 */
        __pyx_t_9 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong()); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "PyCafe.pyx":1250
 * 					else:
 * 						localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_CHAR:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsLong()) #(<unsigned char> pvd[i].getAsChar())
 * 				elif dtcheck==CAFE_LONG:
 */
        break;

        /* "PyCafe.pyx":1252
 * 				elif dtcheck==CAFE_CHAR:
 * 					localList.append(pvd[i].getAsLong()) #(<unsigned char> pvd[i].getAsChar())
 * 				elif dtcheck==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_DOUBLE:
 */
        case CAFE_LONG:

        /* "PyCafe.pyx":1253
 * 					localList.append(pvd[i].getAsLong()) #(<unsigned char> pvd[i].getAsChar())
 * 				elif dtcheck==CAFE_LONG:
 * 					localList.append(pvd[i].getAsLong())             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_DOUBLE:
 * 					localList.append(pvd[i].getAsDouble())
 */
        __pyx_t_9 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong()); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "PyCafe.pyx":1252
 * 				elif dtcheck==CAFE_CHAR:
 * 					localList.append(pvd[i].getAsLong()) #(<unsigned char> pvd[i].getAsChar())
 * 				elif dtcheck==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_DOUBLE:
 */
        break;

        /* "PyCafe.pyx":1254
 * 				elif dtcheck==CAFE_LONG:
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsDouble())
 * 				else:
 */
        case CAFE_DOUBLE:

        /* "PyCafe.pyx":1255
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_DOUBLE:
 * 					localList.append(pvd[i].getAsDouble())             # <<<<<<<<<<<<<<
 * 				else:
 * 					localList.append(0) #no data
 */
        __pyx_t_9 = PyFloat_FromDouble((__pyx_v_pvd[__pyx_v_i]).getAsDouble()); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "PyCafe.pyx":1254
 * 				elif dtcheck==CAFE_LONG:
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsDouble())
 * 				else:
 */
        break;
        default:

        /* "PyCafe.pyx":1257
 * 					localList.append(pvd[i].getAsDouble())
 * 				else:
 * 					localList.append(0) #no data             # <<<<<<<<<<<<<<
 * 
 * 			else:
 */
        __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_int_0); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }

      /* "PyCafe.pyx":1237
 * 			localList=[]
 * 
 * 			if pvd[i].getNelem() == 1:             # <<<<<<<<<<<<<<
 * 				if dtcheck==CAFE_STRING:
 * 					localList.append(pvd[i].getAsString())
 */
      goto __pyx_L21;
    }

    /* "PyCafe.pyx":1260
 * 
 * 			else:
 * 				localListInner=[]             # <<<<<<<<<<<<<<
 * 				if dtcheck==CAFE_STRING:
 * 					for j in range(0, pvd[i].getNelem()):
 */
    /*else*/ {
      __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_XDECREF_SET(__pyx_v_localListInner, ((PyObject*)__pyx_t_9));
      __pyx_t_9 = 0;

      /* "PyCafe.pyx":1261
 * 			else:
 * 				localListInner=[]
 * 				if dtcheck==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsString(j))
 */
      switch (__pyx_v_dtcheck) {
        case CAFE_STRING:

        /* "PyCafe.pyx":1262
 * 				localListInner=[]
 * 				if dtcheck==CAFE_STRING:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(pvd[i].getAsString(j))
 * 				elif dtcheck==CAFE_SHORT:
 */
        __pyx_t_7 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_7; __pyx_t_11+=1) {
          __pyx_v_j = __pyx_t_11;

          /* "PyCafe.pyx":1263
 * 				if dtcheck==CAFE_STRING:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsString(j))             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_SHORT:
 * 					for j in range(0, pvd[i].getNelem()):
 */
          __pyx_t_9 = __pyx_convert_PyStr_string_to_py_std__in_string((__pyx_v_pvd[__pyx_v_i]).getAsString(__pyx_v_j)); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }

        /* "PyCafe.pyx":1261
 * 			else:
 * 				localListInner=[]
 * 				if dtcheck==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsString(j))
 */
        break;

        /* "PyCafe.pyx":1264
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsString(j))
 * 				elif dtcheck==CAFE_SHORT:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 */
        case CAFE_SHORT:

        /* "PyCafe.pyx":1265
 * 						localListInner.append(pvd[i].getAsString(j))
 * 				elif dtcheck==CAFE_SHORT:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_FLOAT:
 */
        __pyx_t_7 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_7; __pyx_t_11+=1) {
          __pyx_v_j = __pyx_t_11;

          /* "PyCafe.pyx":1266
 * 				elif dtcheck==CAFE_SHORT:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_FLOAT:
 * 					for j in range(0, pvd[i].getNelem()):
 */
          __pyx_t_9 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong(__pyx_v_j)); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }

        /* "PyCafe.pyx":1264
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsString(j))
 * 				elif dtcheck==CAFE_SHORT:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 */
        break;

        /* "PyCafe.pyx":1267
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_FLOAT:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))
 */
        case CAFE_FLOAT:

        /* "PyCafe.pyx":1268
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_FLOAT:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(pvd[i].getAsDouble(j))
 * 				elif dtcheck==CAFE_ENUM:
 */
        __pyx_t_7 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_7; __pyx_t_11+=1) {
          __pyx_v_j = __pyx_t_11;

          /* "PyCafe.pyx":1269
 * 				elif dtcheck==CAFE_FLOAT:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_ENUM:
 * 					for j in range(0, pvd[i].getNelem()):
 */
          __pyx_t_9 = PyFloat_FromDouble((__pyx_v_pvd[__pyx_v_i]).getAsDouble(__pyx_v_j)); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }

        /* "PyCafe.pyx":1267
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_FLOAT:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))
 */
        break;

        /* "PyCafe.pyx":1270
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))
 * 				elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						#if enum, string taken as native
 */
        case CAFE_ENUM:

        /* "PyCafe.pyx":1271
 * 						localListInner.append(pvd[i].getAsDouble(j))
 * 				elif dtcheck==CAFE_ENUM:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						#if enum, string taken as native
 * 						if self._c_cafe.isEnum(handleList[i]):
 */
        __pyx_t_7 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_7; __pyx_t_11+=1) {
          __pyx_v_j = __pyx_t_11;

          /* "PyCafe.pyx":1273
 * 					for j in range(0, pvd[i].getNelem()):
 * 						#if enum, string taken as native
 * 						if self._c_cafe.isEnum(handleList[i]):             # <<<<<<<<<<<<<<
 * 							localListInner.append(pvd[i].getAsString(j))
 * 						else:
 */
          __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1273; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_12 = __Pyx_PyInt_As_unsigned_int(__pyx_t_9); if (unlikely((__pyx_t_12 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_2 = (__pyx_v_self->_c_cafe->isEnum(__pyx_t_12) != 0);
          if (__pyx_t_2) {

            /* "PyCafe.pyx":1274
 * 						#if enum, string taken as native
 * 						if self._c_cafe.isEnum(handleList[i]):
 * 							localListInner.append(pvd[i].getAsString(j))             # <<<<<<<<<<<<<<
 * 						else:
 * 							localListInner.append(pvd[i].getAsLong(j))
 */
            __pyx_t_9 = __pyx_convert_PyStr_string_to_py_std__in_string((__pyx_v_pvd[__pyx_v_i]).getAsString(__pyx_v_j)); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

            /* "PyCafe.pyx":1273
 * 					for j in range(0, pvd[i].getNelem()):
 * 						#if enum, string taken as native
 * 						if self._c_cafe.isEnum(handleList[i]):             # <<<<<<<<<<<<<<
 * 							localListInner.append(pvd[i].getAsString(j))
 * 						else:
 */
            goto __pyx_L31;
          }

          /* "PyCafe.pyx":1276
 * 							localListInner.append(pvd[i].getAsString(j))
 * 						else:
 * 							localListInner.append(pvd[i].getAsLong(j))             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_CHAR:
 * 					for j in range(0, pvd[i].getNelem()):
 */
          /*else*/ {
            __pyx_t_9 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong(__pyx_v_j)); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }
          __pyx_L31:;
        }

        /* "PyCafe.pyx":1270
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))
 * 				elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						#if enum, string taken as native
 */
        break;

        /* "PyCafe.pyx":1277
 * 						else:
 * 							localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_CHAR:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))#(<unsigned char> pvd[i].getAsChar(j))
 */
        case CAFE_CHAR:

        /* "PyCafe.pyx":1278
 * 							localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_CHAR:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(pvd[i].getAsLong(j))#(<unsigned char> pvd[i].getAsChar(j))
 * 				elif dtcheck==CAFE_LONG:
 */
        __pyx_t_7 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_7; __pyx_t_11+=1) {
          __pyx_v_j = __pyx_t_11;

          /* "PyCafe.pyx":1279
 * 				elif dtcheck==CAFE_CHAR:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))#(<unsigned char> pvd[i].getAsChar(j))             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_LONG:
 * 					for j in range(0, pvd[i].getNelem()):
 */
          __pyx_t_9 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong(__pyx_v_j)); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }

        /* "PyCafe.pyx":1277
 * 						else:
 * 							localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_CHAR:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))#(<unsigned char> pvd[i].getAsChar(j))
 */
        break;

        /* "PyCafe.pyx":1280
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))#(<unsigned char> pvd[i].getAsChar(j))
 * 				elif dtcheck==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 */
        case CAFE_LONG:

        /* "PyCafe.pyx":1281
 * 						localListInner.append(pvd[i].getAsLong(j))#(<unsigned char> pvd[i].getAsChar(j))
 * 				elif dtcheck==CAFE_LONG:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_DOUBLE:
 */
        __pyx_t_7 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_7; __pyx_t_11+=1) {
          __pyx_v_j = __pyx_t_11;

          /* "PyCafe.pyx":1282
 * 				elif dtcheck==CAFE_LONG:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_DOUBLE:
 * 					for j in range(0, pvd[i].getNelem()):
 */
          __pyx_t_9 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong(__pyx_v_j)); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }

        /* "PyCafe.pyx":1280
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))#(<unsigned char> pvd[i].getAsChar(j))
 * 				elif dtcheck==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 */
        break;

        /* "PyCafe.pyx":1283
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))
 */
        case CAFE_DOUBLE:

        /* "PyCafe.pyx":1284
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_DOUBLE:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(pvd[i].getAsDouble(j))
 * 				else:
 */
        __pyx_t_7 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_7; __pyx_t_11+=1) {
          __pyx_v_j = __pyx_t_11;

          /* "PyCafe.pyx":1285
 * 				elif dtcheck==CAFE_DOUBLE:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))             # <<<<<<<<<<<<<<
 * 				else:
 * 					for j in range(0, pvd[i].getNelem()):
 */
          __pyx_t_9 = PyFloat_FromDouble((__pyx_v_pvd[__pyx_v_i]).getAsDouble(__pyx_v_j)); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }

        /* "PyCafe.pyx":1283
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))
 */
        break;
        default:

        /* "PyCafe.pyx":1287
 * 						localListInner.append(pvd[i].getAsDouble(j))
 * 				else:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(0) #no data
 * 				localList.append(localListInner)
 */
        __pyx_t_7 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_7; __pyx_t_11+=1) {
          __pyx_v_j = __pyx_t_11;

          /* "PyCafe.pyx":1288
 * 				else:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(0) #no data             # <<<<<<<<<<<<<<
 * 				localList.append(localListInner)
 * 
 */
          __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_int_0); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }

      /* "PyCafe.pyx":1289
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(0) #no data
 * 				localList.append(localListInner)             # <<<<<<<<<<<<<<
 * 
 * 			p1 = pvdata()
 */
      __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_v_localListInner); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L21:;

    /* "PyCafe.pyx":1291
 * 				localList.append(localListInner)
 * 
 * 			p1 = pvdata()             # <<<<<<<<<<<<<<
 * 			p1.value=localList
 * 			p1.status=pvd[i].getStatus()
 */
    __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6PyCafe_pvdata), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v_p1, ((struct __pyx_obj_6PyCafe_pvdata *)__pyx_t_9));
    __pyx_t_9 = 0;

    /* "PyCafe.pyx":1292
 * 
 * 			p1 = pvdata()
 * 			p1.value=localList             # <<<<<<<<<<<<<<
 * 			p1.status=pvd[i].getStatus()
 * 			p1.nelem=pvd[i].getNelem()
 */
    __Pyx_INCREF(__pyx_v_localList);
    __Pyx_GIVEREF(__pyx_v_localList);
    __Pyx_GOTREF(__pyx_v_p1->value);
    __Pyx_DECREF(__pyx_v_p1->value);
    __pyx_v_p1->value = __pyx_v_localList;

    /* "PyCafe.pyx":1293
 * 			p1 = pvdata()
 * 			p1.value=localList
 * 			p1.status=pvd[i].getStatus()             # <<<<<<<<<<<<<<
 * 			p1.nelem=pvd[i].getNelem()
 * 			p1.alarmStatus=pvd[i].getAlarmStatus()
 */
    __pyx_v_p1->status = (__pyx_v_pvd[__pyx_v_i]).getStatus();

    /* "PyCafe.pyx":1294
 * 			p1.value=localList
 * 			p1.status=pvd[i].getStatus()
 * 			p1.nelem=pvd[i].getNelem()             # <<<<<<<<<<<<<<
 * 			p1.alarmStatus=pvd[i].getAlarmStatus()
 * 			p1.alarmSeverity=pvd[i].getAlarmSeverity()
 */
    __pyx_v_p1->nelem = (__pyx_v_pvd[__pyx_v_i]).getNelem();

    /* "PyCafe.pyx":1295
 * 			p1.status=pvd[i].getStatus()
 * 			p1.nelem=pvd[i].getNelem()
 * 			p1.alarmStatus=pvd[i].getAlarmStatus()             # <<<<<<<<<<<<<<
 * 			p1.alarmSeverity=pvd[i].getAlarmSeverity()
 * 
 */
    __pyx_v_p1->alarmStatus = (__pyx_v_pvd[__pyx_v_i]).getAlarmStatus();

    /* "PyCafe.pyx":1296
 * 			p1.nelem=pvd[i].getNelem()
 * 			p1.alarmStatus=pvd[i].getAlarmStatus()
 * 			p1.alarmSeverity=pvd[i].getAlarmSeverity()             # <<<<<<<<<<<<<<
 * 
 * 			pvd._etsNorm=pvd[i].getEpicsTimeStampAsUInt32()
 */
    __pyx_v_p1->alarmSeverity = (__pyx_v_pvd[__pyx_v_i]).getAlarmSeverity();

    /* "PyCafe.pyx":1298
 * 			p1.alarmSeverity=pvd[i].getAlarmSeverity()
 * 
 * 			pvd._etsNorm=pvd[i].getEpicsTimeStampAsUInt32()             # <<<<<<<<<<<<<<
 * 
 * 			ll=[]
 */
    __pyx_v_pvd->_etsNorm = (__pyx_v_pvd[__pyx_v_i]).getEpicsTimeStampAsUInt32();

    /* "PyCafe.pyx":1300
 * 			pvd._etsNorm=pvd[i].getEpicsTimeStampAsUInt32()
 * 
 * 			ll=[]             # <<<<<<<<<<<<<<
 * 			ll.append((pvd[i]._etsNorm).secPastEpoch)
 * 			ll.append((pvd[i]._etsNorm).nsec)
 */
    __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v_ll, ((PyObject*)__pyx_t_9));
    __pyx_t_9 = 0;

    /* "PyCafe.pyx":1301
 * 
 * 			ll=[]
 * 			ll.append((pvd[i]._etsNorm).secPastEpoch)             # <<<<<<<<<<<<<<
 * 			ll.append((pvd[i]._etsNorm).nsec)
 * 			p1.ts=ll
 */
    __pyx_t_9 = __Pyx_PyInt_From_unsigned_int((__pyx_v_pvd[__pyx_v_i])._etsNorm.secPastEpoch); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_ll, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "PyCafe.pyx":1302
 * 			ll=[]
 * 			ll.append((pvd[i]._etsNorm).secPastEpoch)
 * 			ll.append((pvd[i]._etsNorm).nsec)             # <<<<<<<<<<<<<<
 * 			p1.ts=ll
 * 
 */
    __pyx_t_9 = __Pyx_PyInt_From_unsigned_int((__pyx_v_pvd[__pyx_v_i])._etsNorm.nsec); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_ll, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "PyCafe.pyx":1303
 * 			ll.append((pvd[i]._etsNorm).secPastEpoch)
 * 			ll.append((pvd[i]._etsNorm).nsec)
 * 			p1.ts=ll             # <<<<<<<<<<<<<<
 * 
 * 			pvd._etsDate=pvd[i].getEpicsTimeStampAsDate()
 */
    __Pyx_INCREF(__pyx_v_ll);
    __Pyx_GIVEREF(__pyx_v_ll);
    __Pyx_GOTREF(__pyx_v_p1->ts);
    __Pyx_DECREF(__pyx_v_p1->ts);
    __pyx_v_p1->ts = __pyx_v_ll;

    /* "PyCafe.pyx":1305
 * 			p1.ts=ll
 * 
 * 			pvd._etsDate=pvd[i].getEpicsTimeStampAsDate()             # <<<<<<<<<<<<<<
 * 
 * 			ld=[]
 */
    __pyx_v_pvd->_etsDate = (__pyx_v_pvd[__pyx_v_i]).getEpicsTimeStampAsDate();

    /* "PyCafe.pyx":1307
 * 			pvd._etsDate=pvd[i].getEpicsTimeStampAsDate()
 * 
 * 			ld=[]             # <<<<<<<<<<<<<<
 * 			ld.append( (pvd[i]._etsDate).year )
 * 			ld.append( (pvd[i]._etsDate).mon )
 */
    __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v_ld, ((PyObject*)__pyx_t_9));
    __pyx_t_9 = 0;

    /* "PyCafe.pyx":1308
 * 
 * 			ld=[]
 * 			ld.append( (pvd[i]._etsDate).year )             # <<<<<<<<<<<<<<
 * 			ld.append( (pvd[i]._etsDate).mon )
 * 			ld.append( (pvd[i]._etsDate).day )
 */
    __pyx_t_9 = __Pyx_PyInt_From_unsigned_short((__pyx_v_pvd[__pyx_v_i])._etsDate.year); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_ld, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "PyCafe.pyx":1309
 * 			ld=[]
 * 			ld.append( (pvd[i]._etsDate).year )
 * 			ld.append( (pvd[i]._etsDate).mon )             # <<<<<<<<<<<<<<
 * 			ld.append( (pvd[i]._etsDate).day )
 * 			ld.append( (pvd[i]._etsDate).hour )
 */
    __pyx_t_9 = __Pyx_PyInt_From_unsigned_short((__pyx_v_pvd[__pyx_v_i])._etsDate.mon); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_ld, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "PyCafe.pyx":1310
 * 			ld.append( (pvd[i]._etsDate).year )
 * 			ld.append( (pvd[i]._etsDate).mon )
 * 			ld.append( (pvd[i]._etsDate).day )             # <<<<<<<<<<<<<<
 * 			ld.append( (pvd[i]._etsDate).hour )
 * 			ld.append( (pvd[i]._etsDate).min )
 */
    __pyx_t_9 = __Pyx_PyInt_From_unsigned_short((__pyx_v_pvd[__pyx_v_i])._etsDate.day); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_ld, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "PyCafe.pyx":1311
 * 			ld.append( (pvd[i]._etsDate).mon )
 * 			ld.append( (pvd[i]._etsDate).day )
 * 			ld.append( (pvd[i]._etsDate).hour )             # <<<<<<<<<<<<<<
 * 			ld.append( (pvd[i]._etsDate).min )
 * 			ld.append( (pvd[i]._etsDate).sec )
 */
    __pyx_t_9 = __Pyx_PyInt_From_unsigned_short((__pyx_v_pvd[__pyx_v_i])._etsDate.hour); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_ld, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "PyCafe.pyx":1312
 * 			ld.append( (pvd[i]._etsDate).day )
 * 			ld.append( (pvd[i]._etsDate).hour )
 * 			ld.append( (pvd[i]._etsDate).min )             # <<<<<<<<<<<<<<
 * 			ld.append( (pvd[i]._etsDate).sec )
 * 			ld.append( (pvd[i]._etsDate).nsec )
 */
    __pyx_t_9 = __Pyx_PyInt_From_unsigned_short((__pyx_v_pvd[__pyx_v_i])._etsDate.min); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_ld, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "PyCafe.pyx":1313
 * 			ld.append( (pvd[i]._etsDate).hour )
 * 			ld.append( (pvd[i]._etsDate).min )
 * 			ld.append( (pvd[i]._etsDate).sec )             # <<<<<<<<<<<<<<
 * 			ld.append( (pvd[i]._etsDate).nsec )
 * 			p1.tsDate=ld
 */
    __pyx_t_9 = __Pyx_PyInt_From_unsigned_short((__pyx_v_pvd[__pyx_v_i])._etsDate.sec); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_ld, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "PyCafe.pyx":1314
 * 			ld.append( (pvd[i]._etsDate).min )
 * 			ld.append( (pvd[i]._etsDate).sec )
 * 			ld.append( (pvd[i]._etsDate).nsec )             # <<<<<<<<<<<<<<
 * 			p1.tsDate=ld
 * 
 */
    __pyx_t_9 = __Pyx_PyInt_From_unsigned_int((__pyx_v_pvd[__pyx_v_i])._etsDate.nsec); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_ld, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "PyCafe.pyx":1315
 * 			ld.append( (pvd[i]._etsDate).sec )
 * 			ld.append( (pvd[i]._etsDate).nsec )
 * 			p1.tsDate=ld             # <<<<<<<<<<<<<<
 * 
 * 			pvdList.append(p1)
 */
    __Pyx_INCREF(__pyx_v_ld);
    __Pyx_GIVEREF(__pyx_v_ld);
    __Pyx_GOTREF(__pyx_v_p1->tsDate);
    __Pyx_DECREF(__pyx_v_p1->tsDate);
    __pyx_v_p1->tsDate = __pyx_v_ld;

    /* "PyCafe.pyx":1317
 * 			p1.tsDate=ld
 * 
 * 			pvdList.append(p1)             # <<<<<<<<<<<<<<
 * 
 * 		#free(pvd)
 */
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_pvdList, ((PyObject *)__pyx_v_p1)); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "PyCafe.pyx":1322
 * 
 * 
 * 		return pvdList             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pvdList);
  __pyx_r = __pyx_v_pvdList;
  goto __pyx_L0;

  /* "PyCafe.pyx":1171
 * 
 * 	##################################################################################
 * 	def  getPVList(self, handleList, str dt='native'):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("PyCafe.CyCafe.getPVList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pvdList);
  __Pyx_XDECREF((PyObject *)__pyx_v_p1);
  __Pyx_XDECREF(__pyx_v_localList);
  __Pyx_XDECREF(__pyx_v_localListInner);
  __Pyx_XDECREF(__pyx_v_ll);
  __Pyx_XDECREF(__pyx_v_ld);
  __Pyx_XDECREF(__pyx_v_handleList);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":1330
 * 
 * 
 * 	def printStatusIfError(self, handleList, statusList):             # <<<<<<<<<<<<<<
 * 
 * 		if isinstance(handleList, (str,int,long)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_131printStatusIfError(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_131printStatusIfError(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handleList = 0;
  PyObject *__pyx_v_statusList = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printStatusIfError (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handleList,&__pyx_n_s_statusList,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handleList)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_statusList)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("printStatusIfError", 1, 2, 2, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "printStatusIfError") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_handleList = values[0];
    __pyx_v_statusList = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("printStatusIfError", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.printStatusIfError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_130printStatusIfError(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handleList, __pyx_v_statusList);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_130printStatusIfError(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList, PyObject *__pyx_v_statusList) {
  PyObject *__pyx_v_handleListB = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_handeList = NULL;
  PyObject *__pyx_v_statusListB = NULL;
  std::vector<unsigned int>  __pyx_v_v;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  unsigned int __pyx_t_8;
  std::vector<int>  __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("printStatusIfError", 0);
  __Pyx_INCREF(__pyx_v_handleList);
  __Pyx_INCREF(__pyx_v_statusList);

  /* "PyCafe.pyx":1332
 * 	def printStatusIfError(self, handleList, statusList):
 * 
 * 		if isinstance(handleList, (str,int,long)):             # <<<<<<<<<<<<<<
 * 			handleListB=[]
 * 			handleListB.append(handleList)
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handleList); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyInt_Check(__pyx_v_handleList); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = PyLong_Check(__pyx_v_handleList); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "PyCafe.pyx":1333
 * 
 * 		if isinstance(handleList, (str,int,long)):
 * 			handleListB=[]             # <<<<<<<<<<<<<<
 * 			handleListB.append(handleList)
 * 			handeList=[]
 */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_handleListB = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "PyCafe.pyx":1334
 * 		if isinstance(handleList, (str,int,long)):
 * 			handleListB=[]
 * 			handleListB.append(handleList)             # <<<<<<<<<<<<<<
 * 			handeList=[]
 * 			handleList=handleListB
 */
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_handleListB, __pyx_v_handleList); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":1335
 * 			handleListB=[]
 * 			handleListB.append(handleList)
 * 			handeList=[]             # <<<<<<<<<<<<<<
 * 			handleList=handleListB
 * 
 */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_handeList = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "PyCafe.pyx":1336
 * 			handleListB.append(handleList)
 * 			handeList=[]
 * 			handleList=handleListB             # <<<<<<<<<<<<<<
 * 
 * 		if not isinstance(handleList, (list)):
 */
    __Pyx_INCREF(__pyx_v_handleListB);
    __Pyx_DECREF_SET(__pyx_v_handleList, __pyx_v_handleListB);

    /* "PyCafe.pyx":1332
 * 	def printStatusIfError(self, handleList, statusList):
 * 
 * 		if isinstance(handleList, (str,int,long)):             # <<<<<<<<<<<<<<
 * 			handleListB=[]
 * 			handleListB.append(handleList)
 */
  }

  /* "PyCafe.pyx":1338
 * 			handleList=handleListB
 * 
 * 		if not isinstance(handleList, (list)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def printStatusIfError. \n\
 * First input argument, should be <type 'list'> of handles or PVs")
 */
  __pyx_t_3 = PyList_Check(__pyx_v_handleList); 
  __pyx_t_1 = ((!(__pyx_t_3 != 0)) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":1339
 * 
 * 		if not isinstance(handleList, (list)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def printStatusIfError. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__135, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":1338
 * 			handleList=handleListB
 * 
 * 		if not isinstance(handleList, (list)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def printStatusIfError. \n\
 * First input argument, should be <type 'list'> of handles or PVs")
 */
  }

  /* "PyCafe.pyx":1342
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 * 		if 	isinstance(handleList[0], (str)):             # <<<<<<<<<<<<<<
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_handleList, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1342; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyUnicode_Check(__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "PyCafe.pyx":1343
 * 
 * 		if 	isinstance(handleList[0], (str)):
 * 			handleList=self.checkForHandleList(handleList)             # <<<<<<<<<<<<<<
 * 		elif not isinstance(handleList[0], (int, long)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def printStatusIfError. \n\
 */
    if (!(likely(PyList_CheckExact(__pyx_v_handleList))||((__pyx_v_handleList) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_handleList)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandleList(__pyx_v_self, ((PyObject*)__pyx_v_handleList), 0, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF_SET(__pyx_v_handleList, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "PyCafe.pyx":1342
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 * 		if 	isinstance(handleList[0], (str)):             # <<<<<<<<<<<<<<
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):
 */
    goto __pyx_L8;
  }

  /* "PyCafe.pyx":1344
 * 		if 	isinstance(handleList[0], (str)):
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def printStatusIfError. \n\
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_handleList, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1344; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyInt_Check(__pyx_t_4); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_3 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_2 = PyLong_Check(__pyx_t_4); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  __pyx_t_3 = __pyx_t_1;
  __pyx_L9_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = ((!(__pyx_t_3 != 0)) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":1345
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def printStatusIfError. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__136, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":1344
 * 		if 	isinstance(handleList[0], (str)):
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def printStatusIfError. \n\
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 */
  }
  __pyx_L8:;

  /* "PyCafe.pyx":1348
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 * 
 * 		if isinstance(statusList, (int,long)):             # <<<<<<<<<<<<<<
 * 			statusListB=[]
 * 			statusListB.append(statusList)
 */
  __pyx_t_3 = PyInt_Check(__pyx_v_statusList); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L12_bool_binop_done;
  }
  __pyx_t_2 = PyLong_Check(__pyx_v_statusList); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L12_bool_binop_done:;
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "PyCafe.pyx":1349
 * 
 * 		if isinstance(statusList, (int,long)):
 * 			statusListB=[]             # <<<<<<<<<<<<<<
 * 			statusListB.append(statusList)
 * 			statusList=[]
 */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_statusListB = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "PyCafe.pyx":1350
 * 		if isinstance(statusList, (int,long)):
 * 			statusListB=[]
 * 			statusListB.append(statusList)             # <<<<<<<<<<<<<<
 * 			statusList=[]
 * 			statusList=statusListB
 */
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_statusListB, __pyx_v_statusList); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":1351
 * 			statusListB=[]
 * 			statusListB.append(statusList)
 * 			statusList=[]             # <<<<<<<<<<<<<<
 * 			statusList=statusListB
 * 
 */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF_SET(__pyx_v_statusList, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "PyCafe.pyx":1352
 * 			statusListB.append(statusList)
 * 			statusList=[]
 * 			statusList=statusListB             # <<<<<<<<<<<<<<
 * 
 * 		if not isinstance(statusList, (list)):
 */
    __Pyx_INCREF(__pyx_v_statusListB);
    __Pyx_DECREF_SET(__pyx_v_statusList, __pyx_v_statusListB);

    /* "PyCafe.pyx":1348
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 * 
 * 		if isinstance(statusList, (int,long)):             # <<<<<<<<<<<<<<
 * 			statusListB=[]
 * 			statusListB.append(statusList)
 */
  }

  /* "PyCafe.pyx":1354
 * 			statusList=statusListB
 * 
 * 		if not isinstance(statusList, (list)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def printStatusIfError. \n\
 * Second input argument, should be <type 'list'> of handles or PVs")
 */
  __pyx_t_3 = PyList_Check(__pyx_v_statusList); 
  __pyx_t_1 = ((!(__pyx_t_3 != 0)) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":1355
 * 
 * 		if not isinstance(statusList, (list)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def printStatusIfError. \n\             # <<<<<<<<<<<<<<
 * Second input argument, should be <type 'list'> of handles or PVs")
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__137, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":1354
 * 			statusList=statusListB
 * 
 * 		if not isinstance(statusList, (list)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def printStatusIfError. \n\
 * Second input argument, should be <type 'list'> of handles or PVs")
 */
  }

  /* "PyCafe.pyx":1358
 * Second input argument, should be <type 'list'> of handles or PVs")
 * 
 * 		if not isinstance(statusList[0], (int, long,float)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def printStatusIFError. \n\
 * Second input argument, should be a 'list' of <type 'int'> ")
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_statusList, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1358; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyInt_Check(__pyx_t_4); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L16_bool_binop_done;
  }
  __pyx_t_2 = PyLong_Check(__pyx_t_4); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L16_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_t_4); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L16_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":1359
 * 
 * 		if not isinstance(statusList[0], (int, long,float)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def printStatusIFError. \n\             # <<<<<<<<<<<<<<
 * Second input argument, should be a 'list' of <type 'int'> ")
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__138, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":1358
 * Second input argument, should be <type 'list'> of handles or PVs")
 * 
 * 		if not isinstance(statusList[0], (int, long,float)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def printStatusIFError. \n\
 * Second input argument, should be a 'list' of <type 'int'> ")
 */
  }

  /* "PyCafe.pyx":1365
 * 		#do next step to avoid:
 * 		#warning: comparison between signed and unsigned integer expressions
 * 		for i in range(0, len(handleList)):             # <<<<<<<<<<<<<<
 * 			v.push_back(handleList[i]) #do this copy to avoid compiler warning messages
 * 
 */
  __pyx_t_6 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "PyCafe.pyx":1366
 * 		#warning: comparison between signed and unsigned integer expressions
 * 		for i in range(0, len(handleList)):
 * 			v.push_back(handleList[i]) #do this copy to avoid compiler warning messages             # <<<<<<<<<<<<<<
 * 
 * 		return self._c_cafe.printStatusIfError(v, statusList)
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1366; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyInt_As_unsigned_int(__pyx_t_4); if (unlikely((__pyx_t_8 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    try {
      __pyx_v_v.push_back(__pyx_t_8);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }

  /* "PyCafe.pyx":1368
 * 			v.push_back(handleList[i]) #do this copy to avoid compiler warning messages
 * 
 * 		return self._c_cafe.printStatusIfError(v, statusList)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_9 = __pyx_convert_vector_from_py_int(__pyx_v_statusList); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->_c_cafe->printStatusIfError(__pyx_v_v, __pyx_t_9)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":1330
 * 
 * 
 * 	def printStatusIfError(self, handleList, statusList):             # <<<<<<<<<<<<<<
 * 
 * 		if isinstance(handleList, (str,int,long)):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PyCafe.CyCafe.printStatusIfError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_handleListB);
  __Pyx_XDECREF(__pyx_v_handeList);
  __Pyx_XDECREF(__pyx_v_statusListB);
  __Pyx_XDECREF(__pyx_v_handleList);
  __Pyx_XDECREF(__pyx_v_statusList);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":1373
 * 
 * 	##################################################################################
 * 	def getAsyn(self, handleList):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_133getAsyn(PyObject *__pyx_v_self, PyObject *__pyx_v_handleList); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_133getAsyn(PyObject *__pyx_v_self, PyObject *__pyx_v_handleList) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAsyn (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_132getAsyn(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handleList));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_132getAsyn(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList) {
  PyObject *__pyx_v_handleListB = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_handeList = NULL;
  std::vector<unsigned int>  __pyx_v_v;
  std::vector<int>  __pyx_v_vStatus;
  Py_ssize_t __pyx_v_i;
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  unsigned int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getAsyn", 0);
  __Pyx_INCREF(__pyx_v_handleList);

  /* "PyCafe.pyx":1376
 * 	##################################################################################
 * 
 * 		if isinstance(handleList, (str,int,long)):             # <<<<<<<<<<<<<<
 * 			handleListB=[]
 * 			handleListB.append(handleList)
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handleList); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyInt_Check(__pyx_v_handleList); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = PyLong_Check(__pyx_v_handleList); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "PyCafe.pyx":1377
 * 
 * 		if isinstance(handleList, (str,int,long)):
 * 			handleListB=[]             # <<<<<<<<<<<<<<
 * 			handleListB.append(handleList)
 * 			handeList=[]
 */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_handleListB = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "PyCafe.pyx":1378
 * 		if isinstance(handleList, (str,int,long)):
 * 			handleListB=[]
 * 			handleListB.append(handleList)             # <<<<<<<<<<<<<<
 * 			handeList=[]
 * 			handleList=handleListB
 */
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_handleListB, __pyx_v_handleList); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":1379
 * 			handleListB=[]
 * 			handleListB.append(handleList)
 * 			handeList=[]             # <<<<<<<<<<<<<<
 * 			handleList=handleListB
 * 
 */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_handeList = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "PyCafe.pyx":1380
 * 			handleListB.append(handleList)
 * 			handeList=[]
 * 			handleList=handleListB             # <<<<<<<<<<<<<<
 * 
 * 		if not isinstance(handleList, (list)):
 */
    __Pyx_INCREF(__pyx_v_handleListB);
    __Pyx_DECREF_SET(__pyx_v_handleList, __pyx_v_handleListB);

    /* "PyCafe.pyx":1376
 * 	##################################################################################
 * 
 * 		if isinstance(handleList, (str,int,long)):             # <<<<<<<<<<<<<<
 * 			handleListB=[]
 * 			handleListB.append(handleList)
 */
  }

  /* "PyCafe.pyx":1382
 * 			handleList=handleListB
 * 
 * 		if not isinstance(handleList, (list)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getAsy. \n\
 * First input argument, should be <type 'list'> of handles or PVs")
 */
  __pyx_t_3 = PyList_Check(__pyx_v_handleList); 
  __pyx_t_1 = ((!(__pyx_t_3 != 0)) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":1383
 * 
 * 		if not isinstance(handleList, (list)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getAsy. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__139, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":1382
 * 			handleList=handleListB
 * 
 * 		if not isinstance(handleList, (list)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getAsy. \n\
 * First input argument, should be <type 'list'> of handles or PVs")
 */
  }

  /* "PyCafe.pyx":1386
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 * 		if 	isinstance(handleList[0], (str)):             # <<<<<<<<<<<<<<
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_handleList, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyUnicode_Check(__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "PyCafe.pyx":1387
 * 
 * 		if 	isinstance(handleList[0], (str)):
 * 			handleList=self.checkForHandleList(handleList)             # <<<<<<<<<<<<<<
 * 		elif not isinstance(handleList[0], (int, long)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getAsy. \n\
 */
    if (!(likely(PyList_CheckExact(__pyx_v_handleList))||((__pyx_v_handleList) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_handleList)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandleList(__pyx_v_self, ((PyObject*)__pyx_v_handleList), 0, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF_SET(__pyx_v_handleList, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "PyCafe.pyx":1386
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 * 		if 	isinstance(handleList[0], (str)):             # <<<<<<<<<<<<<<
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):
 */
    goto __pyx_L8;
  }

  /* "PyCafe.pyx":1388
 * 		if 	isinstance(handleList[0], (str)):
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getAsy. \n\
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_handleList, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1388; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyInt_Check(__pyx_t_4); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_3 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_2 = PyLong_Check(__pyx_t_4); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  __pyx_t_3 = __pyx_t_1;
  __pyx_L9_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = ((!(__pyx_t_3 != 0)) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":1389
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getAsy. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__140, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":1388
 * 		if 	isinstance(handleList[0], (str)):
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getAsy. \n\
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 */
  }
  __pyx_L8:;

  /* "PyCafe.pyx":1394
 * 		cdef vector[unsigned int] v
 * 		cdef vector[int] vStatus
 * 		v.reserve      (len(handleList))             # <<<<<<<<<<<<<<
 * 		vStatus.reserve(len(handleList))
 * 
 */
  __pyx_t_6 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_v.reserve(__pyx_t_6);

  /* "PyCafe.pyx":1395
 * 		cdef vector[int] vStatus
 * 		v.reserve      (len(handleList))
 * 		vStatus.reserve(len(handleList))             # <<<<<<<<<<<<<<
 * 
 * 		#do next step to avoid:
 */
  __pyx_t_6 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_vStatus.reserve(__pyx_t_6);

  /* "PyCafe.pyx":1399
 * 		#do next step to avoid:
 * 		#warning: comparison between signed and unsigned integer expressions
 * 		for i in range(0, len(handleList)):             # <<<<<<<<<<<<<<
 * 			v.push_back(handleList[i]) #do this copy to avoid compiler warning messages
 * 
 */
  __pyx_t_6 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "PyCafe.pyx":1400
 * 		#warning: comparison between signed and unsigned integer expressions
 * 		for i in range(0, len(handleList)):
 * 			v.push_back(handleList[i]) #do this copy to avoid compiler warning messages             # <<<<<<<<<<<<<<
 * 
 * 		#Need to copy to a vector since
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1400; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyInt_As_unsigned_int(__pyx_t_4); if (unlikely((__pyx_t_8 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    try {
      __pyx_v_v.push_back(__pyx_t_8);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }

  /* "PyCafe.pyx":1404
 * 		#Need to copy to a vector since
 * 		#Coercion from Python not allowed without the GIL
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.getV(v, vStatus)
 * 		status=ICAFE_NORMAL
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":1405
 * 		#Coercion from Python not allowed without the GIL
 * 		with nogil:
 * 			status=self._c_cafe.getV(v, vStatus)             # <<<<<<<<<<<<<<
 * 		status=ICAFE_NORMAL
 * 		if (status!=ICAFE_NORMAL):
 */
        __pyx_v_status = __pyx_v_self->_c_cafe->getV(__pyx_v_v, __pyx_v_vStatus);
      }

      /* "PyCafe.pyx":1404
 * 		#Need to copy to a vector since
 * 		#Coercion from Python not allowed without the GIL
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.getV(v, vStatus)
 * 		status=ICAFE_NORMAL
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L15;
        }
        __pyx_L15:;
      }
  }

  /* "PyCafe.pyx":1406
 * 		with nogil:
 * 			status=self._c_cafe.getV(v, vStatus)
 * 		status=ICAFE_NORMAL             # <<<<<<<<<<<<<<
 * 		if (status!=ICAFE_NORMAL):
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 */
  __pyx_v_status = ICAFE_NORMAL;

  /* "PyCafe.pyx":1407
 * 			status=self._c_cafe.getV(v, vStatus)
 * 		status=ICAFE_NORMAL
 * 		if (status!=ICAFE_NORMAL):             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				print ("Error in def getAsyn: ")
 */
  __pyx_t_1 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":1408
 * 		status=ICAFE_NORMAL
 * 		if (status!=ICAFE_NORMAL):
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				print ("Error in def getAsyn: ")
 * 				self._c_cafe.printStatusMessage(status)
 */
    __pyx_t_1 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":1409
 * 		if (status!=ICAFE_NORMAL):
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				print ("Error in def getAsyn: ")             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 			return status
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__141, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "PyCafe.pyx":1410
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				print ("Error in def getAsyn: ")
 * 				self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 			return status
 * 
 */
      __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

      /* "PyCafe.pyx":1408
 * 		status=ICAFE_NORMAL
 * 		if (status!=ICAFE_NORMAL):
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				print ("Error in def getAsyn: ")
 * 				self._c_cafe.printStatusMessage(status)
 */
    }

    /* "PyCafe.pyx":1411
 * 				print ("Error in def getAsyn: ")
 * 				self._c_cafe.printStatusMessage(status)
 * 			return status             # <<<<<<<<<<<<<<
 * 
 * 		return status, vStatus
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "PyCafe.pyx":1407
 * 			status=self._c_cafe.getV(v, vStatus)
 * 		status=ICAFE_NORMAL
 * 		if (status!=ICAFE_NORMAL):             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				print ("Error in def getAsyn: ")
 */
  }

  /* "PyCafe.pyx":1413
 * 			return status
 * 
 * 		return status, vStatus             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = __pyx_convert_vector_to_py_int(__pyx_v_vStatus); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_9);
  __pyx_t_4 = 0;
  __pyx_t_9 = 0;
  __pyx_r = __pyx_t_10;
  __pyx_t_10 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":1373
 * 
 * 	##################################################################################
 * 	def getAsyn(self, handleList):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("PyCafe.CyCafe.getAsyn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_handleListB);
  __Pyx_XDECREF(__pyx_v_handeList);
  __Pyx_XDECREF(__pyx_v_handleList);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":1423
 * 
 * 	##################################################################################
 * 	def waitForBundledEvents(self, handleList):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_135waitForBundledEvents(PyObject *__pyx_v_self, PyObject *__pyx_v_handleList); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_135waitForBundledEvents(PyObject *__pyx_v_self, PyObject *__pyx_v_handleList) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("waitForBundledEvents (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_134waitForBundledEvents(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handleList));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_134waitForBundledEvents(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList) {
  std::vector<unsigned int>  __pyx_v_v;
  std::vector<int>  __pyx_v_vRB;
  Py_ssize_t __pyx_v_i;
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  unsigned int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("waitForBundledEvents", 0);
  __Pyx_INCREF(__pyx_v_handleList);

  /* "PyCafe.pyx":1426
 * 	##################################################################################
 * 
 * 		if not isinstance(handleList, (list)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def waitForBundledEvents. \n\
 * First input argument, should be <type 'list'> of handles or PVs")
 */
  __pyx_t_1 = PyList_Check(__pyx_v_handleList); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":1427
 * 
 * 		if not isinstance(handleList, (list)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def waitForBundledEvents. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__142, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":1426
 * 	##################################################################################
 * 
 * 		if not isinstance(handleList, (list)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def waitForBundledEvents. \n\
 * First input argument, should be <type 'list'> of handles or PVs")
 */
  }

  /* "PyCafe.pyx":1430
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 * 		if 	isinstance(handleList[0], (str)):             # <<<<<<<<<<<<<<
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_handleList, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1430; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyUnicode_Check(__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":1431
 * 
 * 		if 	isinstance(handleList[0], (str)):
 * 			handleList=self.checkForHandleList(handleList)             # <<<<<<<<<<<<<<
 * 		elif not isinstance(handleList[0], (int, long)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def waitForBundledEvents. \n\
 */
    if (!(likely(PyList_CheckExact(__pyx_v_handleList))||((__pyx_v_handleList) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_handleList)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandleList(__pyx_v_self, ((PyObject*)__pyx_v_handleList), 0, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_handleList, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "PyCafe.pyx":1430
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 * 		if 	isinstance(handleList[0], (str)):             # <<<<<<<<<<<<<<
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):
 */
    goto __pyx_L4;
  }

  /* "PyCafe.pyx":1432
 * 		if 	isinstance(handleList[0], (str)):
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def waitForBundledEvents. \n\
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_handleList, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1432; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyInt_Check(__pyx_t_3); 
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_4 = PyLong_Check(__pyx_t_3); 
  __pyx_t_2 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L5_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":1433
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def waitForBundledEvents. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__143, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":1432
 * 		if 	isinstance(handleList[0], (str)):
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def waitForBundledEvents. \n\
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 */
  }
  __pyx_L4:;

  /* "PyCafe.pyx":1441
 * 
 * 
 * 		v.reserve      (len(handleList))             # <<<<<<<<<<<<<<
 * 		vRB.reserve(len(handleList))
 * 		for i in range(0, len(handleList)):
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_v.reserve(__pyx_t_5);

  /* "PyCafe.pyx":1442
 * 
 * 		v.reserve      (len(handleList))
 * 		vRB.reserve(len(handleList))             # <<<<<<<<<<<<<<
 * 		for i in range(0, len(handleList)):
 * 			v.push_back(handleList[i]) #do this copy to avoid compiler warning messages
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_vRB.reserve(__pyx_t_5);

  /* "PyCafe.pyx":1443
 * 		v.reserve      (len(handleList))
 * 		vRB.reserve(len(handleList))
 * 		for i in range(0, len(handleList)):             # <<<<<<<<<<<<<<
 * 			v.push_back(handleList[i]) #do this copy to avoid compiler warning messages
 * 
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "PyCafe.pyx":1444
 * 		vRB.reserve(len(handleList))
 * 		for i in range(0, len(handleList)):
 * 			v.push_back(handleList[i]) #do this copy to avoid compiler warning messages             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1444; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    try {
      __pyx_v_v.push_back(__pyx_t_7);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }

  /* "PyCafe.pyx":1448
 * 
 * 		#Wait for bundle
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.waitForBundledEvents(v, vRB)
 * 		if (status!=ICAFE_NORMAL):
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":1449
 * 		#Wait for bundle
 * 		with nogil:
 * 			status=self._c_cafe.waitForBundledEvents(v, vRB)             # <<<<<<<<<<<<<<
 * 		if (status!=ICAFE_NORMAL):
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 */
        __pyx_v_status = __pyx_v_self->_c_cafe->waitForBundledEvents(__pyx_v_v, __pyx_v_vRB);
      }

      /* "PyCafe.pyx":1448
 * 
 * 		#Wait for bundle
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.waitForBundledEvents(v, vRB)
 * 		if (status!=ICAFE_NORMAL):
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L11;
        }
        __pyx_L11:;
      }
  }

  /* "PyCafe.pyx":1450
 * 		with nogil:
 * 			status=self._c_cafe.waitForBundledEvents(v, vRB)
 * 		if (status!=ICAFE_NORMAL):             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				print ("Error in def  waitForBundledEvents: ")
 */
  __pyx_t_2 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":1451
 * 			status=self._c_cafe.waitForBundledEvents(v, vRB)
 * 		if (status!=ICAFE_NORMAL):
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				print ("Error in def  waitForBundledEvents: ")
 * 				self._c_cafe.printStatusMessage(status)
 */
    __pyx_t_2 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":1452
 * 		if (status!=ICAFE_NORMAL):
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				print ("Error in def  waitForBundledEvents: ")             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 			return status
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__144, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "PyCafe.pyx":1453
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				print ("Error in def  waitForBundledEvents: ")
 * 				self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 			return status
 * 		return status, vRB
 */
      __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

      /* "PyCafe.pyx":1451
 * 			status=self._c_cafe.waitForBundledEvents(v, vRB)
 * 		if (status!=ICAFE_NORMAL):
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				print ("Error in def  waitForBundledEvents: ")
 * 				self._c_cafe.printStatusMessage(status)
 */
    }

    /* "PyCafe.pyx":1454
 * 				print ("Error in def  waitForBundledEvents: ")
 * 				self._c_cafe.printStatusMessage(status)
 * 			return status             # <<<<<<<<<<<<<<
 * 		return status, vRB
 * 	##################################################################################
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "PyCafe.pyx":1450
 * 		with nogil:
 * 			status=self._c_cafe.waitForBundledEvents(v, vRB)
 * 		if (status!=ICAFE_NORMAL):             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				print ("Error in def  waitForBundledEvents: ")
 */
  }

  /* "PyCafe.pyx":1455
 * 				self._c_cafe.printStatusMessage(status)
 * 			return status
 * 		return status, vRB             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 	#END: def  waitForBundledEvents(self, handleList):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __pyx_convert_vector_to_py_int(__pyx_v_vRB); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
  __pyx_t_3 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":1423
 * 
 * 	##################################################################################
 * 	def waitForBundledEvents(self, handleList):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("PyCafe.CyCafe.waitForBundledEvents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_handleList);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":1461
 * 
 * 	##################################################################################
 * 	def  getStrScalarList(self, handleList):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 		return 	self.getScalarList(handleList, dt='str')
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_137getStrScalarList(PyObject *__pyx_v_self, PyObject *__pyx_v_handleList); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_137getStrScalarList(PyObject *__pyx_v_self, PyObject *__pyx_v_handleList) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getStrScalarList (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_136getStrScalarList(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handleList));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_136getStrScalarList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getStrScalarList", 0);

  /* "PyCafe.pyx":1463
 * 	def  getStrScalarList(self, handleList):
 * 	##################################################################################
 * 		return 	self.getScalarList(handleList, dt='str')             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getScalarList); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_handleList);
  __Pyx_GIVEREF(__pyx_v_handleList);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_handleList);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dt, __pyx_n_u_str) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":1461
 * 
 * 	##################################################################################
 * 	def  getStrScalarList(self, handleList):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 		return 	self.getScalarList(handleList, dt='str')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PyCafe.CyCafe.getStrScalarList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":1466
 * 
 * 	##################################################################################
 * 	def  getIntScalarList(self, handleList):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 		return 	self.getScalarList(handleList, dt='int')
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_139getIntScalarList(PyObject *__pyx_v_self, PyObject *__pyx_v_handleList); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_139getIntScalarList(PyObject *__pyx_v_self, PyObject *__pyx_v_handleList) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getIntScalarList (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_138getIntScalarList(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handleList));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_138getIntScalarList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getIntScalarList", 0);

  /* "PyCafe.pyx":1468
 * 	def  getIntScalarList(self, handleList):
 * 	##################################################################################
 * 		return 	self.getScalarList(handleList, dt='int')             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getScalarList); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_handleList);
  __Pyx_GIVEREF(__pyx_v_handleList);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_handleList);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dt, __pyx_n_u_int) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":1466
 * 
 * 	##################################################################################
 * 	def  getIntScalarList(self, handleList):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 		return 	self.getScalarList(handleList, dt='int')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PyCafe.CyCafe.getIntScalarList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":1471
 * 
 * 	##################################################################################
 * 	def  getFloatScalarList(self, handleList):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 		return 	self.getScalarList(handleList, dt='float')
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_141getFloatScalarList(PyObject *__pyx_v_self, PyObject *__pyx_v_handleList); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_141getFloatScalarList(PyObject *__pyx_v_self, PyObject *__pyx_v_handleList) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getFloatScalarList (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_140getFloatScalarList(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handleList));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_140getFloatScalarList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFloatScalarList", 0);

  /* "PyCafe.pyx":1473
 * 	def  getFloatScalarList(self, handleList):
 * 	##################################################################################
 * 		return 	self.getScalarList(handleList, dt='float')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getScalarList); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_handleList);
  __Pyx_GIVEREF(__pyx_v_handleList);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_handleList);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dt, __pyx_n_u_float) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":1471
 * 
 * 	##################################################################################
 * 	def  getFloatScalarList(self, handleList):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 		return 	self.getScalarList(handleList, dt='float')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PyCafe.CyCafe.getFloatScalarList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":1477
 * 
 * 	##################################################################################
 * 	def  getScalarList(self, handleList, str dt='native'):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_143getScalarList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_143getScalarList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handleList = 0;
  PyObject *__pyx_v_dt = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getScalarList (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handleList,&__pyx_n_s_dt,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject*)__pyx_n_u_native);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handleList)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getScalarList") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1477; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_handleList = values[0];
    __pyx_v_dt = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getScalarList", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1477; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.getScalarList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dt), (&PyUnicode_Type), 1, "dt", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_142getScalarList(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handleList, __pyx_v_dt);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_142getScalarList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList, PyObject *__pyx_v_dt) {
  PyObject *__pyx_v_nelemPrevious = NULL;
  Py_ssize_t __pyx_v_i;
  std::vector<unsigned int>  __pyx_v_v;
  std::vector<int>  __pyx_v_vStatus;
  int __pyx_v_status;
  std::vector<int>  __pyx_v_vRB;
  int __pyx_v_statusBundle;
  unsigned int __pyx_v_dtcheck;
  PyObject *__pyx_v_localList = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_statusList = NULL;
  PVDataHolder *__pyx_v_pvd;
  CYTHON_UNUSED int __pyx_v_statusNoWait;
  unsigned int __pyx_v_dtn;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  unsigned int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  unsigned int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getScalarList", 0);
  __Pyx_INCREF(__pyx_v_handleList);

  /* "PyCafe.pyx":1480
 * 	##################################################################################
 * 
 * 		if not isinstance(handleList, (list)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getScalarList. \n\
 * First input argument, should be <type 'list'> of handles or PVs")
 */
  __pyx_t_1 = PyList_Check(__pyx_v_handleList); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":1481
 * 
 * 		if not isinstance(handleList, (list)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getScalarList. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__145, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":1480
 * 	##################################################################################
 * 
 * 		if not isinstance(handleList, (list)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getScalarList. \n\
 * First input argument, should be <type 'list'> of handles or PVs")
 */
  }

  /* "PyCafe.pyx":1484
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 * 		if 	isinstance(handleList[0], (str)):             # <<<<<<<<<<<<<<
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_handleList, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1484; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyUnicode_Check(__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":1485
 * 
 * 		if 	isinstance(handleList[0], (str)):
 * 			handleList=self.checkForHandleList(handleList)             # <<<<<<<<<<<<<<
 * 		elif not isinstance(handleList[0], (int, long)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getScalarList. \n\
 */
    if (!(likely(PyList_CheckExact(__pyx_v_handleList))||((__pyx_v_handleList) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_handleList)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandleList(__pyx_v_self, ((PyObject*)__pyx_v_handleList), 0, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_handleList, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "PyCafe.pyx":1484
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 * 		if 	isinstance(handleList[0], (str)):             # <<<<<<<<<<<<<<
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):
 */
    goto __pyx_L4;
  }

  /* "PyCafe.pyx":1486
 * 		if 	isinstance(handleList[0], (str)):
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getScalarList. \n\
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_handleList, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1486; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyInt_Check(__pyx_t_3); 
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_4 = PyLong_Check(__pyx_t_3); 
  __pyx_t_2 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L5_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":1487
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getScalarList. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__146, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":1486
 * 		if 	isinstance(handleList[0], (str)):
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getScalarList. \n\
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 */
  }
  __pyx_L4:;

  /* "PyCafe.pyx":1491
 * 
 * 
 * 		nelemPrevious= []             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(0, len(handleList)):
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_nelemPrevious = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "PyCafe.pyx":1493
 * 		nelemPrevious= []
 * 
 * 		for i in range(0, len(handleList)):             # <<<<<<<<<<<<<<
 * 			nelemPrevious.append(self._c_cafe.setNelemToOne(handleList[i]))
 * 
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "PyCafe.pyx":1494
 * 
 * 		for i in range(0, len(handleList)):
 * 			nelemPrevious.append(self._c_cafe.setNelemToOne(handleList[i]))             # <<<<<<<<<<<<<<
 * 
 * 			#c=self.hh.getNelemClient(handleList[i])
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1494; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->_c_cafe->setNelemToOne(__pyx_t_7)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_nelemPrevious, __pyx_t_3); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "PyCafe.pyx":1507
 * 		cdef vector[int] vStatus
 * 
 * 		v.reserve      (len(handleList))             # <<<<<<<<<<<<<<
 * 		vStatus.reserve(len(handleList))
 * 
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1507; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_v.reserve(__pyx_t_5);

  /* "PyCafe.pyx":1508
 * 
 * 		v.reserve      (len(handleList))
 * 		vStatus.reserve(len(handleList))             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(0, len(handleList)):
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_vStatus.reserve(__pyx_t_5);

  /* "PyCafe.pyx":1510
 * 		vStatus.reserve(len(handleList))
 * 
 * 		for i in range(0, len(handleList)):             # <<<<<<<<<<<<<<
 * 			v.push_back(handleList[i]) #do this copy to avoid compiler warning messages
 * 
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "PyCafe.pyx":1511
 * 
 * 		for i in range(0, len(handleList)):
 * 			v.push_back(handleList[i]) #do this copy to avoid compiler warning messages             # <<<<<<<<<<<<<<
 * 
 * 		#Need to copy to a vector since
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1511; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    try {
      __pyx_v_v.push_back(__pyx_t_7);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }

  /* "PyCafe.pyx":1515
 * 		#Need to copy to a vector since
 * 		#Coercion from Python not allowed without the GIL
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.getV(v, vStatus)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":1516
 * 		#Coercion from Python not allowed without the GIL
 * 		with nogil:
 * 			status=self._c_cafe.getV(v, vStatus)             # <<<<<<<<<<<<<<
 * 
 * 		#ca_poll() Not required as above will flush!
 */
        __pyx_v_status = __pyx_v_self->_c_cafe->getV(__pyx_v_v, __pyx_v_vStatus);
      }

      /* "PyCafe.pyx":1515
 * 		#Need to copy to a vector since
 * 		#Coercion from Python not allowed without the GIL
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.getV(v, vStatus)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L13;
        }
        __pyx_L13:;
      }
  }

  /* "PyCafe.pyx":1525
 * 		#Wait for bundle
 * 		cdef vector[int] vRB
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			statusBundle=self._c_cafe.waitForBundledEvents(v, vRB)
 * 		if (statusBundle!=ICAFE_NORMAL):
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":1526
 * 		cdef vector[int] vRB
 * 		with nogil:
 * 			statusBundle=self._c_cafe.waitForBundledEvents(v, vRB)             # <<<<<<<<<<<<<<
 * 		if (statusBundle!=ICAFE_NORMAL):
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 */
        __pyx_v_statusBundle = __pyx_v_self->_c_cafe->waitForBundledEvents(__pyx_v_v, __pyx_v_vRB);
      }

      /* "PyCafe.pyx":1525
 * 		#Wait for bundle
 * 		cdef vector[int] vRB
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			statusBundle=self._c_cafe.waitForBundledEvents(v, vRB)
 * 		if (statusBundle!=ICAFE_NORMAL):
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L16;
        }
        __pyx_L16:;
      }
  }

  /* "PyCafe.pyx":1527
 * 		with nogil:
 * 			statusBundle=self._c_cafe.waitForBundledEvents(v, vRB)
 * 		if (statusBundle!=ICAFE_NORMAL):             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				print ("Error in def  getScalarList: ")
 */
  __pyx_t_2 = ((__pyx_v_statusBundle != ICAFE_NORMAL) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":1528
 * 			statusBundle=self._c_cafe.waitForBundledEvents(v, vRB)
 * 		if (statusBundle!=ICAFE_NORMAL):
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				print ("Error in def  getScalarList: ")
 * 				self._c_cafe.printStatusMessage(statusBundle)
 */
    __pyx_t_2 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":1529
 * 		if (statusBundle!=ICAFE_NORMAL):
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				print ("Error in def  getScalarList: ")             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(statusBundle)
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__147, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "PyCafe.pyx":1530
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				print ("Error in def  getScalarList: ")
 * 				self._c_cafe.printStatusMessage(statusBundle)             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int dtcheck=CAFE_NOT_REQUESTED  #native type not yet know
 */
      __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_statusBundle);

      /* "PyCafe.pyx":1528
 * 			statusBundle=self._c_cafe.waitForBundledEvents(v, vRB)
 * 		if (statusBundle!=ICAFE_NORMAL):
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				print ("Error in def  getScalarList: ")
 * 				self._c_cafe.printStatusMessage(statusBundle)
 */
    }

    /* "PyCafe.pyx":1527
 * 		with nogil:
 * 			statusBundle=self._c_cafe.waitForBundledEvents(v, vRB)
 * 		if (statusBundle!=ICAFE_NORMAL):             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				print ("Error in def  getScalarList: ")
 */
  }

  /* "PyCafe.pyx":1532
 * 				self._c_cafe.printStatusMessage(statusBundle)
 * 
 * 		cdef unsigned int dtcheck=CAFE_NOT_REQUESTED  #native type not yet know             # <<<<<<<<<<<<<<
 * 		dtcheck=getMatchedDataType(dt, dtcheck)
 * 
 */
  __pyx_v_dtcheck = CAFE_NOT_REQUESTED;

  /* "PyCafe.pyx":1533
 * 
 * 		cdef unsigned int dtcheck=CAFE_NOT_REQUESTED  #native type not yet know
 * 		dtcheck=getMatchedDataType(dt, dtcheck)             # <<<<<<<<<<<<<<
 * 
 * 		if dtcheck in [CAFE_STRING]:
 */
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_v_dtcheck); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __pyx_f_6PyCafe_getMatchedDataType(__pyx_v_dt, __pyx_t_3); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_9); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_dtcheck = __pyx_t_7;

  /* "PyCafe.pyx":1535
 * 		dtcheck=getMatchedDataType(dt, dtcheck)
 * 
 * 		if dtcheck in [CAFE_STRING]:             # <<<<<<<<<<<<<<
 * 
 * 			self.vStr.clear()
 */
  switch (__pyx_v_dtcheck) {
    case CAFE_STRING:

    /* "PyCafe.pyx":1537
 * 		if dtcheck in [CAFE_STRING]:
 * 
 * 			self.vStr.clear()             # <<<<<<<<<<<<<<
 * 			self.vStr.reserve(len(handleList))
 * 
 */
    __pyx_v_self->vStr.clear();

    /* "PyCafe.pyx":1538
 * 
 * 			self.vStr.clear()
 * 			self.vStr.reserve(len(handleList))             # <<<<<<<<<<<<<<
 * 
 * 			with nogil:
 */
    __pyx_t_5 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_self->vStr.reserve(__pyx_t_5);

    /* "PyCafe.pyx":1540
 * 			self.vStr.reserve(len(handleList))
 * 
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.getCacheVStr(v, self.vStr, vStatus)
 * 
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "PyCafe.pyx":1541
 * 
 * 			with nogil:
 * 				status=self._c_cafe.getCacheVStr(v, self.vStr, vStatus)             # <<<<<<<<<<<<<<
 * 
 * 
 */
          __pyx_v_status = __pyx_v_self->_c_cafe->getCacheVStr(__pyx_v_v, __pyx_v_self->vStr, __pyx_v_vStatus);
        }

        /* "PyCafe.pyx":1540
 * 			self.vStr.reserve(len(handleList))
 * 
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.getCacheVStr(v, self.vStr, vStatus)
 * 
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L21;
          }
          __pyx_L21:;
        }
    }

    /* "PyCafe.pyx":1544
 * 
 * 
 * 			for i in range(0, len(handleList)):             # <<<<<<<<<<<<<<
 * 				self._c_cafe.setNelemToPrevious(handleList[i],nelemPrevious[i])
 * 
 */
    __pyx_t_5 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "PyCafe.pyx":1545
 * 
 * 			for i in range(0, len(handleList)):
 * 				self._c_cafe.setNelemToPrevious(handleList[i],nelemPrevious[i])             # <<<<<<<<<<<<<<
 * 
 * 			localList=[]
 */
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1545; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_9); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_GetItemInt_List(__pyx_v_nelemPrevious, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1545; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_9); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_self->_c_cafe->setNelemToPrevious(__pyx_t_7, __pyx_t_10);
    }

    /* "PyCafe.pyx":1547
 * 				self._c_cafe.setNelemToPrevious(handleList[i],nelemPrevious[i])
 * 
 * 			localList=[]             # <<<<<<<<<<<<<<
 * 			statusList=[]
 * 
 */
    __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1547; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_v_localList = ((PyObject*)__pyx_t_9);
    __pyx_t_9 = 0;

    /* "PyCafe.pyx":1548
 * 
 * 			localList=[]
 * 			statusList=[]             # <<<<<<<<<<<<<<
 * 
 * 			#for i in range(0,	len(self.vStr)):
 */
    __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1548; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_v_statusList = ((PyObject*)__pyx_t_9);
    __pyx_t_9 = 0;

    /* "PyCafe.pyx":1552
 * 			#for i in range(0,	len(self.vStr)):
 * 				#localList.append(	self.vStr[i])
 * 			return self.vStr, status, vStatus             # <<<<<<<<<<<<<<
 * 
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_9 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_self->vStr); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = __pyx_convert_vector_to_py_int(__pyx_v_vStatus); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_12 = PyTuple_New(3); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_t_11);
    __pyx_t_9 = 0;
    __pyx_t_3 = 0;
    __pyx_t_11 = 0;
    __pyx_r = __pyx_t_12;
    __pyx_t_12 = 0;
    goto __pyx_L0;

    /* "PyCafe.pyx":1535
 * 		dtcheck=getMatchedDataType(dt, dtcheck)
 * 
 * 		if dtcheck in [CAFE_STRING]:             # <<<<<<<<<<<<<<
 * 
 * 			self.vStr.clear()
 */
    break;

    /* "PyCafe.pyx":1554
 * 			return self.vStr, status, vStatus
 * 
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:             # <<<<<<<<<<<<<<
 * 
 * 			self.vInt.clear()
 */
    case CAFE_SHORT:
    case CAFE_CHAR:
    case CAFE_LONG:

    /* "PyCafe.pyx":1556
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:
 * 
 * 			self.vInt.clear()             # <<<<<<<<<<<<<<
 * 			self.vInt.reserve(len(handleList))
 * 
 */
    __pyx_v_self->vInt.clear();

    /* "PyCafe.pyx":1557
 * 
 * 			self.vInt.clear()
 * 			self.vInt.reserve(len(handleList))             # <<<<<<<<<<<<<<
 * 
 * 			with nogil:
 */
    __pyx_t_5 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_self->vInt.reserve(__pyx_t_5);

    /* "PyCafe.pyx":1559
 * 			self.vInt.reserve(len(handleList))
 * 
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.getCacheVLong(v, self.vInt, vStatus)
 * 
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "PyCafe.pyx":1560
 * 
 * 			with nogil:
 * 				status=self._c_cafe.getCacheVLong(v, self.vInt, vStatus)             # <<<<<<<<<<<<<<
 * 
 * 
 */
          __pyx_v_status = __pyx_v_self->_c_cafe->getCacheVLong(__pyx_v_v, __pyx_v_self->vInt, __pyx_v_vStatus);
        }

        /* "PyCafe.pyx":1559
 * 			self.vInt.reserve(len(handleList))
 * 
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.getCacheVLong(v, self.vInt, vStatus)
 * 
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L26;
          }
          __pyx_L26:;
        }
    }

    /* "PyCafe.pyx":1568
 * 
 * 
 * 			for i in range(0, len(handleList)):             # <<<<<<<<<<<<<<
 * 				self._c_cafe.setNelemToPrevious(handleList[i],nelemPrevious[i])
 * 
 */
    __pyx_t_5 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "PyCafe.pyx":1569
 * 
 * 			for i in range(0, len(handleList)):
 * 				self._c_cafe.setNelemToPrevious(handleList[i],nelemPrevious[i])             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_12 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_12 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1569; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_12); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = __Pyx_GetItemInt_List(__pyx_v_nelemPrevious, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_12 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1569; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_12); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_v_self->_c_cafe->setNelemToPrevious(__pyx_t_10, __pyx_t_7);
    }

    /* "PyCafe.pyx":1572
 * 
 * 
 * 			localList=[]             # <<<<<<<<<<<<<<
 * 			statusList=[]
 * 
 */
    __pyx_t_12 = PyList_New(0); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_v_localList = ((PyObject*)__pyx_t_12);
    __pyx_t_12 = 0;

    /* "PyCafe.pyx":1573
 * 
 * 			localList=[]
 * 			statusList=[]             # <<<<<<<<<<<<<<
 * 
 * 			#for i in range(0,	len(self.vInt)):
 */
    __pyx_t_12 = PyList_New(0); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_v_statusList = ((PyObject*)__pyx_t_12);
    __pyx_t_12 = 0;

    /* "PyCafe.pyx":1576
 * 
 * 			#for i in range(0,	len(self.vInt)):
 * 			return self.vInt, status, vStatus             # <<<<<<<<<<<<<<
 * 
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_12 = __pyx_convert_vector_to_py_dbr_long_t(__pyx_v_self->vInt); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_3 = __pyx_convert_vector_to_py_int(__pyx_v_vStatus); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_3);
    __pyx_t_12 = 0;
    __pyx_t_11 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_9;
    __pyx_t_9 = 0;
    goto __pyx_L0;

    /* "PyCafe.pyx":1554
 * 			return self.vStr, status, vStatus
 * 
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:             # <<<<<<<<<<<<<<
 * 
 * 			self.vInt.clear()
 */
    break;

    /* "PyCafe.pyx":1578
 * 			return self.vInt, status, vStatus
 * 
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:             # <<<<<<<<<<<<<<
 * 
 * 			self.vFloat.clear()
 */
    case CAFE_FLOAT:
    case CAFE_DOUBLE:

    /* "PyCafe.pyx":1580
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:
 * 
 * 			self.vFloat.clear()             # <<<<<<<<<<<<<<
 * 			self.vFloat.reserve(len(handleList))
 * 
 */
    __pyx_v_self->vFloat.clear();

    /* "PyCafe.pyx":1581
 * 
 * 			self.vFloat.clear()
 * 			self.vFloat.reserve(len(handleList))             # <<<<<<<<<<<<<<
 * 
 * 			with nogil:
 */
    __pyx_t_5 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_self->vFloat.reserve(__pyx_t_5);

    /* "PyCafe.pyx":1583
 * 			self.vFloat.reserve(len(handleList))
 * 
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.getCacheVDouble(v, self.vFloat, vStatus)
 * 
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "PyCafe.pyx":1584
 * 
 * 			with nogil:
 * 				status=self._c_cafe.getCacheVDouble(v, self.vFloat, vStatus)             # <<<<<<<<<<<<<<
 * 
 * 			for i in range(0, len(handleList)):
 */
          __pyx_v_status = __pyx_v_self->_c_cafe->getCacheVDouble(__pyx_v_v, __pyx_v_self->vFloat, __pyx_v_vStatus);
        }

        /* "PyCafe.pyx":1583
 * 			self.vFloat.reserve(len(handleList))
 * 
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.getCacheVDouble(v, self.vFloat, vStatus)
 * 
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L31;
          }
          __pyx_L31:;
        }
    }

    /* "PyCafe.pyx":1586
 * 				status=self._c_cafe.getCacheVDouble(v, self.vFloat, vStatus)
 * 
 * 			for i in range(0, len(handleList)):             # <<<<<<<<<<<<<<
 * 				self._c_cafe.setNelemToPrevious(handleList[i],nelemPrevious[i])
 * 
 */
    __pyx_t_5 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "PyCafe.pyx":1587
 * 
 * 			for i in range(0, len(handleList)):
 * 				self._c_cafe.setNelemToPrevious(handleList[i],nelemPrevious[i])             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1587; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_9); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_GetItemInt_List(__pyx_v_nelemPrevious, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1587; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_9); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_self->_c_cafe->setNelemToPrevious(__pyx_t_7, __pyx_t_10);
    }

    /* "PyCafe.pyx":1594
 * 
 * 
 * 			localList=[]             # <<<<<<<<<<<<<<
 * 			statusList=[]
 * 
 */
    __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_v_localList = ((PyObject*)__pyx_t_9);
    __pyx_t_9 = 0;

    /* "PyCafe.pyx":1595
 * 
 * 			localList=[]
 * 			statusList=[]             # <<<<<<<<<<<<<<
 * 
 * 			#for i in range(0,	len(self.vFloat)):
 */
    __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_v_statusList = ((PyObject*)__pyx_t_9);
    __pyx_t_9 = 0;

    /* "PyCafe.pyx":1598
 * 
 * 			#for i in range(0,	len(self.vFloat)):
 * 			return self.vFloat, status, vStatus             # <<<<<<<<<<<<<<
 * 
 * 		#Native
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_9 = __pyx_convert_vector_to_py_double(__pyx_v_self->vFloat); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = __pyx_convert_vector_to_py_int(__pyx_v_vStatus); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_12 = PyTuple_New(3); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_t_11);
    __pyx_t_9 = 0;
    __pyx_t_3 = 0;
    __pyx_t_11 = 0;
    __pyx_r = __pyx_t_12;
    __pyx_t_12 = 0;
    goto __pyx_L0;

    /* "PyCafe.pyx":1578
 * 			return self.vInt, status, vStatus
 * 
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:             # <<<<<<<<<<<<<<
 * 
 * 			self.vFloat.clear()
 */
    break;
    default: break;
  }

  /* "PyCafe.pyx":1611
 * 		#Create temporary group from handleList
 * 		#Does group exist?
 * 		cdef PVDataHolder * pvd = self._c_cafe.getPVData(v)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_pvd = __pyx_v_self->_c_cafe->getPVData(__pyx_v_v);

  /* "PyCafe.pyx":1627
 * 
 * 		#Required to allocate memory for shared pointer
 * 		for i in range(0, len(handleList)):             # <<<<<<<<<<<<<<
 * 			pvd[i].setNelem(1)
 * 
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "PyCafe.pyx":1628
 * 		#Required to allocate memory for shared pointer
 * 		for i in range(0, len(handleList)):
 * 			pvd[i].setNelem(1)             # <<<<<<<<<<<<<<
 * 
 * 		statusNoWait=self._c_cafe.getCachePVArrayNoWait(v, pvd)
 */
    (__pyx_v_pvd[__pyx_v_i]).setNelem(1);
  }

  /* "PyCafe.pyx":1630
 * 			pvd[i].setNelem(1)
 * 
 * 		statusNoWait=self._c_cafe.getCachePVArrayNoWait(v, pvd)             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(0, len(handleList)):
 */
  __pyx_v_statusNoWait = __pyx_v_self->_c_cafe->getCachePVArrayNoWait(__pyx_v_v, __pyx_v_pvd);

  /* "PyCafe.pyx":1632
 * 		statusNoWait=self._c_cafe.getCachePVArrayNoWait(v, pvd)
 * 
 * 		for i in range(0, len(handleList)):             # <<<<<<<<<<<<<<
 * 			self._c_cafe.setNelemToPrevious(handleList[i],nelemPrevious[i])
 * 
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "PyCafe.pyx":1633
 * 
 * 		for i in range(0, len(handleList)):
 * 			self._c_cafe.setNelemToPrevious(handleList[i],nelemPrevious[i])             # <<<<<<<<<<<<<<
 * 
 * 		#statusList=[]
 */
    __pyx_t_12 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_12 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_12); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = __Pyx_GetItemInt_List(__pyx_v_nelemPrevious, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_12 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_12); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_v_self->_c_cafe->setNelemToPrevious(__pyx_t_10, __pyx_t_7);
  }

  /* "PyCafe.pyx":1655
 * 		cdef unsigned int dtn
 * 
 * 		localList=[]             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(0, len(handleList)):
 */
  __pyx_t_12 = PyList_New(0); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_v_localList = ((PyObject*)__pyx_t_12);
  __pyx_t_12 = 0;

  /* "PyCafe.pyx":1657
 * 		localList=[]
 * 
 * 		for i in range(0, len(handleList)):             # <<<<<<<<<<<<<<
 * 
 * 			dtn     = pvd[i].getDataType();
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "PyCafe.pyx":1659
 * 		for i in range(0, len(handleList)):
 * 
 * 			dtn     = pvd[i].getDataType();             # <<<<<<<<<<<<<<
 * 			dtcheck = getMatchedDataType(dt, dtn)
 * 
 */
    __pyx_v_dtn = (__pyx_v_pvd[__pyx_v_i]).getDataType();

    /* "PyCafe.pyx":1660
 * 
 * 			dtn     = pvd[i].getDataType();
 * 			dtcheck = getMatchedDataType(dt, dtn)             # <<<<<<<<<<<<<<
 * 
 * 			if dtcheck==CAFE_STRING:
 */
    __pyx_t_12 = __Pyx_PyInt_From_unsigned_int(__pyx_v_dtn); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_11 = __pyx_f_6PyCafe_getMatchedDataType(__pyx_v_dt, __pyx_t_12); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_11); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_v_dtcheck = __pyx_t_7;

    /* "PyCafe.pyx":1662
 * 			dtcheck = getMatchedDataType(dt, dtn)
 * 
 * 			if dtcheck==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 				localList.append(pvd[i].getAsString())
 * 			elif dtcheck==CAFE_SHORT:
 */
    switch (__pyx_v_dtcheck) {
      case CAFE_STRING:

      /* "PyCafe.pyx":1663
 * 
 * 			if dtcheck==CAFE_STRING:
 * 				localList.append(pvd[i].getAsString())             # <<<<<<<<<<<<<<
 * 			elif dtcheck==CAFE_SHORT:
 * 				localList.append(pvd[i].getAsLong())
 */
      __pyx_t_11 = __pyx_convert_PyStr_string_to_py_std__in_string((__pyx_v_pvd[__pyx_v_i]).getAsString()); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_11); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "PyCafe.pyx":1662
 * 			dtcheck = getMatchedDataType(dt, dtn)
 * 
 * 			if dtcheck==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 				localList.append(pvd[i].getAsString())
 * 			elif dtcheck==CAFE_SHORT:
 */
      break;

      /* "PyCafe.pyx":1664
 * 			if dtcheck==CAFE_STRING:
 * 				localList.append(pvd[i].getAsString())
 * 			elif dtcheck==CAFE_SHORT:             # <<<<<<<<<<<<<<
 * 				localList.append(pvd[i].getAsLong())
 * 			elif dtcheck==CAFE_FLOAT:
 */
      case CAFE_SHORT:

      /* "PyCafe.pyx":1665
 * 				localList.append(pvd[i].getAsString())
 * 			elif dtcheck==CAFE_SHORT:
 * 				localList.append(pvd[i].getAsLong())             # <<<<<<<<<<<<<<
 * 			elif dtcheck==CAFE_FLOAT:
 * 				localList.append(pvd[i].getAsDouble())
 */
      __pyx_t_11 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong()); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_11); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "PyCafe.pyx":1664
 * 			if dtcheck==CAFE_STRING:
 * 				localList.append(pvd[i].getAsString())
 * 			elif dtcheck==CAFE_SHORT:             # <<<<<<<<<<<<<<
 * 				localList.append(pvd[i].getAsLong())
 * 			elif dtcheck==CAFE_FLOAT:
 */
      break;

      /* "PyCafe.pyx":1666
 * 			elif dtcheck==CAFE_SHORT:
 * 				localList.append(pvd[i].getAsLong())
 * 			elif dtcheck==CAFE_FLOAT:             # <<<<<<<<<<<<<<
 * 				localList.append(pvd[i].getAsDouble())
 * 			elif dtcheck==CAFE_ENUM:
 */
      case CAFE_FLOAT:

      /* "PyCafe.pyx":1667
 * 				localList.append(pvd[i].getAsLong())
 * 			elif dtcheck==CAFE_FLOAT:
 * 				localList.append(pvd[i].getAsDouble())             # <<<<<<<<<<<<<<
 * 			elif dtcheck==CAFE_ENUM:
 * 			#if enum, string taken as native
 */
      __pyx_t_11 = PyFloat_FromDouble((__pyx_v_pvd[__pyx_v_i]).getAsDouble()); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_11); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "PyCafe.pyx":1666
 * 			elif dtcheck==CAFE_SHORT:
 * 				localList.append(pvd[i].getAsLong())
 * 			elif dtcheck==CAFE_FLOAT:             # <<<<<<<<<<<<<<
 * 				localList.append(pvd[i].getAsDouble())
 * 			elif dtcheck==CAFE_ENUM:
 */
      break;

      /* "PyCafe.pyx":1668
 * 			elif dtcheck==CAFE_FLOAT:
 * 				localList.append(pvd[i].getAsDouble())
 * 			elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 			#if enum, string taken as native
 * 
 */
      case CAFE_ENUM:

      /* "PyCafe.pyx":1671
 * 			#if enum, string taken as native
 * 
 * 				if self._c_cafe.isEnum(self.hh.getHandleFromPV(pvd[i].getPVName()))==1:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsString())
 * 				else:
 */
      __pyx_t_2 = ((__pyx_v_self->_c_cafe->isEnum(__pyx_v_self->hh.getHandleFromPV((__pyx_v_pvd[__pyx_v_i]).getPVName())) == 1) != 0);
      if (__pyx_t_2) {

        /* "PyCafe.pyx":1672
 * 
 * 				if self._c_cafe.isEnum(self.hh.getHandleFromPV(pvd[i].getPVName()))==1:
 * 					localList.append(pvd[i].getAsString())             # <<<<<<<<<<<<<<
 * 				else:
 * 					localList.append(pvd[i].getAsLong())
 */
        __pyx_t_11 = __pyx_convert_PyStr_string_to_py_std__in_string((__pyx_v_pvd[__pyx_v_i]).getAsString()); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1672; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_11); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1672; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "PyCafe.pyx":1671
 * 			#if enum, string taken as native
 * 
 * 				if self._c_cafe.isEnum(self.hh.getHandleFromPV(pvd[i].getPVName()))==1:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsString())
 * 				else:
 */
        goto __pyx_L40;
      }

      /* "PyCafe.pyx":1674
 * 					localList.append(pvd[i].getAsString())
 * 				else:
 * 					localList.append(pvd[i].getAsLong())             # <<<<<<<<<<<<<<
 * 
 * 			elif dtcheck==CAFE_CHAR:
 */
      /*else*/ {
        __pyx_t_11 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong()); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_11); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __pyx_L40:;

      /* "PyCafe.pyx":1668
 * 			elif dtcheck==CAFE_FLOAT:
 * 				localList.append(pvd[i].getAsDouble())
 * 			elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 			#if enum, string taken as native
 * 
 */
      break;

      /* "PyCafe.pyx":1676
 * 					localList.append(pvd[i].getAsLong())
 * 
 * 			elif dtcheck==CAFE_CHAR:             # <<<<<<<<<<<<<<
 * 				localList.append( pvd[i].getAsLong()) 	#<unsigned char> pvd[i].getAsChar()
 * 			elif dtcheck==CAFE_LONG:
 */
      case CAFE_CHAR:

      /* "PyCafe.pyx":1677
 * 
 * 			elif dtcheck==CAFE_CHAR:
 * 				localList.append( pvd[i].getAsLong()) 	#<unsigned char> pvd[i].getAsChar()             # <<<<<<<<<<<<<<
 * 			elif dtcheck==CAFE_LONG:
 * 				localList.append(pvd[i].getAsLong())
 */
      __pyx_t_11 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong()); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_11); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "PyCafe.pyx":1676
 * 					localList.append(pvd[i].getAsLong())
 * 
 * 			elif dtcheck==CAFE_CHAR:             # <<<<<<<<<<<<<<
 * 				localList.append( pvd[i].getAsLong()) 	#<unsigned char> pvd[i].getAsChar()
 * 			elif dtcheck==CAFE_LONG:
 */
      break;

      /* "PyCafe.pyx":1678
 * 			elif dtcheck==CAFE_CHAR:
 * 				localList.append( pvd[i].getAsLong()) 	#<unsigned char> pvd[i].getAsChar()
 * 			elif dtcheck==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 				localList.append(pvd[i].getAsLong())
 * 			elif dtcheck==CAFE_DOUBLE:
 */
      case CAFE_LONG:

      /* "PyCafe.pyx":1679
 * 				localList.append( pvd[i].getAsLong()) 	#<unsigned char> pvd[i].getAsChar()
 * 			elif dtcheck==CAFE_LONG:
 * 				localList.append(pvd[i].getAsLong())             # <<<<<<<<<<<<<<
 * 			elif dtcheck==CAFE_DOUBLE:
 * 				localList.append(pvd[i].getAsDouble())
 */
      __pyx_t_11 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong()); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_11); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "PyCafe.pyx":1678
 * 			elif dtcheck==CAFE_CHAR:
 * 				localList.append( pvd[i].getAsLong()) 	#<unsigned char> pvd[i].getAsChar()
 * 			elif dtcheck==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 				localList.append(pvd[i].getAsLong())
 * 			elif dtcheck==CAFE_DOUBLE:
 */
      break;

      /* "PyCafe.pyx":1680
 * 			elif dtcheck==CAFE_LONG:
 * 				localList.append(pvd[i].getAsLong())
 * 			elif dtcheck==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 				localList.append(pvd[i].getAsDouble())
 * 			else:
 */
      case CAFE_DOUBLE:

      /* "PyCafe.pyx":1681
 * 				localList.append(pvd[i].getAsLong())
 * 			elif dtcheck==CAFE_DOUBLE:
 * 				localList.append(pvd[i].getAsDouble())             # <<<<<<<<<<<<<<
 * 			else:
 * 				localList.append(0)
 */
      __pyx_t_11 = PyFloat_FromDouble((__pyx_v_pvd[__pyx_v_i]).getAsDouble()); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_11); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "PyCafe.pyx":1680
 * 			elif dtcheck==CAFE_LONG:
 * 				localList.append(pvd[i].getAsLong())
 * 			elif dtcheck==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 				localList.append(pvd[i].getAsDouble())
 * 			else:
 */
      break;
      default:

      /* "PyCafe.pyx":1683
 * 				localList.append(pvd[i].getAsDouble())
 * 			else:
 * 				localList.append(0)             # <<<<<<<<<<<<<<
 * 				if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_HIGH:
 * 					print ("def getScalarList:")
 */
      __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_int_0); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "PyCafe.pyx":1684
 * 			else:
 * 				localList.append(0)
 * 				if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_HIGH:             # <<<<<<<<<<<<<<
 * 					print ("def getScalarList:")
 * 					print ("Entering 0 for element", i, "as channel is not connected!")
 */
      __pyx_t_2 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_HIGH) != 0);
      if (__pyx_t_2) {

        /* "PyCafe.pyx":1685
 * 				localList.append(0)
 * 				if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_HIGH:
 * 					print ("def getScalarList:")             # <<<<<<<<<<<<<<
 * 					print ("Entering 0 for element", i, "as channel is not connected!")
 * 
 */
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__148, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "PyCafe.pyx":1686
 * 				if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_HIGH:
 * 					print ("def getScalarList:")
 * 					print ("Entering 0 for element", i, "as channel is not connected!")             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_t_11 = PyInt_FromSsize_t(__pyx_v_i); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = PyTuple_New(3); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_INCREF(__pyx_kp_u_Entering_0_for_element);
        __Pyx_GIVEREF(__pyx_kp_u_Entering_0_for_element);
        PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_kp_u_Entering_0_for_element);
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_11);
        __Pyx_INCREF(__pyx_kp_u_as_channel_is_not_connected);
        __Pyx_GIVEREF(__pyx_kp_u_as_channel_is_not_connected);
        PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_kp_u_as_channel_is_not_connected);
        __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_12, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "PyCafe.pyx":1684
 * 			else:
 * 				localList.append(0)
 * 				if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_HIGH:             # <<<<<<<<<<<<<<
 * 					print ("def getScalarList:")
 * 					print ("Entering 0 for element", i, "as channel is not connected!")
 */
      }
      break;
    }
  }

  /* "PyCafe.pyx":1691
 * 	#free(pvd)
 * 
 * 		return localList, status, vStatus # use vstatus instead of statusList (as cache is NoWait)             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = __pyx_convert_vector_to_py_int(__pyx_v_vStatus); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_localList);
  __Pyx_GIVEREF(__pyx_v_localList);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_localList);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_12);
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":1477
 * 
 * 	##################################################################################
 * 	def  getScalarList(self, handleList, str dt='native'):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("PyCafe.CyCafe.getScalarList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nelemPrevious);
  __Pyx_XDECREF(__pyx_v_localList);
  __Pyx_XDECREF(__pyx_v_statusList);
  __Pyx_XDECREF(__pyx_v_handleList);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":1700
 * 
 * 	##################################################################################
 * 	def  getCompoundList(self, handleList, str dt='native'):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_145getCompoundList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_145getCompoundList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handleList = 0;
  PyObject *__pyx_v_dt = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getCompoundList (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handleList,&__pyx_n_s_dt,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject*)__pyx_n_u_native);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handleList)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getCompoundList") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1700; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_handleList = values[0];
    __pyx_v_dt = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getCompoundList", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1700; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.getCompoundList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dt), (&PyUnicode_Type), 1, "dt", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_144getCompoundList(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handleList, __pyx_v_dt);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_144getCompoundList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList, PyObject *__pyx_v_dt) {
  std::vector<unsigned int>  __pyx_v_v;
  std::vector<int>  __pyx_v_vStatus;
  int __pyx_v_flagCompound;
  unsigned int __pyx_v_nelemLocal;
  Py_ssize_t __pyx_v_i;
  int __pyx_v_status;
  std::vector<int>  __pyx_v_vRB;
  int __pyx_v_statusBundle;
  unsigned int __pyx_v_dtcheck;
  PyObject *__pyx_v_localList = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_statusList = NULL;
  PVDataHolder *__pyx_v_pvd;
  CYTHON_UNUSED int __pyx_v_statusNoWait;
  unsigned int __pyx_v_dtn;
  PyObject *__pyx_v_localListInner = NULL;
  long __pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  unsigned int __pyx_t_10;
  int __pyx_t_11;
  long __pyx_t_12;
  unsigned int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getCompoundList", 0);
  __Pyx_INCREF(__pyx_v_handleList);

  /* "PyCafe.pyx":1703
 * 	##################################################################################
 * 
 * 		if isinstance(handleList, (str)):             # <<<<<<<<<<<<<<
 * 			handleList=self.getHandlesFromWithinGroup(handleList)
 * 		else:
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_handleList); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":1704
 * 
 * 		if isinstance(handleList, (str)):
 * 			handleList=self.getHandlesFromWithinGroup(handleList)             # <<<<<<<<<<<<<<
 * 		else:
 * 			if not isinstance(handleList, (list)):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getHandlesFromWithinGroup); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_handleList); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_handleList);
      __Pyx_GIVEREF(__pyx_v_handleList);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_handleList);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_handleList, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "PyCafe.pyx":1703
 * 	##################################################################################
 * 
 * 		if isinstance(handleList, (str)):             # <<<<<<<<<<<<<<
 * 			handleList=self.getHandlesFromWithinGroup(handleList)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":1706
 * 			handleList=self.getHandlesFromWithinGroup(handleList)
 * 		else:
 * 			if not isinstance(handleList, (list)):             # <<<<<<<<<<<<<<
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def getCompoundList. \n\
 * First input argument, should be <type 'list'> of handles or PVs")
 */
  /*else*/ {
    __pyx_t_2 = PyList_Check(__pyx_v_handleList); 
    __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":1707
 * 		else:
 * 			if not isinstance(handleList, (list)):
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def getCompoundList. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__149, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "PyCafe.pyx":1706
 * 			handleList=self.getHandlesFromWithinGroup(handleList)
 * 		else:
 * 			if not isinstance(handleList, (list)):             # <<<<<<<<<<<<<<
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def getCompoundList. \n\
 * First input argument, should be <type 'list'> of handles or PVs")
 */
    }

    /* "PyCafe.pyx":1710
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 * 			if 	isinstance(handleList[0], (str)):             # <<<<<<<<<<<<<<
 * 				handleList=self.checkForHandleList(handleList)
 * 			elif not isinstance(handleList[0], (int, long)):
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_handleList, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1710; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyUnicode_Check(__pyx_t_3); 
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":1711
 * 
 * 			if 	isinstance(handleList[0], (str)):
 * 				handleList=self.checkForHandleList(handleList)             # <<<<<<<<<<<<<<
 * 			elif not isinstance(handleList[0], (int, long)):
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def getCompoundList. \n\
 */
      if (!(likely(PyList_CheckExact(__pyx_v_handleList))||((__pyx_v_handleList) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_handleList)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1711; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_3 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandleList(__pyx_v_self, ((PyObject*)__pyx_v_handleList), 0, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1711; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF_SET(__pyx_v_handleList, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "PyCafe.pyx":1710
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 * 			if 	isinstance(handleList[0], (str)):             # <<<<<<<<<<<<<<
 * 				handleList=self.checkForHandleList(handleList)
 * 			elif not isinstance(handleList[0], (int, long)):
 */
      goto __pyx_L5;
    }

    /* "PyCafe.pyx":1712
 * 			if 	isinstance(handleList[0], (str)):
 * 				handleList=self.checkForHandleList(handleList)
 * 			elif not isinstance(handleList[0], (int, long)):             # <<<<<<<<<<<<<<
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def getCompoundList. \n\
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_handleList, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1712; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyInt_Check(__pyx_t_3); 
    __pyx_t_7 = (__pyx_t_1 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = PyLong_Check(__pyx_t_3); 
    __pyx_t_1 = (__pyx_t_7 != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L6_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":1713
 * 				handleList=self.checkForHandleList(handleList)
 * 			elif not isinstance(handleList[0], (int, long)):
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def getCompoundList. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__150, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "PyCafe.pyx":1712
 * 			if 	isinstance(handleList[0], (str)):
 * 				handleList=self.checkForHandleList(handleList)
 * 			elif not isinstance(handleList[0], (int, long)):             # <<<<<<<<<<<<<<
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def getCompoundList. \n\
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 */
    }
    __pyx_L5:;
  }
  __pyx_L3:;

  /* "PyCafe.pyx":1722
 * 		cdef vector[int] vStatus
 * 
 * 		v.reserve      (len(handleList))             # <<<<<<<<<<<<<<
 * 		vStatus.reserve(len(handleList))
 * 
 */
  __pyx_t_8 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1722; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_v.reserve(__pyx_t_8);

  /* "PyCafe.pyx":1723
 * 
 * 		v.reserve      (len(handleList))
 * 		vStatus.reserve(len(handleList))             # <<<<<<<<<<<<<<
 * 
 * 		cdef bint flagCompound=False
 */
  __pyx_t_8 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1723; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_vStatus.reserve(__pyx_t_8);

  /* "PyCafe.pyx":1725
 * 		vStatus.reserve(len(handleList))
 * 
 * 		cdef bint flagCompound=False             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int nelemLocal=1
 */
  __pyx_v_flagCompound = 0;

  /* "PyCafe.pyx":1727
 * 		cdef bint flagCompound=False
 * 
 * 		cdef unsigned int nelemLocal=1             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(0, len(handleList)):
 */
  __pyx_v_nelemLocal = 1;

  /* "PyCafe.pyx":1729
 * 		cdef unsigned int nelemLocal=1
 * 
 * 		for i in range(0, len(handleList)):             # <<<<<<<<<<<<<<
 * 			v.push_back(handleList[i]) #do this copy to avoid compiler warning messages
 * 
 */
  __pyx_t_8 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "PyCafe.pyx":1730
 * 
 * 		for i in range(0, len(handleList)):
 * 			v.push_back(handleList[i]) #do this copy to avoid compiler warning messages             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1730; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1730; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    try {
      __pyx_v_v.push_back(__pyx_t_10);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1730; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "PyCafe.pyx":1733
 * 
 * 
 * 			if (nelemLocal==1):             # <<<<<<<<<<<<<<
 * 				nelemLocal=self.hh.getNelemNative(handleList[i])
 * 				if nelemLocal > 1:
 */
    __pyx_t_1 = ((__pyx_v_nelemLocal == 1) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":1734
 * 
 * 			if (nelemLocal==1):
 * 				nelemLocal=self.hh.getNelemNative(handleList[i])             # <<<<<<<<<<<<<<
 * 				if nelemLocal > 1:
 * 					flagCompound=True
 */
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1734; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_nelemLocal = __pyx_v_self->hh.getNelemNative(__pyx_t_10);

      /* "PyCafe.pyx":1735
 * 			if (nelemLocal==1):
 * 				nelemLocal=self.hh.getNelemNative(handleList[i])
 * 				if nelemLocal > 1:             # <<<<<<<<<<<<<<
 * 					flagCompound=True
 * 
 */
      __pyx_t_1 = ((__pyx_v_nelemLocal > 1) != 0);
      if (__pyx_t_1) {

        /* "PyCafe.pyx":1736
 * 				nelemLocal=self.hh.getNelemNative(handleList[i])
 * 				if nelemLocal > 1:
 * 					flagCompound=True             # <<<<<<<<<<<<<<
 * 
 * 		#Need to copy to a vector since
 */
        __pyx_v_flagCompound = 1;

        /* "PyCafe.pyx":1735
 * 			if (nelemLocal==1):
 * 				nelemLocal=self.hh.getNelemNative(handleList[i])
 * 				if nelemLocal > 1:             # <<<<<<<<<<<<<<
 * 					flagCompound=True
 * 
 */
      }

      /* "PyCafe.pyx":1733
 * 
 * 
 * 			if (nelemLocal==1):             # <<<<<<<<<<<<<<
 * 				nelemLocal=self.hh.getNelemNative(handleList[i])
 * 				if nelemLocal > 1:
 */
    }
  }

  /* "PyCafe.pyx":1740
 * 		#Need to copy to a vector since
 * 		#Coercion from Python not allowed without the GIL
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.getV(v, vStatus)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":1741
 * 		#Coercion from Python not allowed without the GIL
 * 		with nogil:
 * 			status=self._c_cafe.getV(v, vStatus)             # <<<<<<<<<<<<<<
 * 
 * 		#ca_poll() Not required as above will flush!
 */
        __pyx_v_status = __pyx_v_self->_c_cafe->getV(__pyx_v_v, __pyx_v_vStatus);
      }

      /* "PyCafe.pyx":1740
 * 		#Need to copy to a vector since
 * 		#Coercion from Python not allowed without the GIL
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.getV(v, vStatus)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L14;
        }
        __pyx_L14:;
      }
  }

  /* "PyCafe.pyx":1747
 * 		#Wait for bundle
 * 		cdef vector[int] vRB
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			statusBundle=self._c_cafe.waitForBundledEvents(v, vRB)
 * 		if (statusBundle!=ICAFE_NORMAL):
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":1748
 * 		cdef vector[int] vRB
 * 		with nogil:
 * 			statusBundle=self._c_cafe.waitForBundledEvents(v, vRB)             # <<<<<<<<<<<<<<
 * 		if (statusBundle!=ICAFE_NORMAL):
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 */
        __pyx_v_statusBundle = __pyx_v_self->_c_cafe->waitForBundledEvents(__pyx_v_v, __pyx_v_vRB);
      }

      /* "PyCafe.pyx":1747
 * 		#Wait for bundle
 * 		cdef vector[int] vRB
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			statusBundle=self._c_cafe.waitForBundledEvents(v, vRB)
 * 		if (statusBundle!=ICAFE_NORMAL):
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L17;
        }
        __pyx_L17:;
      }
  }

  /* "PyCafe.pyx":1749
 * 		with nogil:
 * 			statusBundle=self._c_cafe.waitForBundledEvents(v, vRB)
 * 		if (statusBundle!=ICAFE_NORMAL):             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				print ("Error in def  getScalarList: ")
 */
  __pyx_t_1 = ((__pyx_v_statusBundle != ICAFE_NORMAL) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":1750
 * 			statusBundle=self._c_cafe.waitForBundledEvents(v, vRB)
 * 		if (statusBundle!=ICAFE_NORMAL):
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				print ("Error in def  getScalarList: ")
 * 				self._c_cafe.printStatusMessage(statusBundle)
 */
    __pyx_t_1 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":1751
 * 		if (statusBundle!=ICAFE_NORMAL):
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				print ("Error in def  getScalarList: ")             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(statusBundle)
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__151, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "PyCafe.pyx":1752
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				print ("Error in def  getScalarList: ")
 * 				self._c_cafe.printStatusMessage(statusBundle)             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int dtcheck=CAFE_NOT_REQUESTED  #native type not yet know
 */
      __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_statusBundle);

      /* "PyCafe.pyx":1750
 * 			statusBundle=self._c_cafe.waitForBundledEvents(v, vRB)
 * 		if (statusBundle!=ICAFE_NORMAL):
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				print ("Error in def  getScalarList: ")
 * 				self._c_cafe.printStatusMessage(statusBundle)
 */
    }

    /* "PyCafe.pyx":1749
 * 		with nogil:
 * 			statusBundle=self._c_cafe.waitForBundledEvents(v, vRB)
 * 		if (statusBundle!=ICAFE_NORMAL):             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				print ("Error in def  getScalarList: ")
 */
  }

  /* "PyCafe.pyx":1754
 * 				self._c_cafe.printStatusMessage(statusBundle)
 * 
 * 		cdef unsigned int dtcheck=CAFE_NOT_REQUESTED  #native type not yet know             # <<<<<<<<<<<<<<
 * 		dtcheck=getMatchedDataType(dt, dtcheck)
 * 
 */
  __pyx_v_dtcheck = CAFE_NOT_REQUESTED;

  /* "PyCafe.pyx":1755
 * 
 * 		cdef unsigned int dtcheck=CAFE_NOT_REQUESTED  #native type not yet know
 * 		dtcheck=getMatchedDataType(dt, dtcheck)             # <<<<<<<<<<<<<<
 * 
 * 		#Use Scalar
 */
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_v_dtcheck); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_f_6PyCafe_getMatchedDataType(__pyx_v_dt, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_4); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_dtcheck = __pyx_t_10;

  /* "PyCafe.pyx":1758
 * 
 * 		#Use Scalar
 * 		if flagCompound == False:             # <<<<<<<<<<<<<<
 * 
 * 			if dtcheck in [CAFE_STRING]:
 */
  __pyx_t_1 = ((__pyx_v_flagCompound == 0) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":1760
 * 		if flagCompound == False:
 * 
 * 			if dtcheck in [CAFE_STRING]:             # <<<<<<<<<<<<<<
 * 
 * 				self.vStr.clear()
 */
    switch (__pyx_v_dtcheck) {
      case CAFE_STRING:

      /* "PyCafe.pyx":1762
 * 			if dtcheck in [CAFE_STRING]:
 * 
 * 				self.vStr.clear()             # <<<<<<<<<<<<<<
 * 				self.vStr.reserve(len(handleList))
 * 
 */
      __pyx_v_self->vStr.clear();

      /* "PyCafe.pyx":1763
 * 
 * 				self.vStr.clear()
 * 				self.vStr.reserve(len(handleList))             # <<<<<<<<<<<<<<
 * 
 * 				with nogil:
 */
      __pyx_t_8 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_self->vStr.reserve(__pyx_t_8);

      /* "PyCafe.pyx":1765
 * 				self.vStr.reserve(len(handleList))
 * 
 * 				with nogil:             # <<<<<<<<<<<<<<
 * 					status=self._c_cafe.getCacheVStr(v, self.vStr, vStatus)
 * 
 */
      {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          Py_UNBLOCK_THREADS
          #endif
          /*try:*/ {

            /* "PyCafe.pyx":1766
 * 
 * 				with nogil:
 * 					status=self._c_cafe.getCacheVStr(v, self.vStr, vStatus)             # <<<<<<<<<<<<<<
 * 
 * 				localList=[]
 */
            __pyx_v_status = __pyx_v_self->_c_cafe->getCacheVStr(__pyx_v_v, __pyx_v_self->vStr, __pyx_v_vStatus);
          }

          /* "PyCafe.pyx":1765
 * 				self.vStr.reserve(len(handleList))
 * 
 * 				with nogil:             # <<<<<<<<<<<<<<
 * 					status=self._c_cafe.getCacheVStr(v, self.vStr, vStatus)
 * 
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L23;
            }
            __pyx_L23:;
          }
      }

      /* "PyCafe.pyx":1768
 * 					status=self._c_cafe.getCacheVStr(v, self.vStr, vStatus)
 * 
 * 				localList=[]             # <<<<<<<<<<<<<<
 * 				statusList=[]
 * 
 */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_localList = ((PyObject*)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "PyCafe.pyx":1769
 * 
 * 				localList=[]
 * 				statusList=[]             # <<<<<<<<<<<<<<
 * 
 * 				#for i in range(0,	len(self.vStr)):
 */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_statusList = ((PyObject*)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "PyCafe.pyx":1773
 * 				#for i in range(0,	len(self.vStr)):
 * 					#localList.append(	self.vStr[i])
 * 				return self.vStr, status, vStatus             # <<<<<<<<<<<<<<
 * 
 * 			elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_self->vStr); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1773; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1773; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __pyx_convert_vector_to_py_int(__pyx_v_vStatus); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1773; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1773; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_6);
      __pyx_t_4 = 0;
      __pyx_t_3 = 0;
      __pyx_t_6 = 0;
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L0;

      /* "PyCafe.pyx":1760
 * 		if flagCompound == False:
 * 
 * 			if dtcheck in [CAFE_STRING]:             # <<<<<<<<<<<<<<
 * 
 * 				self.vStr.clear()
 */
      break;

      /* "PyCafe.pyx":1775
 * 				return self.vStr, status, vStatus
 * 
 * 			elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:             # <<<<<<<<<<<<<<
 * 
 * 				self.vInt.clear()
 */
      case CAFE_SHORT:
      case CAFE_CHAR:
      case CAFE_LONG:

      /* "PyCafe.pyx":1777
 * 			elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:
 * 
 * 				self.vInt.clear()             # <<<<<<<<<<<<<<
 * 				self.vInt.reserve(len(handleList))
 * 
 */
      __pyx_v_self->vInt.clear();

      /* "PyCafe.pyx":1778
 * 
 * 				self.vInt.clear()
 * 				self.vInt.reserve(len(handleList))             # <<<<<<<<<<<<<<
 * 
 * 				with nogil:
 */
      __pyx_t_8 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_self->vInt.reserve(__pyx_t_8);

      /* "PyCafe.pyx":1780
 * 				self.vInt.reserve(len(handleList))
 * 
 * 				with nogil:             # <<<<<<<<<<<<<<
 * 					status=self._c_cafe.getCacheVLong(v, self.vInt, vStatus)
 * 
 */
      {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          Py_UNBLOCK_THREADS
          #endif
          /*try:*/ {

            /* "PyCafe.pyx":1781
 * 
 * 				with nogil:
 * 					status=self._c_cafe.getCacheVLong(v, self.vInt, vStatus)             # <<<<<<<<<<<<<<
 * 
 * 				localList=[]
 */
            __pyx_v_status = __pyx_v_self->_c_cafe->getCacheVLong(__pyx_v_v, __pyx_v_self->vInt, __pyx_v_vStatus);
          }

          /* "PyCafe.pyx":1780
 * 				self.vInt.reserve(len(handleList))
 * 
 * 				with nogil:             # <<<<<<<<<<<<<<
 * 					status=self._c_cafe.getCacheVLong(v, self.vInt, vStatus)
 * 
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L26;
            }
            __pyx_L26:;
          }
      }

      /* "PyCafe.pyx":1783
 * 					status=self._c_cafe.getCacheVLong(v, self.vInt, vStatus)
 * 
 * 				localList=[]             # <<<<<<<<<<<<<<
 * 				statusList=[]
 * 
 */
      __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1783; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_v_localList = ((PyObject*)__pyx_t_5);
      __pyx_t_5 = 0;

      /* "PyCafe.pyx":1784
 * 
 * 				localList=[]
 * 				statusList=[]             # <<<<<<<<<<<<<<
 * 
 * 				return self.vInt, status, vStatus
 */
      __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1784; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_v_statusList = ((PyObject*)__pyx_t_5);
      __pyx_t_5 = 0;

      /* "PyCafe.pyx":1786
 * 				statusList=[]
 * 
 * 				return self.vInt, status, vStatus             # <<<<<<<<<<<<<<
 * 
 * 			elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = __pyx_convert_vector_to_py_dbr_long_t(__pyx_v_self->vInt); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_3 = __pyx_convert_vector_to_py_int(__pyx_v_vStatus); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_3 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;

      /* "PyCafe.pyx":1775
 * 				return self.vStr, status, vStatus
 * 
 * 			elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:             # <<<<<<<<<<<<<<
 * 
 * 				self.vInt.clear()
 */
      break;

      /* "PyCafe.pyx":1788
 * 				return self.vInt, status, vStatus
 * 
 * 			elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:             # <<<<<<<<<<<<<<
 * 
 * 				self.vFloat.clear()
 */
      case CAFE_FLOAT:
      case CAFE_DOUBLE:

      /* "PyCafe.pyx":1790
 * 			elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:
 * 
 * 				self.vFloat.clear()             # <<<<<<<<<<<<<<
 * 				self.vFloat.reserve(len(handleList))
 * 
 */
      __pyx_v_self->vFloat.clear();

      /* "PyCafe.pyx":1791
 * 
 * 				self.vFloat.clear()
 * 				self.vFloat.reserve(len(handleList))             # <<<<<<<<<<<<<<
 * 
 * 				with nogil:
 */
      __pyx_t_8 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_self->vFloat.reserve(__pyx_t_8);

      /* "PyCafe.pyx":1793
 * 				self.vFloat.reserve(len(handleList))
 * 
 * 				with nogil:             # <<<<<<<<<<<<<<
 * 					status=self._c_cafe.getCacheVDouble(v, self.vFloat, vStatus)
 * 
 */
      {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          Py_UNBLOCK_THREADS
          #endif
          /*try:*/ {

            /* "PyCafe.pyx":1794
 * 
 * 				with nogil:
 * 					status=self._c_cafe.getCacheVDouble(v, self.vFloat, vStatus)             # <<<<<<<<<<<<<<
 * 
 * 				localList=[]
 */
            __pyx_v_status = __pyx_v_self->_c_cafe->getCacheVDouble(__pyx_v_v, __pyx_v_self->vFloat, __pyx_v_vStatus);
          }

          /* "PyCafe.pyx":1793
 * 				self.vFloat.reserve(len(handleList))
 * 
 * 				with nogil:             # <<<<<<<<<<<<<<
 * 					status=self._c_cafe.getCacheVDouble(v, self.vFloat, vStatus)
 * 
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L29;
            }
            __pyx_L29:;
          }
      }

      /* "PyCafe.pyx":1796
 * 					status=self._c_cafe.getCacheVDouble(v, self.vFloat, vStatus)
 * 
 * 				localList=[]             # <<<<<<<<<<<<<<
 * 				statusList=[]
 * 
 */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_localList = ((PyObject*)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "PyCafe.pyx":1797
 * 
 * 				localList=[]
 * 				statusList=[]             # <<<<<<<<<<<<<<
 * 
 * 				return self.vFloat, status, vStatus
 */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_statusList = ((PyObject*)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "PyCafe.pyx":1799
 * 				statusList=[]
 * 
 * 				return self.vFloat, status, vStatus             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __pyx_convert_vector_to_py_double(__pyx_v_self->vFloat); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __pyx_convert_vector_to_py_int(__pyx_v_vStatus); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_6);
      __pyx_t_4 = 0;
      __pyx_t_3 = 0;
      __pyx_t_6 = 0;
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L0;

      /* "PyCafe.pyx":1788
 * 				return self.vInt, status, vStatus
 * 
 * 			elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:             # <<<<<<<<<<<<<<
 * 
 * 				self.vFloat.clear()
 */
      break;
      default: break;
    }

    /* "PyCafe.pyx":1758
 * 
 * 		#Use Scalar
 * 		if flagCompound == False:             # <<<<<<<<<<<<<<
 * 
 * 			if dtcheck in [CAFE_STRING]:
 */
  }

  /* "PyCafe.pyx":1806
 * 		#Create temporary group from handleList
 * 		#Does group exist?
 * 		cdef PVDataHolder * pvd = self._c_cafe.getPVData(v)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_pvd = __pyx_v_self->_c_cafe->getPVData(__pyx_v_v);

  /* "PyCafe.pyx":1810
 * 
 * 		#Required to allocate memory for shared pointer
 * 		for i in range(0, len(handleList)):             # <<<<<<<<<<<<<<
 * 			pvd[i].setNelem(self.hh.getNelemClient(handleList[i]))
 * 
 */
  __pyx_t_8 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1810; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "PyCafe.pyx":1811
 * 		#Required to allocate memory for shared pointer
 * 		for i in range(0, len(handleList)):
 * 			pvd[i].setNelem(self.hh.getNelemClient(handleList[i]))             # <<<<<<<<<<<<<<
 * 
 * 		statusNoWait=self._c_cafe.getCachePVArrayNoWait(v, pvd)
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1811; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    (__pyx_v_pvd[__pyx_v_i]).setNelem(__pyx_v_self->hh.getNelemClient(__pyx_t_10));
  }

  /* "PyCafe.pyx":1813
 * 			pvd[i].setNelem(self.hh.getNelemClient(handleList[i]))
 * 
 * 		statusNoWait=self._c_cafe.getCachePVArrayNoWait(v, pvd)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_statusNoWait = __pyx_v_self->_c_cafe->getCachePVArrayNoWait(__pyx_v_v, __pyx_v_pvd);

  /* "PyCafe.pyx":1818
 * 		cdef unsigned int dtn
 * 
 * 		localList=[]             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(0, len(handleList)):
 */
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1818; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_localList = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "PyCafe.pyx":1820
 * 		localList=[]
 * 
 * 		for i in range(0, len(handleList)):             # <<<<<<<<<<<<<<
 * 
 * 			dtn     = pvd[i].getDataType();
 */
  __pyx_t_8 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "PyCafe.pyx":1822
 * 		for i in range(0, len(handleList)):
 * 
 * 			dtn     = pvd[i].getDataType();             # <<<<<<<<<<<<<<
 * 			dtcheck = getMatchedDataType(dt, dtn)
 * 
 */
    __pyx_v_dtn = (__pyx_v_pvd[__pyx_v_i]).getDataType();

    /* "PyCafe.pyx":1823
 * 
 * 			dtn     = pvd[i].getDataType();
 * 			dtcheck = getMatchedDataType(dt, dtn)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_dtn); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __pyx_f_6PyCafe_getMatchedDataType(__pyx_v_dt, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_6); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_dtcheck = __pyx_t_10;

    /* "PyCafe.pyx":1827
 * 
 * 
 * 			if pvd[i].getNelem() == 1:             # <<<<<<<<<<<<<<
 * 				if dtcheck==CAFE_STRING:
 * 					localList.append(pvd[i].getAsString())
 */
    __pyx_t_1 = (((__pyx_v_pvd[__pyx_v_i]).getNelem() == 1) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":1828
 * 
 * 			if pvd[i].getNelem() == 1:
 * 				if dtcheck==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsString())
 * 				elif dtcheck==CAFE_SHORT:
 */
      switch (__pyx_v_dtcheck) {
        case CAFE_STRING:

        /* "PyCafe.pyx":1829
 * 			if pvd[i].getNelem() == 1:
 * 				if dtcheck==CAFE_STRING:
 * 					localList.append(pvd[i].getAsString())             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_SHORT:
 * 					localList.append(pvd[i].getAsLong())
 */
        __pyx_t_6 = __pyx_convert_PyStr_string_to_py_std__in_string((__pyx_v_pvd[__pyx_v_i]).getAsString()); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_6); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "PyCafe.pyx":1828
 * 
 * 			if pvd[i].getNelem() == 1:
 * 				if dtcheck==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsString())
 * 				elif dtcheck==CAFE_SHORT:
 */
        break;

        /* "PyCafe.pyx":1830
 * 				if dtcheck==CAFE_STRING:
 * 					localList.append(pvd[i].getAsString())
 * 				elif dtcheck==CAFE_SHORT:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_FLOAT:
 */
        case CAFE_SHORT:

        /* "PyCafe.pyx":1831
 * 					localList.append(pvd[i].getAsString())
 * 				elif dtcheck==CAFE_SHORT:
 * 					localList.append(pvd[i].getAsLong())             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_FLOAT:
 * 					localList.append(pvd[i].getAsDouble())
 */
        __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong()); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_6); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "PyCafe.pyx":1830
 * 				if dtcheck==CAFE_STRING:
 * 					localList.append(pvd[i].getAsString())
 * 				elif dtcheck==CAFE_SHORT:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_FLOAT:
 */
        break;

        /* "PyCafe.pyx":1832
 * 				elif dtcheck==CAFE_SHORT:
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_FLOAT:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsDouble())
 * 				elif dtcheck==CAFE_ENUM:
 */
        case CAFE_FLOAT:

        /* "PyCafe.pyx":1833
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_FLOAT:
 * 					localList.append(pvd[i].getAsDouble())             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_ENUM:
 * 					#if enum, string taken as native
 */
        __pyx_t_6 = PyFloat_FromDouble((__pyx_v_pvd[__pyx_v_i]).getAsDouble()); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_6); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "PyCafe.pyx":1832
 * 				elif dtcheck==CAFE_SHORT:
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_FLOAT:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsDouble())
 * 				elif dtcheck==CAFE_ENUM:
 */
        break;

        /* "PyCafe.pyx":1834
 * 				elif dtcheck==CAFE_FLOAT:
 * 					localList.append(pvd[i].getAsDouble())
 * 				elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 					#if enum, string taken as native
 * 					if self._c_cafe.isEnum(handleList[i])==1:
 */
        case CAFE_ENUM:

        /* "PyCafe.pyx":1836
 * 				elif dtcheck==CAFE_ENUM:
 * 					#if enum, string taken as native
 * 					if self._c_cafe.isEnum(handleList[i])==1:             # <<<<<<<<<<<<<<
 * 						localList.append(pvd[i].getAsString())
 * 					else:
 */
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1836; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_6); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_1 = ((__pyx_v_self->_c_cafe->isEnum(__pyx_t_10) == 1) != 0);
        if (__pyx_t_1) {

          /* "PyCafe.pyx":1837
 * 					#if enum, string taken as native
 * 					if self._c_cafe.isEnum(handleList[i])==1:
 * 						localList.append(pvd[i].getAsString())             # <<<<<<<<<<<<<<
 * 					else:
 * 						localList.append(pvd[i].getAsLong())
 */
          __pyx_t_6 = __pyx_convert_PyStr_string_to_py_std__in_string((__pyx_v_pvd[__pyx_v_i]).getAsString()); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_6); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

          /* "PyCafe.pyx":1836
 * 				elif dtcheck==CAFE_ENUM:
 * 					#if enum, string taken as native
 * 					if self._c_cafe.isEnum(handleList[i])==1:             # <<<<<<<<<<<<<<
 * 						localList.append(pvd[i].getAsString())
 * 					else:
 */
          goto __pyx_L35;
        }

        /* "PyCafe.pyx":1839
 * 						localList.append(pvd[i].getAsString())
 * 					else:
 * 						localList.append(pvd[i].getAsLong())             # <<<<<<<<<<<<<<
 * 
 * 				elif dtcheck==CAFE_CHAR:
 */
        /*else*/ {
          __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong()); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_6); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __pyx_L35:;

        /* "PyCafe.pyx":1834
 * 				elif dtcheck==CAFE_FLOAT:
 * 					localList.append(pvd[i].getAsDouble())
 * 				elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 					#if enum, string taken as native
 * 					if self._c_cafe.isEnum(handleList[i])==1:
 */
        break;

        /* "PyCafe.pyx":1841
 * 						localList.append(pvd[i].getAsLong())
 * 
 * 				elif dtcheck==CAFE_CHAR:             # <<<<<<<<<<<<<<
 * 					localList.append(<unsigned char> pvd[i].getAsChar())
 * 				elif dtcheck==CAFE_LONG:
 */
        case CAFE_CHAR:

        /* "PyCafe.pyx":1842
 * 
 * 				elif dtcheck==CAFE_CHAR:
 * 					localList.append(<unsigned char> pvd[i].getAsChar())             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_LONG:
 * 					localList.append(pvd[i].getAsLong())
 */
        __pyx_t_6 = __Pyx_PyInt_From_unsigned_char(((unsigned char)(__pyx_v_pvd[__pyx_v_i]).getAsChar())); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_6); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "PyCafe.pyx":1841
 * 						localList.append(pvd[i].getAsLong())
 * 
 * 				elif dtcheck==CAFE_CHAR:             # <<<<<<<<<<<<<<
 * 					localList.append(<unsigned char> pvd[i].getAsChar())
 * 				elif dtcheck==CAFE_LONG:
 */
        break;

        /* "PyCafe.pyx":1843
 * 				elif dtcheck==CAFE_CHAR:
 * 					localList.append(<unsigned char> pvd[i].getAsChar())
 * 				elif dtcheck==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_DOUBLE:
 */
        case CAFE_LONG:

        /* "PyCafe.pyx":1844
 * 					localList.append(<unsigned char> pvd[i].getAsChar())
 * 				elif dtcheck==CAFE_LONG:
 * 					localList.append(pvd[i].getAsLong())             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_DOUBLE:
 * 					localList.append(pvd[i].getAsDouble())
 */
        __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong()); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_6); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "PyCafe.pyx":1843
 * 				elif dtcheck==CAFE_CHAR:
 * 					localList.append(<unsigned char> pvd[i].getAsChar())
 * 				elif dtcheck==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_DOUBLE:
 */
        break;

        /* "PyCafe.pyx":1845
 * 				elif dtcheck==CAFE_LONG:
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsDouble())
 * 				else:
 */
        case CAFE_DOUBLE:

        /* "PyCafe.pyx":1846
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_DOUBLE:
 * 					localList.append(pvd[i].getAsDouble())             # <<<<<<<<<<<<<<
 * 				else:
 * 					localList.append(0) #no data
 */
        __pyx_t_6 = PyFloat_FromDouble((__pyx_v_pvd[__pyx_v_i]).getAsDouble()); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1846; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_6); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1846; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "PyCafe.pyx":1845
 * 				elif dtcheck==CAFE_LONG:
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsDouble())
 * 				else:
 */
        break;
        default:

        /* "PyCafe.pyx":1848
 * 					localList.append(pvd[i].getAsDouble())
 * 				else:
 * 					localList.append(0) #no data             # <<<<<<<<<<<<<<
 * 			else:
 * 				localListInner=[]
 */
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_int_0); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }

      /* "PyCafe.pyx":1827
 * 
 * 
 * 			if pvd[i].getNelem() == 1:             # <<<<<<<<<<<<<<
 * 				if dtcheck==CAFE_STRING:
 * 					localList.append(pvd[i].getAsString())
 */
      goto __pyx_L34;
    }

    /* "PyCafe.pyx":1850
 * 					localList.append(0) #no data
 * 			else:
 * 				localListInner=[]             # <<<<<<<<<<<<<<
 * 				if dtcheck==CAFE_STRING:
 * 					for j in range(0, pvd[i].getNelem()):
 */
    /*else*/ {
      __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1850; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_localListInner, ((PyObject*)__pyx_t_6));
      __pyx_t_6 = 0;

      /* "PyCafe.pyx":1851
 * 			else:
 * 				localListInner=[]
 * 				if dtcheck==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsString(j))
 */
      switch (__pyx_v_dtcheck) {
        case CAFE_STRING:

        /* "PyCafe.pyx":1852
 * 				localListInner=[]
 * 				if dtcheck==CAFE_STRING:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(pvd[i].getAsString(j))
 * 				elif dtcheck==CAFE_SHORT:
 */
        __pyx_t_10 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_10; __pyx_t_12+=1) {
          __pyx_v_j = __pyx_t_12;

          /* "PyCafe.pyx":1853
 * 				if dtcheck==CAFE_STRING:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsString(j))             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_SHORT:
 * 					for j in range(0, pvd[i].getNelem()):
 */
          __pyx_t_6 = __pyx_convert_PyStr_string_to_py_std__in_string((__pyx_v_pvd[__pyx_v_i]).getAsString(__pyx_v_j)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_6); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }

        /* "PyCafe.pyx":1851
 * 			else:
 * 				localListInner=[]
 * 				if dtcheck==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsString(j))
 */
        break;

        /* "PyCafe.pyx":1854
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsString(j))
 * 				elif dtcheck==CAFE_SHORT:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 */
        case CAFE_SHORT:

        /* "PyCafe.pyx":1855
 * 						localListInner.append(pvd[i].getAsString(j))
 * 				elif dtcheck==CAFE_SHORT:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_FLOAT:
 */
        __pyx_t_10 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_10; __pyx_t_12+=1) {
          __pyx_v_j = __pyx_t_12;

          /* "PyCafe.pyx":1856
 * 				elif dtcheck==CAFE_SHORT:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_FLOAT:
 * 					for j in range(0, pvd[i].getNelem()):
 */
          __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong(__pyx_v_j)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1856; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_6); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1856; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }

        /* "PyCafe.pyx":1854
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsString(j))
 * 				elif dtcheck==CAFE_SHORT:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 */
        break;

        /* "PyCafe.pyx":1857
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_FLOAT:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))
 */
        case CAFE_FLOAT:

        /* "PyCafe.pyx":1858
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_FLOAT:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(pvd[i].getAsDouble(j))
 * 				elif dtcheck==CAFE_ENUM:
 */
        __pyx_t_10 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_10; __pyx_t_12+=1) {
          __pyx_v_j = __pyx_t_12;

          /* "PyCafe.pyx":1859
 * 				elif dtcheck==CAFE_FLOAT:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_ENUM:
 * 
 */
          __pyx_t_6 = PyFloat_FromDouble((__pyx_v_pvd[__pyx_v_i]).getAsDouble(__pyx_v_j)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_6); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }

        /* "PyCafe.pyx":1857
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_FLOAT:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))
 */
        break;

        /* "PyCafe.pyx":1860
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))
 * 				elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 
 * 					for j in range(0, pvd[i].getNelem()):
 */
        case CAFE_ENUM:

        /* "PyCafe.pyx":1862
 * 				elif dtcheck==CAFE_ENUM:
 * 
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						#if enum, string taken as native
 * 						if self._c_cafe.isEnum(handleList[i])==1:
 */
        __pyx_t_10 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_10; __pyx_t_12+=1) {
          __pyx_v_j = __pyx_t_12;

          /* "PyCafe.pyx":1864
 * 					for j in range(0, pvd[i].getNelem()):
 * 						#if enum, string taken as native
 * 						if self._c_cafe.isEnum(handleList[i])==1:             # <<<<<<<<<<<<<<
 * 							localListInner.append(pvd[i].getAsString(j))
 * 						else:
 */
          __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1864; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_13 = __Pyx_PyInt_As_unsigned_int(__pyx_t_6); if (unlikely((__pyx_t_13 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_1 = ((__pyx_v_self->_c_cafe->isEnum(__pyx_t_13) == 1) != 0);
          if (__pyx_t_1) {

            /* "PyCafe.pyx":1865
 * 						#if enum, string taken as native
 * 						if self._c_cafe.isEnum(handleList[i])==1:
 * 							localListInner.append(pvd[i].getAsString(j))             # <<<<<<<<<<<<<<
 * 						else:
 * 							localListInner.append(pvd[i].getAsLong(j))
 */
            __pyx_t_6 = __pyx_convert_PyStr_string_to_py_std__in_string((__pyx_v_pvd[__pyx_v_i]).getAsString(__pyx_v_j)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_6); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

            /* "PyCafe.pyx":1864
 * 					for j in range(0, pvd[i].getNelem()):
 * 						#if enum, string taken as native
 * 						if self._c_cafe.isEnum(handleList[i])==1:             # <<<<<<<<<<<<<<
 * 							localListInner.append(pvd[i].getAsString(j))
 * 						else:
 */
            goto __pyx_L44;
          }

          /* "PyCafe.pyx":1867
 * 							localListInner.append(pvd[i].getAsString(j))
 * 						else:
 * 							localListInner.append(pvd[i].getAsLong(j))             # <<<<<<<<<<<<<<
 * 
 * 				elif dtcheck==CAFE_CHAR:
 */
          /*else*/ {
            __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong(__pyx_v_j)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_6); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          }
          __pyx_L44:;
        }

        /* "PyCafe.pyx":1860
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))
 * 				elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 
 * 					for j in range(0, pvd[i].getNelem()):
 */
        break;

        /* "PyCafe.pyx":1869
 * 							localListInner.append(pvd[i].getAsLong(j))
 * 
 * 				elif dtcheck==CAFE_CHAR:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j)) #<unsigned char> pvd[i].getAsChar(j))
 */
        case CAFE_CHAR:

        /* "PyCafe.pyx":1870
 * 
 * 				elif dtcheck==CAFE_CHAR:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(pvd[i].getAsLong(j)) #<unsigned char> pvd[i].getAsChar(j))
 * 				elif dtcheck==CAFE_LONG:
 */
        __pyx_t_10 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_10; __pyx_t_12+=1) {
          __pyx_v_j = __pyx_t_12;

          /* "PyCafe.pyx":1871
 * 				elif dtcheck==CAFE_CHAR:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j)) #<unsigned char> pvd[i].getAsChar(j))             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_LONG:
 * 					for j in range(0, pvd[i].getNelem()):
 */
          __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong(__pyx_v_j)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_6); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }

        /* "PyCafe.pyx":1869
 * 							localListInner.append(pvd[i].getAsLong(j))
 * 
 * 				elif dtcheck==CAFE_CHAR:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j)) #<unsigned char> pvd[i].getAsChar(j))
 */
        break;

        /* "PyCafe.pyx":1872
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j)) #<unsigned char> pvd[i].getAsChar(j))
 * 				elif dtcheck==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 */
        case CAFE_LONG:

        /* "PyCafe.pyx":1873
 * 						localListInner.append(pvd[i].getAsLong(j)) #<unsigned char> pvd[i].getAsChar(j))
 * 				elif dtcheck==CAFE_LONG:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_DOUBLE:
 */
        __pyx_t_10 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_10; __pyx_t_12+=1) {
          __pyx_v_j = __pyx_t_12;

          /* "PyCafe.pyx":1874
 * 				elif dtcheck==CAFE_LONG:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_DOUBLE:
 * 					for j in range(0, pvd[i].getNelem()):
 */
          __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong(__pyx_v_j)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_6); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }

        /* "PyCafe.pyx":1872
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j)) #<unsigned char> pvd[i].getAsChar(j))
 * 				elif dtcheck==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 */
        break;

        /* "PyCafe.pyx":1875
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))
 */
        case CAFE_DOUBLE:

        /* "PyCafe.pyx":1876
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_DOUBLE:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(pvd[i].getAsDouble(j))
 * 					else:
 */
        __pyx_t_10 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_10; __pyx_t_12+=1) {
          __pyx_v_j = __pyx_t_12;

          /* "PyCafe.pyx":1877
 * 				elif dtcheck==CAFE_DOUBLE:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))             # <<<<<<<<<<<<<<
 * 					else:
 * 						for j in range(0, pvd[i].getNelem()):
 */
          __pyx_t_6 = PyFloat_FromDouble((__pyx_v_pvd[__pyx_v_i]).getAsDouble(__pyx_v_j)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_6); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        /*else*/ {

          /* "PyCafe.pyx":1879
 * 						localListInner.append(pvd[i].getAsDouble(j))
 * 					else:
 * 						for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 							localListInner.append(0) #no data
 * 				localList.append(localListInner)
 */
          __pyx_t_13 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
          for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_13; __pyx_t_12+=1) {
            __pyx_v_j = __pyx_t_12;

            /* "PyCafe.pyx":1880
 * 					else:
 * 						for j in range(0, pvd[i].getNelem()):
 * 							localListInner.append(0) #no data             # <<<<<<<<<<<<<<
 * 				localList.append(localListInner)
 * 
 */
            __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_int_0); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1880; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
        }

        /* "PyCafe.pyx":1875
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))
 */
        break;
        default: break;
      }

      /* "PyCafe.pyx":1881
 * 						for j in range(0, pvd[i].getNelem()):
 * 							localListInner.append(0) #no data
 * 				localList.append(localListInner)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_v_localListInner); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1881; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L34:;
  }

  /* "PyCafe.pyx":1886
 * 	#free(pvd)
 * 
 * 		return localList, status, vStatus # use vstatus instead of statusList (as cache is NoWait)             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __pyx_convert_vector_to_py_int(__pyx_v_vStatus); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_localList);
  __Pyx_GIVEREF(__pyx_v_localList);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_localList);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_5);
  __pyx_t_6 = 0;
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":1700
 * 
 * 	##################################################################################
 * 	def  getCompoundList(self, handleList, str dt='native'):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("PyCafe.CyCafe.getCompoundList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_localList);
  __Pyx_XDECREF(__pyx_v_statusList);
  __Pyx_XDECREF(__pyx_v_localListInner);
  __Pyx_XDECREF(__pyx_v_handleList);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":1896
 * 
 * 	##################################################################################
 * 	def getStrCache(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.getCache(handlePV,'str')
 * 	##################################################################################
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_147getStrCache(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_147getStrCache(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getStrCache (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_146getStrCache(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_146getStrCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getStrCache", 0);

  /* "PyCafe.pyx":1897
 * 	##################################################################################
 * 	def getStrCache(self, handlePV):
 * 		return self.getCache(handlePV,'str')             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getCache); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_3) {
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_handlePV);
  __Pyx_GIVEREF(__pyx_v_handlePV);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_handlePV);
  __Pyx_INCREF(__pyx_n_u_str);
  __Pyx_GIVEREF(__pyx_n_u_str);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_u_str);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":1896
 * 
 * 	##################################################################################
 * 	def getStrCache(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.getCache(handlePV,'str')
 * 	##################################################################################
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.getStrCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":1901
 * 
 * 	##################################################################################
 * 	def  getIntCache(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.getCache(handlePV,'int')
 * 	##################################################################################
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_149getIntCache(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_149getIntCache(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getIntCache (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_148getIntCache(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_148getIntCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getIntCache", 0);

  /* "PyCafe.pyx":1902
 * 	##################################################################################
 * 	def  getIntCache(self, handlePV):
 * 		return self.getCache(handlePV,'int')             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getCache); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1902; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1902; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_3) {
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_handlePV);
  __Pyx_GIVEREF(__pyx_v_handlePV);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_handlePV);
  __Pyx_INCREF(__pyx_n_u_int);
  __Pyx_GIVEREF(__pyx_n_u_int);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_u_int);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1902; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":1901
 * 
 * 	##################################################################################
 * 	def  getIntCache(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.getCache(handlePV,'int')
 * 	##################################################################################
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.getIntCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":1906
 * 
 * 	##################################################################################
 * 	def  getFloatCache(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.getCache(handlePV,'float')
 * 	##################################################################################
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_151getFloatCache(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_151getFloatCache(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getFloatCache (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_150getFloatCache(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_150getFloatCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFloatCache", 0);

  /* "PyCafe.pyx":1907
 * 	##################################################################################
 * 	def  getFloatCache(self, handlePV):
 * 		return self.getCache(handlePV,'float')             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getCache); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1907; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1907; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_3) {
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_handlePV);
  __Pyx_GIVEREF(__pyx_v_handlePV);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_handlePV);
  __Pyx_INCREF(__pyx_n_u_float);
  __Pyx_GIVEREF(__pyx_n_u_float);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_u_float);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1907; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":1906
 * 
 * 	##################################################################################
 * 	def  getFloatCache(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.getCache(handlePV,'float')
 * 	##################################################################################
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.getFloatCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":1911
 * 
 * 	##################################################################################
 * 	def  getCache(self, handlePV, str dt='native'):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int handle=0
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_153getCache(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_153getCache(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handlePV = 0;
  PyObject *__pyx_v_dt = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getCache (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handlePV,&__pyx_n_s_dt,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject*)__pyx_n_u_native);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handlePV)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getCache") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1911; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_handlePV = values[0];
    __pyx_v_dt = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getCache", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1911; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.getCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dt), (&PyUnicode_Type), 1, "dt", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_152getCache(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handlePV, __pyx_v_dt);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_152getCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, PyObject *__pyx_v_dt) {
  unsigned int __pyx_v_handle;
  long __pyx_v_dtr;
  PyObject *__pyx_v_status = NULL;
  unsigned int __pyx_v_dtcheck;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getCache", 0);

  /* "PyCafe.pyx":1912
 * 	##################################################################################
 * 	def  getCache(self, handlePV, str dt='native'):
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":1914
 * 		cdef unsigned int handle=0
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":1915
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":1914
 * 		cdef unsigned int handle=0
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":1916
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":1917
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getCache. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":1916
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":1919
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getCache. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__152, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":1923
 * 
 * 
 * 		cdef long dtr=0             # <<<<<<<<<<<<<<
 * 		status=self.hh.getDataTypeRequest(handle, dtr)
 * 
 */
  __pyx_v_dtr = 0;

  /* "PyCafe.pyx":1924
 * 
 * 		cdef long dtr=0
 * 		status=self.hh.getDataTypeRequest(handle, dtr)             # <<<<<<<<<<<<<<
 * 
 * 		if status != ICAFE_NORMAL:
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->hh.getDataTypeRequest(__pyx_v_handle, __pyx_v_dtr)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_status = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "PyCafe.pyx":1926
 * 		status=self.hh.getDataTypeRequest(handle, dtr)
 * 
 * 		if status != ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(ICAFE_NORMAL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1926; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyObject_RichCompare(__pyx_v_status, __pyx_t_5, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1926; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1926; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_1) {

    /* "PyCafe.pyx":1927
 * 
 * 		if status != ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    __pyx_t_1 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":1928
 * 		if status != ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
      __pyx_t_1 = ((__pyx_v_handle == 0) != 0);
      if (__pyx_t_1) {

        /* "PyCafe.pyx":1929
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 */
        __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_status); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_v_self->_c_cafe->printStatusMessage(__pyx_t_7);

        /* "PyCafe.pyx":1928
 * 		if status != ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
        goto __pyx_L8;
      }

      /* "PyCafe.pyx":1931
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getCache. Status = %d" %status)
 * 
 */
      /*else*/ {
        __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_status); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1931; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_v_self->_c_cafe->printStatus(__pyx_v_handle, __pyx_t_7);
      }
      __pyx_L8:;

      /* "PyCafe.pyx":1927
 * 
 * 		if status != ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    }

    /* "PyCafe.pyx":1932
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getCache. Status = %d" %status)             # <<<<<<<<<<<<<<
 * 
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:
 */
    __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_7, __pyx_v_status); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1932; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1932; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1932; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1932; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":1926
 * 		status=self.hh.getDataTypeRequest(handle, dtr)
 * 
 * 		if status != ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  }

  /* "PyCafe.pyx":1934
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getCache. Status = %d" %status)
 * 
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  switch (__pyx_v_dtr) {
    case CAFE_NO_ACCESS:
    case CAFE_TYPENOTCONN:
    __pyx_t_1 = 1;
    break;
    default:
    __pyx_t_1 = 0;
    break;
  }
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":1935
 * 
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)
 */
    __pyx_t_2 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":1936
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)
 * 				else:
 */
      __pyx_t_2 = ((__pyx_v_handle == 0) != 0);
      if (__pyx_t_2) {

        /* "PyCafe.pyx":1937
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)             # <<<<<<<<<<<<<<
 * 				else:
 * 					self._c_cafe.printStatus(handle,ICAFE_TYPENOTCONN)
 */
        __pyx_v_self->_c_cafe->printStatusMessage(ICAFE_TYPENOTCONN);

        /* "PyCafe.pyx":1936
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)
 * 				else:
 */
        goto __pyx_L10;
      }

      /* "PyCafe.pyx":1939
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)
 * 				else:
 * 					self._c_cafe.printStatus(handle,ICAFE_TYPENOTCONN)             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getCache. Status = %d" %ICAFE_TYPENOTCONN)
 * 
 */
      /*else*/ {
        __pyx_v_self->_c_cafe->printStatus(__pyx_v_handle, ICAFE_TYPENOTCONN);
      }
      __pyx_L10:;

      /* "PyCafe.pyx":1935
 * 
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)
 */
    }

    /* "PyCafe.pyx":1940
 * 				else:
 * 					self._c_cafe.printStatus(handle,ICAFE_TYPENOTCONN)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getCache. Status = %d" %ICAFE_TYPENOTCONN)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_6 = __Pyx_PyInt_From_CAFE_CFT_STATE(ICAFE_TYPENOTCONN); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_7, __pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":1934
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getCache. Status = %d" %status)
 * 
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  }

  /* "PyCafe.pyx":1943
 * 
 * 
 * 		cdef unsigned int dtcheck =	dtr             # <<<<<<<<<<<<<<
 * 		dtcheck=getMatchedDataType(dt, dtr)
 * 
 */
  __pyx_v_dtcheck = __pyx_v_dtr;

  /* "PyCafe.pyx":1944
 * 
 * 		cdef unsigned int dtcheck =	dtr
 * 		dtcheck=getMatchedDataType(dt, dtr)             # <<<<<<<<<<<<<<
 * 
 * 		if dtcheck in [CAFE_STRING]:
 */
  __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_dtr); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __pyx_f_6PyCafe_getMatchedDataType(__pyx_v_dt, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_6); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_dtcheck = __pyx_t_4;

  /* "PyCafe.pyx":1946
 * 		dtcheck=getMatchedDataType(dt, dtr)
 * 
 * 		if dtcheck in [CAFE_STRING]:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.getCacheString(handle, self.valStr)
 * 
 */
  switch (__pyx_v_dtcheck) {
    case CAFE_STRING:

    /* "PyCafe.pyx":1947
 * 
 * 		if dtcheck in [CAFE_STRING]:
 * 			status=self._c_cafe.getCacheString(handle, self.valStr)             # <<<<<<<<<<<<<<
 * 
 * 			if status==ICAFE_NORMAL:
 */
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->_c_cafe->getCacheString(__pyx_v_handle, __pyx_v_self->valStr)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF_SET(__pyx_v_status, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "PyCafe.pyx":1949
 * 			status=self._c_cafe.getCacheString(handle, self.valStr)
 * 
 * 			if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 				return self.valStr
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:
 */
    __pyx_t_6 = __Pyx_PyInt_From_int(ICAFE_NORMAL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_status, __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "PyCafe.pyx":1950
 * 
 * 			if status==ICAFE_NORMAL:
 * 				return self.valStr             # <<<<<<<<<<<<<<
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:
 * 			status=self._c_cafe.getCacheLong(handle, self.valInt)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_self->valStr); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1950; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L0;

      /* "PyCafe.pyx":1949
 * 			status=self._c_cafe.getCacheString(handle, self.valStr)
 * 
 * 			if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 				return self.valStr
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:
 */
    }

    /* "PyCafe.pyx":1946
 * 		dtcheck=getMatchedDataType(dt, dtr)
 * 
 * 		if dtcheck in [CAFE_STRING]:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.getCacheString(handle, self.valStr)
 * 
 */
    break;

    /* "PyCafe.pyx":1951
 * 			if status==ICAFE_NORMAL:
 * 				return self.valStr
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.getCacheLong(handle, self.valInt)
 * 
 */
    case CAFE_SHORT:
    case CAFE_CHAR:
    case CAFE_LONG:

    /* "PyCafe.pyx":1952
 * 				return self.valStr
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:
 * 			status=self._c_cafe.getCacheLong(handle, self.valInt)             # <<<<<<<<<<<<<<
 * 
 * 			if status==ICAFE_NORMAL:
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->_c_cafe->getCacheLong(__pyx_v_handle, __pyx_v_self->valInt)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF_SET(__pyx_v_status, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "PyCafe.pyx":1954
 * 			status=self._c_cafe.getCacheLong(handle, self.valInt)
 * 
 * 			if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 				return self.valInt
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(ICAFE_NORMAL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_RichCompare(__pyx_v_status, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_2) {

      /* "PyCafe.pyx":1955
 * 
 * 			if status==ICAFE_NORMAL:
 * 				return self.valInt             # <<<<<<<<<<<<<<
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:
 * 			status=self._c_cafe.getCacheDouble(handle, self.valFloat)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->valInt); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1955; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      goto __pyx_L0;

      /* "PyCafe.pyx":1954
 * 			status=self._c_cafe.getCacheLong(handle, self.valInt)
 * 
 * 			if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 				return self.valInt
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:
 */
    }

    /* "PyCafe.pyx":1951
 * 			if status==ICAFE_NORMAL:
 * 				return self.valStr
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.getCacheLong(handle, self.valInt)
 * 
 */
    break;

    /* "PyCafe.pyx":1956
 * 			if status==ICAFE_NORMAL:
 * 				return self.valInt
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.getCacheDouble(handle, self.valFloat)
 * 
 */
    case CAFE_FLOAT:
    case CAFE_DOUBLE:

    /* "PyCafe.pyx":1957
 * 				return self.valInt
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:
 * 			status=self._c_cafe.getCacheDouble(handle, self.valFloat)             # <<<<<<<<<<<<<<
 * 
 * 			if status==ICAFE_NORMAL:
 */
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->_c_cafe->getCacheDouble(__pyx_v_handle, __pyx_v_self->valFloat)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF_SET(__pyx_v_status, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "PyCafe.pyx":1959
 * 			status=self._c_cafe.getCacheDouble(handle, self.valFloat)
 * 
 * 			if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 				return self.valFloat
 * 		elif dtcheck==CAFE_ENUM:
 */
    __pyx_t_6 = __Pyx_PyInt_From_int(ICAFE_NORMAL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_status, __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "PyCafe.pyx":1960
 * 
 * 			if status==ICAFE_NORMAL:
 * 				return self.valFloat             # <<<<<<<<<<<<<<
 * 		elif dtcheck==CAFE_ENUM:
 * 			#if enum, string taken as native
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->valFloat); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1960; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L0;

      /* "PyCafe.pyx":1959
 * 			status=self._c_cafe.getCacheDouble(handle, self.valFloat)
 * 
 * 			if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 				return self.valFloat
 * 		elif dtcheck==CAFE_ENUM:
 */
    }

    /* "PyCafe.pyx":1956
 * 			if status==ICAFE_NORMAL:
 * 				return self.valInt
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.getCacheDouble(handle, self.valFloat)
 * 
 */
    break;

    /* "PyCafe.pyx":1961
 * 			if status==ICAFE_NORMAL:
 * 				return self.valFloat
 * 		elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 			#if enum, string taken as native
 * 			if self._c_cafe.isEnum(handle):
 */
    case CAFE_ENUM:

    /* "PyCafe.pyx":1963
 * 		elif dtcheck==CAFE_ENUM:
 * 			#if enum, string taken as native
 * 			if self._c_cafe.isEnum(handle):             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.getCacheString(handle, self.valStr)
 * 
 */
    __pyx_t_2 = (__pyx_v_self->_c_cafe->isEnum(__pyx_v_handle) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":1964
 * 			#if enum, string taken as native
 * 			if self._c_cafe.isEnum(handle):
 * 				status=self._c_cafe.getCacheString(handle, self.valStr)             # <<<<<<<<<<<<<<
 * 
 * 				if status==ICAFE_NORMAL:
 */
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->_c_cafe->getCacheString(__pyx_v_handle, __pyx_v_self->valStr)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF_SET(__pyx_v_status, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "PyCafe.pyx":1966
 * 				status=self._c_cafe.getCacheString(handle, self.valStr)
 * 
 * 				if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 					return self.valStr
 * 			else:
 */
      __pyx_t_5 = __Pyx_PyInt_From_int(ICAFE_NORMAL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1966; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyObject_RichCompare(__pyx_v_status, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1966; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1966; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__pyx_t_2) {

        /* "PyCafe.pyx":1967
 * 
 * 				if status==ICAFE_NORMAL:
 * 					return self.valStr             # <<<<<<<<<<<<<<
 * 			else:
 * 				status=self._c_cafe.getCacheLong(handle, self.valInt)
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_6 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_self->valStr); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_r = __pyx_t_6;
        __pyx_t_6 = 0;
        goto __pyx_L0;

        /* "PyCafe.pyx":1966
 * 				status=self._c_cafe.getCacheString(handle, self.valStr)
 * 
 * 				if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 					return self.valStr
 * 			else:
 */
      }

      /* "PyCafe.pyx":1963
 * 		elif dtcheck==CAFE_ENUM:
 * 			#if enum, string taken as native
 * 			if self._c_cafe.isEnum(handle):             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.getCacheString(handle, self.valStr)
 * 
 */
      goto __pyx_L14;
    }

    /* "PyCafe.pyx":1969
 * 					return self.valStr
 * 			else:
 * 				status=self._c_cafe.getCacheLong(handle, self.valInt)             # <<<<<<<<<<<<<<
 * 
 * 				if status ==1:
 */
    /*else*/ {
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->_c_cafe->getCacheLong(__pyx_v_handle, __pyx_v_self->valInt)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_status, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "PyCafe.pyx":1971
 * 				status=self._c_cafe.getCacheLong(handle, self.valInt)
 * 
 * 				if status ==1:             # <<<<<<<<<<<<<<
 * 					return self.valInt
 * 		else:
 */
      __pyx_t_6 = __Pyx_PyInt_EqObjC(__pyx_v_status, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__pyx_t_2) {

        /* "PyCafe.pyx":1972
 * 
 * 				if status ==1:
 * 					return self.valInt             # <<<<<<<<<<<<<<
 * 		else:
 * 			print ("This line in PyCafe def getCache should never appear!")
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->valInt); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_r = __pyx_t_6;
        __pyx_t_6 = 0;
        goto __pyx_L0;

        /* "PyCafe.pyx":1971
 * 				status=self._c_cafe.getCacheLong(handle, self.valInt)
 * 
 * 				if status ==1:             # <<<<<<<<<<<<<<
 * 					return self.valInt
 * 		else:
 */
      }
    }
    __pyx_L14:;

    /* "PyCafe.pyx":1961
 * 			if status==ICAFE_NORMAL:
 * 				return self.valFloat
 * 		elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 			#if enum, string taken as native
 * 			if self._c_cafe.isEnum(handle):
 */
    break;
    default:

    /* "PyCafe.pyx":1974
 * 					return self.valInt
 * 		else:
 * 			print ("This line in PyCafe def getCache should never appear!")             # <<<<<<<<<<<<<<
 * 			return 0
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__153, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1974; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "PyCafe.pyx":1975
 * 		else:
 * 			print ("This line in PyCafe def getCache should never appear!")
 * 			return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;
    break;
  }

  /* "PyCafe.pyx":1979
 * 
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  __pyx_t_6 = __Pyx_PyInt_From_int(ICAFE_NORMAL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1979; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyObject_RichCompare(__pyx_v_status, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1979; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1979; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_2) {

    /* "PyCafe.pyx":1980
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    __pyx_t_2 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":1981
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
      __pyx_t_2 = ((__pyx_v_handle == 0) != 0);
      if (__pyx_t_2) {

        /* "PyCafe.pyx":1982
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 */
        __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_status); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_v_self->_c_cafe->printStatusMessage(__pyx_t_7);

        /* "PyCafe.pyx":1981
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
        goto __pyx_L19;
      }

      /* "PyCafe.pyx":1984
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def get. Status = %d" %status)
 * 
 */
      /*else*/ {
        __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_status); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_v_self->_c_cafe->printStatus(__pyx_v_handle, __pyx_t_7);
      }
      __pyx_L19:;

      /* "PyCafe.pyx":1980
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    }

    /* "PyCafe.pyx":1985
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def get. Status = %d" %status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_5 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_3, __pyx_v_status); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":1979
 * 
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  }

  /* "PyCafe.pyx":1911
 * 
 * 	##################################################################################
 * 	def  getCache(self, handlePV, str dt='native'):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int handle=0
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("PyCafe.CyCafe.getCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":1993
 * 
 * 	##################################################################################
 * 	def  getStrArrayCache(self, handlePV, bint asnumpy=False):             # <<<<<<<<<<<<<<
 * 		return self.getArrayCache(handlePV, dt='str',asnumpy=asnumpy)
 * 	##################################################################################
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_155getStrArrayCache(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_155getStrArrayCache(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handlePV = 0;
  int __pyx_v_asnumpy;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getStrArrayCache (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handlePV,&__pyx_n_s_asnumpy,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handlePV)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_asnumpy);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getStrArrayCache") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1993; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_handlePV = values[0];
    if (values[1]) {
      __pyx_v_asnumpy = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_asnumpy == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1993; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_asnumpy = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getStrArrayCache", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1993; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.getStrArrayCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_154getStrArrayCache(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handlePV, __pyx_v_asnumpy);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_154getStrArrayCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, int __pyx_v_asnumpy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getStrArrayCache", 0);

  /* "PyCafe.pyx":1994
 * 	##################################################################################
 * 	def  getStrArrayCache(self, handlePV, bint asnumpy=False):
 * 		return self.getArrayCache(handlePV, dt='str',asnumpy=asnumpy)             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getArrayCache); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_handlePV);
  __Pyx_GIVEREF(__pyx_v_handlePV);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_handlePV);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dt, __pyx_n_u_str) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_asnumpy); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_asnumpy, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":1993
 * 
 * 	##################################################################################
 * 	def  getStrArrayCache(self, handlePV, bint asnumpy=False):             # <<<<<<<<<<<<<<
 * 		return self.getArrayCache(handlePV, dt='str',asnumpy=asnumpy)
 * 	##################################################################################
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PyCafe.CyCafe.getStrArrayCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":1998
 * 
 * 	##################################################################################
 * 	def  getIntArrayCache(self, handlePV, bint asnumpy=False):             # <<<<<<<<<<<<<<
 * 		return self.getArrayCache(handlePV, dt='int', asnumpy=asnumpy)
 * 	##################################################################################
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_157getIntArrayCache(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_157getIntArrayCache(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handlePV = 0;
  int __pyx_v_asnumpy;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getIntArrayCache (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handlePV,&__pyx_n_s_asnumpy,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handlePV)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_asnumpy);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getIntArrayCache") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1998; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_handlePV = values[0];
    if (values[1]) {
      __pyx_v_asnumpy = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_asnumpy == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1998; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_asnumpy = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getIntArrayCache", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1998; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.getIntArrayCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_156getIntArrayCache(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handlePV, __pyx_v_asnumpy);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_156getIntArrayCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, int __pyx_v_asnumpy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getIntArrayCache", 0);

  /* "PyCafe.pyx":1999
 * 	##################################################################################
 * 	def  getIntArrayCache(self, handlePV, bint asnumpy=False):
 * 		return self.getArrayCache(handlePV, dt='int', asnumpy=asnumpy)             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getArrayCache); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1999; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1999; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_handlePV);
  __Pyx_GIVEREF(__pyx_v_handlePV);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_handlePV);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1999; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dt, __pyx_n_u_int) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1999; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_asnumpy); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1999; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_asnumpy, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1999; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1999; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":1998
 * 
 * 	##################################################################################
 * 	def  getIntArrayCache(self, handlePV, bint asnumpy=False):             # <<<<<<<<<<<<<<
 * 		return self.getArrayCache(handlePV, dt='int', asnumpy=asnumpy)
 * 	##################################################################################
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PyCafe.CyCafe.getIntArrayCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2003
 * 
 * 	##################################################################################
 * 	def  getFloatArrayCache(self, handlePV, bint asnumpy=False):             # <<<<<<<<<<<<<<
 * 		return self.getArrayCache(handlePV,dt='float',asnumpy=asnumpy)
 * 	##################################################################################
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_159getFloatArrayCache(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_159getFloatArrayCache(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handlePV = 0;
  int __pyx_v_asnumpy;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getFloatArrayCache (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handlePV,&__pyx_n_s_asnumpy,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handlePV)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_asnumpy);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getFloatArrayCache") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2003; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_handlePV = values[0];
    if (values[1]) {
      __pyx_v_asnumpy = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_asnumpy == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2003; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_asnumpy = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getFloatArrayCache", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2003; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.getFloatArrayCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_158getFloatArrayCache(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handlePV, __pyx_v_asnumpy);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_158getFloatArrayCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, int __pyx_v_asnumpy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFloatArrayCache", 0);

  /* "PyCafe.pyx":2004
 * 	##################################################################################
 * 	def  getFloatArrayCache(self, handlePV, bint asnumpy=False):
 * 		return self.getArrayCache(handlePV,dt='float',asnumpy=asnumpy)             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getArrayCache); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_handlePV);
  __Pyx_GIVEREF(__pyx_v_handlePV);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_handlePV);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dt, __pyx_n_u_float) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_asnumpy); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_asnumpy, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2003
 * 
 * 	##################################################################################
 * 	def  getFloatArrayCache(self, handlePV, bint asnumpy=False):             # <<<<<<<<<<<<<<
 * 		return self.getArrayCache(handlePV,dt='float',asnumpy=asnumpy)
 * 	##################################################################################
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PyCafe.CyCafe.getFloatArrayCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2008
 * 
 * 	##################################################################################
 * 	def  getArrayCache(self, handlePV, str dt='native', bint asnumpy=False):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 		#Typed Memoryviews from K.W. Smith
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_161getArrayCache(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_161getArrayCache(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handlePV = 0;
  PyObject *__pyx_v_dt = 0;
  int __pyx_v_asnumpy;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getArrayCache (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handlePV,&__pyx_n_s_dt,&__pyx_n_s_asnumpy,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject*)__pyx_n_u_native);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handlePV)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_asnumpy);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getArrayCache") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2008; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_handlePV = values[0];
    __pyx_v_dt = ((PyObject*)values[1]);
    if (values[2]) {
      __pyx_v_asnumpy = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_asnumpy == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2008; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_asnumpy = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getArrayCache", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2008; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.getArrayCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dt), (&PyUnicode_Type), 1, "dt", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_160getArrayCache(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handlePV, __pyx_v_dt, __pyx_v_asnumpy);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_160getArrayCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, PyObject *__pyx_v_dt, int __pyx_v_asnumpy) {
  unsigned int __pyx_v_handle;
  int *__pyx_v_ival;
  double *__pyx_v_dval;
  dbr_string_t *__pyx_v_sval;
  __Pyx_memviewslice __pyx_v_mvInt = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_mvDouble = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyArrayObject *__pyx_v_arr = 0;
  long __pyx_v_dtr;
  PyObject *__pyx_v_status = NULL;
  unsigned int __pyx_v_dtcheck;
  PyObject *__pyx_v_locallist = NULL;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  long __pyx_t_8;
  int __pyx_t_9;
  struct __pyx_array_obj *__pyx_t_10 = NULL;
  __Pyx_memviewslice __pyx_t_11 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  Py_ssize_t __pyx_t_15;
  __Pyx_memviewslice __pyx_t_16 = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getArrayCache", 0);

  /* "PyCafe.pyx":2019
 * 		#allowing sharing of data buffers without copying
 * 
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":2021
 * 		cdef unsigned int handle=0
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":2022
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2022; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":2021
 * 		cdef unsigned int handle=0
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2023
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":2024
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getArrayCache. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2024; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2024; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2024; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":2023
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2026
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getArrayCache. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__154, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2026; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2026; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":2038
 * 			#dbr_string_t [::1] mvStr
 * 			cnp.ndarray arr
 * 			long dtr=0             # <<<<<<<<<<<<<<
 * 
 * 		status=self.hh.getDataTypeRequest(handle, dtr)
 */
  __pyx_v_dtr = 0;

  /* "PyCafe.pyx":2040
 * 			long dtr=0
 * 
 * 		status=self.hh.getDataTypeRequest(handle, dtr)             # <<<<<<<<<<<<<<
 * 
 * 		if status != ICAFE_NORMAL:
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->hh.getDataTypeRequest(__pyx_v_handle, __pyx_v_dtr)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_status = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "PyCafe.pyx":2042
 * 		status=self.hh.getDataTypeRequest(handle, dtr)
 * 
 * 		if status != ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(ICAFE_NORMAL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2042; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyObject_RichCompare(__pyx_v_status, __pyx_t_5, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2042; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2042; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_1) {

    /* "PyCafe.pyx":2043
 * 
 * 		if status != ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    __pyx_t_1 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":2044
 * 		if status != ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
      __pyx_t_1 = ((__pyx_v_handle == 0) != 0);
      if (__pyx_t_1) {

        /* "PyCafe.pyx":2045
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 */
        __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_status); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2045; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_v_self->_c_cafe->printStatusMessage(__pyx_t_7);

        /* "PyCafe.pyx":2044
 * 		if status != ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
        goto __pyx_L8;
      }

      /* "PyCafe.pyx":2047
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getArrayCache. Status = %d" %status)
 * 
 */
      /*else*/ {
        __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_status); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2047; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_v_self->_c_cafe->printStatus(__pyx_v_handle, __pyx_t_7);
      }
      __pyx_L8:;

      /* "PyCafe.pyx":2043
 * 
 * 		if status != ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    }

    /* "PyCafe.pyx":2048
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getArrayCache. Status = %d" %status)             # <<<<<<<<<<<<<<
 * 
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:
 */
    __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_8, __pyx_v_status); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":2042
 * 		status=self.hh.getDataTypeRequest(handle, dtr)
 * 
 * 		if status != ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  }

  /* "PyCafe.pyx":2050
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getArrayCache. Status = %d" %status)
 * 
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  switch (__pyx_v_dtr) {
    case CAFE_NO_ACCESS:
    case CAFE_TYPENOTCONN:
    __pyx_t_1 = 1;
    break;
    default:
    __pyx_t_1 = 0;
    break;
  }
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":2051
 * 
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)
 */
    __pyx_t_2 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":2052
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)
 * 				else:
 */
      __pyx_t_2 = ((__pyx_v_handle == 0) != 0);
      if (__pyx_t_2) {

        /* "PyCafe.pyx":2053
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)             # <<<<<<<<<<<<<<
 * 				else:
 * 					self._c_cafe.printStatus(handle,ICAFE_TYPENOTCONN)
 */
        __pyx_v_self->_c_cafe->printStatusMessage(ICAFE_TYPENOTCONN);

        /* "PyCafe.pyx":2052
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)
 * 				else:
 */
        goto __pyx_L10;
      }

      /* "PyCafe.pyx":2055
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)
 * 				else:
 * 					self._c_cafe.printStatus(handle,ICAFE_TYPENOTCONN)             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getArrayCache. Status = %d" %ICAFE_TYPENOTCONN)
 * 
 */
      /*else*/ {
        __pyx_v_self->_c_cafe->printStatus(__pyx_v_handle, ICAFE_TYPENOTCONN);
      }
      __pyx_L10:;

      /* "PyCafe.pyx":2051
 * 
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(ICAFE_TYPENOTCONN)
 */
    }

    /* "PyCafe.pyx":2056
 * 				else:
 * 					self._c_cafe.printStatus(handle,ICAFE_TYPENOTCONN)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getArrayCache. Status = %d" %ICAFE_TYPENOTCONN)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_6 = __Pyx_PyInt_From_CAFE_CFT_STATE(ICAFE_TYPENOTCONN); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_8, __pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":2050
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getArrayCache. Status = %d" %status)
 * 
 * 		elif dtr in [CAFE_NO_ACCESS, CAFE_TYPENOTCONN]:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  }

  /* "PyCafe.pyx":2060
 * 
 * 
 * 		cdef unsigned int dtcheck =	dtr             # <<<<<<<<<<<<<<
 * 		dtcheck=getMatchedDataType(dt, dtr)
 * 
 */
  __pyx_v_dtcheck = __pyx_v_dtr;

  /* "PyCafe.pyx":2061
 * 
 * 		cdef unsigned int dtcheck =	dtr
 * 		dtcheck=getMatchedDataType(dt, dtr)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_dtr); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2061; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __pyx_f_6PyCafe_getMatchedDataType(__pyx_v_dt, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2061; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_6); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2061; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_dtcheck = __pyx_t_4;

  /* "PyCafe.pyx":2067
 * 		#It may be a ctypedef alias, or it may be a structured type declared with e.g. cdef struct
 * 
 * 		if dtcheck in [CAFE_STRING]:             # <<<<<<<<<<<<<<
 * 			sval = <char[40]*>malloc( self.hh.getNelemToRetrieveFromCache(handle) * sizeof(dbr_string_t))
 * 
 */
  switch (__pyx_v_dtcheck) {
    case CAFE_STRING:

    /* "PyCafe.pyx":2068
 * 
 * 		if dtcheck in [CAFE_STRING]:
 * 			sval = <char[40]*>malloc( self.hh.getNelemToRetrieveFromCache(handle) * sizeof(dbr_string_t))             # <<<<<<<<<<<<<<
 * 
 * 			status=self._c_cafe.getCacheDbrStringArray(handle, sval)
 */
    __pyx_v_sval = ((char (*)[40])malloc((__pyx_v_self->hh.getNelemToRetrieveFromCache(__pyx_v_handle) * (sizeof(dbr_string_t)))));

    /* "PyCafe.pyx":2070
 * 			sval = <char[40]*>malloc( self.hh.getNelemToRetrieveFromCache(handle) * sizeof(dbr_string_t))
 * 
 * 			status=self._c_cafe.getCacheDbrStringArray(handle, sval)             # <<<<<<<<<<<<<<
 * 
 * 			locallist=[]
 */
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->_c_cafe->getCacheDbrStringArray(__pyx_v_handle, __pyx_v_sval)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2070; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF_SET(__pyx_v_status, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "PyCafe.pyx":2072
 * 			status=self._c_cafe.getCacheDbrStringArray(handle, sval)
 * 
 * 			locallist=[]             # <<<<<<<<<<<<<<
 * 
 * 			if status==ICAFE_NORMAL:
 */
    __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2072; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_v_locallist = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "PyCafe.pyx":2074
 * 			locallist=[]
 * 
 * 			if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 
 * 				for i in range(0,self.hh.getNelemToRetrieveFromCache(handle)):
 */
    __pyx_t_6 = __Pyx_PyInt_From_int(ICAFE_NORMAL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_status, __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "PyCafe.pyx":2076
 * 			if status==ICAFE_NORMAL:
 * 
 * 				for i in range(0,self.hh.getNelemToRetrieveFromCache(handle)):             # <<<<<<<<<<<<<<
 * 					locallist.append(sval[i])
 * 
 */
      __pyx_t_4 = __pyx_v_self->hh.getNelemToRetrieveFromCache(__pyx_v_handle);
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_4; __pyx_t_8+=1) {
        __pyx_v_i = __pyx_t_8;

        /* "PyCafe.pyx":2077
 * 
 * 				for i in range(0,self.hh.getNelemToRetrieveFromCache(handle)):
 * 					locallist.append(sval[i])             # <<<<<<<<<<<<<<
 * 
 * 				free(sval)
 */
        __pyx_t_5 = __Pyx_PyObject_FromString((__pyx_v_sval[__pyx_v_i])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2077; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_locallist, __pyx_t_5); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2077; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }

      /* "PyCafe.pyx":2079
 * 					locallist.append(sval[i])
 * 
 * 				free(sval)             # <<<<<<<<<<<<<<
 * 				return locallist
 * 
 */
      free(__pyx_v_sval);

      /* "PyCafe.pyx":2080
 * 
 * 				free(sval)
 * 				return locallist             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_locallist);
      __pyx_r = __pyx_v_locallist;
      goto __pyx_L0;

      /* "PyCafe.pyx":2074
 * 			locallist=[]
 * 
 * 			if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 
 * 				for i in range(0,self.hh.getNelemToRetrieveFromCache(handle)):
 */
    }

    /* "PyCafe.pyx":2067
 * 		#It may be a ctypedef alias, or it may be a structured type declared with e.g. cdef struct
 * 
 * 		if dtcheck in [CAFE_STRING]:             # <<<<<<<<<<<<<<
 * 			sval = <char[40]*>malloc( self.hh.getNelemToRetrieveFromCache(handle) * sizeof(dbr_string_t))
 * 
 */
    break;

    /* "PyCafe.pyx":2083
 * 
 * 
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:             # <<<<<<<<<<<<<<
 * 
 * 			ival = <int *>malloc( self.hh.getNelemToRetrieveFromCache(handle) * sizeof(int))
 */
    case CAFE_SHORT:
    case CAFE_CHAR:
    case CAFE_LONG:

    /* "PyCafe.pyx":2085
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:
 * 
 * 			ival = <int *>malloc( self.hh.getNelemToRetrieveFromCache(handle) * sizeof(int))             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.getCacheLongArray(handle, ival)
 * 
 */
    __pyx_v_ival = ((int *)malloc((__pyx_v_self->hh.getNelemToRetrieveFromCache(__pyx_v_handle) * (sizeof(int)))));

    /* "PyCafe.pyx":2086
 * 
 * 			ival = <int *>malloc( self.hh.getNelemToRetrieveFromCache(handle) * sizeof(int))
 * 			status=self._c_cafe.getCacheLongArray(handle, ival)             # <<<<<<<<<<<<<<
 * 
 * 			if status==ICAFE_NORMAL:
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->_c_cafe->getCacheLongArray(__pyx_v_handle, __pyx_v_ival)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2086; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF_SET(__pyx_v_status, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "PyCafe.pyx":2088
 * 			status=self._c_cafe.getCacheLongArray(handle, ival)
 * 
 * 			if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 
 * 				if asnumpy:
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(ICAFE_NORMAL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_RichCompare(__pyx_v_status, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_2) {

      /* "PyCafe.pyx":2090
 * 			if status==ICAFE_NORMAL:
 * 
 * 				if asnumpy:             # <<<<<<<<<<<<<<
 * 
 * 					#A strided dimension, declared with a single colon as here, is
 */
      __pyx_t_2 = (__pyx_v_asnumpy != 0);
      if (__pyx_t_2) {

        /* "PyCafe.pyx":2095
 * 					#a typed memoryview is compatible with a strided (i.e. noncontiguous
 * 					#and regularly spaced) buffer dimension
 * 					mvInt=<int[:self.hh.getNelemToRetrieveFromCache(handle)]>ival             # <<<<<<<<<<<<<<
 * 					arr = np.ascontiguousarray(mvInt)
 * 
 */
        if (!__pyx_v_ival) {
          PyErr_SetString(PyExc_ValueError,"Cannot create cython.array from NULL pointer");
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2095; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_5 = __pyx_format_from_typeinfo(&__Pyx_TypeInfo_int);
        __pyx_t_6 = Py_BuildValue((char*) "("  __PYX_BUILD_PY_SSIZE_T  ")", ((Py_ssize_t)__pyx_v_self->hh.getNelemToRetrieveFromCache(__pyx_v_handle)));
        if (unlikely(!__pyx_t_5 || !__pyx_t_6 || !PyBytes_AsString(__pyx_t_5))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2095; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_10 = __pyx_array_new(__pyx_t_6, sizeof(int), PyBytes_AS_STRING(__pyx_t_5), (char *) "c", (char *) __pyx_v_ival);
        if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2095; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_11 = __Pyx_PyObject_to_MemoryviewSlice_dc_int(((PyObject *)__pyx_t_10));
        if (unlikely(!__pyx_t_11.memview)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2095; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(((PyObject *)__pyx_t_10)); __pyx_t_10 = 0;
        __pyx_v_mvInt = __pyx_t_11;
        __pyx_t_11.memview = NULL;
        __pyx_t_11.data = NULL;

        /* "PyCafe.pyx":2096
 * 					#and regularly spaced) buffer dimension
 * 					mvInt=<int[:self.hh.getNelemToRetrieveFromCache(handle)]>ival
 * 					arr = np.ascontiguousarray(mvInt)             # <<<<<<<<<<<<<<
 * 
 * 					set_base(arr, ival)
 */
        __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2096; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2096; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __pyx_memoryview_fromslice(__pyx_v_mvInt, 1, (PyObject *(*)(char *)) __pyx_memview_get_int, (int (*)(char *, PyObject *)) __pyx_memview_set_int, 0);; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2096; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_13 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
          }
        }
        if (!__pyx_t_13) {
          __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2096; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_5);
        } else {
          __pyx_t_14 = PyTuple_New(1+1); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2096; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_13); __pyx_t_13 = NULL;
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_14, 0+1, __pyx_t_6);
          __pyx_t_6 = 0;
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_14, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2096; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        }
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2096; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_v_arr = ((PyArrayObject *)__pyx_t_5);
        __pyx_t_5 = 0;

        /* "PyCafe.pyx":2098
 * 					arr = np.ascontiguousarray(mvInt)
 * 
 * 					set_base(arr, ival)             # <<<<<<<<<<<<<<
 * 
 * 					return arr
 */
        __pyx_f_6PyCafe_set_base(__pyx_v_arr, __pyx_v_ival);

        /* "PyCafe.pyx":2100
 * 					set_base(arr, ival)
 * 
 * 					return arr             # <<<<<<<<<<<<<<
 * 				else:
 * 					mvInt  = np.empty(self.hh.getNelemToRetrieveFromCache(handle), dtype=np.int32)
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(((PyObject *)__pyx_v_arr));
        __pyx_r = ((PyObject *)__pyx_v_arr);
        goto __pyx_L0;

        /* "PyCafe.pyx":2090
 * 			if status==ICAFE_NORMAL:
 * 
 * 				if asnumpy:             # <<<<<<<<<<<<<<
 * 
 * 					#A strided dimension, declared with a single colon as here, is
 */
      }

      /* "PyCafe.pyx":2102
 * 					return arr
 * 				else:
 * 					mvInt  = np.empty(self.hh.getNelemToRetrieveFromCache(handle), dtype=np.int32)             # <<<<<<<<<<<<<<
 * 					for i in range(0,self.hh.getNelemToRetrieveFromCache(handle)):
 * 						mvInt[i]=ival[i]
 */
      /*else*/ {
        __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->hh.getNelemToRetrieveFromCache(__pyx_v_handle)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_14 = PyTuple_New(1); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int32); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_13) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_14, __pyx_t_5); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_11 = __Pyx_PyObject_to_MemoryviewSlice_dc_int(__pyx_t_13);
        if (unlikely(!__pyx_t_11.memview)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_v_mvInt = __pyx_t_11;
        __pyx_t_11.memview = NULL;
        __pyx_t_11.data = NULL;

        /* "PyCafe.pyx":2103
 * 				else:
 * 					mvInt  = np.empty(self.hh.getNelemToRetrieveFromCache(handle), dtype=np.int32)
 * 					for i in range(0,self.hh.getNelemToRetrieveFromCache(handle)):             # <<<<<<<<<<<<<<
 * 						mvInt[i]=ival[i]
 * 					free(ival)
 */
        __pyx_t_4 = __pyx_v_self->hh.getNelemToRetrieveFromCache(__pyx_v_handle);
        for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_4; __pyx_t_8+=1) {
          __pyx_v_i = __pyx_t_8;

          /* "PyCafe.pyx":2104
 * 					mvInt  = np.empty(self.hh.getNelemToRetrieveFromCache(handle), dtype=np.int32)
 * 					for i in range(0,self.hh.getNelemToRetrieveFromCache(handle)):
 * 						mvInt[i]=ival[i]             # <<<<<<<<<<<<<<
 * 					free(ival)
 * 					return mvInt
 */
          __pyx_t_15 = __pyx_v_i;
          __pyx_t_7 = -1;
          if (__pyx_t_15 < 0) {
            __pyx_t_15 += __pyx_v_mvInt.shape[0];
            if (unlikely(__pyx_t_15 < 0)) __pyx_t_7 = 0;
          } else if (unlikely(__pyx_t_15 >= __pyx_v_mvInt.shape[0])) __pyx_t_7 = 0;
          if (unlikely(__pyx_t_7 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_7);
            {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          *((int *) ( /* dim=0 */ ((char *) (((int *) __pyx_v_mvInt.data) + __pyx_t_15)) )) = (__pyx_v_ival[__pyx_v_i]);
        }

        /* "PyCafe.pyx":2105
 * 					for i in range(0,self.hh.getNelemToRetrieveFromCache(handle)):
 * 						mvInt[i]=ival[i]
 * 					free(ival)             # <<<<<<<<<<<<<<
 * 					return mvInt
 * 
 */
        free(__pyx_v_ival);

        /* "PyCafe.pyx":2106
 * 						mvInt[i]=ival[i]
 * 					free(ival)
 * 					return mvInt             # <<<<<<<<<<<<<<
 * 
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_13 = __pyx_memoryview_fromslice(__pyx_v_mvInt, 1, (PyObject *(*)(char *)) __pyx_memview_get_int, (int (*)(char *, PyObject *)) __pyx_memview_set_int, 0);; if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_r = __pyx_t_13;
        __pyx_t_13 = 0;
        goto __pyx_L0;
      }

      /* "PyCafe.pyx":2088
 * 			status=self._c_cafe.getCacheLongArray(handle, ival)
 * 
 * 			if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 
 * 				if asnumpy:
 */
    }

    /* "PyCafe.pyx":2083
 * 
 * 
 * 		elif dtcheck in [CAFE_SHORT, CAFE_CHAR, CAFE_LONG]:             # <<<<<<<<<<<<<<
 * 
 * 			ival = <int *>malloc( self.hh.getNelemToRetrieveFromCache(handle) * sizeof(int))
 */
    break;

    /* "PyCafe.pyx":2108
 * 					return mvInt
 * 
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:             # <<<<<<<<<<<<<<
 * 			dval = <double *>malloc( self.hh.getNelemToRetrieveFromCache(handle) * sizeof(double))
 * 			status=self._c_cafe.getCacheDoubleArray(handle, dval)
 */
    case CAFE_FLOAT:
    case CAFE_DOUBLE:

    /* "PyCafe.pyx":2109
 * 
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:
 * 			dval = <double *>malloc( self.hh.getNelemToRetrieveFromCache(handle) * sizeof(double))             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.getCacheDoubleArray(handle, dval)
 * 
 */
    __pyx_v_dval = ((double *)malloc((__pyx_v_self->hh.getNelemToRetrieveFromCache(__pyx_v_handle) * (sizeof(double)))));

    /* "PyCafe.pyx":2110
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:
 * 			dval = <double *>malloc( self.hh.getNelemToRetrieveFromCache(handle) * sizeof(double))
 * 			status=self._c_cafe.getCacheDoubleArray(handle, dval)             # <<<<<<<<<<<<<<
 * 
 * 			if status==ICAFE_NORMAL:
 */
    __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_v_self->_c_cafe->getCacheDoubleArray(__pyx_v_handle, __pyx_v_dval)); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF_SET(__pyx_v_status, __pyx_t_13);
    __pyx_t_13 = 0;

    /* "PyCafe.pyx":2112
 * 			status=self._c_cafe.getCacheDoubleArray(handle, dval)
 * 
 * 			if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 
 * 				if asnumpy:
 */
    __pyx_t_13 = __Pyx_PyInt_From_int(ICAFE_NORMAL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_status, __pyx_t_13, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "PyCafe.pyx":2114
 * 			if status==ICAFE_NORMAL:
 * 
 * 				if asnumpy:             # <<<<<<<<<<<<<<
 * 					mvDouble=<double[:self.hh.getNelemToRetrieveFromCache(handle)]>dval
 * 					arr = np.ascontiguousarray(mvDouble)
 */
      __pyx_t_2 = (__pyx_v_asnumpy != 0);
      if (__pyx_t_2) {

        /* "PyCafe.pyx":2115
 * 
 * 				if asnumpy:
 * 					mvDouble=<double[:self.hh.getNelemToRetrieveFromCache(handle)]>dval             # <<<<<<<<<<<<<<
 * 					arr = np.ascontiguousarray(mvDouble)
 * 					set_base(arr, dval)
 */
        if (!__pyx_v_dval) {
          PyErr_SetString(PyExc_ValueError,"Cannot create cython.array from NULL pointer");
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_13 = __pyx_format_from_typeinfo(&__Pyx_TypeInfo_double);
        __pyx_t_5 = Py_BuildValue((char*) "("  __PYX_BUILD_PY_SSIZE_T  ")", ((Py_ssize_t)__pyx_v_self->hh.getNelemToRetrieveFromCache(__pyx_v_handle)));
        if (unlikely(!__pyx_t_13 || !__pyx_t_5 || !PyBytes_AsString(__pyx_t_13))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_10 = __pyx_array_new(__pyx_t_5, sizeof(double), PyBytes_AS_STRING(__pyx_t_13), (char *) "c", (char *) __pyx_v_dval);
        if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_16 = __Pyx_PyObject_to_MemoryviewSlice_dc_double(((PyObject *)__pyx_t_10));
        if (unlikely(!__pyx_t_16.memview)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(((PyObject *)__pyx_t_10)); __pyx_t_10 = 0;
        __pyx_v_mvDouble = __pyx_t_16;
        __pyx_t_16.memview = NULL;
        __pyx_t_16.data = NULL;

        /* "PyCafe.pyx":2116
 * 				if asnumpy:
 * 					mvDouble=<double[:self.hh.getNelemToRetrieveFromCache(handle)]>dval
 * 					arr = np.ascontiguousarray(mvDouble)             # <<<<<<<<<<<<<<
 * 					set_base(arr, dval)
 * 					return arr
 */
        __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_mvDouble, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_12 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_14))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_14);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_14, function);
          }
        }
        if (!__pyx_t_12) {
          __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_5); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_13);
        } else {
          __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_12); __pyx_t_12 = NULL;
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_5);
          __pyx_t_5 = 0;
          __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_6, NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        if (!(likely(((__pyx_t_13) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_13, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_v_arr = ((PyArrayObject *)__pyx_t_13);
        __pyx_t_13 = 0;

        /* "PyCafe.pyx":2117
 * 					mvDouble=<double[:self.hh.getNelemToRetrieveFromCache(handle)]>dval
 * 					arr = np.ascontiguousarray(mvDouble)
 * 					set_base(arr, dval)             # <<<<<<<<<<<<<<
 * 					return arr
 * 				else:
 */
        __pyx_f_6PyCafe_set_base(__pyx_v_arr, __pyx_v_dval);

        /* "PyCafe.pyx":2118
 * 					arr = np.ascontiguousarray(mvDouble)
 * 					set_base(arr, dval)
 * 					return arr             # <<<<<<<<<<<<<<
 * 				else:
 * 					mvDouble  = np.empty(self.hh.getNelemToRetrieveFromCache(handle), dtype=np.float64)
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(((PyObject *)__pyx_v_arr));
        __pyx_r = ((PyObject *)__pyx_v_arr);
        goto __pyx_L0;

        /* "PyCafe.pyx":2114
 * 			if status==ICAFE_NORMAL:
 * 
 * 				if asnumpy:             # <<<<<<<<<<<<<<
 * 					mvDouble=<double[:self.hh.getNelemToRetrieveFromCache(handle)]>dval
 * 					arr = np.ascontiguousarray(mvDouble)
 */
      }

      /* "PyCafe.pyx":2120
 * 					return arr
 * 				else:
 * 					mvDouble  = np.empty(self.hh.getNelemToRetrieveFromCache(handle), dtype=np.float64)             # <<<<<<<<<<<<<<
 * 					for i in range(0,self.hh.getNelemToRetrieveFromCache(handle)):
 * 						mvDouble[i]=dval[i]
 */
      /*else*/ {
        __pyx_t_13 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_empty); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->hh.getNelemToRetrieveFromCache(__pyx_v_handle)); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_13);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_13);
        __pyx_t_13 = 0;
        __pyx_t_13 = PyDict_New(); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float64); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (PyDict_SetItem(__pyx_t_13, __pyx_n_s_dtype, __pyx_t_12) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_6, __pyx_t_13); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_16 = __Pyx_PyObject_to_MemoryviewSlice_dc_double(__pyx_t_12);
        if (unlikely(!__pyx_t_16.memview)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_v_mvDouble = __pyx_t_16;
        __pyx_t_16.memview = NULL;
        __pyx_t_16.data = NULL;

        /* "PyCafe.pyx":2121
 * 				else:
 * 					mvDouble  = np.empty(self.hh.getNelemToRetrieveFromCache(handle), dtype=np.float64)
 * 					for i in range(0,self.hh.getNelemToRetrieveFromCache(handle)):             # <<<<<<<<<<<<<<
 * 						mvDouble[i]=dval[i]
 * 
 */
        __pyx_t_4 = __pyx_v_self->hh.getNelemToRetrieveFromCache(__pyx_v_handle);
        for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_4; __pyx_t_8+=1) {
          __pyx_v_i = __pyx_t_8;

          /* "PyCafe.pyx":2122
 * 					mvDouble  = np.empty(self.hh.getNelemToRetrieveFromCache(handle), dtype=np.float64)
 * 					for i in range(0,self.hh.getNelemToRetrieveFromCache(handle)):
 * 						mvDouble[i]=dval[i]             # <<<<<<<<<<<<<<
 * 
 * 					free(dval)
 */
          __pyx_t_17 = __pyx_v_i;
          __pyx_t_7 = -1;
          if (__pyx_t_17 < 0) {
            __pyx_t_17 += __pyx_v_mvDouble.shape[0];
            if (unlikely(__pyx_t_17 < 0)) __pyx_t_7 = 0;
          } else if (unlikely(__pyx_t_17 >= __pyx_v_mvDouble.shape[0])) __pyx_t_7 = 0;
          if (unlikely(__pyx_t_7 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_7);
            {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          *((double *) ( /* dim=0 */ ((char *) (((double *) __pyx_v_mvDouble.data) + __pyx_t_17)) )) = (__pyx_v_dval[__pyx_v_i]);
        }

        /* "PyCafe.pyx":2124
 * 						mvDouble[i]=dval[i]
 * 
 * 					free(dval)             # <<<<<<<<<<<<<<
 * 					return mvDouble
 * 
 */
        free(__pyx_v_dval);

        /* "PyCafe.pyx":2125
 * 
 * 					free(dval)
 * 					return mvDouble             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_12 = __pyx_memoryview_fromslice(__pyx_v_mvDouble, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_r = __pyx_t_12;
        __pyx_t_12 = 0;
        goto __pyx_L0;
      }

      /* "PyCafe.pyx":2112
 * 			status=self._c_cafe.getCacheDoubleArray(handle, dval)
 * 
 * 			if status==ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 
 * 				if asnumpy:
 */
    }

    /* "PyCafe.pyx":2108
 * 					return mvInt
 * 
 * 		elif dtcheck in [CAFE_FLOAT, CAFE_DOUBLE]:             # <<<<<<<<<<<<<<
 * 			dval = <double *>malloc( self.hh.getNelemToRetrieveFromCache(handle) * sizeof(double))
 * 			status=self._c_cafe.getCacheDoubleArray(handle, dval)
 */
    break;
    default: break;
  }

  /* "PyCafe.pyx":2128
 * 
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  __pyx_t_12 = __Pyx_PyInt_From_int(ICAFE_NORMAL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = PyObject_RichCompare(__pyx_v_status, __pyx_t_12, Py_NE); __Pyx_XGOTREF(__pyx_t_13); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_13); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  if (__pyx_t_2) {

    /* "PyCafe.pyx":2129
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    __pyx_t_2 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":2130
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
      __pyx_t_2 = ((__pyx_v_handle == 0) != 0);
      if (__pyx_t_2) {

        /* "PyCafe.pyx":2131
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 */
        __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_status); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_v_self->_c_cafe->printStatusMessage(__pyx_t_7);

        /* "PyCafe.pyx":2130
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
        goto __pyx_L24;
      }

      /* "PyCafe.pyx":2133
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getArrayCache. Status = %d" %status)
 * 
 */
      /*else*/ {
        __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_status); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_v_self->_c_cafe->printStatus(__pyx_v_handle, __pyx_t_7);
      }
      __pyx_L24:;

      /* "PyCafe.pyx":2129
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    }

    /* "PyCafe.pyx":2134
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getArrayCache. Status = %d" %status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_13 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_8, __pyx_v_status); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_13);
    PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_13);
    __pyx_t_13 = 0;
    __pyx_t_13 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_12, NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_Raise(__pyx_t_13, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":2128
 * 
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  }

  /* "PyCafe.pyx":2008
 * 
 * 	##################################################################################
 * 	def  getArrayCache(self, handlePV, str dt='native', bint asnumpy=False):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 		#Typed Memoryviews from K.W. Smith
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(((PyObject *)__pyx_t_10));
  __PYX_XDEC_MEMVIEW(&__pyx_t_11, 1);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __PYX_XDEC_MEMVIEW(&__pyx_t_16, 1);
  __Pyx_AddTraceback("PyCafe.CyCafe.getArrayCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_mvInt, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_mvDouble, 1);
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XDECREF(__pyx_v_locallist);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2144
 * 
 * 	##################################################################################
 * 	def  getPVStrCache(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.getPVCache(handlePV,'str')
 * 	##################################################################################
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_163getPVStrCache(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_163getPVStrCache(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPVStrCache (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_162getPVStrCache(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_162getPVStrCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPVStrCache", 0);

  /* "PyCafe.pyx":2145
 * 	##################################################################################
 * 	def  getPVStrCache(self, handlePV):
 * 		return self.getPVCache(handlePV,'str')             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getPVCache); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_3) {
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_handlePV);
  __Pyx_GIVEREF(__pyx_v_handlePV);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_handlePV);
  __Pyx_INCREF(__pyx_n_u_str);
  __Pyx_GIVEREF(__pyx_n_u_str);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_u_str);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2144
 * 
 * 	##################################################################################
 * 	def  getPVStrCache(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.getPVCache(handlePV,'str')
 * 	##################################################################################
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.getPVStrCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2149
 * 
 * 	##################################################################################
 * 	def  getPVIntCache(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.getPVCache(handlePV,'int')
 * 	##################################################################################
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_165getPVIntCache(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_165getPVIntCache(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPVIntCache (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_164getPVIntCache(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_164getPVIntCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPVIntCache", 0);

  /* "PyCafe.pyx":2150
 * 	##################################################################################
 * 	def  getPVIntCache(self, handlePV):
 * 		return self.getPVCache(handlePV,'int')             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getPVCache); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_3) {
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_handlePV);
  __Pyx_GIVEREF(__pyx_v_handlePV);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_handlePV);
  __Pyx_INCREF(__pyx_n_u_int);
  __Pyx_GIVEREF(__pyx_n_u_int);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_u_int);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2149
 * 
 * 	##################################################################################
 * 	def  getPVIntCache(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.getPVCache(handlePV,'int')
 * 	##################################################################################
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.getPVIntCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2154
 * 
 * 	##################################################################################
 * 	def  getPVFloatCache(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.getPVCache(handlePV,'float')
 * 	##################################################################################
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_167getPVFloatCache(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_167getPVFloatCache(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPVFloatCache (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_166getPVFloatCache(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_166getPVFloatCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPVFloatCache", 0);

  /* "PyCafe.pyx":2155
 * 	##################################################################################
 * 	def  getPVFloatCache(self, handlePV):
 * 		return self.getPVCache(handlePV,'float')             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getPVCache); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_3) {
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_handlePV);
  __Pyx_GIVEREF(__pyx_v_handlePV);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_handlePV);
  __Pyx_INCREF(__pyx_n_u_float);
  __Pyx_GIVEREF(__pyx_n_u_float);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_u_float);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2154
 * 
 * 	##################################################################################
 * 	def  getPVFloatCache(self, handlePV):             # <<<<<<<<<<<<<<
 * 		return self.getPVCache(handlePV,'float')
 * 	##################################################################################
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.getPVFloatCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2159
 * 
 * 	##################################################################################
 * 	def  getPVCache(self, handlePV, str dt='native'):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 		cdef unsigned int handle=0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_169getPVCache(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_169getPVCache(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handlePV = 0;
  PyObject *__pyx_v_dt = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPVCache (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handlePV,&__pyx_n_s_dt,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject*)__pyx_n_u_native);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handlePV)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getPVCache") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2159; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_handlePV = values[0];
    __pyx_v_dt = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getPVCache", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2159; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.getPVCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dt), (&PyUnicode_Type), 1, "dt", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_168getPVCache(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handlePV, __pyx_v_dt);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_168getPVCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, PyObject *__pyx_v_dt) {
  unsigned int __pyx_v_handle;
  PVDataHolder __pyx_v_pvd;
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  struct __pyx_opt_args_6PyCafe_PVDataHolderToStruct __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPVCache", 0);

  /* "PyCafe.pyx":2161
 * 	def  getPVCache(self, handlePV, str dt='native'):
 * 	##################################################################################
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":2163
 * 		cdef unsigned int handle=0
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":2164
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":2163
 * 		cdef unsigned int handle=0
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2165
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":2166
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getPVCache. \n \
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":2165
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2168
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getPVCache. \n \             # <<<<<<<<<<<<<<
 * 			First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__155, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":2173
 * 		cdef PVDataHolder pvd
 * 
 * 		pvd.setNelem(self.hh.getNelemToRetrieveFromCache(handle))             # <<<<<<<<<<<<<<
 * 
 * 		status=self._c_cafe.getCache(handle, pvd)
 */
  __pyx_v_pvd.setNelem(__pyx_v_self->hh.getNelemToRetrieveFromCache(__pyx_v_handle));

  /* "PyCafe.pyx":2175
 * 		pvd.setNelem(self.hh.getNelemToRetrieveFromCache(handle))
 * 
 * 		status=self._c_cafe.getCache(handle, pvd)             # <<<<<<<<<<<<<<
 * 
 * 		if status !=ICAFE_NORMAL:
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->_c_cafe->getCache(__pyx_v_handle, __pyx_v_pvd)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_status = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "PyCafe.pyx":2177
 * 		status=self._c_cafe.getCache(handle, pvd)
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(ICAFE_NORMAL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyObject_RichCompare(__pyx_v_status, __pyx_t_5, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_1) {

    /* "PyCafe.pyx":2178
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    __pyx_t_1 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":2179
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
      __pyx_t_1 = ((__pyx_v_handle == 0) != 0);
      if (__pyx_t_1) {

        /* "PyCafe.pyx":2180
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 */
        __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_status); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_v_self->_c_cafe->printStatusMessage(__pyx_t_7);

        /* "PyCafe.pyx":2179
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
        goto __pyx_L8;
      }

      /* "PyCafe.pyx":2182
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getPVCache. Status = %d" %status)
 * 
 */
      /*else*/ {
        __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_status); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_v_self->_c_cafe->printStatus(__pyx_v_handle, __pyx_t_7);
      }
      __pyx_L8:;

      /* "PyCafe.pyx":2178
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    }

    /* "PyCafe.pyx":2183
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getPVCache. Status = %d" %status)             # <<<<<<<<<<<<<<
 * 
 * 		return PVDataHolderToStruct(pvd, dt)
 */
    __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_9, __pyx_v_status); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":2177
 * 		status=self._c_cafe.getCache(handle, pvd)
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  }

  /* "PyCafe.pyx":2185
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getPVCache. Status = %d" %status)
 * 
 * 		return PVDataHolderToStruct(pvd, dt)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_8.__pyx_n = 1;
  __pyx_t_8.dt = __pyx_v_dt;
  __pyx_t_6 = ((PyObject *)__pyx_f_6PyCafe_PVDataHolderToStruct(__pyx_v_pvd, &__pyx_t_8)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2159
 * 
 * 	##################################################################################
 * 	def  getPVCache(self, handlePV, str dt='native'):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 		cdef unsigned int handle=0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("PyCafe.CyCafe.getPVCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2195
 * 
 * 	##################################################################################
 * 	def  getCtrl(self, handlePV,  str dt='native'):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 		cdef unsigned int handle=0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_171getCtrl(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_171getCtrl(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handlePV = 0;
  PyObject *__pyx_v_dt = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getCtrl (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handlePV,&__pyx_n_s_dt,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject*)__pyx_n_u_native);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handlePV)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getCtrl") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2195; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_handlePV = values[0];
    __pyx_v_dt = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getCtrl", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2195; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.getCtrl", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dt), (&PyUnicode_Type), 1, "dt", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_170getCtrl(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handlePV, __pyx_v_dt);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_170getCtrl(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, PyObject *__pyx_v_dt) {
  unsigned int __pyx_v_handle;
  PVCtrlHolder __pyx_v_pvc;
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  struct __pyx_opt_args_6PyCafe_PVCtrlHolderToStruct __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getCtrl", 0);

  /* "PyCafe.pyx":2197
 * 	def  getCtrl(self, handlePV,  str dt='native'):
 * 	##################################################################################
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":2199
 * 		cdef unsigned int handle=0
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":2200
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":2199
 * 		cdef unsigned int handle=0
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2201
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":2202
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getCtrl. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":2201
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2204
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getCtrl. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__156, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":2208
 * 
 * 		cdef PVCtrlHolder pvc
 * 		pvc.setNelem(self.hh.getNelemRequestCtrl(handle)) #do this dynamically             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_pvc.setNelem(__pyx_v_self->hh.getNelemRequestCtrl(__pyx_v_handle));

  /* "PyCafe.pyx":2212
 * 
 * 		cdef int status
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.getCtrl(handle, pvc)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":2213
 * 		cdef int status
 * 		with nogil:
 * 			status=self._c_cafe.getCtrl(handle, pvc)             # <<<<<<<<<<<<<<
 * 
 * 		if status !=ICAFE_NORMAL:
 */
        __pyx_v_status = __pyx_v_self->_c_cafe->getCtrl(__pyx_v_handle, __pyx_v_pvc);
      }

      /* "PyCafe.pyx":2212
 * 
 * 		cdef int status
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.getCtrl(handle, pvc)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L8;
        }
        __pyx_L8:;
      }
  }

  /* "PyCafe.pyx":2215
 * 			status=self._c_cafe.getCtrl(handle, pvc)
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  __pyx_t_1 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":2216
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    __pyx_t_1 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":2217
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
      __pyx_t_1 = ((__pyx_v_handle == 0) != 0);
      if (__pyx_t_1) {

        /* "PyCafe.pyx":2218
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 */
        __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

        /* "PyCafe.pyx":2217
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
        goto __pyx_L11;
      }

      /* "PyCafe.pyx":2220
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getCtrl. Status = %d" %status)
 * 
 */
      /*else*/ {
        __pyx_v_self->_c_cafe->printStatus(__pyx_v_handle, __pyx_v_status);
      }
      __pyx_L11:;

      /* "PyCafe.pyx":2216
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    }

    /* "PyCafe.pyx":2221
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getCtrl. Status = %d" %status)             # <<<<<<<<<<<<<<
 * 
 * 		return PVCtrlHolderToStruct(pvc, dt)
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_10, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":2215
 * 			status=self._c_cafe.getCtrl(handle, pvc)
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  }

  /* "PyCafe.pyx":2223
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getCtrl. Status = %d" %status)
 * 
 * 		return PVCtrlHolderToStruct(pvc, dt)             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7.__pyx_n = 1;
  __pyx_t_7.dt = __pyx_v_dt;
  __pyx_t_6 = ((PyObject *)__pyx_f_6PyCafe_PVCtrlHolderToStruct(__pyx_v_pvc, &__pyx_t_7)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2195
 * 
 * 	##################################################################################
 * 	def  getCtrl(self, handlePV,  str dt='native'):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 		cdef unsigned int handle=0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("PyCafe.CyCafe.getCtrl", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2232
 * 
 * 	##################################################################################
 * 	def  getCtrlCache(self, handlePV, str dt='native'):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 		cdef unsigned int handle=0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_173getCtrlCache(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_173getCtrlCache(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handlePV = 0;
  PyObject *__pyx_v_dt = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getCtrlCache (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handlePV,&__pyx_n_s_dt,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject*)__pyx_n_u_native);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handlePV)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getCtrlCache") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2232; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_handlePV = values[0];
    __pyx_v_dt = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getCtrlCache", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2232; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.getCtrlCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dt), (&PyUnicode_Type), 1, "dt", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_172getCtrlCache(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handlePV, __pyx_v_dt);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_172getCtrlCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, PyObject *__pyx_v_dt) {
  unsigned int __pyx_v_handle;
  PVCtrlHolder __pyx_v_pvc;
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  struct __pyx_opt_args_6PyCafe_PVCtrlHolderToStruct __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getCtrlCache", 0);

  /* "PyCafe.pyx":2234
 * 	def  getCtrlCache(self, handlePV, str dt='native'):
 * 	##################################################################################
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":2236
 * 		cdef unsigned int handle=0
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":2237
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":2236
 * 		cdef unsigned int handle=0
 * 
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2238
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":2239
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getCtrlCache. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":2238
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2241
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getCtrlCache. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__157, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":2246
 * 		cdef PVCtrlHolder pvc
 * 
 * 		pvc.setNelem(self.hh.getNelemToRetrieveFromCtrlCache(handle))             # <<<<<<<<<<<<<<
 * 
 * 		status=self._c_cafe.getCtrlCache(handle, pvc)
 */
  __pyx_v_pvc.setNelem(__pyx_v_self->hh.getNelemToRetrieveFromCtrlCache(__pyx_v_handle));

  /* "PyCafe.pyx":2248
 * 		pvc.setNelem(self.hh.getNelemToRetrieveFromCtrlCache(handle))
 * 
 * 		status=self._c_cafe.getCtrlCache(handle, pvc)             # <<<<<<<<<<<<<<
 * 
 * 		if status !=ICAFE_NORMAL:
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->_c_cafe->getCtrlCache(__pyx_v_handle, __pyx_v_pvc)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_status = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "PyCafe.pyx":2250
 * 		status=self._c_cafe.getCtrlCache(handle, pvc)
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(ICAFE_NORMAL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyObject_RichCompare(__pyx_v_status, __pyx_t_5, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_1) {

    /* "PyCafe.pyx":2251
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    __pyx_t_1 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":2252
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
      __pyx_t_1 = ((__pyx_v_handle == 0) != 0);
      if (__pyx_t_1) {

        /* "PyCafe.pyx":2253
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 */
        __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_status); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_v_self->_c_cafe->printStatusMessage(__pyx_t_7);

        /* "PyCafe.pyx":2252
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
        goto __pyx_L8;
      }

      /* "PyCafe.pyx":2255
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getCtrlCache. Status = %d" %status)
 * 
 */
      /*else*/ {
        __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_status); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_v_self->_c_cafe->printStatus(__pyx_v_handle, __pyx_t_7);
      }
      __pyx_L8:;

      /* "PyCafe.pyx":2251
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    }

    /* "PyCafe.pyx":2256
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getCtrlCache. Status = %d" %status)             # <<<<<<<<<<<<<<
 * 
 * 		return PVCtrlHolderToStruct(pvc, dt)
 */
    __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_11, __pyx_v_status); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":2250
 * 		status=self._c_cafe.getCtrlCache(handle, pvc)
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  }

  /* "PyCafe.pyx":2258
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getCtrlCache. Status = %d" %status)
 * 
 * 		return PVCtrlHolderToStruct(pvc, dt)             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_8.__pyx_n = 1;
  __pyx_t_8.dt = __pyx_v_dt;
  __pyx_t_6 = ((PyObject *)__pyx_f_6PyCafe_PVCtrlHolderToStruct(__pyx_v_pvc, &__pyx_t_8)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2232
 * 
 * 	##################################################################################
 * 	def  getCtrlCache(self, handlePV, str dt='native'):             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 		cdef unsigned int handle=0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("PyCafe.CyCafe.getCtrlCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2268
 * 
 * 	##################################################################################
 * 	def groupMonitorStart(self, ghandleName, object cb=None, DBR_TYPE dbr=DBR_TIME, unsigned int mask=DBE_VALUE|DBE_LOG|DBE_ALARM):             # <<<<<<<<<<<<<<
 * 	##########################################################################################
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_175groupMonitorStart(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_175groupMonitorStart(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ghandleName = 0;
  PyObject *__pyx_v_cb = 0;
  DBR_TYPE __pyx_v_dbr;
  unsigned int __pyx_v_mask;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("groupMonitorStart (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ghandleName,&__pyx_n_s_cb,&__pyx_n_s_dbr,&__pyx_n_s_mask,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ghandleName)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cb);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dbr);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mask);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "groupMonitorStart") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2268; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ghandleName = values[0];
    __pyx_v_cb = values[1];
    if (values[2]) {
      __pyx_v_dbr = ((DBR_TYPE)__Pyx_PyInt_As_DBR_TYPE(values[2])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2268; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_dbr = __pyx_k__158;
    }
    if (values[3]) {
      __pyx_v_mask = __Pyx_PyInt_As_unsigned_int(values[3]); if (unlikely((__pyx_v_mask == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2268; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_mask = __pyx_k__159;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("groupMonitorStart", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2268; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.groupMonitorStart", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_174groupMonitorStart(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_ghandleName, __pyx_v_cb, __pyx_v_dbr, __pyx_v_mask);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_174groupMonitorStart(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_ghandleName, PyObject *__pyx_v_cb, DBR_TYPE __pyx_v_dbr, unsigned int __pyx_v_mask) {
  unsigned int __pyx_v_ghandle;
  std::vector<MonitorPolicy>  __pyx_v_mpV;
  unsigned int __pyx_v_mpid;
  PVGroup __pyx_v_pvg;
  MonitorPolicy *__pyx_v_mp;
  long __pyx_v_i;
  PyObject *__pyx_v_a = NULL;
  std::vector<int>  __pyx_v_vStatus;
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  long __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("groupMonitorStart", 0);

  /* "PyCafe.pyx":2271
 * 	##########################################################################################
 * 
 * 		cdef unsigned int ghandle=0             # <<<<<<<<<<<<<<
 * 		if isinstance(ghandleName, (int,long)) == 1:
 * 			ghandle=ghandleName
 */
  __pyx_v_ghandle = 0;

  /* "PyCafe.pyx":2272
 * 
 * 		cdef unsigned int ghandle=0
 * 		if isinstance(ghandleName, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			ghandle=ghandleName
 * 		elif isinstance(ghandleName, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_ghandleName); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_ghandleName); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":2273
 * 		cdef unsigned int ghandle=0
 * 		if isinstance(ghandleName, (int,long)) == 1:
 * 			ghandle=ghandleName             # <<<<<<<<<<<<<<
 * 		elif isinstance(ghandleName, (str)) == 1:
 * 			ghandle=self.checkForGroupHandle(ghandleName)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_ghandleName); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_ghandle = __pyx_t_4;

    /* "PyCafe.pyx":2272
 * 
 * 		cdef unsigned int ghandle=0
 * 		if isinstance(ghandleName, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			ghandle=ghandleName
 * 		elif isinstance(ghandleName, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2274
 * 		if isinstance(ghandleName, (int,long)) == 1:
 * 			ghandle=ghandleName
 * 		elif isinstance(ghandleName, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			ghandle=self.checkForGroupHandle(ghandleName)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_ghandleName); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":2275
 * 			ghandle=ghandleName
 * 		elif isinstance(ghandleName, (str)) == 1:
 * 			ghandle=self.checkForGroupHandle(ghandleName)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def groupMonitorStart. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_ghandleName))||((__pyx_v_ghandleName) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_ghandleName)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForGroupHandle(__pyx_v_self, ((PyObject*)__pyx_v_ghandleName), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_ghandle = __pyx_t_4;

    /* "PyCafe.pyx":2274
 * 		if isinstance(ghandleName, (int,long)) == 1:
 * 			ghandle=ghandleName
 * 		elif isinstance(ghandleName, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			ghandle=self.checkForGroupHandle(ghandleName)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2277
 * 			ghandle=self.checkForGroupHandle(ghandleName)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def groupMonitorStart. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if group handle, else <type 'str'> if group name")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__160, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":2282
 * 		global monDictGlobal
 * 
 * 		if dbr:             # <<<<<<<<<<<<<<
 * 			if dbr not in [DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL]:
 * 				print ("***Warning*** from groupMonitorStart for handle(orPV)=", ghandleName)
 */
  if (__pyx_v_dbr) {

    /* "PyCafe.pyx":2283
 * 
 * 		if dbr:
 * 			if dbr not in [DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL]:             # <<<<<<<<<<<<<<
 * 				print ("***Warning*** from groupMonitorStart for handle(orPV)=", ghandleName)
 * 				print ("dbr base type should be one of DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL")
 */
    switch (__pyx_v_dbr) {
      case DBR_PLAIN:
      case DBR_STS:
      case DBR_TIME:
      case DBR_GR:
      case DBR_CTRL:
      __pyx_t_1 = 0;
      break;
      default:
      __pyx_t_1 = 1;
      break;
    }
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":2284
 * 		if dbr:
 * 			if dbr not in [DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL]:
 * 				print ("***Warning*** from groupMonitorStart for handle(orPV)=", ghandleName)             # <<<<<<<<<<<<<<
 * 				print ("dbr base type should be one of DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL")
 * 				print ("Assuming DBR_TIME")
 */
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_kp_u_Warning_from_groupMonitorStart);
      __Pyx_GIVEREF(__pyx_kp_u_Warning_from_groupMonitorStart);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_Warning_from_groupMonitorStart);
      __Pyx_INCREF(__pyx_v_ghandleName);
      __Pyx_GIVEREF(__pyx_v_ghandleName);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_ghandleName);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "PyCafe.pyx":2285
 * 			if dbr not in [DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL]:
 * 				print ("***Warning*** from groupMonitorStart for handle(orPV)=", ghandleName)
 * 				print ("dbr base type should be one of DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL")             # <<<<<<<<<<<<<<
 * 				print ("Assuming DBR_TIME")
 * 				dbr=DBR_TIME
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__161, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "PyCafe.pyx":2286
 * 				print ("***Warning*** from groupMonitorStart for handle(orPV)=", ghandleName)
 * 				print ("dbr base type should be one of DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL")
 * 				print ("Assuming DBR_TIME")             # <<<<<<<<<<<<<<
 * 				dbr=DBR_TIME
 * 
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__162, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "PyCafe.pyx":2287
 * 				print ("dbr base type should be one of DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL")
 * 				print ("Assuming DBR_TIME")
 * 				dbr=DBR_TIME             # <<<<<<<<<<<<<<
 * 
 * 		global py_cb
 */
      __pyx_v_dbr = DBR_TIME;

      /* "PyCafe.pyx":2283
 * 
 * 		if dbr:
 * 			if dbr not in [DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL]:             # <<<<<<<<<<<<<<
 * 				print ("***Warning*** from groupMonitorStart for handle(orPV)=", ghandleName)
 * 				print ("dbr base type should be one of DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL")
 */
    }

    /* "PyCafe.pyx":2282
 * 		global monDictGlobal
 * 
 * 		if dbr:             # <<<<<<<<<<<<<<
 * 			if dbr not in [DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL]:
 * 				print ("***Warning*** from groupMonitorStart for handle(orPV)=", ghandleName)
 */
  }

  /* "PyCafe.pyx":2296
 * 		cdef PVGroup pvg
 * 
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			self._c_cafe.groupAttach(ghandle, pvg)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":2297
 * 
 * 		with nogil:
 * 			self._c_cafe.groupAttach(ghandle, pvg)             # <<<<<<<<<<<<<<
 * 
 * 		cdef MonitorPolicy * mp
 */
        __pyx_v_self->_c_cafe->groupAttach(__pyx_v_ghandle, __pyx_v_pvg);
      }

      /* "PyCafe.pyx":2296
 * 		cdef PVGroup pvg
 * 
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			self._c_cafe.groupAttach(ghandle, pvg)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L10;
        }
        __pyx_L10:;
      }
  }

  /* "PyCafe.pyx":2300
 * 
 * 		cdef MonitorPolicy * mp
 * 		mp=self._c_cafe.createMonitorPolicyArray(pvg.getNPV())             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(0, pvg.getNPV()):
 */
  __pyx_v_mp = __pyx_v_self->_c_cafe->createMonitorPolicyArray(__pyx_v_pvg.getNPV());

  /* "PyCafe.pyx":2302
 * 		mp=self._c_cafe.createMonitorPolicyArray(pvg.getNPV())
 * 
 * 		for i in range(0, pvg.getNPV()):             # <<<<<<<<<<<<<<
 * 
 * 			mp[i].setMask(mask)
 */
  __pyx_t_4 = __pyx_v_pvg.getNPV();
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_4; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "PyCafe.pyx":2304
 * 		for i in range(0, pvg.getNPV()):
 * 
 * 			mp[i].setMask(mask)             # <<<<<<<<<<<<<<
 * 			mp[i].setCafeDbrType(dbr)
 * 
 */
    (__pyx_v_mp[__pyx_v_i]).setMask(__pyx_v_mask);

    /* "PyCafe.pyx":2305
 * 
 * 			mp[i].setMask(mask)
 * 			mp[i].setCafeDbrType(dbr)             # <<<<<<<<<<<<<<
 * 
 * 			mpid=mp[i].getMonitorID()
 */
    (__pyx_v_mp[__pyx_v_i]).setCafeDbrType(__pyx_v_dbr);

    /* "PyCafe.pyx":2307
 * 			mp[i].setCafeDbrType(dbr)
 * 
 * 			mpid=mp[i].getMonitorID()             # <<<<<<<<<<<<<<
 * 
 * 			if cb:
 */
    __pyx_v_mpid = (__pyx_v_mp[__pyx_v_i]).getMonitorID();

    /* "PyCafe.pyx":2309
 * 			mpid=mp[i].getMonitorID()
 * 
 * 			if cb:             # <<<<<<<<<<<<<<
 * 				a=inspect.getargspec(cb)
 * 				monDictGlobal[mpid]=cb
 */
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_cb); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "PyCafe.pyx":2310
 * 
 * 			if cb:
 * 				a=inspect.getargspec(cb)             # <<<<<<<<<<<<<<
 * 				monDictGlobal[mpid]=cb
 * 
 */
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_inspect); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_getargspec); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_cb); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
      } else {
        __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_INCREF(__pyx_v_cb);
        __Pyx_GIVEREF(__pyx_v_cb);
        PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_v_cb);
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF_SET(__pyx_v_a, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "PyCafe.pyx":2311
 * 			if cb:
 * 				a=inspect.getargspec(cb)
 * 				monDictGlobal[mpid]=cb             # <<<<<<<<<<<<<<
 * 
 * 				if (len(a[0])==1):
 */
      if (unlikely(__pyx_v_6PyCafe_monDictGlobal == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_6 = __Pyx_PyInt_From_unsigned_int(__pyx_v_mpid); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(PyDict_SetItem(__pyx_v_6PyCafe_monDictGlobal, __pyx_t_6, __pyx_v_cb) < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "PyCafe.pyx":2313
 * 				monDictGlobal[mpid]=cb
 * 
 * 				if (len(a[0])==1):             # <<<<<<<<<<<<<<
 * 					mp[i].setUserArgs(<void*> mpid)
 * 					mp[i].setPyHandler()
 */
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_a, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2313; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_2 = ((__pyx_t_10 == 1) != 0);
      if (__pyx_t_2) {

        /* "PyCafe.pyx":2314
 * 
 * 				if (len(a[0])==1):
 * 					mp[i].setUserArgs(<void*> mpid)             # <<<<<<<<<<<<<<
 * 					mp[i].setPyHandler()
 * 				else:
 */
        (__pyx_v_mp[__pyx_v_i]).setUserArgs(((void *)__pyx_v_mpid));

        /* "PyCafe.pyx":2315
 * 				if (len(a[0])==1):
 * 					mp[i].setUserArgs(<void*> mpid)
 * 					mp[i].setPyHandler()             # <<<<<<<<<<<<<<
 * 				else:
 * 					mp[i].setPyHandlerData()
 */
        (__pyx_v_mp[__pyx_v_i]).setPyHandler();

        /* "PyCafe.pyx":2313
 * 				monDictGlobal[mpid]=cb
 * 
 * 				if (len(a[0])==1):             # <<<<<<<<<<<<<<
 * 					mp[i].setUserArgs(<void*> mpid)
 * 					mp[i].setPyHandler()
 */
        goto __pyx_L14;
      }

      /* "PyCafe.pyx":2317
 * 					mp[i].setPyHandler()
 * 				else:
 * 					mp[i].setPyHandlerData()             # <<<<<<<<<<<<<<
 * 
 * 			mpV.push_back(mp[i])
 */
      /*else*/ {
        (__pyx_v_mp[__pyx_v_i]).setPyHandlerData();
      }
      __pyx_L14:;

      /* "PyCafe.pyx":2309
 * 			mpid=mp[i].getMonitorID()
 * 
 * 			if cb:             # <<<<<<<<<<<<<<
 * 				a=inspect.getargspec(cb)
 * 				monDictGlobal[mpid]=cb
 */
    }

    /* "PyCafe.pyx":2319
 * 					mp[i].setPyHandlerData()
 * 
 * 			mpV.push_back(mp[i])             # <<<<<<<<<<<<<<
 * 
 * 
 */
    try {
      __pyx_v_mpV.push_back((__pyx_v_mp[__pyx_v_i]));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }

  /* "PyCafe.pyx":2323
 * 
 * 		cdef vector[int] vStatus
 * 		vStatus.reserve(pvg.getNPV())             # <<<<<<<<<<<<<<
 * 
 * 		with nogil:
 */
  __pyx_v_vStatus.reserve(__pyx_v_pvg.getNPV());

  /* "PyCafe.pyx":2325
 * 		vStatus.reserve(pvg.getNPV())
 * 
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.groupMonitorStart(ghandle, vStatus, mpV)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":2326
 * 
 * 		with nogil:
 * 			status=self._c_cafe.groupMonitorStart(ghandle, vStatus, mpV)             # <<<<<<<<<<<<<<
 * 
 * 		if status !=ICAFE_NORMAL:
 */
        __pyx_v_status = __pyx_v_self->_c_cafe->groupMonitorStart(__pyx_v_ghandle, __pyx_v_vStatus, __pyx_v_mpV);
      }

      /* "PyCafe.pyx":2325
 * 		vStatus.reserve(pvg.getNPV())
 * 
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.groupMonitorStart(ghandle, vStatus, mpV)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L17;
        }
        __pyx_L17:;
      }
  }

  /* "PyCafe.pyx":2328
 * 			status=self._c_cafe.groupMonitorStart(ghandle, vStatus, mpV)
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  __pyx_t_2 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":2329
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 
 */
    __pyx_t_2 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":2330
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

      /* "PyCafe.pyx":2329
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 
 */
    }

    /* "PyCafe.pyx":2328
 * 			status=self._c_cafe.groupMonitorStart(ghandle, vStatus, mpV)
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  }

  /* "PyCafe.pyx":2334
 * 
 * 
 * 		return status, vStatus             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __pyx_convert_vector_to_py_int(__pyx_v_vStatus); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
  __pyx_t_6 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2268
 * 
 * 	##################################################################################
 * 	def groupMonitorStart(self, ghandleName, object cb=None, DBR_TYPE dbr=DBR_TIME, unsigned int mask=DBE_VALUE|DBE_LOG|DBE_ALARM):             # <<<<<<<<<<<<<<
 * 	##########################################################################################
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("PyCafe.CyCafe.groupMonitorStart", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2338
 * 	##################################################################################
 * 
 * 	def getGroupStr(self, ghandleName):             # <<<<<<<<<<<<<<
 * 		return self.getGroup(ghandleName, 'str')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_177getGroupStr(PyObject *__pyx_v_self, PyObject *__pyx_v_ghandleName); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_177getGroupStr(PyObject *__pyx_v_self, PyObject *__pyx_v_ghandleName) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getGroupStr (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_176getGroupStr(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_ghandleName));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_176getGroupStr(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_ghandleName) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getGroupStr", 0);

  /* "PyCafe.pyx":2339
 * 
 * 	def getGroupStr(self, ghandleName):
 * 		return self.getGroup(ghandleName, 'str')             # <<<<<<<<<<<<<<
 * 
 * 	def getGroupInt(self, ghandleName):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getGroup); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_3) {
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_ghandleName);
  __Pyx_GIVEREF(__pyx_v_ghandleName);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_ghandleName);
  __Pyx_INCREF(__pyx_n_u_str);
  __Pyx_GIVEREF(__pyx_n_u_str);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_u_str);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2338
 * 	##################################################################################
 * 
 * 	def getGroupStr(self, ghandleName):             # <<<<<<<<<<<<<<
 * 		return self.getGroup(ghandleName, 'str')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.getGroupStr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2341
 * 		return self.getGroup(ghandleName, 'str')
 * 
 * 	def getGroupInt(self, ghandleName):             # <<<<<<<<<<<<<<
 * 		return self.getGroup(ghandleName, 'int')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_179getGroupInt(PyObject *__pyx_v_self, PyObject *__pyx_v_ghandleName); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_179getGroupInt(PyObject *__pyx_v_self, PyObject *__pyx_v_ghandleName) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getGroupInt (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_178getGroupInt(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_ghandleName));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_178getGroupInt(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_ghandleName) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getGroupInt", 0);

  /* "PyCafe.pyx":2342
 * 
 * 	def getGroupInt(self, ghandleName):
 * 		return self.getGroup(ghandleName, 'int')             # <<<<<<<<<<<<<<
 * 
 * 	def getGroupFloat(self, ghandleName):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getGroup); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_3) {
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_ghandleName);
  __Pyx_GIVEREF(__pyx_v_ghandleName);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_ghandleName);
  __Pyx_INCREF(__pyx_n_u_int);
  __Pyx_GIVEREF(__pyx_n_u_int);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_u_int);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2341
 * 		return self.getGroup(ghandleName, 'str')
 * 
 * 	def getGroupInt(self, ghandleName):             # <<<<<<<<<<<<<<
 * 		return self.getGroup(ghandleName, 'int')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.getGroupInt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2344
 * 		return self.getGroup(ghandleName, 'int')
 * 
 * 	def getGroupFloat(self, ghandleName):             # <<<<<<<<<<<<<<
 * 		return self.getGroup(ghandleName, 'float')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_181getGroupFloat(PyObject *__pyx_v_self, PyObject *__pyx_v_ghandleName); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_181getGroupFloat(PyObject *__pyx_v_self, PyObject *__pyx_v_ghandleName) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getGroupFloat (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_180getGroupFloat(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_ghandleName));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_180getGroupFloat(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_ghandleName) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getGroupFloat", 0);

  /* "PyCafe.pyx":2345
 * 
 * 	def getGroupFloat(self, ghandleName):
 * 		return self.getGroup(ghandleName, 'float')             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getGroup); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_3) {
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_ghandleName);
  __Pyx_GIVEREF(__pyx_v_ghandleName);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_ghandleName);
  __Pyx_INCREF(__pyx_n_u_float);
  __Pyx_GIVEREF(__pyx_n_u_float);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_u_float);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2344
 * 		return self.getGroup(ghandleName, 'int')
 * 
 * 	def getGroupFloat(self, ghandleName):             # <<<<<<<<<<<<<<
 * 		return self.getGroup(ghandleName, 'float')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.getGroupFloat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2348
 * 
 * 	##################################################################################
 * 	def getGroup(self, ghandleName, str dt='native'):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int ghandle=0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_183getGroup(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_183getGroup(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ghandleName = 0;
  PyObject *__pyx_v_dt = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getGroup (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ghandleName,&__pyx_n_s_dt,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject*)__pyx_n_u_native);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ghandleName)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getGroup") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2348; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ghandleName = values[0];
    __pyx_v_dt = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getGroup", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2348; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.getGroup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dt), (&PyUnicode_Type), 1, "dt", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_182getGroup(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_ghandleName, __pyx_v_dt);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_182getGroup(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_ghandleName, PyObject *__pyx_v_dt) {
  unsigned int __pyx_v_ghandle;
  PVGroup __pyx_v_pvg;
  PVDataHolder *__pyx_v_pvd;
  int __pyx_v_status;
  PyObject *__pyx_v_localList = NULL;
  PyObject *__pyx_v_statusList = NULL;
  unsigned int __pyx_v_dtn;
  unsigned int __pyx_v_dtcheck;
  long __pyx_v_i;
  PyObject *__pyx_v_localListInner = NULL;
  long __pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  long __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  int __pyx_t_9;
  long __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getGroup", 0);

  /* "PyCafe.pyx":2350
 * 	def getGroup(self, ghandleName, str dt='native'):
 * 
 * 		cdef unsigned int ghandle=0             # <<<<<<<<<<<<<<
 * 		if isinstance(ghandleName, (int,long)) == 1:
 * 			ghandle=ghandleName
 */
  __pyx_v_ghandle = 0;

  /* "PyCafe.pyx":2351
 * 
 * 		cdef unsigned int ghandle=0
 * 		if isinstance(ghandleName, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			ghandle=ghandleName
 * 		elif isinstance(ghandleName, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_ghandleName); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_ghandleName); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":2352
 * 		cdef unsigned int ghandle=0
 * 		if isinstance(ghandleName, (int,long)) == 1:
 * 			ghandle=ghandleName             # <<<<<<<<<<<<<<
 * 		elif isinstance(ghandleName, (str)) == 1:
 * 			ghandle=self.checkForGroupHandle(ghandleName)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_ghandleName); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_ghandle = __pyx_t_4;

    /* "PyCafe.pyx":2351
 * 
 * 		cdef unsigned int ghandle=0
 * 		if isinstance(ghandleName, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			ghandle=ghandleName
 * 		elif isinstance(ghandleName, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2353
 * 		if isinstance(ghandleName, (int,long)) == 1:
 * 			ghandle=ghandleName
 * 		elif isinstance(ghandleName, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			ghandle=self.checkForGroupHandle(ghandleName)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_ghandleName); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":2354
 * 			ghandle=ghandleName
 * 		elif isinstance(ghandleName, (str)) == 1:
 * 			ghandle=self.checkForGroupHandle(ghandleName)             # <<<<<<<<<<<<<<
 * 		else:
 * 
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_ghandleName))||((__pyx_v_ghandleName) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_ghandleName)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForGroupHandle(__pyx_v_self, ((PyObject*)__pyx_v_ghandleName), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_ghandle = __pyx_t_4;

    /* "PyCafe.pyx":2353
 * 		if isinstance(ghandleName, (int,long)) == 1:
 * 			ghandle=ghandleName
 * 		elif isinstance(ghandleName, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			ghandle=self.checkForGroupHandle(ghandleName)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2357
 * 		else:
 * 
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getGroup. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if group handle, else <type 'str'> if group name")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__163, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":2362
 * 		cdef PVGroup pvg
 * 
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			self._c_cafe.groupAttach(ghandle, pvg)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":2363
 * 
 * 		with nogil:
 * 			self._c_cafe.groupAttach(ghandle, pvg)             # <<<<<<<<<<<<<<
 * 
 * 		cdef PVDataHolder * pvd
 */
        __pyx_v_self->_c_cafe->groupAttach(__pyx_v_ghandle, __pyx_v_pvg);
      }

      /* "PyCafe.pyx":2362
 * 		cdef PVGroup pvg
 * 
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			self._c_cafe.groupAttach(ghandle, pvg)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L8;
        }
        __pyx_L8:;
      }
  }

  /* "PyCafe.pyx":2377
 * 		##
 * 
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.groupGet(ghandle, pvg)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":2378
 * 
 * 		with nogil:
 * 			status=self._c_cafe.groupGet(ghandle, pvg)             # <<<<<<<<<<<<<<
 * 
 * 		if status !=ICAFE_NORMAL:
 */
        __pyx_v_status = __pyx_v_self->_c_cafe->groupGet(__pyx_v_ghandle, __pyx_v_pvg);
      }

      /* "PyCafe.pyx":2377
 * 		##
 * 
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.groupGet(ghandle, pvg)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L11;
        }
        __pyx_L11:;
      }
  }

  /* "PyCafe.pyx":2380
 * 			status=self._c_cafe.groupGet(ghandle, pvg)
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  __pyx_t_1 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":2381
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 
 */
    __pyx_t_1 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":2382
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 
 * 			#do not raise exception
 */
      __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

      /* "PyCafe.pyx":2381
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 
 */
    }

    /* "PyCafe.pyx":2380
 * 			status=self._c_cafe.groupGet(ghandle, pvg)
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  }

  /* "PyCafe.pyx":2388
 * 		#pvg.showMaxMax(5,10)
 * 
 * 		pvd=pvg.getPVData()             # <<<<<<<<<<<<<<
 * 
 * 		localList=[]
 */
  __pyx_v_pvd = __pyx_v_pvg.getPVData();

  /* "PyCafe.pyx":2390
 * 		pvd=pvg.getPVData()
 * 
 * 		localList=[]             # <<<<<<<<<<<<<<
 * 		statusList=[]
 * 		cdef unsigned int dtn, dtcheck
 */
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_localList = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "PyCafe.pyx":2391
 * 
 * 		localList=[]
 * 		statusList=[]             # <<<<<<<<<<<<<<
 * 		cdef unsigned int dtn, dtcheck
 * 
 */
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_statusList = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "PyCafe.pyx":2394
 * 		cdef unsigned int dtn, dtcheck
 * 
 * 		for i in range(0, pvg.getNPV()):             # <<<<<<<<<<<<<<
 * 			dtn = pvd[i].getDataType();
 * 
 */
  __pyx_t_4 = __pyx_v_pvg.getNPV();
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_4; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "PyCafe.pyx":2395
 * 
 * 		for i in range(0, pvg.getNPV()):
 * 			dtn = pvd[i].getDataType();             # <<<<<<<<<<<<<<
 * 
 * 			dtcheck=getMatchedDataType(dt, dtn)
 */
    __pyx_v_dtn = (__pyx_v_pvd[__pyx_v_i]).getDataType();

    /* "PyCafe.pyx":2397
 * 			dtn = pvd[i].getDataType();
 * 
 * 			dtcheck=getMatchedDataType(dt, dtn)             # <<<<<<<<<<<<<<
 * 
 * 			statusList.append(pvd[i].getStatus())
 */
    __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_dtn); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __pyx_f_6PyCafe_getMatchedDataType(__pyx_v_dt, __pyx_t_5); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_unsigned_int(__pyx_t_7); if (unlikely((__pyx_t_8 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_dtcheck = __pyx_t_8;

    /* "PyCafe.pyx":2399
 * 			dtcheck=getMatchedDataType(dt, dtn)
 * 
 * 			statusList.append(pvd[i].getStatus())             # <<<<<<<<<<<<<<
 * 
 * 			if pvd[i].getNelem() == 1:
 */
    __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getStatus()); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_statusList, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "PyCafe.pyx":2401
 * 			statusList.append(pvd[i].getStatus())
 * 
 * 			if pvd[i].getNelem() == 1:             # <<<<<<<<<<<<<<
 * 				if dtcheck==CAFE_STRING:
 * 					localList.append(pvd[i].getAsString())
 */
    __pyx_t_1 = (((__pyx_v_pvd[__pyx_v_i]).getNelem() == 1) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":2402
 * 
 * 			if pvd[i].getNelem() == 1:
 * 				if dtcheck==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsString())
 * 				elif dtcheck==CAFE_SHORT:
 */
      switch (__pyx_v_dtcheck) {
        case CAFE_STRING:

        /* "PyCafe.pyx":2403
 * 			if pvd[i].getNelem() == 1:
 * 				if dtcheck==CAFE_STRING:
 * 					localList.append(pvd[i].getAsString())             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_SHORT:
 * 					localList.append(pvd[i].getAsLong())
 */
        __pyx_t_7 = __pyx_convert_PyStr_string_to_py_std__in_string((__pyx_v_pvd[__pyx_v_i]).getAsString()); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "PyCafe.pyx":2402
 * 
 * 			if pvd[i].getNelem() == 1:
 * 				if dtcheck==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsString())
 * 				elif dtcheck==CAFE_SHORT:
 */
        break;

        /* "PyCafe.pyx":2404
 * 				if dtcheck==CAFE_STRING:
 * 					localList.append(pvd[i].getAsString())
 * 				elif dtcheck==CAFE_SHORT:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_FLOAT:
 */
        case CAFE_SHORT:

        /* "PyCafe.pyx":2405
 * 					localList.append(pvd[i].getAsString())
 * 				elif dtcheck==CAFE_SHORT:
 * 					localList.append(pvd[i].getAsLong())             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_FLOAT:
 * 					localList.append(pvd[i].getAsDouble())
 */
        __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong()); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "PyCafe.pyx":2404
 * 				if dtcheck==CAFE_STRING:
 * 					localList.append(pvd[i].getAsString())
 * 				elif dtcheck==CAFE_SHORT:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_FLOAT:
 */
        break;

        /* "PyCafe.pyx":2406
 * 				elif dtcheck==CAFE_SHORT:
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_FLOAT:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsDouble())
 * 				elif dtcheck==CAFE_ENUM:
 */
        case CAFE_FLOAT:

        /* "PyCafe.pyx":2407
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_FLOAT:
 * 					localList.append(pvd[i].getAsDouble())             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_ENUM:
 * 					#if enum, string taken as native
 */
        __pyx_t_7 = PyFloat_FromDouble((__pyx_v_pvd[__pyx_v_i]).getAsDouble()); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "PyCafe.pyx":2406
 * 				elif dtcheck==CAFE_SHORT:
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_FLOAT:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsDouble())
 * 				elif dtcheck==CAFE_ENUM:
 */
        break;

        /* "PyCafe.pyx":2408
 * 				elif dtcheck==CAFE_FLOAT:
 * 					localList.append(pvd[i].getAsDouble())
 * 				elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 					#if enum, string taken as native
 * 
 */
        case CAFE_ENUM:

        /* "PyCafe.pyx":2411
 * 					#if enum, string taken as native
 * 
 * 					if self._c_cafe.isEnum(self.hh.getHandleFromPVWithinGroup(pvd[i].getPVName(),ghandle))==1:             # <<<<<<<<<<<<<<
 * 						localList.append(pvd[i].getAsString())
 * 					else:
 */
        __pyx_t_1 = ((__pyx_v_self->_c_cafe->isEnum(__pyx_v_self->hh.getHandleFromPVWithinGroup((__pyx_v_pvd[__pyx_v_i]).getPVName(), __pyx_v_ghandle)) == 1) != 0);
        if (__pyx_t_1) {

          /* "PyCafe.pyx":2412
 * 
 * 					if self._c_cafe.isEnum(self.hh.getHandleFromPVWithinGroup(pvd[i].getPVName(),ghandle))==1:
 * 						localList.append(pvd[i].getAsString())             # <<<<<<<<<<<<<<
 * 					else:
 * 						localList.append(pvd[i].getAsLong())
 */
          __pyx_t_7 = __pyx_convert_PyStr_string_to_py_std__in_string((__pyx_v_pvd[__pyx_v_i]).getAsString()); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

          /* "PyCafe.pyx":2411
 * 					#if enum, string taken as native
 * 
 * 					if self._c_cafe.isEnum(self.hh.getHandleFromPVWithinGroup(pvd[i].getPVName(),ghandle))==1:             # <<<<<<<<<<<<<<
 * 						localList.append(pvd[i].getAsString())
 * 					else:
 */
          goto __pyx_L17;
        }

        /* "PyCafe.pyx":2414
 * 						localList.append(pvd[i].getAsString())
 * 					else:
 * 						localList.append(pvd[i].getAsLong())             # <<<<<<<<<<<<<<
 * 
 * 				elif dtcheck==CAFE_CHAR:
 */
        /*else*/ {
          __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong()); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __pyx_L17:;

        /* "PyCafe.pyx":2408
 * 				elif dtcheck==CAFE_FLOAT:
 * 					localList.append(pvd[i].getAsDouble())
 * 				elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 					#if enum, string taken as native
 * 
 */
        break;

        /* "PyCafe.pyx":2416
 * 						localList.append(pvd[i].getAsLong())
 * 
 * 				elif dtcheck==CAFE_CHAR:             # <<<<<<<<<<<<<<
 * 					localList.append(<unsigned char> pvd[i].getAsChar())
 * 				elif dtcheck==CAFE_LONG:
 */
        case CAFE_CHAR:

        /* "PyCafe.pyx":2417
 * 
 * 				elif dtcheck==CAFE_CHAR:
 * 					localList.append(<unsigned char> pvd[i].getAsChar())             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_LONG:
 * 					localList.append(pvd[i].getAsLong())
 */
        __pyx_t_7 = __Pyx_PyInt_From_unsigned_char(((unsigned char)(__pyx_v_pvd[__pyx_v_i]).getAsChar())); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "PyCafe.pyx":2416
 * 						localList.append(pvd[i].getAsLong())
 * 
 * 				elif dtcheck==CAFE_CHAR:             # <<<<<<<<<<<<<<
 * 					localList.append(<unsigned char> pvd[i].getAsChar())
 * 				elif dtcheck==CAFE_LONG:
 */
        break;

        /* "PyCafe.pyx":2418
 * 				elif dtcheck==CAFE_CHAR:
 * 					localList.append(<unsigned char> pvd[i].getAsChar())
 * 				elif dtcheck==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_DOUBLE:
 */
        case CAFE_LONG:

        /* "PyCafe.pyx":2419
 * 					localList.append(<unsigned char> pvd[i].getAsChar())
 * 				elif dtcheck==CAFE_LONG:
 * 					localList.append(pvd[i].getAsLong())             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_DOUBLE:
 * 					localList.append(pvd[i].getAsDouble())
 */
        __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong()); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "PyCafe.pyx":2418
 * 				elif dtcheck==CAFE_CHAR:
 * 					localList.append(<unsigned char> pvd[i].getAsChar())
 * 				elif dtcheck==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_DOUBLE:
 */
        break;

        /* "PyCafe.pyx":2420
 * 				elif dtcheck==CAFE_LONG:
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsDouble())
 * 				else:
 */
        case CAFE_DOUBLE:

        /* "PyCafe.pyx":2421
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_DOUBLE:
 * 					localList.append(pvd[i].getAsDouble())             # <<<<<<<<<<<<<<
 * 				else:
 * 					localList.append(0) #no data
 */
        __pyx_t_7 = PyFloat_FromDouble((__pyx_v_pvd[__pyx_v_i]).getAsDouble()); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "PyCafe.pyx":2420
 * 				elif dtcheck==CAFE_LONG:
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsDouble())
 * 				else:
 */
        break;
        default:

        /* "PyCafe.pyx":2423
 * 					localList.append(pvd[i].getAsDouble())
 * 				else:
 * 					localList.append(0) #no data             # <<<<<<<<<<<<<<
 * 			else:
 * 				localListInner=[]
 */
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_int_0); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }

      /* "PyCafe.pyx":2401
 * 			statusList.append(pvd[i].getStatus())
 * 
 * 			if pvd[i].getNelem() == 1:             # <<<<<<<<<<<<<<
 * 				if dtcheck==CAFE_STRING:
 * 					localList.append(pvd[i].getAsString())
 */
      goto __pyx_L16;
    }

    /* "PyCafe.pyx":2425
 * 					localList.append(0) #no data
 * 			else:
 * 				localListInner=[]             # <<<<<<<<<<<<<<
 * 				if dtcheck==CAFE_STRING:
 * 					for j in range(0, pvd[i].getNelem()):
 */
    /*else*/ {
      __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_XDECREF_SET(__pyx_v_localListInner, ((PyObject*)__pyx_t_7));
      __pyx_t_7 = 0;

      /* "PyCafe.pyx":2426
 * 			else:
 * 				localListInner=[]
 * 				if dtcheck==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsString(j))
 */
      switch (__pyx_v_dtcheck) {
        case CAFE_STRING:

        /* "PyCafe.pyx":2427
 * 				localListInner=[]
 * 				if dtcheck==CAFE_STRING:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(pvd[i].getAsString(j))
 * 				elif dtcheck==CAFE_SHORT:
 */
        __pyx_t_8 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_8; __pyx_t_10+=1) {
          __pyx_v_j = __pyx_t_10;

          /* "PyCafe.pyx":2428
 * 				if dtcheck==CAFE_STRING:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsString(j))             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_SHORT:
 * 					for j in range(0, pvd[i].getNelem()):
 */
          __pyx_t_7 = __pyx_convert_PyStr_string_to_py_std__in_string((__pyx_v_pvd[__pyx_v_i]).getAsString(__pyx_v_j)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }

        /* "PyCafe.pyx":2426
 * 			else:
 * 				localListInner=[]
 * 				if dtcheck==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsString(j))
 */
        break;

        /* "PyCafe.pyx":2429
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsString(j))
 * 				elif dtcheck==CAFE_SHORT:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 */
        case CAFE_SHORT:

        /* "PyCafe.pyx":2430
 * 						localListInner.append(pvd[i].getAsString(j))
 * 				elif dtcheck==CAFE_SHORT:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_FLOAT:
 */
        __pyx_t_8 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_8; __pyx_t_10+=1) {
          __pyx_v_j = __pyx_t_10;

          /* "PyCafe.pyx":2431
 * 				elif dtcheck==CAFE_SHORT:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_FLOAT:
 * 					for j in range(0, pvd[i].getNelem()):
 */
          __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong(__pyx_v_j)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }

        /* "PyCafe.pyx":2429
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsString(j))
 * 				elif dtcheck==CAFE_SHORT:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 */
        break;

        /* "PyCafe.pyx":2432
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_FLOAT:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))
 */
        case CAFE_FLOAT:

        /* "PyCafe.pyx":2433
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_FLOAT:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(pvd[i].getAsDouble(j))
 * 				elif dtcheck==CAFE_ENUM:
 */
        __pyx_t_8 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_8; __pyx_t_10+=1) {
          __pyx_v_j = __pyx_t_10;

          /* "PyCafe.pyx":2434
 * 				elif dtcheck==CAFE_FLOAT:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_ENUM:
 * 
 */
          __pyx_t_7 = PyFloat_FromDouble((__pyx_v_pvd[__pyx_v_i]).getAsDouble(__pyx_v_j)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2434; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2434; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }

        /* "PyCafe.pyx":2432
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_FLOAT:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))
 */
        break;

        /* "PyCafe.pyx":2435
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))
 * 				elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 
 * 					for j in range(0, pvd[i].getNelem()):
 */
        case CAFE_ENUM:

        /* "PyCafe.pyx":2437
 * 				elif dtcheck==CAFE_ENUM:
 * 
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						#if enum, string taken as native
 * 						if self._c_cafe.isEnum(self.hh.getHandleFromPVWithinGroup(pvd[i].getPVName(),ghandle))==1:
 */
        __pyx_t_8 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_8; __pyx_t_10+=1) {
          __pyx_v_j = __pyx_t_10;

          /* "PyCafe.pyx":2439
 * 					for j in range(0, pvd[i].getNelem()):
 * 						#if enum, string taken as native
 * 						if self._c_cafe.isEnum(self.hh.getHandleFromPVWithinGroup(pvd[i].getPVName(),ghandle))==1:             # <<<<<<<<<<<<<<
 * 							localListInner.append(pvd[i].getAsString(j))
 * 						else:
 */
          __pyx_t_1 = ((__pyx_v_self->_c_cafe->isEnum(__pyx_v_self->hh.getHandleFromPVWithinGroup((__pyx_v_pvd[__pyx_v_i]).getPVName(), __pyx_v_ghandle)) == 1) != 0);
          if (__pyx_t_1) {

            /* "PyCafe.pyx":2440
 * 						#if enum, string taken as native
 * 						if self._c_cafe.isEnum(self.hh.getHandleFromPVWithinGroup(pvd[i].getPVName(),ghandle))==1:
 * 							localListInner.append(pvd[i].getAsString(j))             # <<<<<<<<<<<<<<
 * 						else:
 * 							localListInner.append(pvd[i].getAsLong(j))
 */
            __pyx_t_7 = __pyx_convert_PyStr_string_to_py_std__in_string((__pyx_v_pvd[__pyx_v_i]).getAsString(__pyx_v_j)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "PyCafe.pyx":2439
 * 					for j in range(0, pvd[i].getNelem()):
 * 						#if enum, string taken as native
 * 						if self._c_cafe.isEnum(self.hh.getHandleFromPVWithinGroup(pvd[i].getPVName(),ghandle))==1:             # <<<<<<<<<<<<<<
 * 							localListInner.append(pvd[i].getAsString(j))
 * 						else:
 */
            goto __pyx_L26;
          }

          /* "PyCafe.pyx":2442
 * 							localListInner.append(pvd[i].getAsString(j))
 * 						else:
 * 							localListInner.append(pvd[i].getAsLong(j))             # <<<<<<<<<<<<<<
 * 
 * 				elif dtcheck==CAFE_CHAR:
 */
          /*else*/ {
            __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong(__pyx_v_j)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          }
          __pyx_L26:;
        }

        /* "PyCafe.pyx":2435
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))
 * 				elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 
 * 					for j in range(0, pvd[i].getNelem()):
 */
        break;

        /* "PyCafe.pyx":2444
 * 							localListInner.append(pvd[i].getAsLong(j))
 * 
 * 				elif dtcheck==CAFE_CHAR:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j)) #<unsigned char> pvd[i].getAsChar(j))
 */
        case CAFE_CHAR:

        /* "PyCafe.pyx":2445
 * 
 * 				elif dtcheck==CAFE_CHAR:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(pvd[i].getAsLong(j)) #<unsigned char> pvd[i].getAsChar(j))
 * 				elif dtcheck==CAFE_LONG:
 */
        __pyx_t_8 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_8; __pyx_t_10+=1) {
          __pyx_v_j = __pyx_t_10;

          /* "PyCafe.pyx":2446
 * 				elif dtcheck==CAFE_CHAR:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j)) #<unsigned char> pvd[i].getAsChar(j))             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_LONG:
 * 					for j in range(0, pvd[i].getNelem()):
 */
          __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong(__pyx_v_j)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }

        /* "PyCafe.pyx":2444
 * 							localListInner.append(pvd[i].getAsLong(j))
 * 
 * 				elif dtcheck==CAFE_CHAR:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j)) #<unsigned char> pvd[i].getAsChar(j))
 */
        break;

        /* "PyCafe.pyx":2447
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j)) #<unsigned char> pvd[i].getAsChar(j))
 * 				elif dtcheck==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 */
        case CAFE_LONG:

        /* "PyCafe.pyx":2448
 * 						localListInner.append(pvd[i].getAsLong(j)) #<unsigned char> pvd[i].getAsChar(j))
 * 				elif dtcheck==CAFE_LONG:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_DOUBLE:
 */
        __pyx_t_8 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_8; __pyx_t_10+=1) {
          __pyx_v_j = __pyx_t_10;

          /* "PyCafe.pyx":2449
 * 				elif dtcheck==CAFE_LONG:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_DOUBLE:
 * 					for j in range(0, pvd[i].getNelem()):
 */
          __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong(__pyx_v_j)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }

        /* "PyCafe.pyx":2447
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j)) #<unsigned char> pvd[i].getAsChar(j))
 * 				elif dtcheck==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 */
        break;

        /* "PyCafe.pyx":2450
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))
 */
        case CAFE_DOUBLE:

        /* "PyCafe.pyx":2451
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_DOUBLE:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(pvd[i].getAsDouble(j))
 * 				else:
 */
        __pyx_t_8 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_8; __pyx_t_10+=1) {
          __pyx_v_j = __pyx_t_10;

          /* "PyCafe.pyx":2452
 * 				elif dtcheck==CAFE_DOUBLE:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))             # <<<<<<<<<<<<<<
 * 				else:
 * 					for j in range(0, pvd[i].getNelem()):
 */
          __pyx_t_7 = PyFloat_FromDouble((__pyx_v_pvd[__pyx_v_i]).getAsDouble(__pyx_v_j)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }

        /* "PyCafe.pyx":2450
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))
 */
        break;
        default:

        /* "PyCafe.pyx":2454
 * 						localListInner.append(pvd[i].getAsDouble(j))
 * 				else:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(0) #no data
 * 				localList.append(localListInner)
 */
        __pyx_t_8 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_8; __pyx_t_10+=1) {
          __pyx_v_j = __pyx_t_10;

          /* "PyCafe.pyx":2455
 * 				else:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(0) #no data             # <<<<<<<<<<<<<<
 * 				localList.append(localListInner)
 * 
 */
          __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_int_0); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }

      /* "PyCafe.pyx":2456
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(0) #no data
 * 				localList.append(localListInner)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_v_localListInner); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L16:;
  }

  /* "PyCafe.pyx":2459
 * 
 * 
 * 		return localList, status, statusList             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_localList);
  __Pyx_GIVEREF(__pyx_v_localList);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_localList);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);
  __Pyx_INCREF(__pyx_v_statusList);
  __Pyx_GIVEREF(__pyx_v_statusList);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_statusList);
  __pyx_t_7 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2348
 * 
 * 	##################################################################################
 * 	def getGroup(self, ghandleName, str dt='native'):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int ghandle=0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("PyCafe.CyCafe.getGroup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_localList);
  __Pyx_XDECREF(__pyx_v_statusList);
  __Pyx_XDECREF(__pyx_v_localListInner);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2468
 * 
 * 	##################################################################################
 * 	def getGroupCache(self, ghandleName, str dt='native'):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int ghandle=0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_185getGroupCache(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_185getGroupCache(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ghandleName = 0;
  PyObject *__pyx_v_dt = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getGroupCache (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ghandleName,&__pyx_n_s_dt,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject*)__pyx_n_u_native);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ghandleName)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getGroupCache") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2468; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ghandleName = values[0];
    __pyx_v_dt = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getGroupCache", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2468; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.getGroupCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dt), (&PyUnicode_Type), 1, "dt", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_184getGroupCache(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_ghandleName, __pyx_v_dt);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_184getGroupCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_ghandleName, PyObject *__pyx_v_dt) {
  unsigned int __pyx_v_ghandle;
  PVGroup __pyx_v_pvg;
  PVDataHolder *__pyx_v_pvd;
  int __pyx_v_status;
  PyObject *__pyx_v_localList = NULL;
  PyObject *__pyx_v_statusList = NULL;
  unsigned int __pyx_v_dtn;
  unsigned int __pyx_v_dtcheck;
  long __pyx_v_i;
  PyObject *__pyx_v_localListInner = NULL;
  long __pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  long __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  int __pyx_t_9;
  long __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getGroupCache", 0);

  /* "PyCafe.pyx":2470
 * 	def getGroupCache(self, ghandleName, str dt='native'):
 * 
 * 		cdef unsigned int ghandle=0             # <<<<<<<<<<<<<<
 * 		if isinstance(ghandleName, (int,long)) == 1:
 * 			ghandle=ghandleName
 */
  __pyx_v_ghandle = 0;

  /* "PyCafe.pyx":2471
 * 
 * 		cdef unsigned int ghandle=0
 * 		if isinstance(ghandleName, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			ghandle=ghandleName
 * 		elif isinstance(ghandleName, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_ghandleName); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_ghandleName); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":2472
 * 		cdef unsigned int ghandle=0
 * 		if isinstance(ghandleName, (int,long)) == 1:
 * 			ghandle=ghandleName             # <<<<<<<<<<<<<<
 * 		elif isinstance(ghandleName, (str)) == 1:
 * 			ghandle=self.checkForGroupHandle(ghandleName)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_ghandleName); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_ghandle = __pyx_t_4;

    /* "PyCafe.pyx":2471
 * 
 * 		cdef unsigned int ghandle=0
 * 		if isinstance(ghandleName, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			ghandle=ghandleName
 * 		elif isinstance(ghandleName, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2473
 * 		if isinstance(ghandleName, (int,long)) == 1:
 * 			ghandle=ghandleName
 * 		elif isinstance(ghandleName, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			ghandle=self.checkForGroupHandle(ghandleName)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_ghandleName); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":2474
 * 			ghandle=ghandleName
 * 		elif isinstance(ghandleName, (str)) == 1:
 * 			ghandle=self.checkForGroupHandle(ghandleName)             # <<<<<<<<<<<<<<
 * 		else:
 * 
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_ghandleName))||((__pyx_v_ghandleName) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_ghandleName)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForGroupHandle(__pyx_v_self, ((PyObject*)__pyx_v_ghandleName), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_ghandle = __pyx_t_4;

    /* "PyCafe.pyx":2473
 * 		if isinstance(ghandleName, (int,long)) == 1:
 * 			ghandle=ghandleName
 * 		elif isinstance(ghandleName, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			ghandle=self.checkForGroupHandle(ghandleName)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2477
 * 		else:
 * 
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getGroup. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if group handle, else <type 'str'> if group name")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__164, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":2482
 * 		cdef PVGroup pvg
 * 
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			self._c_cafe.groupAttach(ghandle, pvg)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":2483
 * 
 * 		with nogil:
 * 			self._c_cafe.groupAttach(ghandle, pvg)             # <<<<<<<<<<<<<<
 * 
 * 		cdef PVDataHolder * pvd
 */
        __pyx_v_self->_c_cafe->groupAttach(__pyx_v_ghandle, __pyx_v_pvg);
      }

      /* "PyCafe.pyx":2482
 * 		cdef PVGroup pvg
 * 
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			self._c_cafe.groupAttach(ghandle, pvg)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L8;
        }
        __pyx_L8:;
      }
  }

  /* "PyCafe.pyx":2487
 * 		cdef PVDataHolder * pvd
 * 
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.groupGetCache(ghandle, pvg)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":2488
 * 
 * 		with nogil:
 * 			status=self._c_cafe.groupGetCache(ghandle, pvg)             # <<<<<<<<<<<<<<
 * 
 * 		if status !=ICAFE_NORMAL:
 */
        __pyx_v_status = __pyx_v_self->_c_cafe->groupGetCache(__pyx_v_ghandle, __pyx_v_pvg);
      }

      /* "PyCafe.pyx":2487
 * 		cdef PVDataHolder * pvd
 * 
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.groupGetCache(ghandle, pvg)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L11;
        }
        __pyx_L11:;
      }
  }

  /* "PyCafe.pyx":2490
 * 			status=self._c_cafe.groupGetCache(ghandle, pvg)
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  __pyx_t_1 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":2491
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 
 */
    __pyx_t_1 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":2492
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 
 * 			#do not raise exception
 */
      __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

      /* "PyCafe.pyx":2491
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 
 */
    }

    /* "PyCafe.pyx":2490
 * 			status=self._c_cafe.groupGetCache(ghandle, pvg)
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  }

  /* "PyCafe.pyx":2498
 * 
 * 
 * 		pvd=pvg.getPVData()             # <<<<<<<<<<<<<<
 * 
 * 		localList=[]
 */
  __pyx_v_pvd = __pyx_v_pvg.getPVData();

  /* "PyCafe.pyx":2500
 * 		pvd=pvg.getPVData()
 * 
 * 		localList=[]             # <<<<<<<<<<<<<<
 * 		statusList=[]
 * 		cdef unsigned int dtn, dtcheck
 */
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_localList = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "PyCafe.pyx":2501
 * 
 * 		localList=[]
 * 		statusList=[]             # <<<<<<<<<<<<<<
 * 		cdef unsigned int dtn, dtcheck
 * 
 */
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_statusList = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "PyCafe.pyx":2504
 * 		cdef unsigned int dtn, dtcheck
 * 
 * 		for i in range(0, pvg.getNPV()):             # <<<<<<<<<<<<<<
 * 			dtn = pvd[i].getDataType();
 * 
 */
  __pyx_t_4 = __pyx_v_pvg.getNPV();
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_4; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "PyCafe.pyx":2505
 * 
 * 		for i in range(0, pvg.getNPV()):
 * 			dtn = pvd[i].getDataType();             # <<<<<<<<<<<<<<
 * 
 * 			dtcheck=getMatchedDataType(dt, dtn)
 */
    __pyx_v_dtn = (__pyx_v_pvd[__pyx_v_i]).getDataType();

    /* "PyCafe.pyx":2507
 * 			dtn = pvd[i].getDataType();
 * 
 * 			dtcheck=getMatchedDataType(dt, dtn)             # <<<<<<<<<<<<<<
 * 
 * 			statusList.append(pvd[i].getStatus())
 */
    __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_dtn); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2507; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __pyx_f_6PyCafe_getMatchedDataType(__pyx_v_dt, __pyx_t_5); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2507; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_unsigned_int(__pyx_t_7); if (unlikely((__pyx_t_8 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2507; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_dtcheck = __pyx_t_8;

    /* "PyCafe.pyx":2509
 * 			dtcheck=getMatchedDataType(dt, dtn)
 * 
 * 			statusList.append(pvd[i].getStatus())             # <<<<<<<<<<<<<<
 * 
 * 			if pvd[i].getNelem() == 1:
 */
    __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getStatus()); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_statusList, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "PyCafe.pyx":2511
 * 			statusList.append(pvd[i].getStatus())
 * 
 * 			if pvd[i].getNelem() == 1:             # <<<<<<<<<<<<<<
 * 				if dtcheck==CAFE_STRING:
 * 					localList.append(pvd[i].getAsString())
 */
    __pyx_t_1 = (((__pyx_v_pvd[__pyx_v_i]).getNelem() == 1) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":2512
 * 
 * 			if pvd[i].getNelem() == 1:
 * 				if dtcheck==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsString())
 * 				elif dtcheck==CAFE_SHORT:
 */
      switch (__pyx_v_dtcheck) {
        case CAFE_STRING:

        /* "PyCafe.pyx":2513
 * 			if pvd[i].getNelem() == 1:
 * 				if dtcheck==CAFE_STRING:
 * 					localList.append(pvd[i].getAsString())             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_SHORT:
 * 					localList.append(pvd[i].getAsLong())
 */
        __pyx_t_7 = __pyx_convert_PyStr_string_to_py_std__in_string((__pyx_v_pvd[__pyx_v_i]).getAsString()); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "PyCafe.pyx":2512
 * 
 * 			if pvd[i].getNelem() == 1:
 * 				if dtcheck==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsString())
 * 				elif dtcheck==CAFE_SHORT:
 */
        break;

        /* "PyCafe.pyx":2514
 * 				if dtcheck==CAFE_STRING:
 * 					localList.append(pvd[i].getAsString())
 * 				elif dtcheck==CAFE_SHORT:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_FLOAT:
 */
        case CAFE_SHORT:

        /* "PyCafe.pyx":2515
 * 					localList.append(pvd[i].getAsString())
 * 				elif dtcheck==CAFE_SHORT:
 * 					localList.append(pvd[i].getAsLong())             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_FLOAT:
 * 					localList.append(pvd[i].getAsDouble())
 */
        __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong()); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "PyCafe.pyx":2514
 * 				if dtcheck==CAFE_STRING:
 * 					localList.append(pvd[i].getAsString())
 * 				elif dtcheck==CAFE_SHORT:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_FLOAT:
 */
        break;

        /* "PyCafe.pyx":2516
 * 				elif dtcheck==CAFE_SHORT:
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_FLOAT:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsDouble())
 * 				elif dtcheck==CAFE_ENUM:
 */
        case CAFE_FLOAT:

        /* "PyCafe.pyx":2517
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_FLOAT:
 * 					localList.append(pvd[i].getAsDouble())             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_ENUM:
 * 					#if enum, string taken as native
 */
        __pyx_t_7 = PyFloat_FromDouble((__pyx_v_pvd[__pyx_v_i]).getAsDouble()); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "PyCafe.pyx":2516
 * 				elif dtcheck==CAFE_SHORT:
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_FLOAT:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsDouble())
 * 				elif dtcheck==CAFE_ENUM:
 */
        break;

        /* "PyCafe.pyx":2518
 * 				elif dtcheck==CAFE_FLOAT:
 * 					localList.append(pvd[i].getAsDouble())
 * 				elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 					#if enum, string taken as native
 * 
 */
        case CAFE_ENUM:

        /* "PyCafe.pyx":2521
 * 					#if enum, string taken as native
 * 
 * 					if self._c_cafe.isEnum(self.hh.getHandleFromPVWithinGroup(pvd[i].getPVName(),ghandle))==1:             # <<<<<<<<<<<<<<
 * 						localList.append(pvd[i].getAsString())
 * 					else:
 */
        __pyx_t_1 = ((__pyx_v_self->_c_cafe->isEnum(__pyx_v_self->hh.getHandleFromPVWithinGroup((__pyx_v_pvd[__pyx_v_i]).getPVName(), __pyx_v_ghandle)) == 1) != 0);
        if (__pyx_t_1) {

          /* "PyCafe.pyx":2522
 * 
 * 					if self._c_cafe.isEnum(self.hh.getHandleFromPVWithinGroup(pvd[i].getPVName(),ghandle))==1:
 * 						localList.append(pvd[i].getAsString())             # <<<<<<<<<<<<<<
 * 					else:
 * 						localList.append(pvd[i].getAsLong())
 */
          __pyx_t_7 = __pyx_convert_PyStr_string_to_py_std__in_string((__pyx_v_pvd[__pyx_v_i]).getAsString()); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

          /* "PyCafe.pyx":2521
 * 					#if enum, string taken as native
 * 
 * 					if self._c_cafe.isEnum(self.hh.getHandleFromPVWithinGroup(pvd[i].getPVName(),ghandle))==1:             # <<<<<<<<<<<<<<
 * 						localList.append(pvd[i].getAsString())
 * 					else:
 */
          goto __pyx_L17;
        }

        /* "PyCafe.pyx":2524
 * 						localList.append(pvd[i].getAsString())
 * 					else:
 * 						localList.append(pvd[i].getAsLong())             # <<<<<<<<<<<<<<
 * 
 * 				elif dtcheck==CAFE_CHAR:
 */
        /*else*/ {
          __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong()); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __pyx_L17:;

        /* "PyCafe.pyx":2518
 * 				elif dtcheck==CAFE_FLOAT:
 * 					localList.append(pvd[i].getAsDouble())
 * 				elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 					#if enum, string taken as native
 * 
 */
        break;

        /* "PyCafe.pyx":2526
 * 						localList.append(pvd[i].getAsLong())
 * 
 * 				elif dtcheck==CAFE_CHAR:             # <<<<<<<<<<<<<<
 * 					localList.append(<unsigned char> pvd[i].getAsChar())
 * 				elif dtcheck==CAFE_LONG:
 */
        case CAFE_CHAR:

        /* "PyCafe.pyx":2527
 * 
 * 				elif dtcheck==CAFE_CHAR:
 * 					localList.append(<unsigned char> pvd[i].getAsChar())             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_LONG:
 * 					localList.append(pvd[i].getAsLong())
 */
        __pyx_t_7 = __Pyx_PyInt_From_unsigned_char(((unsigned char)(__pyx_v_pvd[__pyx_v_i]).getAsChar())); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "PyCafe.pyx":2526
 * 						localList.append(pvd[i].getAsLong())
 * 
 * 				elif dtcheck==CAFE_CHAR:             # <<<<<<<<<<<<<<
 * 					localList.append(<unsigned char> pvd[i].getAsChar())
 * 				elif dtcheck==CAFE_LONG:
 */
        break;

        /* "PyCafe.pyx":2528
 * 				elif dtcheck==CAFE_CHAR:
 * 					localList.append(<unsigned char> pvd[i].getAsChar())
 * 				elif dtcheck==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_DOUBLE:
 */
        case CAFE_LONG:

        /* "PyCafe.pyx":2529
 * 					localList.append(<unsigned char> pvd[i].getAsChar())
 * 				elif dtcheck==CAFE_LONG:
 * 					localList.append(pvd[i].getAsLong())             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_DOUBLE:
 * 					localList.append(pvd[i].getAsDouble())
 */
        __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong()); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "PyCafe.pyx":2528
 * 				elif dtcheck==CAFE_CHAR:
 * 					localList.append(<unsigned char> pvd[i].getAsChar())
 * 				elif dtcheck==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_DOUBLE:
 */
        break;

        /* "PyCafe.pyx":2530
 * 				elif dtcheck==CAFE_LONG:
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsDouble())
 * 				else:
 */
        case CAFE_DOUBLE:

        /* "PyCafe.pyx":2531
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_DOUBLE:
 * 					localList.append(pvd[i].getAsDouble())             # <<<<<<<<<<<<<<
 * 				else:
 * 					localList.append(0) #no data
 */
        __pyx_t_7 = PyFloat_FromDouble((__pyx_v_pvd[__pyx_v_i]).getAsDouble()); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "PyCafe.pyx":2530
 * 				elif dtcheck==CAFE_LONG:
 * 					localList.append(pvd[i].getAsLong())
 * 				elif dtcheck==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 					localList.append(pvd[i].getAsDouble())
 * 				else:
 */
        break;
        default:

        /* "PyCafe.pyx":2533
 * 					localList.append(pvd[i].getAsDouble())
 * 				else:
 * 					localList.append(0) #no data             # <<<<<<<<<<<<<<
 * 			else:
 * 				localListInner=[]
 */
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_int_0); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }

      /* "PyCafe.pyx":2511
 * 			statusList.append(pvd[i].getStatus())
 * 
 * 			if pvd[i].getNelem() == 1:             # <<<<<<<<<<<<<<
 * 				if dtcheck==CAFE_STRING:
 * 					localList.append(pvd[i].getAsString())
 */
      goto __pyx_L16;
    }

    /* "PyCafe.pyx":2535
 * 					localList.append(0) #no data
 * 			else:
 * 				localListInner=[]             # <<<<<<<<<<<<<<
 * 				if dtcheck==CAFE_STRING:
 * 					for j in range(0, pvd[i].getNelem()):
 */
    /*else*/ {
      __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_XDECREF_SET(__pyx_v_localListInner, ((PyObject*)__pyx_t_7));
      __pyx_t_7 = 0;

      /* "PyCafe.pyx":2536
 * 			else:
 * 				localListInner=[]
 * 				if dtcheck==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsString(j))
 */
      switch (__pyx_v_dtcheck) {
        case CAFE_STRING:

        /* "PyCafe.pyx":2537
 * 				localListInner=[]
 * 				if dtcheck==CAFE_STRING:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(pvd[i].getAsString(j))
 * 				elif dtcheck==CAFE_SHORT:
 */
        __pyx_t_8 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_8; __pyx_t_10+=1) {
          __pyx_v_j = __pyx_t_10;

          /* "PyCafe.pyx":2538
 * 				if dtcheck==CAFE_STRING:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsString(j))             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_SHORT:
 * 					for j in range(0, pvd[i].getNelem()):
 */
          __pyx_t_7 = __pyx_convert_PyStr_string_to_py_std__in_string((__pyx_v_pvd[__pyx_v_i]).getAsString(__pyx_v_j)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }

        /* "PyCafe.pyx":2536
 * 			else:
 * 				localListInner=[]
 * 				if dtcheck==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsString(j))
 */
        break;

        /* "PyCafe.pyx":2539
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsString(j))
 * 				elif dtcheck==CAFE_SHORT:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 */
        case CAFE_SHORT:

        /* "PyCafe.pyx":2540
 * 						localListInner.append(pvd[i].getAsString(j))
 * 				elif dtcheck==CAFE_SHORT:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_FLOAT:
 */
        __pyx_t_8 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_8; __pyx_t_10+=1) {
          __pyx_v_j = __pyx_t_10;

          /* "PyCafe.pyx":2541
 * 				elif dtcheck==CAFE_SHORT:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_FLOAT:
 * 					for j in range(0, pvd[i].getNelem()):
 */
          __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong(__pyx_v_j)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2541; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2541; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }

        /* "PyCafe.pyx":2539
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsString(j))
 * 				elif dtcheck==CAFE_SHORT:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 */
        break;

        /* "PyCafe.pyx":2542
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_FLOAT:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))
 */
        case CAFE_FLOAT:

        /* "PyCafe.pyx":2543
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_FLOAT:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(pvd[i].getAsDouble(j))
 * 				elif dtcheck==CAFE_ENUM:
 */
        __pyx_t_8 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_8; __pyx_t_10+=1) {
          __pyx_v_j = __pyx_t_10;

          /* "PyCafe.pyx":2544
 * 				elif dtcheck==CAFE_FLOAT:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_ENUM:
 * 
 */
          __pyx_t_7 = PyFloat_FromDouble((__pyx_v_pvd[__pyx_v_i]).getAsDouble(__pyx_v_j)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }

        /* "PyCafe.pyx":2542
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_FLOAT:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))
 */
        break;

        /* "PyCafe.pyx":2545
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))
 * 				elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 
 * 					for j in range(0, pvd[i].getNelem()):
 */
        case CAFE_ENUM:

        /* "PyCafe.pyx":2547
 * 				elif dtcheck==CAFE_ENUM:
 * 
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						#if enum, string taken as native
 * 						if self._c_cafe.isEnum(self.hh.getHandleFromPVWithinGroup(pvd[i].getPVName(),ghandle))==1:
 */
        __pyx_t_8 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_8; __pyx_t_10+=1) {
          __pyx_v_j = __pyx_t_10;

          /* "PyCafe.pyx":2549
 * 					for j in range(0, pvd[i].getNelem()):
 * 						#if enum, string taken as native
 * 						if self._c_cafe.isEnum(self.hh.getHandleFromPVWithinGroup(pvd[i].getPVName(),ghandle))==1:             # <<<<<<<<<<<<<<
 * 							localListInner.append(pvd[i].getAsString(j))
 * 						else:
 */
          __pyx_t_1 = ((__pyx_v_self->_c_cafe->isEnum(__pyx_v_self->hh.getHandleFromPVWithinGroup((__pyx_v_pvd[__pyx_v_i]).getPVName(), __pyx_v_ghandle)) == 1) != 0);
          if (__pyx_t_1) {

            /* "PyCafe.pyx":2550
 * 						#if enum, string taken as native
 * 						if self._c_cafe.isEnum(self.hh.getHandleFromPVWithinGroup(pvd[i].getPVName(),ghandle))==1:
 * 							localListInner.append(pvd[i].getAsString(j))             # <<<<<<<<<<<<<<
 * 						else:
 * 							localListInner.append(pvd[i].getAsLong(j))
 */
            __pyx_t_7 = __pyx_convert_PyStr_string_to_py_std__in_string((__pyx_v_pvd[__pyx_v_i]).getAsString(__pyx_v_j)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "PyCafe.pyx":2549
 * 					for j in range(0, pvd[i].getNelem()):
 * 						#if enum, string taken as native
 * 						if self._c_cafe.isEnum(self.hh.getHandleFromPVWithinGroup(pvd[i].getPVName(),ghandle))==1:             # <<<<<<<<<<<<<<
 * 							localListInner.append(pvd[i].getAsString(j))
 * 						else:
 */
            goto __pyx_L26;
          }

          /* "PyCafe.pyx":2552
 * 							localListInner.append(pvd[i].getAsString(j))
 * 						else:
 * 							localListInner.append(pvd[i].getAsLong(j))             # <<<<<<<<<<<<<<
 * 
 * 				elif dtcheck==CAFE_CHAR:
 */
          /*else*/ {
            __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong(__pyx_v_j)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          }
          __pyx_L26:;
        }

        /* "PyCafe.pyx":2545
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))
 * 				elif dtcheck==CAFE_ENUM:             # <<<<<<<<<<<<<<
 * 
 * 					for j in range(0, pvd[i].getNelem()):
 */
        break;

        /* "PyCafe.pyx":2554
 * 							localListInner.append(pvd[i].getAsLong(j))
 * 
 * 				elif dtcheck==CAFE_CHAR:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j)) #<unsigned char> pvd[i].getAsChar(j))
 */
        case CAFE_CHAR:

        /* "PyCafe.pyx":2555
 * 
 * 				elif dtcheck==CAFE_CHAR:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(pvd[i].getAsLong(j)) #<unsigned char> pvd[i].getAsChar(j))
 * 				elif dtcheck==CAFE_LONG:
 */
        __pyx_t_8 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_8; __pyx_t_10+=1) {
          __pyx_v_j = __pyx_t_10;

          /* "PyCafe.pyx":2556
 * 				elif dtcheck==CAFE_CHAR:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j)) #<unsigned char> pvd[i].getAsChar(j))             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_LONG:
 * 					for j in range(0, pvd[i].getNelem()):
 */
          __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong(__pyx_v_j)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }

        /* "PyCafe.pyx":2554
 * 							localListInner.append(pvd[i].getAsLong(j))
 * 
 * 				elif dtcheck==CAFE_CHAR:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j)) #<unsigned char> pvd[i].getAsChar(j))
 */
        break;

        /* "PyCafe.pyx":2557
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j)) #<unsigned char> pvd[i].getAsChar(j))
 * 				elif dtcheck==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 */
        case CAFE_LONG:

        /* "PyCafe.pyx":2558
 * 						localListInner.append(pvd[i].getAsLong(j)) #<unsigned char> pvd[i].getAsChar(j))
 * 				elif dtcheck==CAFE_LONG:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_DOUBLE:
 */
        __pyx_t_8 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_8; __pyx_t_10+=1) {
          __pyx_v_j = __pyx_t_10;

          /* "PyCafe.pyx":2559
 * 				elif dtcheck==CAFE_LONG:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))             # <<<<<<<<<<<<<<
 * 				elif dtcheck==CAFE_DOUBLE:
 * 					for j in range(0, pvd[i].getNelem()):
 */
          __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getAsLong(__pyx_v_j)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }

        /* "PyCafe.pyx":2557
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j)) #<unsigned char> pvd[i].getAsChar(j))
 * 				elif dtcheck==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 */
        break;

        /* "PyCafe.pyx":2560
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))
 */
        case CAFE_DOUBLE:

        /* "PyCafe.pyx":2561
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_DOUBLE:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(pvd[i].getAsDouble(j))
 * 				else:
 */
        __pyx_t_8 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_8; __pyx_t_10+=1) {
          __pyx_v_j = __pyx_t_10;

          /* "PyCafe.pyx":2562
 * 				elif dtcheck==CAFE_DOUBLE:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))             # <<<<<<<<<<<<<<
 * 				else:
 * 					for j in range(0, pvd[i].getNelem()):
 */
          __pyx_t_7 = PyFloat_FromDouble((__pyx_v_pvd[__pyx_v_i]).getAsDouble(__pyx_v_j)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }

        /* "PyCafe.pyx":2560
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsLong(j))
 * 				elif dtcheck==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(pvd[i].getAsDouble(j))
 */
        break;
        default:

        /* "PyCafe.pyx":2564
 * 						localListInner.append(pvd[i].getAsDouble(j))
 * 				else:
 * 					for j in range(0, pvd[i].getNelem()):             # <<<<<<<<<<<<<<
 * 						localListInner.append(0) #no data
 * 				localList.append(localListInner)
 */
        __pyx_t_8 = (__pyx_v_pvd[__pyx_v_i]).getNelem();
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_8; __pyx_t_10+=1) {
          __pyx_v_j = __pyx_t_10;

          /* "PyCafe.pyx":2565
 * 				else:
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(0) #no data             # <<<<<<<<<<<<<<
 * 				localList.append(localListInner)
 * 
 */
          __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localListInner, __pyx_int_0); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }

      /* "PyCafe.pyx":2566
 * 					for j in range(0, pvd[i].getNelem()):
 * 						localListInner.append(0) #no data
 * 				localList.append(localListInner)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_v_localListInner); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L16:;
  }

  /* "PyCafe.pyx":2569
 * 
 * 
 * 		return localList, status, statusList             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_localList);
  __Pyx_GIVEREF(__pyx_v_localList);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_localList);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);
  __Pyx_INCREF(__pyx_v_statusList);
  __Pyx_GIVEREF(__pyx_v_statusList);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_statusList);
  __pyx_t_7 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2468
 * 
 * 	##################################################################################
 * 	def getGroupCache(self, ghandleName, str dt='native'):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int ghandle=0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("PyCafe.CyCafe.getGroupCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_localList);
  __Pyx_XDECREF(__pyx_v_statusList);
  __Pyx_XDECREF(__pyx_v_localListInner);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2580
 * 	##################################################################################
 * 
 * 	def getPVGroupStr(self, ghandleName):             # <<<<<<<<<<<<<<
 * 		return self.getPVGroup(ghandleName, dt='str')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_187getPVGroupStr(PyObject *__pyx_v_self, PyObject *__pyx_v_ghandleName); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_187getPVGroupStr(PyObject *__pyx_v_self, PyObject *__pyx_v_ghandleName) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPVGroupStr (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_186getPVGroupStr(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_ghandleName));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_186getPVGroupStr(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_ghandleName) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPVGroupStr", 0);

  /* "PyCafe.pyx":2581
 * 
 * 	def getPVGroupStr(self, ghandleName):
 * 		return self.getPVGroup(ghandleName, dt='str')             # <<<<<<<<<<<<<<
 * 
 * 	def getPVGroupInt(self, ghandleName):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getPVGroup); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_ghandleName);
  __Pyx_GIVEREF(__pyx_v_ghandleName);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_ghandleName);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dt, __pyx_n_u_str) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2580
 * 	##################################################################################
 * 
 * 	def getPVGroupStr(self, ghandleName):             # <<<<<<<<<<<<<<
 * 		return self.getPVGroup(ghandleName, dt='str')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PyCafe.CyCafe.getPVGroupStr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2583
 * 		return self.getPVGroup(ghandleName, dt='str')
 * 
 * 	def getPVGroupInt(self, ghandleName):             # <<<<<<<<<<<<<<
 * 		return self.getPVGroup(ghandleName, dt='int')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_189getPVGroupInt(PyObject *__pyx_v_self, PyObject *__pyx_v_ghandleName); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_189getPVGroupInt(PyObject *__pyx_v_self, PyObject *__pyx_v_ghandleName) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPVGroupInt (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_188getPVGroupInt(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_ghandleName));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_188getPVGroupInt(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_ghandleName) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPVGroupInt", 0);

  /* "PyCafe.pyx":2584
 * 
 * 	def getPVGroupInt(self, ghandleName):
 * 		return self.getPVGroup(ghandleName, dt='int')             # <<<<<<<<<<<<<<
 * 
 * 	def getPVGroupFloat(self, ghandleName):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getPVGroup); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_ghandleName);
  __Pyx_GIVEREF(__pyx_v_ghandleName);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_ghandleName);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dt, __pyx_n_u_int) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2583
 * 		return self.getPVGroup(ghandleName, dt='str')
 * 
 * 	def getPVGroupInt(self, ghandleName):             # <<<<<<<<<<<<<<
 * 		return self.getPVGroup(ghandleName, dt='int')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PyCafe.CyCafe.getPVGroupInt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2586
 * 		return self.getPVGroup(ghandleName, dt='int')
 * 
 * 	def getPVGroupFloat(self, ghandleName):             # <<<<<<<<<<<<<<
 * 		return self.getPVGroup(ghandleName, dt='float')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_191getPVGroupFloat(PyObject *__pyx_v_self, PyObject *__pyx_v_ghandleName); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_191getPVGroupFloat(PyObject *__pyx_v_self, PyObject *__pyx_v_ghandleName) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPVGroupFloat (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_190getPVGroupFloat(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_ghandleName));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_190getPVGroupFloat(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_ghandleName) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPVGroupFloat", 0);

  /* "PyCafe.pyx":2587
 * 
 * 	def getPVGroupFloat(self, ghandleName):
 * 		return self.getPVGroup(ghandleName, dt='float')             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getPVGroup); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_ghandleName);
  __Pyx_GIVEREF(__pyx_v_ghandleName);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_ghandleName);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dt, __pyx_n_u_float) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2586
 * 		return self.getPVGroup(ghandleName, dt='int')
 * 
 * 	def getPVGroupFloat(self, ghandleName):             # <<<<<<<<<<<<<<
 * 		return self.getPVGroup(ghandleName, dt='float')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PyCafe.CyCafe.getPVGroupFloat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2590
 * 
 * 	##################################################################################
 * 	def getPVGroup(self, ghandleName, str dt='native'):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int ghandle=0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_193getPVGroup(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_193getPVGroup(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ghandleName = 0;
  PyObject *__pyx_v_dt = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPVGroup (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ghandleName,&__pyx_n_s_dt,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject*)__pyx_n_u_native);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ghandleName)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getPVGroup") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2590; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ghandleName = values[0];
    __pyx_v_dt = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getPVGroup", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2590; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.getPVGroup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dt), (&PyUnicode_Type), 1, "dt", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2590; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_192getPVGroup(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_ghandleName, __pyx_v_dt);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_192getPVGroup(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_ghandleName, PyObject *__pyx_v_dt) {
  unsigned int __pyx_v_ghandle;
  PVGroup __pyx_v_pvg;
  int __pyx_v_status;
  PVDataHolder *__pyx_v_pvd;
  PyObject *__pyx_v_localList = NULL;
  long __pyx_v_i;
  struct __pyx_obj_6PyCafe_pvgroup *__pyx_v_pg = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  long __pyx_t_6;
  struct __pyx_opt_args_6PyCafe_PVDataHolderToStruct __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPVGroup", 0);

  /* "PyCafe.pyx":2592
 * 	def getPVGroup(self, ghandleName, str dt='native'):
 * 
 * 		cdef unsigned int ghandle=0             # <<<<<<<<<<<<<<
 * 		if isinstance(ghandleName, (int,long)) == 1:
 * 			ghandle=ghandleName
 */
  __pyx_v_ghandle = 0;

  /* "PyCafe.pyx":2593
 * 
 * 		cdef unsigned int ghandle=0
 * 		if isinstance(ghandleName, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			ghandle=ghandleName
 * 		elif isinstance(ghandleName, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_ghandleName); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_ghandleName); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":2594
 * 		cdef unsigned int ghandle=0
 * 		if isinstance(ghandleName, (int,long)) == 1:
 * 			ghandle=ghandleName             # <<<<<<<<<<<<<<
 * 		elif isinstance(ghandleName, (str)) == 1:
 * 			ghandle=self.checkForGroupHandle(ghandleName)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_ghandleName); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_ghandle = __pyx_t_4;

    /* "PyCafe.pyx":2593
 * 
 * 		cdef unsigned int ghandle=0
 * 		if isinstance(ghandleName, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			ghandle=ghandleName
 * 		elif isinstance(ghandleName, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2595
 * 		if isinstance(ghandleName, (int,long)) == 1:
 * 			ghandle=ghandleName
 * 		elif isinstance(ghandleName, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			ghandle=self.checkForGroupHandle(ghandleName)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_ghandleName); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":2596
 * 			ghandle=ghandleName
 * 		elif isinstance(ghandleName, (str)) == 1:
 * 			ghandle=self.checkForGroupHandle(ghandleName)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getPVGroup. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_ghandleName))||((__pyx_v_ghandleName) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_ghandleName)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForGroupHandle(__pyx_v_self, ((PyObject*)__pyx_v_ghandleName), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_ghandle = __pyx_t_4;

    /* "PyCafe.pyx":2595
 * 		if isinstance(ghandleName, (int,long)) == 1:
 * 			ghandle=ghandleName
 * 		elif isinstance(ghandleName, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			ghandle=self.checkForGroupHandle(ghandleName)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2598
 * 			ghandle=self.checkForGroupHandle(ghandleName)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getPVGroup. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if group handle, else <type 'str'> if group name")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__165, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":2605
 * 
 * 
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			self._c_cafe.groupAttach(ghandle, pvg)
 * 			status=self._c_cafe.groupGet(ghandle, pvg)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":2606
 * 
 * 		with nogil:
 * 			self._c_cafe.groupAttach(ghandle, pvg)             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.groupGet(ghandle, pvg)
 * 
 */
        __pyx_v_self->_c_cafe->groupAttach(__pyx_v_ghandle, __pyx_v_pvg);

        /* "PyCafe.pyx":2607
 * 		with nogil:
 * 			self._c_cafe.groupAttach(ghandle, pvg)
 * 			status=self._c_cafe.groupGet(ghandle, pvg)             # <<<<<<<<<<<<<<
 * 
 * 		if status !=ICAFE_NORMAL:
 */
        __pyx_v_status = __pyx_v_self->_c_cafe->groupGet(__pyx_v_ghandle, __pyx_v_pvg);
      }

      /* "PyCafe.pyx":2605
 * 
 * 
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			self._c_cafe.groupAttach(ghandle, pvg)
 * 			status=self._c_cafe.groupGet(ghandle, pvg)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L8;
        }
        __pyx_L8:;
      }
  }

  /* "PyCafe.pyx":2609
 * 			status=self._c_cafe.groupGet(ghandle, pvg)
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  __pyx_t_1 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":2610
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 			#do not raise exception
 */
    __pyx_t_1 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":2611
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 			#do not raise exception
 * 			#raise Exception("EXCEPTION RAISED in PyCafe def getPVGroup. Status = %d" %status)
 */
      __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

      /* "PyCafe.pyx":2610
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 			#do not raise exception
 */
    }

    /* "PyCafe.pyx":2609
 * 			status=self._c_cafe.groupGet(ghandle, pvg)
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  }

  /* "PyCafe.pyx":2616
 * 
 * 		cdef PVDataHolder * pvd
 * 		pvd=pvg.getPVData()             # <<<<<<<<<<<<<<
 * 
 * 		localList=[]
 */
  __pyx_v_pvd = __pyx_v_pvg.getPVData();

  /* "PyCafe.pyx":2618
 * 		pvd=pvg.getPVData()
 * 
 * 		localList=[]             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(0, pvg.getNPV()):
 */
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_localList = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "PyCafe.pyx":2620
 * 		localList=[]
 * 
 * 		for i in range(0, pvg.getNPV()):             # <<<<<<<<<<<<<<
 * 			localList.append(PVDataHolderToStruct(pvd[i], dt))
 * 
 */
  __pyx_t_4 = __pyx_v_pvg.getNPV();
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_4; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "PyCafe.pyx":2621
 * 
 * 		for i in range(0, pvg.getNPV()):
 * 			localList.append(PVDataHolderToStruct(pvd[i], dt))             # <<<<<<<<<<<<<<
 * 
 * 		cpdef pvgroup pg
 */
    __pyx_t_7.__pyx_n = 1;
    __pyx_t_7.dt = __pyx_v_dt;
    __pyx_t_5 = ((PyObject *)__pyx_f_6PyCafe_PVDataHolderToStruct((__pyx_v_pvd[__pyx_v_i]), &__pyx_t_7)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2621; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_localList, __pyx_t_5); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2621; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "PyCafe.pyx":2625
 * 		cpdef pvgroup pg
 * 
 * 		pg = pvgroup()             # <<<<<<<<<<<<<<
 * 		pg.pvdata=localList
 * 		pg.npv=pvg.getNPV()
 */
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6PyCafe_pvgroup), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_pg = ((struct __pyx_obj_6PyCafe_pvgroup *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "PyCafe.pyx":2626
 * 
 * 		pg = pvgroup()
 * 		pg.pvdata=localList             # <<<<<<<<<<<<<<
 * 		pg.npv=pvg.getNPV()
 * 		pg.name=pvg.getNameAsString()
 */
  __Pyx_INCREF(__pyx_v_localList);
  __Pyx_GIVEREF(__pyx_v_localList);
  __Pyx_GOTREF(__pyx_v_pg->pvdata);
  __Pyx_DECREF(__pyx_v_pg->pvdata);
  __pyx_v_pg->pvdata = __pyx_v_localList;

  /* "PyCafe.pyx":2627
 * 		pg = pvgroup()
 * 		pg.pvdata=localList
 * 		pg.npv=pvg.getNPV()             # <<<<<<<<<<<<<<
 * 		pg.name=pvg.getNameAsString()
 * 		pg.groupStatus=pvg.getStatusGroup()
 */
  __pyx_v_pg->npv = __pyx_v_pvg.getNPV();

  /* "PyCafe.pyx":2628
 * 		pg.pvdata=localList
 * 		pg.npv=pvg.getNPV()
 * 		pg.name=pvg.getNameAsString()             # <<<<<<<<<<<<<<
 * 		pg.groupStatus=pvg.getStatusGroup()
 * 		pg.groupHandle=pvg.getGroupHandle()
 */
  __pyx_v_pg->name = __pyx_v_pvg.getNameAsString();

  /* "PyCafe.pyx":2629
 * 		pg.npv=pvg.getNPV()
 * 		pg.name=pvg.getNameAsString()
 * 		pg.groupStatus=pvg.getStatusGroup()             # <<<<<<<<<<<<<<
 * 		pg.groupHandle=pvg.getGroupHandle()
 * 
 */
  __pyx_v_pg->groupStatus = __pyx_v_pvg.getStatusGroup();

  /* "PyCafe.pyx":2630
 * 		pg.name=pvg.getNameAsString()
 * 		pg.groupStatus=pvg.getStatusGroup()
 * 		pg.groupHandle=pvg.getGroupHandle()             # <<<<<<<<<<<<<<
 * 
 * 		#pg.showMax(10)
 */
  __pyx_v_pg->groupHandle = __pyx_v_pvg.getGroupHandle();

  /* "PyCafe.pyx":2634
 * 		#pg.showMax(10)
 * 
 * 		return pg #localList, status             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 	#END: def getPVGroup(self, ghandleName, str dt='native')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_pg));
  __pyx_r = ((PyObject *)__pyx_v_pg);
  goto __pyx_L0;

  /* "PyCafe.pyx":2590
 * 
 * 	##################################################################################
 * 	def getPVGroup(self, ghandleName, str dt='native'):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int ghandle=0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.getPVGroup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_localList);
  __Pyx_XDECREF((PyObject *)__pyx_v_pg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2641
 * 
 * 	##################################################################################
 * 	def PVGroupValuesToList(self, pvgroup pg):             # <<<<<<<<<<<<<<
 * 		glist=[]
 * 		for i in range(0,pg.npv):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_195PVGroupValuesToList(PyObject *__pyx_v_self, PyObject *__pyx_v_pg); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_195PVGroupValuesToList(PyObject *__pyx_v_self, PyObject *__pyx_v_pg) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PVGroupValuesToList (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pg), __pyx_ptype_6PyCafe_pvgroup, 1, "pg", 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_194PVGroupValuesToList(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((struct __pyx_obj_6PyCafe_pvgroup *)__pyx_v_pg));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_194PVGroupValuesToList(CYTHON_UNUSED struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, struct __pyx_obj_6PyCafe_pvgroup *__pyx_v_pg) {
  PyObject *__pyx_v_glist = NULL;
  long __pyx_v_i;
  PyObject *__pyx_v_iL = NULL;
  Py_ssize_t __pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned int __pyx_t_2;
  long __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PVGroupValuesToList", 0);

  /* "PyCafe.pyx":2642
 * 	##################################################################################
 * 	def PVGroupValuesToList(self, pvgroup pg):
 * 		glist=[]             # <<<<<<<<<<<<<<
 * 		for i in range(0,pg.npv):
 * 			if len(pg.pvdata[i].value)==1:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_glist = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCafe.pyx":2643
 * 	def PVGroupValuesToList(self, pvgroup pg):
 * 		glist=[]
 * 		for i in range(0,pg.npv):             # <<<<<<<<<<<<<<
 * 			if len(pg.pvdata[i].value)==1:
 * 				glist.append(pg.pvdata[i].value[0])
 */
  __pyx_t_2 = __pyx_v_pg->npv;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "PyCafe.pyx":2644
 * 		glist=[]
 * 		for i in range(0,pg.npv):
 * 			if len(pg.pvdata[i].value)==1:             # <<<<<<<<<<<<<<
 * 				glist.append(pg.pvdata[i].value[0])
 * 			else:
 */
    if (unlikely(__pyx_v_pg->pvdata == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_pg->pvdata, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2644; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_value_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = ((__pyx_t_5 == 1) != 0);
    if (__pyx_t_6) {

      /* "PyCafe.pyx":2645
 * 		for i in range(0,pg.npv):
 * 			if len(pg.pvdata[i].value)==1:
 * 				glist.append(pg.pvdata[i].value[0])             # <<<<<<<<<<<<<<
 * 			else:
 * 				iL=[]
 */
      if (unlikely(__pyx_v_pg->pvdata == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_pg->pvdata, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2645; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_value_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2645; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_glist, __pyx_t_4); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "PyCafe.pyx":2644
 * 		glist=[]
 * 		for i in range(0,pg.npv):
 * 			if len(pg.pvdata[i].value)==1:             # <<<<<<<<<<<<<<
 * 				glist.append(pg.pvdata[i].value[0])
 * 			else:
 */
      goto __pyx_L5;
    }

    /* "PyCafe.pyx":2647
 * 				glist.append(pg.pvdata[i].value[0])
 * 			else:
 * 				iL=[]             # <<<<<<<<<<<<<<
 * 				for j in range(0, len(pg.pvdata[i].value)):
 * 					iL.append(pg.pvdata[i].value[j])
 */
    /*else*/ {
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_iL, ((PyObject*)__pyx_t_4));
      __pyx_t_4 = 0;

      /* "PyCafe.pyx":2648
 * 			else:
 * 				iL=[]
 * 				for j in range(0, len(pg.pvdata[i].value)):             # <<<<<<<<<<<<<<
 * 					iL.append(pg.pvdata[i].value[j])
 * 				glist.append(iL)
 */
      if (unlikely(__pyx_v_pg->pvdata == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_pg->pvdata, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2648; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_value_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_5; __pyx_t_8+=1) {
        __pyx_v_j = __pyx_t_8;

        /* "PyCafe.pyx":2649
 * 				iL=[]
 * 				for j in range(0, len(pg.pvdata[i].value)):
 * 					iL.append(pg.pvdata[i].value[j])             # <<<<<<<<<<<<<<
 * 				glist.append(iL)
 * 		return glist
 */
        if (unlikely(__pyx_v_pg->pvdata == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_pg->pvdata, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2649; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_value_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, __pyx_v_j, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2649; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_iL, __pyx_t_1); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }

      /* "PyCafe.pyx":2650
 * 				for j in range(0, len(pg.pvdata[i].value)):
 * 					iL.append(pg.pvdata[i].value[j])
 * 				glist.append(iL)             # <<<<<<<<<<<<<<
 * 		return glist
 * 	##################################################################################
 */
      __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_glist, __pyx_v_iL); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L5:;
  }

  /* "PyCafe.pyx":2651
 * 					iL.append(pg.pvdata[i].value[j])
 * 				glist.append(iL)
 * 		return glist             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_glist);
  __pyx_r = __pyx_v_glist;
  goto __pyx_L0;

  /* "PyCafe.pyx":2641
 * 
 * 	##################################################################################
 * 	def PVGroupValuesToList(self, pvgroup pg):             # <<<<<<<<<<<<<<
 * 		glist=[]
 * 		for i in range(0,pg.npv):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PyCafe.CyCafe.PVGroupValuesToList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_glist);
  __Pyx_XDECREF(__pyx_v_iL);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2656
 * 
 * 	##################################################################################
 * 	def groupMemberList(self, str gname):             # <<<<<<<<<<<<<<
 * 		cdef vector[string] pvlist
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_197groupMemberList(PyObject *__pyx_v_self, PyObject *__pyx_v_gname); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_197groupMemberList(PyObject *__pyx_v_self, PyObject *__pyx_v_gname) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("groupMemberList (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gname), (&PyUnicode_Type), 1, "gname", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_196groupMemberList(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject*)__pyx_v_gname));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_196groupMemberList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_gname) {
  std::vector<std::string>  __pyx_v_pvlist;
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("groupMemberList", 0);

  /* "PyCafe.pyx":2659
 * 		cdef vector[string] pvlist
 * 
 * 		status=self._c_cafe.groupMemberList(gname, pvlist)             # <<<<<<<<<<<<<<
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 */
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_gname); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_status = __pyx_v_self->_c_cafe->groupMemberList(__pyx_t_1, __pyx_v_pvlist);

  /* "PyCafe.pyx":2660
 * 
 * 		status=self._c_cafe.groupMemberList(gname, pvlist)
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  __pyx_t_2 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":2661
 * 		status=self._c_cafe.groupMemberList(gname, pvlist)
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 
 */
    __pyx_t_2 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":2662
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 
 * #for i in range(0, len(pvlist)):
 */
      __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

      /* "PyCafe.pyx":2661
 * 		status=self._c_cafe.groupMemberList(gname, pvlist)
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 
 */
    }

    /* "PyCafe.pyx":2660
 * 
 * 		status=self._c_cafe.groupMemberList(gname, pvlist)
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  }

  /* "PyCafe.pyx":2666
 * #for i in range(0, len(pvlist)):
 * #			memberList.append(pvlist[i])
 * 		return pvlist             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_pvlist); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2656
 * 
 * 	##################################################################################
 * 	def groupMemberList(self, str gname):             # <<<<<<<<<<<<<<
 * 		cdef vector[string] pvlist
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("PyCafe.CyCafe.groupMemberList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2671
 * 	##################################################################################
 * 
 * 	def grouping(self, char * gname, list _pvlist):             # <<<<<<<<<<<<<<
 * 
 * 		cdef int status
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_199grouping(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_199grouping(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_gname;
  PyObject *__pyx_v__pvlist = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("grouping (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gname,&__pyx_n_s_pvlist,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gname)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pvlist)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("grouping", 1, 2, 2, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2671; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "grouping") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2671; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_gname = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_gname) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2671; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v__pvlist = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("grouping", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2671; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.grouping", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v__pvlist), (&PyList_Type), 1, "_pvlist", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_198grouping(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_gname, __pyx_v__pvlist);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_198grouping(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, char *__pyx_v_gname, PyObject *__pyx_v__pvlist) {
  int __pyx_v_status;
  unsigned int __pyx_v_ghandle;
  char *__pyx_v__gname;
  CYTHON_UNUSED PyObject *__pyx_v_localList = 0;
  PyObject *__pyx_v_statusList = 0;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<char const *>  __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("grouping", 0);

  /* "PyCafe.pyx":2674
 * 
 * 		cdef int status
 * 		status=self._c_cafe.groupDefine(gname, _pvlist)             # <<<<<<<<<<<<<<
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_char__const___2a_(__pyx_v__pvlist); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_status = __pyx_v_self->_c_cafe->groupDefine(__pyx_v_gname, __pyx_t_1);

  /* "PyCafe.pyx":2675
 * 		cdef int status
 * 		status=self._c_cafe.groupDefine(gname, _pvlist)
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  __pyx_t_2 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":2676
 * 		status=self._c_cafe.groupDefine(gname, _pvlist)
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 
 */
    __pyx_t_2 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":2677
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int ghandle=0
 */
      __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

      /* "PyCafe.pyx":2676
 * 		status=self._c_cafe.groupDefine(gname, _pvlist)
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 
 */
    }

    /* "PyCafe.pyx":2675
 * 		cdef int status
 * 		status=self._c_cafe.groupDefine(gname, _pvlist)
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  }

  /* "PyCafe.pyx":2679
 * 				self._c_cafe.printStatusMessage(status)
 * 
 * 		cdef unsigned int ghandle=0             # <<<<<<<<<<<<<<
 * 		cdef char * _gname=gname
 * 
 */
  __pyx_v_ghandle = 0;

  /* "PyCafe.pyx":2680
 * 
 * 		cdef unsigned int ghandle=0
 * 		cdef char * _gname=gname             # <<<<<<<<<<<<<<
 * 
 * 		try:
 */
  __pyx_v__gname = __pyx_v_gname;

  /* "PyCafe.pyx":2682
 * 		cdef char * _gname=gname
 * 
 * 		try:             # <<<<<<<<<<<<<<
 * 			self._c_cafe.groupOpen(_gname, ghandle)
 * 		except:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "PyCafe.pyx":2683
 * 
 * 		try:
 * 			self._c_cafe.groupOpen(_gname, ghandle)             # <<<<<<<<<<<<<<
 * 		except:
 * 			raise Exception("EXCEPTION RAISED in PyCafe def grouping. ERROR OPENING PVGROUP= %s" %_gname)
 */
      try {
        __pyx_v_self->_c_cafe->groupOpen(__pyx_v__gname, __pyx_v_ghandle);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2683; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
      }

      /* "PyCafe.pyx":2682
 * 		cdef char * _gname=gname
 * 
 * 		try:             # <<<<<<<<<<<<<<
 * 			self._c_cafe.groupOpen(_gname, ghandle)
 * 		except:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L12_try_end;
    __pyx_L5_error:;

    /* "PyCafe.pyx":2684
 * 		try:
 * 			self._c_cafe.groupOpen(_gname, ghandle)
 * 		except:             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def grouping. ERROR OPENING PVGROUP= %s" %_gname)
 * 
 */
    /*except:*/ {
      __Pyx_AddTraceback("PyCafe.CyCafe.grouping", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2684; __pyx_clineno = __LINE__; goto __pyx_L7_except_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "PyCafe.pyx":2685
 * 			self._c_cafe.groupOpen(_gname, ghandle)
 * 		except:
 * 			raise Exception("EXCEPTION RAISED in PyCafe def grouping. ERROR OPENING PVGROUP= %s" %_gname)             # <<<<<<<<<<<<<<
 * 
 * 		cdef:
 */
      __pyx_t_9 = __Pyx_PyStr_FromString(__pyx_v__gname); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2685; __pyx_clineno = __LINE__; goto __pyx_L7_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_12, __pyx_t_9); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2685; __pyx_clineno = __LINE__; goto __pyx_L7_except_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2685; __pyx_clineno = __LINE__; goto __pyx_L7_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_9, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2685; __pyx_clineno = __LINE__; goto __pyx_L7_except_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2685; __pyx_clineno = __LINE__; goto __pyx_L7_except_error;}
    }
    __pyx_L7_except_error:;

    /* "PyCafe.pyx":2682
 * 		cdef char * _gname=gname
 * 
 * 		try:             # <<<<<<<<<<<<<<
 * 			self._c_cafe.groupOpen(_gname, ghandle)
 * 		except:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L12_try_end:;
  }

  /* "PyCafe.pyx":2692
 * 
 * 
 * 		if self._c_cafe.channelOpenGroupPolicy.getWhenToFlushSendBuffer()==FLUSH_NOW:             # <<<<<<<<<<<<<<
 * 
 * 			localList,status,statusList= self.getGroup(ghandle)
 */
  __pyx_t_2 = ((__pyx_v_self->_c_cafe->channelOpenGroupPolicy.getWhenToFlushSendBuffer() == FLUSH_NOW) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":2694
 * 		if self._c_cafe.channelOpenGroupPolicy.getWhenToFlushSendBuffer()==FLUSH_NOW:
 * 
 * 			localList,status,statusList= self.getGroup(ghandle)             # <<<<<<<<<<<<<<
 * 
 * 			if status !=ICAFE_NORMAL:
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getGroup); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyInt_From_unsigned_int(__pyx_v_ghandle); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_10 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_10) {
      __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_8);
    } else {
      __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_10); __pyx_t_10 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_8))) || (PyList_CheckExact(__pyx_t_8))) {
      PyObject* sequence = __pyx_t_8;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_6 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_10 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
      index = 0; __pyx_t_7 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_7)) goto __pyx_L16_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      index = 1; __pyx_t_9 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_9)) goto __pyx_L16_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      index = 2; __pyx_t_6 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_6)) goto __pyx_L16_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 3) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_11 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L17_unpacking_done;
      __pyx_L16_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L17_unpacking_done:;
    }
    if (!(likely(PyList_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_7)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (!(likely(PyList_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_6)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_localList = ((PyObject*)__pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_v_status = __pyx_t_12;
    __pyx_v_statusList = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "PyCafe.pyx":2696
 * 			localList,status,statusList= self.getGroup(ghandle)
 * 
 * 			if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 				if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 					print ("")
 */
    __pyx_t_2 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":2697
 * 
 * 			if status !=ICAFE_NORMAL:
 * 				if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 					print ("")
 * 					print ("Error in def grouping for group named", _gname)
 */
      __pyx_t_2 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
      if (__pyx_t_2) {

        /* "PyCafe.pyx":2698
 * 			if status !=ICAFE_NORMAL:
 * 				if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 					print ("")             # <<<<<<<<<<<<<<
 * 					print ("Error in def grouping for group named", _gname)
 * 					self._c_cafe.printStatusMessage(status)
 */
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__166, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "PyCafe.pyx":2699
 * 				if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 					print ("")
 * 					print ("Error in def grouping for group named", _gname)             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 					print ("Analysing statusList[]...")
 */
        __pyx_t_8 = __Pyx_PyStr_FromString(__pyx_v__gname); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_kp_u_Error_in_def_grouping_for_group);
        __Pyx_GIVEREF(__pyx_kp_u_Error_in_def_grouping_for_group);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u_Error_in_def_grouping_for_group);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_6, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "PyCafe.pyx":2700
 * 					print ("")
 * 					print ("Error in def grouping for group named", _gname)
 * 					self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 					print ("Analysing statusList[]...")
 * 					for i in range(0, len(statusList)):
 */
        __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

        /* "PyCafe.pyx":2701
 * 					print ("Error in def grouping for group named", _gname)
 * 					self._c_cafe.printStatusMessage(status)
 * 					print ("Analysing statusList[]...")             # <<<<<<<<<<<<<<
 * 					for i in range(0, len(statusList)):
 * 						if statusList[i] !=ICAFE_NORMAL:
 */
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__167, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2701; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "PyCafe.pyx":2702
 * 					self._c_cafe.printStatusMessage(status)
 * 					print ("Analysing statusList[]...")
 * 					for i in range(0, len(statusList)):             # <<<<<<<<<<<<<<
 * 						if statusList[i] !=ICAFE_NORMAL:
 * 							print ("PV", _pvlist[i], "[",i,"]", " has error: ")
 */
        if (unlikely(__pyx_v_statusList == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_13 = PyList_GET_SIZE(__pyx_v_statusList); if (unlikely(__pyx_t_13 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
          __pyx_v_i = __pyx_t_14;

          /* "PyCafe.pyx":2703
 * 					print ("Analysing statusList[]...")
 * 					for i in range(0, len(statusList)):
 * 						if statusList[i] !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 							print ("PV", _pvlist[i], "[",i,"]", " has error: ")
 * 							self._c_cafe.printStatusMessage(statusList[i])
 */
          if (unlikely(__pyx_v_statusList == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_statusList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2703; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_6 = __Pyx_PyInt_From_int(ICAFE_NORMAL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_9 = PyObject_RichCompare(__pyx_t_8, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (__pyx_t_2) {

            /* "PyCafe.pyx":2704
 * 					for i in range(0, len(statusList)):
 * 						if statusList[i] !=ICAFE_NORMAL:
 * 							print ("PV", _pvlist[i], "[",i,"]", " has error: ")             # <<<<<<<<<<<<<<
 * 							self._c_cafe.printStatusMessage(statusList[i])
 * 							print ("")
 */
            if (unlikely(__pyx_v__pvlist == Py_None)) {
              PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
              {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            __pyx_t_9 = __Pyx_GetItemInt_List(__pyx_v__pvlist, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2704; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_i); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_8 = PyTuple_New(6); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_INCREF(__pyx_n_u_PV_3);
            __Pyx_GIVEREF(__pyx_n_u_PV_3);
            PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_n_u_PV_3);
            __Pyx_GIVEREF(__pyx_t_9);
            PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
            __Pyx_INCREF(__pyx_kp_u__168);
            __Pyx_GIVEREF(__pyx_kp_u__168);
            PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_kp_u__168);
            __Pyx_GIVEREF(__pyx_t_6);
            PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_6);
            __Pyx_INCREF(__pyx_kp_u__169);
            __Pyx_GIVEREF(__pyx_kp_u__169);
            PyTuple_SET_ITEM(__pyx_t_8, 4, __pyx_kp_u__169);
            __Pyx_INCREF(__pyx_kp_u_has_error);
            __Pyx_GIVEREF(__pyx_kp_u_has_error);
            PyTuple_SET_ITEM(__pyx_t_8, 5, __pyx_kp_u_has_error);
            __pyx_t_9 = 0;
            __pyx_t_6 = 0;
            __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

            /* "PyCafe.pyx":2705
 * 						if statusList[i] !=ICAFE_NORMAL:
 * 							print ("PV", _pvlist[i], "[",i,"]", " has error: ")
 * 							self._c_cafe.printStatusMessage(statusList[i])             # <<<<<<<<<<<<<<
 * 							print ("")
 * 		return ghandle
 */
            if (unlikely(__pyx_v_statusList == Py_None)) {
              PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
              {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            __pyx_t_6 = __Pyx_GetItemInt_List(__pyx_v_statusList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2705; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __pyx_v_self->_c_cafe->printStatusMessage(__pyx_t_12);

            /* "PyCafe.pyx":2706
 * 							print ("PV", _pvlist[i], "[",i,"]", " has error: ")
 * 							self._c_cafe.printStatusMessage(statusList[i])
 * 							print ("")             # <<<<<<<<<<<<<<
 * 		return ghandle
 * 
 */
            __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__170, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

            /* "PyCafe.pyx":2703
 * 					print ("Analysing statusList[]...")
 * 					for i in range(0, len(statusList)):
 * 						if statusList[i] !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 							print ("PV", _pvlist[i], "[",i,"]", " has error: ")
 * 							self._c_cafe.printStatusMessage(statusList[i])
 */
          }
        }

        /* "PyCafe.pyx":2697
 * 
 * 			if status !=ICAFE_NORMAL:
 * 				if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 					print ("")
 * 					print ("Error in def grouping for group named", _gname)
 */
      }

      /* "PyCafe.pyx":2696
 * 			localList,status,statusList= self.getGroup(ghandle)
 * 
 * 			if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 				if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 					print ("")
 */
    }

    /* "PyCafe.pyx":2692
 * 
 * 
 * 		if self._c_cafe.channelOpenGroupPolicy.getWhenToFlushSendBuffer()==FLUSH_NOW:             # <<<<<<<<<<<<<<
 * 
 * 			localList,status,statusList= self.getGroup(ghandle)
 */
  }

  /* "PyCafe.pyx":2707
 * 							self._c_cafe.printStatusMessage(statusList[i])
 * 							print ("")
 * 		return ghandle             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyInt_From_unsigned_int(__pyx_v_ghandle); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2671
 * 	##################################################################################
 * 
 * 	def grouping(self, char * gname, list _pvlist):             # <<<<<<<<<<<<<<
 * 
 * 		cdef int status
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("PyCafe.CyCafe.grouping", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_localList);
  __Pyx_XDECREF(__pyx_v_statusList);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2711
 * 
 * 	##################################################################################
 * 	def defineGroup(self,  char * gname, list _pvlist):             # <<<<<<<<<<<<<<
 * 		#cdef vector[const char *] pvlist
 * 		#for i in range(0, len(_pvlist)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_201defineGroup(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_201defineGroup(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_gname;
  PyObject *__pyx_v__pvlist = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("defineGroup (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gname,&__pyx_n_s_pvlist,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gname)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pvlist)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("defineGroup", 1, 2, 2, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2711; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "defineGroup") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2711; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_gname = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_gname) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2711; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v__pvlist = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("defineGroup", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2711; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.defineGroup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v__pvlist), (&PyList_Type), 1, "_pvlist", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2711; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_200defineGroup(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_gname, __pyx_v__pvlist);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_200defineGroup(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, char *__pyx_v_gname, PyObject *__pyx_v__pvlist) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<char const *>  __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("defineGroup", 0);

  /* "PyCafe.pyx":2715
 * 		#for i in range(0, len(_pvlist)):
 * 		#	pvlist.push_back(_pvlist[i])
 * 		status=self._c_cafe.groupDefine(gname, _pvlist)             # <<<<<<<<<<<<<<
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_char__const___2a_(__pyx_v__pvlist); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_status = __pyx_v_self->_c_cafe->groupDefine(__pyx_v_gname, __pyx_t_1);

  /* "PyCafe.pyx":2716
 * 		#	pvlist.push_back(_pvlist[i])
 * 		status=self._c_cafe.groupDefine(gname, _pvlist)
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  __pyx_t_2 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":2717
 * 		status=self._c_cafe.groupDefine(gname, _pvlist)
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 		return status
 */
    __pyx_t_2 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":2718
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 		return status
 * 	##################################################################################
 */
      __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

      /* "PyCafe.pyx":2717
 * 		status=self._c_cafe.groupDefine(gname, _pvlist)
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 		return status
 */
    }

    /* "PyCafe.pyx":2716
 * 		#	pvlist.push_back(_pvlist[i])
 * 		status=self._c_cafe.groupDefine(gname, _pvlist)
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  }

  /* "PyCafe.pyx":2719
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 * 		return status             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2711
 * 
 * 	##################################################################################
 * 	def defineGroup(self,  char * gname, list _pvlist):             # <<<<<<<<<<<<<<
 * 		#cdef vector[const char *] pvlist
 * 		#for i in range(0, len(_pvlist)):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("PyCafe.CyCafe.defineGroup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2723
 * 
 * 	##################################################################################
 * 	def groupOpen(self, char * gname):             # <<<<<<<<<<<<<<
 * 		if isinstance(gname, (str)) == 0:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def groupOpen. \n\
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_203groupOpen(PyObject *__pyx_v_self, PyObject *__pyx_arg_gname); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_203groupOpen(PyObject *__pyx_v_self, PyObject *__pyx_arg_gname) {
  char *__pyx_v_gname;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("groupOpen (wrapper)", 0);
  assert(__pyx_arg_gname); {
    __pyx_v_gname = __Pyx_PyObject_AsString(__pyx_arg_gname); if (unlikely((!__pyx_v_gname) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2723; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.groupOpen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_202groupOpen(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((char *)__pyx_v_gname));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_202groupOpen(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, char *__pyx_v_gname) {
  unsigned int __pyx_v_ghandle;
  char *__pyx_v__gname;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("groupOpen", 0);

  /* "PyCafe.pyx":2724
 * 	##################################################################################
 * 	def groupOpen(self, char * gname):
 * 		if isinstance(gname, (str)) == 0:             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def groupOpen. \n\
 * First input argument, should be <type 'str'> for group name")
 */
  __pyx_t_1 = __Pyx_PyStr_FromString(__pyx_v_gname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2724; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyUnicode_Check(__pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((__pyx_t_2 == 0) != 0);
  if (__pyx_t_3) {

    /* "PyCafe.pyx":2725
 * 	def groupOpen(self, char * gname):
 * 		if isinstance(gname, (str)) == 0:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def groupOpen. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'str'> for group name")
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__171, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":2724
 * 	##################################################################################
 * 	def groupOpen(self, char * gname):
 * 		if isinstance(gname, (str)) == 0:             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def groupOpen. \n\
 * First input argument, should be <type 'str'> for group name")
 */
  }

  /* "PyCafe.pyx":2728
 * First input argument, should be <type 'str'> for group name")
 * 
 * 		cdef unsigned int ghandle=0             # <<<<<<<<<<<<<<
 * 		cdef char * _gname=gname
 * 		try:
 */
  __pyx_v_ghandle = 0;

  /* "PyCafe.pyx":2729
 * 
 * 		cdef unsigned int ghandle=0
 * 		cdef char * _gname=gname             # <<<<<<<<<<<<<<
 * 		try:
 * 			self._c_cafe.groupOpen(_gname, ghandle)
 */
  __pyx_v__gname = __pyx_v_gname;

  /* "PyCafe.pyx":2730
 * 		cdef unsigned int ghandle=0
 * 		cdef char * _gname=gname
 * 		try:             # <<<<<<<<<<<<<<
 * 			self._c_cafe.groupOpen(_gname, ghandle)
 * 		except:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    /*try:*/ {

      /* "PyCafe.pyx":2731
 * 		cdef char * _gname=gname
 * 		try:
 * 			self._c_cafe.groupOpen(_gname, ghandle)             # <<<<<<<<<<<<<<
 * 		except:
 * 			raise Exception("EXCEPTION RAISED in PyCafe def groupOpen. ERROR OPENING PVGROUP= %s" %_gname)
 */
      try {
        __pyx_v_self->_c_cafe->groupOpen(__pyx_v__gname, __pyx_v_ghandle);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2731; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      }

      /* "PyCafe.pyx":2730
 * 		cdef unsigned int ghandle=0
 * 		cdef char * _gname=gname
 * 		try:             # <<<<<<<<<<<<<<
 * 			self._c_cafe.groupOpen(_gname, ghandle)
 * 		except:
 */
    }
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L11_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "PyCafe.pyx":2732
 * 		try:
 * 			self._c_cafe.groupOpen(_gname, ghandle)
 * 		except:             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def groupOpen. ERROR OPENING PVGROUP= %s" %_gname)
 * 		return ghandle
 */
    /*except:*/ {
      __Pyx_AddTraceback("PyCafe.CyCafe.groupOpen", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_7, &__pyx_t_8) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2732; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "PyCafe.pyx":2733
 * 			self._c_cafe.groupOpen(_gname, ghandle)
 * 		except:
 * 			raise Exception("EXCEPTION RAISED in PyCafe def groupOpen. ERROR OPENING PVGROUP= %s" %_gname)             # <<<<<<<<<<<<<<
 * 		return ghandle
 * 	##################################################################################
 */
      __pyx_t_9 = __Pyx_PyStr_FromString(__pyx_v__gname); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2733; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_13, __pyx_t_9); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2733; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2733; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_9, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2733; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2733; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
    }
    __pyx_L6_except_error:;

    /* "PyCafe.pyx":2730
 * 		cdef unsigned int ghandle=0
 * 		cdef char * _gname=gname
 * 		try:             # <<<<<<<<<<<<<<
 * 			self._c_cafe.groupOpen(_gname, ghandle)
 * 		except:
 */
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    goto __pyx_L1_error;
    __pyx_L11_try_end:;
  }

  /* "PyCafe.pyx":2734
 * 		except:
 * 			raise Exception("EXCEPTION RAISED in PyCafe def groupOpen. ERROR OPENING PVGROUP= %s" %_gname)
 * 		return ghandle             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_8 = __Pyx_PyInt_From_unsigned_int(__pyx_v_ghandle); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2723
 * 
 * 	##################################################################################
 * 	def groupOpen(self, char * gname):             # <<<<<<<<<<<<<<
 * 		if isinstance(gname, (str)) == 0:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def groupOpen. \n\
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("PyCafe.CyCafe.groupOpen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2739
 * 
 * 	##################################################################################
 * 	def groupClose(self, gHandleName):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int gHandle=0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_205groupClose(PyObject *__pyx_v_self, PyObject *__pyx_v_gHandleName); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_205groupClose(PyObject *__pyx_v_self, PyObject *__pyx_v_gHandleName) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("groupClose (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_204groupClose(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_gHandleName));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_204groupClose(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_gHandleName) {
  unsigned int __pyx_v_gHandle;
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("groupClose", 0);

  /* "PyCafe.pyx":2741
 * 	def groupClose(self, gHandleName):
 * 
 * 		cdef unsigned int gHandle=0             # <<<<<<<<<<<<<<
 * 		status=ICAFE_NORMAL
 * 
 */
  __pyx_v_gHandle = 0;

  /* "PyCafe.pyx":2742
 * 
 * 		cdef unsigned int gHandle=0
 * 		status=ICAFE_NORMAL             # <<<<<<<<<<<<<<
 * 
 * 		if isinstance(gHandleName, (int,long)):
 */
  __pyx_v_status = ICAFE_NORMAL;

  /* "PyCafe.pyx":2744
 * 		status=ICAFE_NORMAL
 * 
 * 		if isinstance(gHandleName, (int,long)):             # <<<<<<<<<<<<<<
 * 			gHandle=gHandleName
 * 		elif isinstance(gHandleName, (str)):
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_gHandleName); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_gHandleName); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":2745
 * 
 * 		if isinstance(gHandleName, (int,long)):
 * 			gHandle=gHandleName             # <<<<<<<<<<<<<<
 * 		elif isinstance(gHandleName, (str)):
 * 			gHandle=self.checkForGroupHandle(gHandleName)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_gHandleName); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_gHandle = __pyx_t_4;

    /* "PyCafe.pyx":2744
 * 		status=ICAFE_NORMAL
 * 
 * 		if isinstance(gHandleName, (int,long)):             # <<<<<<<<<<<<<<
 * 			gHandle=gHandleName
 * 		elif isinstance(gHandleName, (str)):
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2746
 * 		if isinstance(gHandleName, (int,long)):
 * 			gHandle=gHandleName
 * 		elif isinstance(gHandleName, (str)):             # <<<<<<<<<<<<<<
 * 			gHandle=self.checkForGroupHandle(gHandleName)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_gHandleName); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":2747
 * 			gHandle=gHandleName
 * 		elif isinstance(gHandleName, (str)):
 * 			gHandle=self.checkForGroupHandle(gHandleName)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def groupClose \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_gHandleName))||((__pyx_v_gHandleName) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_gHandleName)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForGroupHandle(__pyx_v_self, ((PyObject*)__pyx_v_gHandleName), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_gHandle = __pyx_t_4;

    /* "PyCafe.pyx":2746
 * 		if isinstance(gHandleName, (int,long)):
 * 			gHandle=gHandleName
 * 		elif isinstance(gHandleName, (str)):             # <<<<<<<<<<<<<<
 * 			gHandle=self.checkForGroupHandle(gHandleName)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2749
 * 			gHandle=self.checkForGroupHandle(gHandleName)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def groupClose \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if groupHandle, else <type 'str'> if groupName")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__172, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":2752
 * First input argument, should be <type 'int'> if groupHandle, else <type 'str'> if groupName")
 * 
 * 		if gHandle == 0:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)
 */
  __pyx_t_1 = ((__pyx_v_gHandle == 0) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":2753
 * 
 * 		if gHandle == 0:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def groupClose")
 */
    __pyx_t_1 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":2754
 * 		if gHandle == 0:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def groupClose")
 * 
 */
      __pyx_v_self->_c_cafe->printStatusMessage(ECAFE_INVALID_HANDLE);

      /* "PyCafe.pyx":2753
 * 
 * 		if gHandle == 0:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def groupClose")
 */
    }

    /* "PyCafe.pyx":2755
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def groupClose")             # <<<<<<<<<<<<<<
 * 
 * 		try:
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__173, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":2752
 * First input argument, should be <type 'int'> if groupHandle, else <type 'str'> if groupName")
 * 
 * 		if gHandle == 0:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)
 */
  }

  /* "PyCafe.pyx":2757
 * 			raise Exception("EXCEPTION RAISED in PyCafe def groupClose")
 * 
 * 		try:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.groupClose(gHandle)
 * 		except:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_8);
    /*try:*/ {

      /* "PyCafe.pyx":2758
 * 
 * 		try:
 * 			status=self._c_cafe.groupClose(gHandle)             # <<<<<<<<<<<<<<
 * 		except:
 * 			if isinstance(gHandleName, (int,long)):
 */
      try {
        __pyx_t_9 = __pyx_v_self->_c_cafe->groupClose(__pyx_v_gHandle);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2758; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
      }
      __pyx_v_status = __pyx_t_9;

      /* "PyCafe.pyx":2757
 * 			raise Exception("EXCEPTION RAISED in PyCafe def groupClose")
 * 
 * 		try:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.groupClose(gHandle)
 * 		except:
 */
    }
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L15_try_end;
    __pyx_L8_error:;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "PyCafe.pyx":2759
 * 		try:
 * 			status=self._c_cafe.groupClose(gHandle)
 * 		except:             # <<<<<<<<<<<<<<
 * 			if isinstance(gHandleName, (int,long)):
 * 				raise Exception("EXCEPTION RAISED in PyCafe def closeGroup. ERROR CLOSING GROUP Handle= %d" %gHandleName)
 */
    /*except:*/ {
      __Pyx_AddTraceback("PyCafe.CyCafe.groupClose", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_10, &__pyx_t_11) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2759; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GOTREF(__pyx_t_11);

      /* "PyCafe.pyx":2760
 * 			status=self._c_cafe.groupClose(gHandle)
 * 		except:
 * 			if isinstance(gHandleName, (int,long)):             # <<<<<<<<<<<<<<
 * 				raise Exception("EXCEPTION RAISED in PyCafe def closeGroup. ERROR CLOSING GROUP Handle= %d" %gHandleName)
 * 			else:
 */
      __pyx_t_2 = PyInt_Check(__pyx_v_gHandleName); 
      __pyx_t_3 = (__pyx_t_2 != 0);
      if (!__pyx_t_3) {
      } else {
        __pyx_t_1 = __pyx_t_3;
        goto __pyx_L19_bool_binop_done;
      }
      __pyx_t_3 = PyLong_Check(__pyx_v_gHandleName); 
      __pyx_t_2 = (__pyx_t_3 != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L19_bool_binop_done:;
      __pyx_t_2 = (__pyx_t_1 != 0);
      if (__pyx_t_2) {

        /* "PyCafe.pyx":2761
 * 		except:
 * 			if isinstance(gHandleName, (int,long)):
 * 				raise Exception("EXCEPTION RAISED in PyCafe def closeGroup. ERROR CLOSING GROUP Handle= %d" %gHandleName)             # <<<<<<<<<<<<<<
 * 			else:
 * 				raise Exception("EXCEPTION RAISED in PyCafe def closeGroup. ERROR CLOSING GROUP Name = %s" %gHandleName)
 */
        __pyx_t_12 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_c, __pyx_v_gHandleName); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2761; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_13 = PyTuple_New(1); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2761; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_12);
        PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_12);
        __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_13, NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2761; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_Raise(__pyx_t_12, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2761; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}

        /* "PyCafe.pyx":2760
 * 			status=self._c_cafe.groupClose(gHandle)
 * 		except:
 * 			if isinstance(gHandleName, (int,long)):             # <<<<<<<<<<<<<<
 * 				raise Exception("EXCEPTION RAISED in PyCafe def closeGroup. ERROR CLOSING GROUP Handle= %d" %gHandleName)
 * 			else:
 */
      }

      /* "PyCafe.pyx":2763
 * 				raise Exception("EXCEPTION RAISED in PyCafe def closeGroup. ERROR CLOSING GROUP Handle= %d" %gHandleName)
 * 			else:
 * 				raise Exception("EXCEPTION RAISED in PyCafe def closeGroup. ERROR CLOSING GROUP Name = %s" %gHandleName)             # <<<<<<<<<<<<<<
 * 		return status
 * 	##################################################################################
 */
      /*else*/ {
        __pyx_t_12 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_c_2, __pyx_v_gHandleName); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2763; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_13 = PyTuple_New(1); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2763; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_12);
        PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_12);
        __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_13, NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2763; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_Raise(__pyx_t_12, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2763; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
      }
    }
    __pyx_L10_except_error:;

    /* "PyCafe.pyx":2757
 * 			raise Exception("EXCEPTION RAISED in PyCafe def groupClose")
 * 
 * 		try:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.groupClose(gHandle)
 * 		except:
 */
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
    goto __pyx_L1_error;
    __pyx_L15_try_end:;
  }

  /* "PyCafe.pyx":2764
 * 			else:
 * 				raise Exception("EXCEPTION RAISED in PyCafe def closeGroup. ERROR CLOSING GROUP Name = %s" %gHandleName)
 * 		return status             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_r = __pyx_t_11;
  __pyx_t_11 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2739
 * 
 * 	##################################################################################
 * 	def groupClose(self, gHandleName):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int gHandle=0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("PyCafe.CyCafe.groupClose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2769
 * 
 * 
 * 	def getNoMonitors(self, handlePV):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int handle=0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_207getNoMonitors(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_207getNoMonitors(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNoMonitors (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_206getNoMonitors(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_206getNoMonitors(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  unsigned int __pyx_v_handle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNoMonitors", 0);

  /* "PyCafe.pyx":2771
 * 	def getNoMonitors(self, handlePV):
 * 
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":2772
 * 
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":2773
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2773; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":2772
 * 
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2774
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":2775
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getNoMonitors. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":2774
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2777
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getNoMonitors. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 		return self.hh.getNmonitor(handle)
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__174, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2777; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2777; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":2779
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getNoMonitors. \n\
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 		return self.hh.getNmonitor(handle)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->hh.getNmonitor(__pyx_v_handle)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2769
 * 
 * 
 * 	def getNoMonitors(self, handlePV):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int handle=0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.getNoMonitors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2782
 * 
 * 
 * 	def getMonitorIDs(self, handlePV):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int handle=0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_209getMonitorIDs(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_209getMonitorIDs(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMonitorIDs (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_208getMonitorIDs(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_208getMonitorIDs(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  unsigned int __pyx_v_handle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMonitorIDs", 0);

  /* "PyCafe.pyx":2784
 * 	def getMonitorIDs(self, handlePV):
 * 
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":2785
 * 
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":2786
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":2785
 * 
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2787
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":2788
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getMonitorIDs. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2788; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2788; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2788; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":2787
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2790
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getMonitorIDs. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__175, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2790; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2790; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":2793
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 * 		return self.hh.getMonitorIDs(handle);             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __pyx_convert_vector_to_py_unsigned_int(__pyx_v_self->hh.getMonitorIDs(__pyx_v_handle)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2782
 * 
 * 
 * 	def getMonitorIDs(self, handlePV):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int handle=0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.getMonitorIDs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2797
 * 
 * 	##########################################################################################
 * 	def  monitorStart(self, handlePV, object cb=None, DBR_TYPE dbr=DBR_TIME, unsigned int mask=DBE_VALUE|DBE_LOG|DBE_ALARM):             # <<<<<<<<<<<<<<
 * 
 * 		#cdef pCallback my_callback
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_211monitorStart(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_211monitorStart(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handlePV = 0;
  PyObject *__pyx_v_cb = 0;
  DBR_TYPE __pyx_v_dbr;
  unsigned int __pyx_v_mask;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("monitorStart (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handlePV,&__pyx_n_s_cb,&__pyx_n_s_dbr,&__pyx_n_s_mask,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handlePV)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cb);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dbr);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mask);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "monitorStart") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2797; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_handlePV = values[0];
    __pyx_v_cb = values[1];
    if (values[2]) {
      __pyx_v_dbr = ((DBR_TYPE)__Pyx_PyInt_As_DBR_TYPE(values[2])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2797; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_dbr = __pyx_k__176;
    }
    if (values[3]) {
      __pyx_v_mask = __Pyx_PyInt_As_unsigned_int(values[3]); if (unlikely((__pyx_v_mask == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2797; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_mask = __pyx_k__177;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("monitorStart", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2797; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.monitorStart", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_210monitorStart(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handlePV, __pyx_v_cb, __pyx_v_dbr, __pyx_v_mask);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_210monitorStart(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, PyObject *__pyx_v_cb, DBR_TYPE __pyx_v_dbr, unsigned int __pyx_v_mask) {
  unsigned int __pyx_v_handle;
  MonitorPolicy __pyx_v_mp;
  unsigned int __pyx_v_mpid;
  PyObject *__pyx_v_a = NULL;
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("monitorStart", 0);

  /* "PyCafe.pyx":2802
 * 		#my_callback=<pCallback>callbackHandlerMonitor
 * 
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":2803
 * 
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":2804
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":2803
 * 
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2805
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":2806
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def monitorStart. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":2805
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2808
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def monitorStart. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__178, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2808; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2808; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":2819
 * 
 * 		#Does channel Exist?
 * 		if self._c_cafe.isValid(handle) == 0:             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def monitorStart. Handle = %d is invalid" %handle)
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->_c_cafe->isValid(__pyx_v_handle) == 0) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":2820
 * 		#Does channel Exist?
 * 		if self._c_cafe.isValid(handle) == 0:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def monitorStart. Handle = %d is invalid" %handle)             # <<<<<<<<<<<<<<
 * 
 * 		cdef MonitorPolicy mp
 */
    __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_handle); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_m_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":2819
 * 
 * 		#Does channel Exist?
 * 		if self._c_cafe.isValid(handle) == 0:             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def monitorStart. Handle = %d is invalid" %handle)
 * 
 */
  }

  /* "PyCafe.pyx":2823
 * 
 * 		cdef MonitorPolicy mp
 * 		cdef unsigned int mpid=mp.getMonitorID()             # <<<<<<<<<<<<<<
 * 
 * 		mp.setMask(mask)
 */
  __pyx_v_mpid = __pyx_v_mp.getMonitorID();

  /* "PyCafe.pyx":2825
 * 		cdef unsigned int mpid=mp.getMonitorID()
 * 
 * 		mp.setMask(mask)             # <<<<<<<<<<<<<<
 * 
 * 		if dbr:
 */
  __pyx_v_mp.setMask(__pyx_v_mask);

  /* "PyCafe.pyx":2827
 * 		mp.setMask(mask)
 * 
 * 		if dbr:             # <<<<<<<<<<<<<<
 * 			if dbr in [DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL]:
 * 				mp.setCafeDbrType(dbr)
 */
  if (__pyx_v_dbr) {

    /* "PyCafe.pyx":2828
 * 
 * 		if dbr:
 * 			if dbr in [DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL]:             # <<<<<<<<<<<<<<
 * 				mp.setCafeDbrType(dbr)
 * 			else:
 */
    switch (__pyx_v_dbr) {
      case DBR_PLAIN:
      case DBR_STS:
      case DBR_TIME:
      case DBR_GR:
      case DBR_CTRL:

      /* "PyCafe.pyx":2829
 * 		if dbr:
 * 			if dbr in [DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL]:
 * 				mp.setCafeDbrType(dbr)             # <<<<<<<<<<<<<<
 * 			else:
 * 				print ("***Warning*** from monitorStart for handle=",handlePV)
 */
      __pyx_v_mp.setCafeDbrType(__pyx_v_dbr);

      /* "PyCafe.pyx":2828
 * 
 * 		if dbr:
 * 			if dbr in [DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL]:             # <<<<<<<<<<<<<<
 * 				mp.setCafeDbrType(dbr)
 * 			else:
 */
      break;
      default:

      /* "PyCafe.pyx":2831
 * 				mp.setCafeDbrType(dbr)
 * 			else:
 * 				print ("***Warning*** from monitorStart for handle=",handlePV)             # <<<<<<<<<<<<<<
 * 				print ("dbr base type should be one of DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL")
 * 				print ("Assuming DBR_TIME")
 */
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_kp_u_Warning_from_monitorStart_for_h);
      __Pyx_GIVEREF(__pyx_kp_u_Warning_from_monitorStart_for_h);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u_Warning_from_monitorStart_for_h);
      __Pyx_INCREF(__pyx_v_handlePV);
      __Pyx_GIVEREF(__pyx_v_handlePV);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_handlePV);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "PyCafe.pyx":2832
 * 			else:
 * 				print ("***Warning*** from monitorStart for handle=",handlePV)
 * 				print ("dbr base type should be one of DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL")             # <<<<<<<<<<<<<<
 * 				print ("Assuming DBR_TIME")
 * 				mp.setCafeDbrType(DBR_TIME)
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__179, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "PyCafe.pyx":2833
 * 				print ("***Warning*** from monitorStart for handle=",handlePV)
 * 				print ("dbr base type should be one of DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL")
 * 				print ("Assuming DBR_TIME")             # <<<<<<<<<<<<<<
 * 				mp.setCafeDbrType(DBR_TIME)
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__180, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "PyCafe.pyx":2834
 * 				print ("dbr base type should be one of DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL")
 * 				print ("Assuming DBR_TIME")
 * 				mp.setCafeDbrType(DBR_TIME)             # <<<<<<<<<<<<<<
 * 
 * 		#if cb:
 */
      __pyx_v_mp.setCafeDbrType(DBR_TIME);
      break;
    }

    /* "PyCafe.pyx":2827
 * 		mp.setMask(mask)
 * 
 * 		if dbr:             # <<<<<<<<<<<<<<
 * 			if dbr in [DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL]:
 * 				mp.setCafeDbrType(dbr)
 */
  }

  /* "PyCafe.pyx":2843
 * 		#print monDictGlobal
 * 
 * 		if cb:             # <<<<<<<<<<<<<<
 * 			a=inspect.getargspec(cb)
 * 			if(len(a[0])==1):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_cb); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "PyCafe.pyx":2844
 * 
 * 		if cb:
 * 			a=inspect.getargspec(cb)             # <<<<<<<<<<<<<<
 * 			if(len(a[0])==1):
 * 				##py_cb_handle=cb
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_inspect); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_getargspec); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_cb); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_cb);
      __Pyx_GIVEREF(__pyx_v_cb);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_cb);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_a = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "PyCafe.pyx":2845
 * 		if cb:
 * 			a=inspect.getargspec(cb)
 * 			if(len(a[0])==1):             # <<<<<<<<<<<<<<
 * 				##py_cb_handle=cb
 * 
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_a, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2845; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = ((__pyx_t_9 == 1) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":2852
 * 				##self.monDict[mpid]=cb
 * 
 * 				monDictGlobal[mpid]=cb             # <<<<<<<<<<<<<<
 * 				#print self.monidList
 * 				#print self.moncbList
 */
      if (unlikely(__pyx_v_6PyCafe_monDictGlobal == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2852; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_mpid); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2852; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(PyDict_SetItem(__pyx_v_6PyCafe_monDictGlobal, __pyx_t_5, __pyx_v_cb) < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2852; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "PyCafe.pyx":2858
 * 				#
 * 				#print "mpid = ", mpid
 * 				mp.setUserArgs(<void*> mpid)             # <<<<<<<<<<<<<<
 * 				mp.setPyHandler()
 * 			else:
 */
      __pyx_v_mp.setUserArgs(((void *)__pyx_v_mpid));

      /* "PyCafe.pyx":2859
 * 				#print "mpid = ", mpid
 * 				mp.setUserArgs(<void*> mpid)
 * 				mp.setPyHandler()             # <<<<<<<<<<<<<<
 * 			else:
 * 				py_cb=cb
 */
      __pyx_v_mp.setPyHandler();

      /* "PyCafe.pyx":2845
 * 		if cb:
 * 			a=inspect.getargspec(cb)
 * 			if(len(a[0])==1):             # <<<<<<<<<<<<<<
 * 				##py_cb_handle=cb
 * 
 */
      goto __pyx_L9;
    }

    /* "PyCafe.pyx":2861
 * 				mp.setPyHandler()
 * 			else:
 * 				py_cb=cb             # <<<<<<<<<<<<<<
 * 				mp.setPyHandlerData()
 * 		#else:
 */
    /*else*/ {
      __Pyx_INCREF(__pyx_v_cb);
      __Pyx_XGOTREF(__pyx_v_6PyCafe_py_cb);
      __Pyx_DECREF_SET(__pyx_v_6PyCafe_py_cb, __pyx_v_cb);
      __Pyx_GIVEREF(__pyx_v_cb);

      /* "PyCafe.pyx":2862
 * 			else:
 * 				py_cb=cb
 * 				mp.setPyHandlerData()             # <<<<<<<<<<<<<<
 * 		#else:
 * 		#	mp.setHandler(callbackHandlerMonitor_wrapper)
 */
      __pyx_v_mp.setPyHandlerData();
    }
    __pyx_L9:;

    /* "PyCafe.pyx":2843
 * 		#print monDictGlobal
 * 
 * 		if cb:             # <<<<<<<<<<<<<<
 * 			a=inspect.getargspec(cb)
 * 			if(len(a[0])==1):
 */
  }

  /* "PyCafe.pyx":2867
 * 
 * 		cdef int status
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.monitorStart(handle,mp)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":2868
 * 		cdef int status
 * 		with nogil:
 * 			status=self._c_cafe.monitorStart(handle,mp)             # <<<<<<<<<<<<<<
 * 
 * 		#Need this to allow a fraction of a second for the callback fn to be called
 */
        __pyx_v_status = __pyx_v_self->_c_cafe->monitorStart(__pyx_v_handle, __pyx_v_mp);
      }

      /* "PyCafe.pyx":2867
 * 
 * 		cdef int status
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.monitorStart(handle,mp)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L12;
        }
        __pyx_L12:;
      }
  }

  /* "PyCafe.pyx":2872
 * 		#Need this to allow a fraction of a second for the callback fn to be called
 * 		#if setPyHandler is used
 * 		time.sleep(0.01);             # <<<<<<<<<<<<<<
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_sleep); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__181, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "PyCafe.pyx":2873
 * 		#if setPyHandler is used
 * 		time.sleep(0.01);
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  __pyx_t_1 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":2874
 * 		time.sleep(0.01);
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    __pyx_t_1 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":2875
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
      __pyx_t_1 = ((__pyx_v_handle == 0) != 0);
      if (__pyx_t_1) {

        /* "PyCafe.pyx":2876
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 */
        __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

        /* "PyCafe.pyx":2875
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
        goto __pyx_L15;
      }

      /* "PyCafe.pyx":2878
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)             # <<<<<<<<<<<<<<
 * 			#do not raise an exception
 * 			#raise Exception("EXCEPTION RAISED in PyCafe def monitorStart. Status = %d" %status)
 */
      /*else*/ {
        __pyx_v_self->_c_cafe->printStatus(__pyx_v_handle, __pyx_v_status);
      }
      __pyx_L15:;

      /* "PyCafe.pyx":2874
 * 		time.sleep(0.01);
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    }

    /* "PyCafe.pyx":2873
 * 		#if setPyHandler is used
 * 		time.sleep(0.01);
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  }

  /* "PyCafe.pyx":2882
 * 			#raise Exception("EXCEPTION RAISED in PyCafe def monitorStart. Status = %d" %status)
 * 
 * 		return mpid             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_mpid); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2882; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2797
 * 
 * 	##########################################################################################
 * 	def  monitorStart(self, handlePV, object cb=None, DBR_TYPE dbr=DBR_TIME, unsigned int mask=DBE_VALUE|DBE_LOG|DBE_ALARM):             # <<<<<<<<<<<<<<
 * 
 * 		#cdef pCallback my_callback
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("PyCafe.CyCafe.monitorStart", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2887
 * 
 * 	##################################################################################
 * 	def  monitorStop(self, handlePV, mpid=None):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int handle=0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_213monitorStop(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_213monitorStop(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handlePV = 0;
  PyObject *__pyx_v_mpid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("monitorStop (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handlePV,&__pyx_n_s_mpid,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handlePV)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mpid);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "monitorStop") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2887; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_handlePV = values[0];
    __pyx_v_mpid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("monitorStop", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2887; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.monitorStop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_212monitorStop(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handlePV, __pyx_v_mpid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_212monitorStop(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, PyObject *__pyx_v_mpid) {
  unsigned int __pyx_v_handle;
  int __pyx_v_status;
  unsigned int __pyx_v_mpidUI;
  std::vector<unsigned int>  __pyx_v_mpidUIV;
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("monitorStop", 0);

  /* "PyCafe.pyx":2889
 * 	def  monitorStop(self, handlePV, mpid=None):
 * 
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":2890
 * 
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":2891
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":2890
 * 
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2892
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":2893
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:
 * 			handle=self.checkForHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def monitorStop. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":2892
 * 		if isinstance(handlePV, (int,long)) == 1:
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2895
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def monitorStop. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__182, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2895; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2895; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":2902
 * 
 * 		#print "size", self.hh.getNmonitor(handle)
 * 		mpidUIV=self.hh.getMonitorIDs(handle)             # <<<<<<<<<<<<<<
 * 		#print "size", mpidUIV.size()
 * 
 */
  __pyx_v_mpidUIV = __pyx_v_self->hh.getMonitorIDs(__pyx_v_handle);

  /* "PyCafe.pyx":2907
 * 		global monDictGlobal
 * 
 * 		if mpid:             # <<<<<<<<<<<<<<
 * 			if isinstance(mpid, (int,long)):
 * 				mpidUI=mpid
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_mpid); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2907; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "PyCafe.pyx":2908
 * 
 * 		if mpid:
 * 			if isinstance(mpid, (int,long)):             # <<<<<<<<<<<<<<
 * 				mpidUI=mpid
 * 				with nogil:
 */
    __pyx_t_2 = PyInt_Check(__pyx_v_mpid); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_mpid); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L8_bool_binop_done:;
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":2909
 * 		if mpid:
 * 			if isinstance(mpid, (int,long)):
 * 				mpidUI=mpid             # <<<<<<<<<<<<<<
 * 				with nogil:
 * 					status=self._c_cafe.monitorStopWithID(handle, mpidUI)
 */
      __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_mpid); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_mpidUI = __pyx_t_4;

      /* "PyCafe.pyx":2910
 * 			if isinstance(mpid, (int,long)):
 * 				mpidUI=mpid
 * 				with nogil:             # <<<<<<<<<<<<<<
 * 					status=self._c_cafe.monitorStopWithID(handle, mpidUI)
 * 				time.sleep(0.01)
 */
      {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          Py_UNBLOCK_THREADS
          #endif
          /*try:*/ {

            /* "PyCafe.pyx":2911
 * 				mpidUI=mpid
 * 				with nogil:
 * 					status=self._c_cafe.monitorStopWithID(handle, mpidUI)             # <<<<<<<<<<<<<<
 * 				time.sleep(0.01)
 * 				if (status==ICAFE_NORMAL):
 */
            __pyx_v_status = __pyx_v_self->_c_cafe->monitorStopWithID(__pyx_v_handle, __pyx_v_mpidUI);
          }

          /* "PyCafe.pyx":2910
 * 			if isinstance(mpid, (int,long)):
 * 				mpidUI=mpid
 * 				with nogil:             # <<<<<<<<<<<<<<
 * 					status=self._c_cafe.monitorStopWithID(handle, mpidUI)
 * 				time.sleep(0.01)
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L12;
            }
            __pyx_L12:;
          }
      }

      /* "PyCafe.pyx":2912
 * 				with nogil:
 * 					status=self._c_cafe.monitorStopWithID(handle, mpidUI)
 * 				time.sleep(0.01)             # <<<<<<<<<<<<<<
 * 				if (status==ICAFE_NORMAL):
 * 					#index=self.monidList.index(mpidUI)
 */
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2912; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_sleep); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2912; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__183, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2912; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "PyCafe.pyx":2913
 * 					status=self._c_cafe.monitorStopWithID(handle, mpidUI)
 * 				time.sleep(0.01)
 * 				if (status==ICAFE_NORMAL):             # <<<<<<<<<<<<<<
 * 					#index=self.monidList.index(mpidUI)
 * 					#self.monidList.remove(mpidUI)
 */
      __pyx_t_2 = ((__pyx_v_status == ICAFE_NORMAL) != 0);
      if (__pyx_t_2) {

        /* "PyCafe.pyx":2918
 * 					#self.moncbList.remove(self.moncbList[index])
 * 					#del self.monDict[mpidUI]
 * 					del monDictGlobal[mpidUI]             # <<<<<<<<<<<<<<
 * 			else:
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def monitorStop. \n\
 */
        if (unlikely(__pyx_v_6PyCafe_monDictGlobal == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_mpidUI); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        if (PyDict_DelItem(__pyx_v_6PyCafe_monDictGlobal, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "PyCafe.pyx":2913
 * 					status=self._c_cafe.monitorStopWithID(handle, mpidUI)
 * 				time.sleep(0.01)
 * 				if (status==ICAFE_NORMAL):             # <<<<<<<<<<<<<<
 * 					#index=self.monidList.index(mpidUI)
 * 					#self.monidList.remove(mpidUI)
 */
      }

      /* "PyCafe.pyx":2908
 * 
 * 		if mpid:
 * 			if isinstance(mpid, (int,long)):             # <<<<<<<<<<<<<<
 * 				mpidUI=mpid
 * 				with nogil:
 */
      goto __pyx_L7;
    }

    /* "PyCafe.pyx":2920
 * 					del monDictGlobal[mpidUI]
 * 			else:
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def monitorStop. \n\             # <<<<<<<<<<<<<<
 * monitorPolicy ID (mpid) should be <type 'int'>")
 * 		else:
 */
    /*else*/ {
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__184, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L7:;

    /* "PyCafe.pyx":2907
 * 		global monDictGlobal
 * 
 * 		if mpid:             # <<<<<<<<<<<<<<
 * 			if isinstance(mpid, (int,long)):
 * 				mpidUI=mpid
 */
    goto __pyx_L6;
  }

  /* "PyCafe.pyx":2923
 * monitorPolicy ID (mpid) should be <type 'int'>")
 * 		else:
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.monitorStop(handle)
 * 			time.sleep(0.01)
 */
  /*else*/ {
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "PyCafe.pyx":2924
 * 		else:
 * 			with nogil:
 * 				status=self._c_cafe.monitorStop(handle)             # <<<<<<<<<<<<<<
 * 			time.sleep(0.01)
 * 
 */
          __pyx_v_status = __pyx_v_self->_c_cafe->monitorStop(__pyx_v_handle);
        }

        /* "PyCafe.pyx":2923
 * monitorPolicy ID (mpid) should be <type 'int'>")
 * 		else:
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.monitorStop(handle)
 * 			time.sleep(0.01)
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L16;
          }
          __pyx_L16:;
        }
    }

    /* "PyCafe.pyx":2925
 * 			with nogil:
 * 				status=self._c_cafe.monitorStop(handle)
 * 			time.sleep(0.01)             # <<<<<<<<<<<<<<
 * 
 * 			if (status==ICAFE_NORMAL):
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_sleep); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__185, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "PyCafe.pyx":2927
 * 			time.sleep(0.01)
 * 
 * 			if (status==ICAFE_NORMAL):             # <<<<<<<<<<<<<<
 * 				for i in range(0, mpidUIV.size()):
 * 					#index=self.monidList.index(mpidUIV[i])
 */
    __pyx_t_2 = ((__pyx_v_status == ICAFE_NORMAL) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":2928
 * 
 * 			if (status==ICAFE_NORMAL):
 * 				for i in range(0, mpidUIV.size()):             # <<<<<<<<<<<<<<
 * 					#index=self.monidList.index(mpidUIV[i])
 * 					#self.monidList.remove(mpidUIV[i])
 */
      __pyx_t_7 = __pyx_v_mpidUIV.size();
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_i = __pyx_t_8;

        /* "PyCafe.pyx":2933
 * 					#self.moncbList.remove(self.moncbList[index])
 * 					#del self.monDict[mpidUIV[i]]
 * 					del monDictGlobal[mpidUIV[i]]             # <<<<<<<<<<<<<<
 * 
 * 		if status !=ICAFE_NORMAL:
 */
        if (unlikely(__pyx_v_6PyCafe_monDictGlobal == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_5 = __Pyx_PyInt_From_unsigned_int((__pyx_v_mpidUIV[__pyx_v_i])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        if (PyDict_DelItem(__pyx_v_6PyCafe_monDictGlobal, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }

      /* "PyCafe.pyx":2927
 * 			time.sleep(0.01)
 * 
 * 			if (status==ICAFE_NORMAL):             # <<<<<<<<<<<<<<
 * 				for i in range(0, mpidUIV.size()):
 * 					#index=self.monidList.index(mpidUIV[i])
 */
    }
  }
  __pyx_L6:;

  /* "PyCafe.pyx":2935
 * 					del monDictGlobal[mpidUIV[i]]
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  __pyx_t_2 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":2936
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    __pyx_t_2 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":2937
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
      __pyx_t_2 = ((__pyx_v_handle == 0) != 0);
      if (__pyx_t_2) {

        /* "PyCafe.pyx":2938
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 */
        __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

        /* "PyCafe.pyx":2937
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
        goto __pyx_L22;
      }

      /* "PyCafe.pyx":2940
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)             # <<<<<<<<<<<<<<
 * 			#do not raise an exception
 * 			#raise Exception("EXCEPTION RAISED in PyCafe def monitorStop. Status = %d" %status)
 */
      /*else*/ {
        __pyx_v_self->_c_cafe->printStatus(__pyx_v_handle, __pyx_v_status);
      }
      __pyx_L22:;

      /* "PyCafe.pyx":2936
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    }

    /* "PyCafe.pyx":2935
 * 					del monDictGlobal[mpidUIV[i]]
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  }

  /* "PyCafe.pyx":2944
 * 			#raise Exception("EXCEPTION RAISED in PyCafe def monitorStop. Status = %d" %status)
 * 
 * 		return status             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2887
 * 
 * 	##################################################################################
 * 	def  monitorStop(self, handlePV, mpid=None):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int handle=0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("PyCafe.CyCafe.monitorStop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2949
 * 
 *   ##################################################################################
 * 	def  monitorStopAll(self):             # <<<<<<<<<<<<<<
 * 
 * 		global monDictGlobal
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_215monitorStopAll(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_215monitorStopAll(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("monitorStopAll (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_214monitorStopAll(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_214monitorStopAll(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("monitorStopAll", 0);

  /* "PyCafe.pyx":2954
 * 
 * 		cdef int status
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.monitorStopAll()
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":2955
 * 		cdef int status
 * 		with nogil:
 * 			status=self._c_cafe.monitorStopAll()             # <<<<<<<<<<<<<<
 * 
 * 		time.sleep(0.01)
 */
        __pyx_v_status = __pyx_v_self->_c_cafe->monitorStopAll();
      }

      /* "PyCafe.pyx":2954
 * 
 * 		cdef int status
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.monitorStopAll()
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "PyCafe.pyx":2957
 * 			status=self._c_cafe.monitorStopAll()
 * 
 * 		time.sleep(0.01)             # <<<<<<<<<<<<<<
 * 		#print "-------"
 * 		#print self.monidList
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_sleep); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__186, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafe.pyx":2967
 * 		#del self.moncbList[:]
 * 		#self.monDict.clear()
 * 		monDictGlobal.clear()             # <<<<<<<<<<<<<<
 * 
 * 		#print self.monDict
 */
  if (unlikely(__pyx_v_6PyCafe_monDictGlobal == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "clear");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_3 = __Pyx_PyDict_Clear(__pyx_v_6PyCafe_monDictGlobal); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "PyCafe.pyx":2972
 * 		#print monDictGlobal
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  __pyx_t_4 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_4) {

    /* "PyCafe.pyx":2973
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def monitorStopAll. Status = %d" %status)
 */
    __pyx_t_4 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_4) {

      /* "PyCafe.pyx":2974
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def monitorStopAll. Status = %d" %status)
 * 
 */
      __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

      /* "PyCafe.pyx":2973
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def monitorStopAll. Status = %d" %status)
 */
    }

    /* "PyCafe.pyx":2975
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def monitorStopAll. Status = %d" %status)             # <<<<<<<<<<<<<<
 * 
 * 		return status
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_m, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":2972
 * 		#print monDictGlobal
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  }

  /* "PyCafe.pyx":2977
 * 			raise Exception("EXCEPTION RAISED in PyCafe def monitorStopAll. Status = %d" %status)
 * 
 * 		return status             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2977; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2949
 * 
 *   ##################################################################################
 * 	def  monitorStopAll(self):             # <<<<<<<<<<<<<<
 * 
 * 		global monDictGlobal
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PyCafe.CyCafe.monitorStopAll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":2984
 * 
 * 	##################################################################################
 * 	def set(self, handlePV, valSet):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int handle=0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_217set(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_217set(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handlePV = 0;
  PyObject *__pyx_v_valSet = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handlePV,&__pyx_n_s_valSet,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handlePV)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_valSet)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set", 1, 2, 2, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2984; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2984; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_handlePV = values[0];
    __pyx_v_valSet = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2984; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.set", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_216set(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handlePV, __pyx_v_valSet);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_216set(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, PyObject *__pyx_v_valSet) {
  unsigned int __pyx_v_handle;
  unsigned short __pyx_v_valType;
  int __pyx_v_status;
  double __pyx_v_valSetD;
  int __pyx_v_valSetI;
  std::string __pyx_v_valSetS;
  std::vector<double>  __pyx_v_vecD;
  std::vector<dbr_long_t>  __pyx_v_vecI;
  std::vector<std::string>  __pyx_v_vecS;
  unsigned int __pyx_v_nLA;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  double __pyx_t_10;
  dbr_long_t __pyx_t_11;
  std::string __pyx_t_12;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set", 0);

  /* "PyCafe.pyx":2986
 * 	def set(self, handlePV, valSet):
 * 
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 
 * 		if isinstance(handlePV, (int,long)):
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":2988
 * 		cdef unsigned int handle=0
 * 
 * 		if isinstance(handlePV, (int,long)):             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)):
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":2989
 * 
 * 		if isinstance(handlePV, (int,long)):
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)):
 * 			handle=self.checkForHandle(handlePV)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":2988
 * 		cdef unsigned int handle=0
 * 
 * 		if isinstance(handlePV, (int,long)):             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)):
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2990
 * 		if isinstance(handlePV, (int,long)):
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)):             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":2991
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)):
 * 			handle=self.checkForHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def set. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":2990
 * 		if isinstance(handlePV, (int,long)):
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)):             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":2993
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def set. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__187, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":2998
 * 		#CHECK FOR ALL DATA TYPES!
 * 
 * 		cdef unsigned short valType=CAFE_STRING             # <<<<<<<<<<<<<<
 * 		cdef int status=ICAFE_NORMAL
 * 
 */
  __pyx_v_valType = CAFE_STRING;

  /* "PyCafe.pyx":2999
 * 
 * 		cdef unsigned short valType=CAFE_STRING
 * 		cdef int status=ICAFE_NORMAL             # <<<<<<<<<<<<<<
 * 
 * 		cdef double valSetD
 */
  __pyx_v_status = ICAFE_NORMAL;

  /* "PyCafe.pyx":3008
 * 		cdef vector[string] vecS
 * 
 * 		cdef unsigned int nLA=0             # <<<<<<<<<<<<<<
 * 
 * 		#List: Major[0] Minor[1] Patch[2] 'final'[3] 0 [4]
 */
  __pyx_v_nLA = 0;

  /* "PyCafe.pyx":3031
 * 		'''
 * 
 * 		if isinstance(valSet, (list, array.array, np.ndarray, cython.view.memoryview)):             # <<<<<<<<<<<<<<
 * 			nLA=len(valSet)
 * 
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_array); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3031; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3031; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3031; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ndarray); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3031; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = PyList_Check(__pyx_v_valSet); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_valSet, __pyx_t_6); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_valSet, __pyx_t_7); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_valSet, __pyx_memoryview_type); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":3032
 * 
 * 		if isinstance(valSet, (list, array.array, np.ndarray, cython.view.memoryview)):
 * 			nLA=len(valSet)             # <<<<<<<<<<<<<<
 * 
 * 			#Just check on first element if array.array
 */
    __pyx_t_8 = PyObject_Length(__pyx_v_valSet); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3032; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_nLA = __pyx_t_8;

    /* "PyCafe.pyx":3035
 * 
 * 			#Just check on first element if array.array
 * 			if isinstance(valSet, (array.array, np.ndarray, cython.view.memoryview)):             # <<<<<<<<<<<<<<
 * 				nLA=1
 * 
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_array); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_array); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_ndarray); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_valSet, __pyx_t_7); 
    __pyx_t_3 = (__pyx_t_1 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_3 = PyObject_IsInstance(__pyx_v_valSet, __pyx_t_5); 
    __pyx_t_1 = (__pyx_t_3 != 0);
    if (!__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_valSet, __pyx_memoryview_type); 
    __pyx_t_3 = (__pyx_t_1 != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L12_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {

      /* "PyCafe.pyx":3036
 * 			#Just check on first element if array.array
 * 			if isinstance(valSet, (array.array, np.ndarray, cython.view.memoryview)):
 * 				nLA=1             # <<<<<<<<<<<<<<
 * 
 * 			for i in range(0, nLA):
 */
      __pyx_v_nLA = 1;

      /* "PyCafe.pyx":3035
 * 
 * 			#Just check on first element if array.array
 * 			if isinstance(valSet, (array.array, np.ndarray, cython.view.memoryview)):             # <<<<<<<<<<<<<<
 * 				nLA=1
 * 
 */
    }

    /* "PyCafe.pyx":3038
 * 				nLA=1
 * 
 * 			for i in range(0, nLA):             # <<<<<<<<<<<<<<
 * 				if isinstance(valSet[i],(str)):
 * 					valType=CAFE_STRING
 */
    __pyx_t_4 = __pyx_v_nLA;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_4; __pyx_t_8+=1) {
      __pyx_v_i = __pyx_t_8;

      /* "PyCafe.pyx":3039
 * 
 * 			for i in range(0, nLA):
 * 				if isinstance(valSet[i],(str)):             # <<<<<<<<<<<<<<
 * 					valType=CAFE_STRING
 * 					break
 */
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_valSet, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3039; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = PyUnicode_Check(__pyx_t_7); 
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_2 = (__pyx_t_3 != 0);
      if (__pyx_t_2) {

        /* "PyCafe.pyx":3040
 * 			for i in range(0, nLA):
 * 				if isinstance(valSet[i],(str)):
 * 					valType=CAFE_STRING             # <<<<<<<<<<<<<<
 * 					break
 * 				elif isinstance(valSet[i],(float)):
 */
        __pyx_v_valType = CAFE_STRING;

        /* "PyCafe.pyx":3041
 * 				if isinstance(valSet[i],(str)):
 * 					valType=CAFE_STRING
 * 					break             # <<<<<<<<<<<<<<
 * 				elif isinstance(valSet[i],(float)):
 * 					valType=CAFE_DOUBLE
 */
        goto __pyx_L16_break;

        /* "PyCafe.pyx":3039
 * 
 * 			for i in range(0, nLA):
 * 				if isinstance(valSet[i],(str)):             # <<<<<<<<<<<<<<
 * 					valType=CAFE_STRING
 * 					break
 */
      }

      /* "PyCafe.pyx":3042
 * 					valType=CAFE_STRING
 * 					break
 * 				elif isinstance(valSet[i],(float)):             # <<<<<<<<<<<<<<
 * 					valType=CAFE_DOUBLE
 * 				elif isinstance(valSet[i],(long, int)):
 */
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_valSet, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3042; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_2 = PyFloat_Check(__pyx_t_7); 
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_3 = (__pyx_t_2 != 0);
      if (__pyx_t_3) {

        /* "PyCafe.pyx":3043
 * 					break
 * 				elif isinstance(valSet[i],(float)):
 * 					valType=CAFE_DOUBLE             # <<<<<<<<<<<<<<
 * 				elif isinstance(valSet[i],(long, int)):
 * 					if valType != CAFE_DOUBLE:
 */
        __pyx_v_valType = CAFE_DOUBLE;

        /* "PyCafe.pyx":3042
 * 					valType=CAFE_STRING
 * 					break
 * 				elif isinstance(valSet[i],(float)):             # <<<<<<<<<<<<<<
 * 					valType=CAFE_DOUBLE
 * 				elif isinstance(valSet[i],(long, int)):
 */
        goto __pyx_L17;
      }

      /* "PyCafe.pyx":3044
 * 				elif isinstance(valSet[i],(float)):
 * 					valType=CAFE_DOUBLE
 * 				elif isinstance(valSet[i],(long, int)):             # <<<<<<<<<<<<<<
 * 					if valType != CAFE_DOUBLE:
 * 						valType=CAFE_LONG
 */
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_valSet, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3044; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_2 = PyLong_Check(__pyx_t_7); 
      __pyx_t_1 = (__pyx_t_2 != 0);
      if (!__pyx_t_1) {
      } else {
        __pyx_t_3 = __pyx_t_1;
        goto __pyx_L18_bool_binop_done;
      }
      __pyx_t_1 = PyInt_Check(__pyx_t_7); 
      __pyx_t_2 = (__pyx_t_1 != 0);
      __pyx_t_3 = __pyx_t_2;
      __pyx_L18_bool_binop_done:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_2 = (__pyx_t_3 != 0);
      if (__pyx_t_2) {

        /* "PyCafe.pyx":3045
 * 					valType=CAFE_DOUBLE
 * 				elif isinstance(valSet[i],(long, int)):
 * 					if valType != CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 						valType=CAFE_LONG
 * 				else:
 */
        __pyx_t_2 = ((__pyx_v_valType != CAFE_DOUBLE) != 0);
        if (__pyx_t_2) {

          /* "PyCafe.pyx":3046
 * 				elif isinstance(valSet[i],(long, int)):
 * 					if valType != CAFE_DOUBLE:
 * 						valType=CAFE_LONG             # <<<<<<<<<<<<<<
 * 				else:
 * 					valType=CAFE_STRING
 */
          __pyx_v_valType = CAFE_LONG;

          /* "PyCafe.pyx":3045
 * 					valType=CAFE_DOUBLE
 * 				elif isinstance(valSet[i],(long, int)):
 * 					if valType != CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 						valType=CAFE_LONG
 * 				else:
 */
        }

        /* "PyCafe.pyx":3044
 * 				elif isinstance(valSet[i],(float)):
 * 					valType=CAFE_DOUBLE
 * 				elif isinstance(valSet[i],(long, int)):             # <<<<<<<<<<<<<<
 * 					if valType != CAFE_DOUBLE:
 * 						valType=CAFE_LONG
 */
        goto __pyx_L17;
      }

      /* "PyCafe.pyx":3048
 * 						valType=CAFE_LONG
 * 				else:
 * 					valType=CAFE_STRING             # <<<<<<<<<<<<<<
 * 					break
 * 
 */
      /*else*/ {
        __pyx_v_valType = CAFE_STRING;

        /* "PyCafe.pyx":3049
 * 				else:
 * 					valType=CAFE_STRING
 * 					break             # <<<<<<<<<<<<<<
 * 
 * 
 */
        goto __pyx_L16_break;
      }
      __pyx_L17:;
    }
    __pyx_L16_break:;

    /* "PyCafe.pyx":3055
 * 			# valSet to vector since
 * 			# coercion from Python not allowed without the GIL
 * 			if valType==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 
 * 				vecD.reserve(len(valSet))
 */
    switch (__pyx_v_valType) {
      case CAFE_DOUBLE:

      /* "PyCafe.pyx":3057
 * 			if valType==CAFE_DOUBLE:
 * 
 * 				vecD.reserve(len(valSet))             # <<<<<<<<<<<<<<
 * 				for i in range(0, len(valSet)):
 * 					vecD.push_back(valSet[i])
 */
      __pyx_t_8 = PyObject_Length(__pyx_v_valSet); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3057; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_vecD.reserve(__pyx_t_8);

      /* "PyCafe.pyx":3058
 * 
 * 				vecD.reserve(len(valSet))
 * 				for i in range(0, len(valSet)):             # <<<<<<<<<<<<<<
 * 					vecD.push_back(valSet[i])
 * 				with nogil:
 */
      __pyx_t_8 = PyObject_Length(__pyx_v_valSet); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3058; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
        __pyx_v_i = __pyx_t_9;

        /* "PyCafe.pyx":3059
 * 				vecD.reserve(len(valSet))
 * 				for i in range(0, len(valSet)):
 * 					vecD.push_back(valSet[i])             # <<<<<<<<<<<<<<
 * 				with nogil:
 * 					status=self._c_cafe.setVDouble(handle, vecD)
 */
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_valSet, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3059; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        try {
          __pyx_v_vecD.push_back(__pyx_t_10);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
      }

      /* "PyCafe.pyx":3060
 * 				for i in range(0, len(valSet)):
 * 					vecD.push_back(valSet[i])
 * 				with nogil:             # <<<<<<<<<<<<<<
 * 					status=self._c_cafe.setVDouble(handle, vecD)
 * 			elif valType==CAFE_LONG:
 */
      {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          Py_UNBLOCK_THREADS
          #endif
          /*try:*/ {

            /* "PyCafe.pyx":3061
 * 					vecD.push_back(valSet[i])
 * 				with nogil:
 * 					status=self._c_cafe.setVDouble(handle, vecD)             # <<<<<<<<<<<<<<
 * 			elif valType==CAFE_LONG:
 * 
 */
            __pyx_v_status = __pyx_v_self->_c_cafe->setVDouble(__pyx_v_handle, __pyx_v_vecD);
          }

          /* "PyCafe.pyx":3060
 * 				for i in range(0, len(valSet)):
 * 					vecD.push_back(valSet[i])
 * 				with nogil:             # <<<<<<<<<<<<<<
 * 					status=self._c_cafe.setVDouble(handle, vecD)
 * 			elif valType==CAFE_LONG:
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L25;
            }
            __pyx_L25:;
          }
      }

      /* "PyCafe.pyx":3055
 * 			# valSet to vector since
 * 			# coercion from Python not allowed without the GIL
 * 			if valType==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 
 * 				vecD.reserve(len(valSet))
 */
      break;

      /* "PyCafe.pyx":3062
 * 				with nogil:
 * 					status=self._c_cafe.setVDouble(handle, vecD)
 * 			elif valType==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 
 * 				vecI.reserve(len(valSet))
 */
      case CAFE_LONG:

      /* "PyCafe.pyx":3064
 * 			elif valType==CAFE_LONG:
 * 
 * 				vecI.reserve(len(valSet))             # <<<<<<<<<<<<<<
 * 				for i in range(0, len(valSet)):
 * 					vecI.push_back(valSet[i])
 */
      __pyx_t_8 = PyObject_Length(__pyx_v_valSet); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_vecI.reserve(__pyx_t_8);

      /* "PyCafe.pyx":3065
 * 
 * 				vecI.reserve(len(valSet))
 * 				for i in range(0, len(valSet)):             # <<<<<<<<<<<<<<
 * 					vecI.push_back(valSet[i])
 * 
 */
      __pyx_t_8 = PyObject_Length(__pyx_v_valSet); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3065; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
        __pyx_v_i = __pyx_t_9;

        /* "PyCafe.pyx":3066
 * 				vecI.reserve(len(valSet))
 * 				for i in range(0, len(valSet)):
 * 					vecI.push_back(valSet[i])             # <<<<<<<<<<<<<<
 * 
 * 				with nogil:
 */
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_valSet, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3066; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyInt_As_dbr_long_t(__pyx_t_7); if (unlikely((__pyx_t_11 == (dbr_long_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3066; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        try {
          __pyx_v_vecI.push_back(__pyx_t_11);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3066; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
      }

      /* "PyCafe.pyx":3068
 * 					vecI.push_back(valSet[i])
 * 
 * 				with nogil:             # <<<<<<<<<<<<<<
 * 					status=self._c_cafe.setVLong(handle, vecI)
 * 
 */
      {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          Py_UNBLOCK_THREADS
          #endif
          /*try:*/ {

            /* "PyCafe.pyx":3069
 * 
 * 				with nogil:
 * 					status=self._c_cafe.setVLong(handle, vecI)             # <<<<<<<<<<<<<<
 * 
 * 			elif valType==CAFE_STRING:
 */
            __pyx_v_status = __pyx_v_self->_c_cafe->setVLong(__pyx_v_handle, __pyx_v_vecI);
          }

          /* "PyCafe.pyx":3068
 * 					vecI.push_back(valSet[i])
 * 
 * 				with nogil:             # <<<<<<<<<<<<<<
 * 					status=self._c_cafe.setVLong(handle, vecI)
 * 
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L30;
            }
            __pyx_L30:;
          }
      }

      /* "PyCafe.pyx":3062
 * 				with nogil:
 * 					status=self._c_cafe.setVDouble(handle, vecD)
 * 			elif valType==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 
 * 				vecI.reserve(len(valSet))
 */
      break;

      /* "PyCafe.pyx":3071
 * 					status=self._c_cafe.setVLong(handle, vecI)
 * 
 * 			elif valType==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 
 * 				vecS.reserve(len(valSet))
 */
      case CAFE_STRING:

      /* "PyCafe.pyx":3073
 * 			elif valType==CAFE_STRING:
 * 
 * 				vecS.reserve(len(valSet))             # <<<<<<<<<<<<<<
 * 				for i in range(0, len(valSet)):
 * 					vecS.push_back(valSet[i])
 */
      __pyx_t_8 = PyObject_Length(__pyx_v_valSet); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_vecS.reserve(__pyx_t_8);

      /* "PyCafe.pyx":3074
 * 
 * 				vecS.reserve(len(valSet))
 * 				for i in range(0, len(valSet)):             # <<<<<<<<<<<<<<
 * 					vecS.push_back(valSet[i])
 * 				with nogil:
 */
      __pyx_t_8 = PyObject_Length(__pyx_v_valSet); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
        __pyx_v_i = __pyx_t_9;

        /* "PyCafe.pyx":3075
 * 				vecS.reserve(len(valSet))
 * 				for i in range(0, len(valSet)):
 * 					vecS.push_back(valSet[i])             # <<<<<<<<<<<<<<
 * 				with nogil:
 * 					status=self._c_cafe.setVString(handle, vecS)
 */
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_valSet, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3075; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_12 = __pyx_convert_string_from_py_std__in_string(__pyx_t_7); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        try {
          __pyx_v_vecS.push_back(__pyx_t_12);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
      }

      /* "PyCafe.pyx":3076
 * 				for i in range(0, len(valSet)):
 * 					vecS.push_back(valSet[i])
 * 				with nogil:             # <<<<<<<<<<<<<<
 * 					status=self._c_cafe.setVString(handle, vecS)
 * 		elif isinstance(valSet, (float)):
 */
      {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          Py_UNBLOCK_THREADS
          #endif
          /*try:*/ {

            /* "PyCafe.pyx":3077
 * 					vecS.push_back(valSet[i])
 * 				with nogil:
 * 					status=self._c_cafe.setVString(handle, vecS)             # <<<<<<<<<<<<<<
 * 		elif isinstance(valSet, (float)):
 * 			valSetD=valSet
 */
            __pyx_v_status = __pyx_v_self->_c_cafe->setVString(__pyx_v_handle, __pyx_v_vecS);
          }

          /* "PyCafe.pyx":3076
 * 				for i in range(0, len(valSet)):
 * 					vecS.push_back(valSet[i])
 * 				with nogil:             # <<<<<<<<<<<<<<
 * 					status=self._c_cafe.setVString(handle, vecS)
 * 		elif isinstance(valSet, (float)):
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L35;
            }
            __pyx_L35:;
          }
      }

      /* "PyCafe.pyx":3071
 * 					status=self._c_cafe.setVLong(handle, vecI)
 * 
 * 			elif valType==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 
 * 				vecS.reserve(len(valSet))
 */
      break;
      default: break;
    }

    /* "PyCafe.pyx":3031
 * 		'''
 * 
 * 		if isinstance(valSet, (list, array.array, np.ndarray, cython.view.memoryview)):             # <<<<<<<<<<<<<<
 * 			nLA=len(valSet)
 * 
 */
    goto __pyx_L6;
  }

  /* "PyCafe.pyx":3078
 * 				with nogil:
 * 					status=self._c_cafe.setVString(handle, vecS)
 * 		elif isinstance(valSet, (float)):             # <<<<<<<<<<<<<<
 * 			valSetD=valSet
 * 			with nogil:
 */
  __pyx_t_2 = PyFloat_Check(__pyx_v_valSet); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "PyCafe.pyx":3079
 * 					status=self._c_cafe.setVString(handle, vecS)
 * 		elif isinstance(valSet, (float)):
 * 			valSetD=valSet             # <<<<<<<<<<<<<<
 * 			with nogil:
 * 				status=self._c_cafe.setDouble(handle, valSetD)
 */
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_valSet); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_valSetD = __pyx_t_10;

    /* "PyCafe.pyx":3080
 * 		elif isinstance(valSet, (float)):
 * 			valSetD=valSet
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.setDouble(handle, valSetD)
 * 		elif isinstance(valSet, (int,long)):
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "PyCafe.pyx":3081
 * 			valSetD=valSet
 * 			with nogil:
 * 				status=self._c_cafe.setDouble(handle, valSetD)             # <<<<<<<<<<<<<<
 * 		elif isinstance(valSet, (int,long)):
 * 			valSetI=valSet
 */
          __pyx_v_status = __pyx_v_self->_c_cafe->setDouble(__pyx_v_handle, __pyx_v_valSetD);
        }

        /* "PyCafe.pyx":3080
 * 		elif isinstance(valSet, (float)):
 * 			valSetD=valSet
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.setDouble(handle, valSetD)
 * 		elif isinstance(valSet, (int,long)):
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L38;
          }
          __pyx_L38:;
        }
    }

    /* "PyCafe.pyx":3078
 * 				with nogil:
 * 					status=self._c_cafe.setVString(handle, vecS)
 * 		elif isinstance(valSet, (float)):             # <<<<<<<<<<<<<<
 * 			valSetD=valSet
 * 			with nogil:
 */
    goto __pyx_L6;
  }

  /* "PyCafe.pyx":3082
 * 			with nogil:
 * 				status=self._c_cafe.setDouble(handle, valSetD)
 * 		elif isinstance(valSet, (int,long)):             # <<<<<<<<<<<<<<
 * 			valSetI=valSet
 * 			with nogil:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_valSet); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (!__pyx_t_1) {
  } else {
    __pyx_t_3 = __pyx_t_1;
    goto __pyx_L39_bool_binop_done;
  }
  __pyx_t_1 = PyLong_Check(__pyx_v_valSet); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  __pyx_t_3 = __pyx_t_2;
  __pyx_L39_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":3083
 * 				status=self._c_cafe.setDouble(handle, valSetD)
 * 		elif isinstance(valSet, (int,long)):
 * 			valSetI=valSet             # <<<<<<<<<<<<<<
 * 			with nogil:
 * 				status=self._c_cafe.setLong(handle, valSetI)
 */
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_v_valSet); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3083; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_valSetI = __pyx_t_13;

    /* "PyCafe.pyx":3084
 * 		elif isinstance(valSet, (int,long)):
 * 			valSetI=valSet
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.setLong(handle, valSetI)
 * 		elif isinstance(valSet, (str)):
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "PyCafe.pyx":3085
 * 			valSetI=valSet
 * 			with nogil:
 * 				status=self._c_cafe.setLong(handle, valSetI)             # <<<<<<<<<<<<<<
 * 		elif isinstance(valSet, (str)):
 * 			valSetS=valSet
 */
          __pyx_v_status = __pyx_v_self->_c_cafe->setLong(__pyx_v_handle, __pyx_v_valSetI);
        }

        /* "PyCafe.pyx":3084
 * 		elif isinstance(valSet, (int,long)):
 * 			valSetI=valSet
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.setLong(handle, valSetI)
 * 		elif isinstance(valSet, (str)):
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L43;
          }
          __pyx_L43:;
        }
    }

    /* "PyCafe.pyx":3082
 * 			with nogil:
 * 				status=self._c_cafe.setDouble(handle, valSetD)
 * 		elif isinstance(valSet, (int,long)):             # <<<<<<<<<<<<<<
 * 			valSetI=valSet
 * 			with nogil:
 */
    goto __pyx_L6;
  }

  /* "PyCafe.pyx":3086
 * 			with nogil:
 * 				status=self._c_cafe.setLong(handle, valSetI)
 * 		elif isinstance(valSet, (str)):             # <<<<<<<<<<<<<<
 * 			valSetS=valSet
 * 			with nogil:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_valSet); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "PyCafe.pyx":3087
 * 				status=self._c_cafe.setLong(handle, valSetI)
 * 		elif isinstance(valSet, (str)):
 * 			valSetS=valSet             # <<<<<<<<<<<<<<
 * 			with nogil:
 * 				status=self._c_cafe.setString(handle, valSetS)
 */
    __pyx_t_12 = __pyx_convert_string_from_py_std__in_string(__pyx_v_valSet); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3087; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_valSetS = __pyx_t_12;

    /* "PyCafe.pyx":3088
 * 		elif isinstance(valSet, (str)):
 * 			valSetS=valSet
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.setString(handle, valSetS)
 * 		else:
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "PyCafe.pyx":3089
 * 			valSetS=valSet
 * 			with nogil:
 * 				status=self._c_cafe.setString(handle, valSetS)             # <<<<<<<<<<<<<<
 * 		else:
 * 			print("PyCafe def set WARNING: DATA TYPE NOT SUPPORTED")
 */
          __pyx_v_status = __pyx_v_self->_c_cafe->setString(__pyx_v_handle, __pyx_v_valSetS);
        }

        /* "PyCafe.pyx":3088
 * 		elif isinstance(valSet, (str)):
 * 			valSetS=valSet
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				status=self._c_cafe.setString(handle, valSetS)
 * 		else:
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L46;
          }
          __pyx_L46:;
        }
    }

    /* "PyCafe.pyx":3086
 * 			with nogil:
 * 				status=self._c_cafe.setLong(handle, valSetI)
 * 		elif isinstance(valSet, (str)):             # <<<<<<<<<<<<<<
 * 			valSetS=valSet
 * 			with nogil:
 */
    goto __pyx_L6;
  }

  /* "PyCafe.pyx":3091
 * 				status=self._c_cafe.setString(handle, valSetS)
 * 		else:
 * 			print("PyCafe def set WARNING: DATA TYPE NOT SUPPORTED")             # <<<<<<<<<<<<<<
 * 			print("Input data (whether within a 'list','array.array','cython.view.memoryview' \n\
 * or not) should be of <type 'int'>, <type 'float'> or <type 'str'>")
 */
  /*else*/ {
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__188, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3091; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "PyCafe.pyx":3092
 * 		else:
 * 			print("PyCafe def set WARNING: DATA TYPE NOT SUPPORTED")
 * 			print("Input data (whether within a 'list','array.array','cython.view.memoryview' \n\             # <<<<<<<<<<<<<<
 * or not) should be of <type 'int'>, <type 'float'> or <type 'str'>")
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__189, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3092; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_L6:;

  /* "PyCafe.pyx":3095
 * or not) should be of <type 'int'>, <type 'float'> or <type 'str'>")
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  __pyx_t_3 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_3) {

    /* "PyCafe.pyx":3096
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    __pyx_t_3 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_3) {

      /* "PyCafe.pyx":3097
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
      __pyx_t_3 = ((__pyx_v_handle == 0) != 0);
      if (__pyx_t_3) {

        /* "PyCafe.pyx":3098
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 */
        __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

        /* "PyCafe.pyx":3097
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 */
        goto __pyx_L49;
      }

      /* "PyCafe.pyx":3100
 * 					self._c_cafe.printStatusMessage(status)
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def set. Status = %d" %status)
 * 
 */
      /*else*/ {
        __pyx_v_self->_c_cafe->printStatus(__pyx_v_handle, __pyx_v_status);
      }
      __pyx_L49:;

      /* "PyCafe.pyx":3096
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				if handle == 0:
 * 					self._c_cafe.printStatusMessage(status)
 */
    }

    /* "PyCafe.pyx":3101
 * 				else:
 * 					self._c_cafe.printStatus(handle, status)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def set. Status = %d" %status)             # <<<<<<<<<<<<<<
 * 
 * 		return status
 */
    __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_s, __pyx_t_7); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":3095
 * or not) should be of <type 'int'>, <type 'float'> or <type 'str'>")
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				if handle == 0:
 */
  }

  /* "PyCafe.pyx":3103
 * 			raise Exception("EXCEPTION RAISED in PyCafe def set. Status = %d" %status)
 * 
 * 		return status             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 	#END def set(self, handlePV, valSet):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":2984
 * 
 * 	##################################################################################
 * 	def set(self, handlePV, valSet):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int handle=0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("PyCafe.CyCafe.set", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":3111
 * 
 * 	##################################################################################
 * 	def  setScalarList(self, handleList, list valList):             # <<<<<<<<<<<<<<
 * 
 * 		if not isinstance(handleList, (list)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_219setScalarList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_219setScalarList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handleList = 0;
  PyObject *__pyx_v_valList = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setScalarList (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handleList,&__pyx_n_s_valList,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handleList)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_valList)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setScalarList", 1, 2, 2, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3111; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setScalarList") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3111; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_handleList = values[0];
    __pyx_v_valList = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setScalarList", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3111; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.setScalarList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_valList), (&PyList_Type), 1, "valList", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_218setScalarList(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handleList, __pyx_v_valList);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_218setScalarList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList, PyObject *__pyx_v_valList) {
  PyObject *__pyx_v_nelemPrevious = NULL;
  CYTHON_UNUSED unsigned int __pyx_v_nelemTotal;
  Py_ssize_t __pyx_v_i;
  std::vector<unsigned int>  __pyx_v_v;
  PVDataHolder *__pyx_v_pvd;
  CYTHON_UNUSED unsigned short __pyx_v_valType;
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  unsigned int __pyx_t_9;
  int __pyx_t_10;
  std::string __pyx_t_11;
  double __pyx_t_12;
  int __pyx_t_13;
  unsigned int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setScalarList", 0);
  __Pyx_INCREF(__pyx_v_handleList);

  /* "PyCafe.pyx":3113
 * 	def  setScalarList(self, handleList, list valList):
 * 
 * 		if not isinstance(handleList, (list)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setScalarList. \n\
 * First input argument, should be <type 'list'> of handles or PVs")
 */
  __pyx_t_1 = PyList_Check(__pyx_v_handleList); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":3114
 * 
 * 		if not isinstance(handleList, (list)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setScalarList. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__190, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":3113
 * 	def  setScalarList(self, handleList, list valList):
 * 
 * 		if not isinstance(handleList, (list)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setScalarList. \n\
 * First input argument, should be <type 'list'> of handles or PVs")
 */
  }

  /* "PyCafe.pyx":3117
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 * 		if 	isinstance(handleList[0], (str)):             # <<<<<<<<<<<<<<
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_handleList, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3117; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyUnicode_Check(__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":3118
 * 
 * 		if 	isinstance(handleList[0], (str)):
 * 			handleList=self.checkForHandleList(handleList)             # <<<<<<<<<<<<<<
 * 		elif not isinstance(handleList[0], (int, long)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setScalarList. \n\
 */
    if (!(likely(PyList_CheckExact(__pyx_v_handleList))||((__pyx_v_handleList) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_handleList)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandleList(__pyx_v_self, ((PyObject*)__pyx_v_handleList), 0, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_handleList, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "PyCafe.pyx":3117
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 * 		if 	isinstance(handleList[0], (str)):             # <<<<<<<<<<<<<<
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):
 */
    goto __pyx_L4;
  }

  /* "PyCafe.pyx":3119
 * 		if 	isinstance(handleList[0], (str)):
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setScalarList. \n\
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_handleList, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3119; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyInt_Check(__pyx_t_3); 
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_4 = PyLong_Check(__pyx_t_3); 
  __pyx_t_2 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L5_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":3120
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setScalarList. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__191, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":3119
 * 		if 	isinstance(handleList[0], (str)):
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setScalarList. \n\
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 */
  }
  __pyx_L4:;

  /* "PyCafe.pyx":3123
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 * 
 * 		if len(handleList) != len(valList):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setScalarList. \
 * Length of handle list ", len(handleList), " does not match the length of data list ", len(valList))
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(__pyx_v_valList == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_6 = PyList_GET_SIZE(__pyx_v_valList); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_t_5 != __pyx_t_6) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":3125
 * 		if len(handleList) != len(valList):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setScalarList. \
 * Length of handle list ", len(handleList), " does not match the length of data list ", len(valList))             # <<<<<<<<<<<<<<
 * 
 * 		nelemPrevious = []
 */
    __pyx_t_6 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__pyx_v_valList == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_6 = PyList_GET_SIZE(__pyx_v_valList); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);

    /* "PyCafe.pyx":3124
 * 
 * 		if len(handleList) != len(valList):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setScalarList. \             # <<<<<<<<<<<<<<
 * Length of handle list ", len(handleList), " does not match the length of data list ", len(valList))
 * 
 */
    __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_5);
    __Pyx_GIVEREF(__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_5);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_3);
    __Pyx_INCREF(__pyx_kp_u_does_not_match_the_length_of_da);
    __Pyx_GIVEREF(__pyx_kp_u_does_not_match_the_length_of_da);
    PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_kp_u_does_not_match_the_length_of_da);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_7);
    __pyx_t_3 = 0;
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":3123
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 * 
 * 		if len(handleList) != len(valList):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setScalarList. \
 * Length of handle list ", len(handleList), " does not match the length of data list ", len(valList))
 */
  }

  /* "PyCafe.pyx":3127
 * Length of handle list ", len(handleList), " does not match the length of data list ", len(valList))
 * 
 * 		nelemPrevious = []             # <<<<<<<<<<<<<<
 * 
 * 		#Better with PVDataHolder
 */
  __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_v_nelemPrevious = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "PyCafe.pyx":3130
 * 
 * 		#Better with PVDataHolder
 * 		cdef unsigned int nelemTotal=0             # <<<<<<<<<<<<<<
 * 		for i in range(0, len(handleList)):
 * 			#nelemTotal+=self.hh.getNelemNative(handleList[i])
 */
  __pyx_v_nelemTotal = 0;

  /* "PyCafe.pyx":3131
 * 		#Better with PVDataHolder
 * 		cdef unsigned int nelemTotal=0
 * 		for i in range(0, len(handleList)):             # <<<<<<<<<<<<<<
 * 			#nelemTotal+=self.hh.getNelemNative(handleList[i])
 * 			nelemPrevious.append(self.hh.getNelemClient(handleList[i]))
 */
  __pyx_t_6 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_6; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "PyCafe.pyx":3133
 * 		for i in range(0, len(handleList)):
 * 			#nelemTotal+=self.hh.getNelemNative(handleList[i])
 * 			nelemPrevious.append(self.hh.getNelemClient(handleList[i]))             # <<<<<<<<<<<<<<
 * 
 * 		#cdef int size_cdu = sizeof(CAFE_DATATYPE_UNION)
 */
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3133; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = __Pyx_PyInt_As_unsigned_int(__pyx_t_7); if (unlikely((__pyx_t_9 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->hh.getNelemClient(__pyx_t_9)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_nelemPrevious, __pyx_t_7); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }

  /* "PyCafe.pyx":3140
 * 		#do this to avoid compiler warning messages
 * 		cdef vector[unsigned int] v
 * 		for i in range(0, len(handleList)):             # <<<<<<<<<<<<<<
 * 			v.push_back(handleList[i])
 * 
 */
  __pyx_t_6 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_6; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "PyCafe.pyx":3141
 * 		cdef vector[unsigned int] v
 * 		for i in range(0, len(handleList)):
 * 			v.push_back(handleList[i])             # <<<<<<<<<<<<<<
 * 
 * 		#Create temporary group from handleList
 */
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3141; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = __Pyx_PyInt_As_unsigned_int(__pyx_t_7); if (unlikely((__pyx_t_9 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    try {
      __pyx_v_v.push_back(__pyx_t_9);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }

  /* "PyCafe.pyx":3145
 * 		#Create temporary group from handleList
 * 		#Does group exist?
 * 		cdef PVDataHolder * pvd = self._c_cafe.getPVData(v)             # <<<<<<<<<<<<<<
 * 
 * 		#cdef PVDataHolder * pvd = <PVDataHolder *>malloc( 100000000 + \
 */
  __pyx_v_pvd = __pyx_v_self->_c_cafe->getPVData(__pyx_v_v);

  /* "PyCafe.pyx":3151
 * 
 * 
 * 		for i in range(0, len(handleList)):             # <<<<<<<<<<<<<<
 * 			#pvd[i].val =<shared_ptr[CAFE_DATATYPE_UNION[]]>malloc(sizeof(CAFE_DATATYPE_UNION))
 * 			#pvd[i]= PVDataHolder(1);
 */
  __pyx_t_6 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_6; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "PyCafe.pyx":3154
 * 			#pvd[i].val =<shared_ptr[CAFE_DATATYPE_UNION[]]>malloc(sizeof(CAFE_DATATYPE_UNION))
 * 			#pvd[i]= PVDataHolder(1);
 * 			pvd[i].setNelem(1)             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned short valType=CAFE_STRING
 */
    (__pyx_v_pvd[__pyx_v_i]).setNelem(1);
  }

  /* "PyCafe.pyx":3156
 * 			pvd[i].setNelem(1)
 * 
 * 		cdef unsigned short valType=CAFE_STRING             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(0, len(handleList)):
 */
  __pyx_v_valType = CAFE_STRING;

  /* "PyCafe.pyx":3158
 * 		cdef unsigned short valType=CAFE_STRING
 * 
 * 		for i in range(0, len(handleList)):             # <<<<<<<<<<<<<<
 * 			if isinstance(valList[i],(str)):
 * 				pvd[i].setString(valList[i])
 */
  __pyx_t_6 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_6; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "PyCafe.pyx":3159
 * 
 * 		for i in range(0, len(handleList)):
 * 			if isinstance(valList[i],(str)):             # <<<<<<<<<<<<<<
 * 				pvd[i].setString(valList[i])
 * 			elif isinstance(valList[i],(float)):
 */
    if (unlikely(__pyx_v_valList == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_valList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3159; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = PyUnicode_Check(__pyx_t_7); 
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":3160
 * 		for i in range(0, len(handleList)):
 * 			if isinstance(valList[i],(str)):
 * 				pvd[i].setString(valList[i])             # <<<<<<<<<<<<<<
 * 			elif isinstance(valList[i],(float)):
 * 				pvd[i].setDouble(valList[i])
 */
      if (unlikely(__pyx_v_valList == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_valList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3160; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_11 = __pyx_convert_string_from_py_std__in_string(__pyx_t_7); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      (__pyx_v_pvd[__pyx_v_i]).setString(__pyx_t_11);

      /* "PyCafe.pyx":3159
 * 
 * 		for i in range(0, len(handleList)):
 * 			if isinstance(valList[i],(str)):             # <<<<<<<<<<<<<<
 * 				pvd[i].setString(valList[i])
 * 			elif isinstance(valList[i],(float)):
 */
      goto __pyx_L16;
    }

    /* "PyCafe.pyx":3161
 * 			if isinstance(valList[i],(str)):
 * 				pvd[i].setString(valList[i])
 * 			elif isinstance(valList[i],(float)):             # <<<<<<<<<<<<<<
 * 				pvd[i].setDouble(valList[i])
 * 			elif isinstance(valList[i],(long, int)):
 */
    if (unlikely(__pyx_v_valList == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_valList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3161; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = PyFloat_Check(__pyx_t_7); 
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":3162
 * 				pvd[i].setString(valList[i])
 * 			elif isinstance(valList[i],(float)):
 * 				pvd[i].setDouble(valList[i])             # <<<<<<<<<<<<<<
 * 			elif isinstance(valList[i],(long, int)):
 * 				pvd[i].setInt(valList[i])
 */
      if (unlikely(__pyx_v_valList == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_valList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3162; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      (__pyx_v_pvd[__pyx_v_i]).setDouble(__pyx_t_12);

      /* "PyCafe.pyx":3161
 * 			if isinstance(valList[i],(str)):
 * 				pvd[i].setString(valList[i])
 * 			elif isinstance(valList[i],(float)):             # <<<<<<<<<<<<<<
 * 				pvd[i].setDouble(valList[i])
 * 			elif isinstance(valList[i],(long, int)):
 */
      goto __pyx_L16;
    }

    /* "PyCafe.pyx":3163
 * 			elif isinstance(valList[i],(float)):
 * 				pvd[i].setDouble(valList[i])
 * 			elif isinstance(valList[i],(long, int)):             # <<<<<<<<<<<<<<
 * 				pvd[i].setInt(valList[i])
 * 			else:
 */
    if (unlikely(__pyx_v_valList == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_valList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3163; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = PyLong_Check(__pyx_t_7); 
    __pyx_t_4 = (__pyx_t_1 != 0);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L17_bool_binop_done;
    }
    __pyx_t_4 = PyInt_Check(__pyx_t_7); 
    __pyx_t_1 = (__pyx_t_4 != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L17_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":3164
 * 				pvd[i].setDouble(valList[i])
 * 			elif isinstance(valList[i],(long, int)):
 * 				pvd[i].setInt(valList[i])             # <<<<<<<<<<<<<<
 * 			else:
 * 				print ("This line in PyCafe def setScalarList should never appear!")
 */
      if (unlikely(__pyx_v_valList == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_valList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3164; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      (__pyx_v_pvd[__pyx_v_i]).setInt(__pyx_t_13);

      /* "PyCafe.pyx":3163
 * 			elif isinstance(valList[i],(float)):
 * 				pvd[i].setDouble(valList[i])
 * 			elif isinstance(valList[i],(long, int)):             # <<<<<<<<<<<<<<
 * 				pvd[i].setInt(valList[i])
 * 			else:
 */
      goto __pyx_L16;
    }

    /* "PyCafe.pyx":3166
 * 				pvd[i].setInt(valList[i])
 * 			else:
 * 				print ("This line in PyCafe def setScalarList should never appear!")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__192, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_L16:;
  }

  /* "PyCafe.pyx":3171
 * 
 * 
 * 		cdef int status=ICAFE_NORMAL             # <<<<<<<<<<<<<<
 * 		with nogil:
 * 			status=self._c_cafe.setPVArray(v, pvd)
 */
  __pyx_v_status = ICAFE_NORMAL;

  /* "PyCafe.pyx":3172
 * 
 * 		cdef int status=ICAFE_NORMAL
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.setPVArray(v, pvd)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":3173
 * 		cdef int status=ICAFE_NORMAL
 * 		with nogil:
 * 			status=self._c_cafe.setPVArray(v, pvd)             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(0, len(handleList)):
 */
        __pyx_v_status = __pyx_v_self->_c_cafe->setPVArray(__pyx_v_v, __pyx_v_pvd);
      }

      /* "PyCafe.pyx":3172
 * 
 * 		cdef int status=ICAFE_NORMAL
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.setPVArray(v, pvd)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L21;
        }
        __pyx_L21:;
      }
  }

  /* "PyCafe.pyx":3175
 * 			status=self._c_cafe.setPVArray(v, pvd)
 * 
 * 		for i in range(0, len(handleList)):             # <<<<<<<<<<<<<<
 * 			if (nelemPrevious[i] != 1):
 * 				self._c_cafe.setNelemToPrevious(handleList[i],nelemPrevious[i])
 */
  __pyx_t_6 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_6; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "PyCafe.pyx":3176
 * 
 * 		for i in range(0, len(handleList)):
 * 			if (nelemPrevious[i] != 1):             # <<<<<<<<<<<<<<
 * 				self._c_cafe.setNelemToPrevious(handleList[i],nelemPrevious[i])
 * 
 */
    __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_nelemPrevious, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3176; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyObject_RichCompare(__pyx_t_7, __pyx_int_1, Py_NE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (__pyx_t_1) {

      /* "PyCafe.pyx":3177
 * 		for i in range(0, len(handleList)):
 * 			if (nelemPrevious[i] != 1):
 * 				self._c_cafe.setNelemToPrevious(handleList[i],nelemPrevious[i])             # <<<<<<<<<<<<<<
 * 
 * 		if status !=ICAFE_NORMAL:
 */
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3177; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyInt_As_unsigned_int(__pyx_t_8); if (unlikely((__pyx_t_9 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_nelemPrevious, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3177; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_14 = __Pyx_PyInt_As_unsigned_int(__pyx_t_8); if (unlikely((__pyx_t_14 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v_self->_c_cafe->setNelemToPrevious(__pyx_t_9, __pyx_t_14);

      /* "PyCafe.pyx":3176
 * 
 * 		for i in range(0, len(handleList)):
 * 			if (nelemPrevious[i] != 1):             # <<<<<<<<<<<<<<
 * 				self._c_cafe.setNelemToPrevious(handleList[i],nelemPrevious[i])
 * 
 */
    }
  }

  /* "PyCafe.pyx":3179
 * 				self._c_cafe.setNelemToPrevious(handleList[i],nelemPrevious[i])
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  __pyx_t_1 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":3180
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 			for i in range(0, len(handleList)):
 */
    __pyx_t_1 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":3181
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 			for i in range(0, len(handleList)):
 * 				if (pvd[i].getStatus() != ICAFE_NORMAL):
 */
      __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

      /* "PyCafe.pyx":3180
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 			for i in range(0, len(handleList)):
 */
    }

    /* "PyCafe.pyx":3182
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 * 			for i in range(0, len(handleList)):             # <<<<<<<<<<<<<<
 * 				if (pvd[i].getStatus() != ICAFE_NORMAL):
 * 					print ("Handle=", handleList[i], "PV=", self.hh.getPVFromHandle(handleList[i]) )
 */
    __pyx_t_6 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_6; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "PyCafe.pyx":3183
 * 				self._c_cafe.printStatusMessage(status)
 * 			for i in range(0, len(handleList)):
 * 				if (pvd[i].getStatus() != ICAFE_NORMAL):             # <<<<<<<<<<<<<<
 * 					print ("Handle=", handleList[i], "PV=", self.hh.getPVFromHandle(handleList[i]) )
 * 					print ("with error status=", 	pvd[i].getStatus())
 */
      __pyx_t_1 = (((__pyx_v_pvd[__pyx_v_i]).getStatus() != ICAFE_NORMAL) != 0);
      if (__pyx_t_1) {

        /* "PyCafe.pyx":3184
 * 			for i in range(0, len(handleList)):
 * 				if (pvd[i].getStatus() != ICAFE_NORMAL):
 * 					print ("Handle=", handleList[i], "PV=", self.hh.getPVFromHandle(handleList[i]) )             # <<<<<<<<<<<<<<
 * 					print ("with error status=", 	pvd[i].getStatus())
 * 					self._c_cafe.printStatusMessage(pvd[i].getStatus())
 */
        __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3184; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3184; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_14 = __Pyx_PyInt_As_unsigned_int(__pyx_t_7); if (unlikely((__pyx_t_14 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyStr_FromString(__pyx_v_self->hh.getPVFromHandle(__pyx_t_14)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_kp_u_Handle);
        __Pyx_GIVEREF(__pyx_kp_u_Handle);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Handle);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_8);
        __Pyx_INCREF(__pyx_kp_u_PV_2);
        __Pyx_GIVEREF(__pyx_kp_u_PV_2);
        PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_PV_2);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_7);
        __pyx_t_8 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_3, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "PyCafe.pyx":3185
 * 				if (pvd[i].getStatus() != ICAFE_NORMAL):
 * 					print ("Handle=", handleList[i], "PV=", self.hh.getPVFromHandle(handleList[i]) )
 * 					print ("with error status=", 	pvd[i].getStatus())             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(pvd[i].getStatus())
 * 					print ("")
 */
        __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getStatus()); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_kp_u_with_error_status);
        __Pyx_GIVEREF(__pyx_kp_u_with_error_status);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_with_error_status);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_3, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "PyCafe.pyx":3186
 * 					print ("Handle=", handleList[i], "PV=", self.hh.getPVFromHandle(handleList[i]) )
 * 					print ("with error status=", 	pvd[i].getStatus())
 * 					self._c_cafe.printStatusMessage(pvd[i].getStatus())             # <<<<<<<<<<<<<<
 * 					print ("")
 * 			#raise Exception("EXCEPTION RAISED in PyCafe def setScalarList. Status = %d" %status)
 */
        __pyx_v_self->_c_cafe->printStatusMessage((__pyx_v_pvd[__pyx_v_i]).getStatus());

        /* "PyCafe.pyx":3187
 * 					print ("with error status=", 	pvd[i].getStatus())
 * 					self._c_cafe.printStatusMessage(pvd[i].getStatus())
 * 					print ("")             # <<<<<<<<<<<<<<
 * 			#raise Exception("EXCEPTION RAISED in PyCafe def setScalarList. Status = %d" %status)
 * 
 */
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__193, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "PyCafe.pyx":3183
 * 				self._c_cafe.printStatusMessage(status)
 * 			for i in range(0, len(handleList)):
 * 				if (pvd[i].getStatus() != ICAFE_NORMAL):             # <<<<<<<<<<<<<<
 * 					print ("Handle=", handleList[i], "PV=", self.hh.getPVFromHandle(handleList[i]) )
 * 					print ("with error status=", 	pvd[i].getStatus())
 */
      }
    }

    /* "PyCafe.pyx":3179
 * 				self._c_cafe.setNelemToPrevious(handleList[i],nelemPrevious[i])
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  }

  /* "PyCafe.pyx":3194
 * 		#free(pvd)
 * 
 * 		return status             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":3111
 * 
 * 	##################################################################################
 * 	def  setScalarList(self, handleList, list valList):             # <<<<<<<<<<<<<<
 * 
 * 		if not isinstance(handleList, (list)):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("PyCafe.CyCafe.setScalarList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nelemPrevious);
  __Pyx_XDECREF(__pyx_v_handleList);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":3202
 * 
 * 	##################################################################################
 * 	def  setCompoundList(self, handleList, list vectorList):             # <<<<<<<<<<<<<<
 * 
 * 		if isinstance(handleList, (str)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_221setCompoundList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_221setCompoundList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handleList = 0;
  PyObject *__pyx_v_vectorList = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setCompoundList (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handleList,&__pyx_n_s_vectorList,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handleList)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vectorList)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setCompoundList", 1, 2, 2, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3202; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setCompoundList") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3202; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_handleList = values[0];
    __pyx_v_vectorList = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setCompoundList", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3202; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.setCompoundList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vectorList), (&PyList_Type), 1, "vectorList", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_220setCompoundList(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handleList, __pyx_v_vectorList);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_220setCompoundList(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handleList, PyObject *__pyx_v_vectorList) {
  std::vector<unsigned int>  __pyx_v_v;
  Py_ssize_t __pyx_v_i;
  PVDataHolder *__pyx_v_pvdata;
  CAFE_DATATYPE __pyx_v_valType;
  long __pyx_v_k;
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  unsigned int __pyx_t_10;
  std::string __pyx_t_11;
  double __pyx_t_12;
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  long __pyx_t_15;
  std::vector<double>  __pyx_t_16;
  std::vector<int>  __pyx_t_17;
  std::vector<std::string>  __pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setCompoundList", 0);
  __Pyx_INCREF(__pyx_v_handleList);

  /* "PyCafe.pyx":3204
 * 	def  setCompoundList(self, handleList, list vectorList):
 * 
 * 		if isinstance(handleList, (str)):             # <<<<<<<<<<<<<<
 * 			handleList=self.getHandlesFromWithinGroup(handleList)
 * 		else:
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_handleList); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":3205
 * 
 * 		if isinstance(handleList, (str)):
 * 			handleList=self.getHandlesFromWithinGroup(handleList)             # <<<<<<<<<<<<<<
 * 		else:
 * 			if not isinstance(handleList, (list)):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getHandlesFromWithinGroup); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_handleList); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_handleList);
      __Pyx_GIVEREF(__pyx_v_handleList);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_handleList);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_handleList, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "PyCafe.pyx":3204
 * 	def  setCompoundList(self, handleList, list vectorList):
 * 
 * 		if isinstance(handleList, (str)):             # <<<<<<<<<<<<<<
 * 			handleList=self.getHandlesFromWithinGroup(handleList)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":3207
 * 			handleList=self.getHandlesFromWithinGroup(handleList)
 * 		else:
 * 			if not isinstance(handleList, (list)):             # <<<<<<<<<<<<<<
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setCompoundList. \n\
 * First input argument, should be <type 'list'> of handles or PVs")
 */
  /*else*/ {
    __pyx_t_2 = PyList_Check(__pyx_v_handleList); 
    __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":3208
 * 		else:
 * 			if not isinstance(handleList, (list)):
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setCompoundList. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__194, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "PyCafe.pyx":3207
 * 			handleList=self.getHandlesFromWithinGroup(handleList)
 * 		else:
 * 			if not isinstance(handleList, (list)):             # <<<<<<<<<<<<<<
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setCompoundList. \n\
 * First input argument, should be <type 'list'> of handles or PVs")
 */
    }

    /* "PyCafe.pyx":3211
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 * 			if isinstance(handleList[0], (str)):             # <<<<<<<<<<<<<<
 * 				handleList=self.checkForHandleList(handleList)
 * 			elif not isinstance(handleList[0], (int, long)):
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_handleList, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3211; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyUnicode_Check(__pyx_t_3); 
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":3212
 * 
 * 			if isinstance(handleList[0], (str)):
 * 				handleList=self.checkForHandleList(handleList)             # <<<<<<<<<<<<<<
 * 			elif not isinstance(handleList[0], (int, long)):
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setCompoundList. \n\
 */
      if (!(likely(PyList_CheckExact(__pyx_v_handleList))||((__pyx_v_handleList) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_handleList)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_3 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandleList(__pyx_v_self, ((PyObject*)__pyx_v_handleList), 0, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF_SET(__pyx_v_handleList, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "PyCafe.pyx":3211
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 * 			if isinstance(handleList[0], (str)):             # <<<<<<<<<<<<<<
 * 				handleList=self.checkForHandleList(handleList)
 * 			elif not isinstance(handleList[0], (int, long)):
 */
      goto __pyx_L5;
    }

    /* "PyCafe.pyx":3213
 * 			if isinstance(handleList[0], (str)):
 * 				handleList=self.checkForHandleList(handleList)
 * 			elif not isinstance(handleList[0], (int, long)):             # <<<<<<<<<<<<<<
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setCompoundList. \n\
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_handleList, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3213; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyInt_Check(__pyx_t_3); 
    __pyx_t_7 = (__pyx_t_1 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = PyLong_Check(__pyx_t_3); 
    __pyx_t_1 = (__pyx_t_7 != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L6_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":3214
 * 				handleList=self.checkForHandleList(handleList)
 * 			elif not isinstance(handleList[0], (int, long)):
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setCompoundList. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__195, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "PyCafe.pyx":3213
 * 			if isinstance(handleList[0], (str)):
 * 				handleList=self.checkForHandleList(handleList)
 * 			elif not isinstance(handleList[0], (int, long)):             # <<<<<<<<<<<<<<
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setCompoundList. \n\
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 */
    }
    __pyx_L5:;

    /* "PyCafe.pyx":3217
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 * 
 * 			if len(handleList) != len(vectorList):             # <<<<<<<<<<<<<<
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setCompoundList. \
 * Length of handle list ", len(handleList), " does not match the length of data list ", len(vectorList))
 */
    __pyx_t_8 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (unlikely(__pyx_v_vectorList == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_9 = PyList_GET_SIZE(__pyx_v_vectorList); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = ((__pyx_t_8 != __pyx_t_9) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":3219
 * 			if len(handleList) != len(vectorList):
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setCompoundList. \
 * Length of handle list ", len(handleList), " does not match the length of data list ", len(vectorList))             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_9 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_9); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely(__pyx_v_vectorList == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_9 = PyList_GET_SIZE(__pyx_v_vectorList); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_9); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);

      /* "PyCafe.pyx":3218
 * 
 * 			if len(handleList) != len(vectorList):
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setCompoundList. \             # <<<<<<<<<<<<<<
 * Length of handle list ", len(handleList), " does not match the length of data list ", len(vectorList))
 * 
 */
      __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_8);
      __Pyx_GIVEREF(__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_8);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_8);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
      __Pyx_INCREF(__pyx_kp_u_does_not_match_the_length_of_da);
      __Pyx_GIVEREF(__pyx_kp_u_does_not_match_the_length_of_da);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_kp_u_does_not_match_the_length_of_da);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "PyCafe.pyx":3217
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 * 
 * 			if len(handleList) != len(vectorList):             # <<<<<<<<<<<<<<
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setCompoundList. \
 * Length of handle list ", len(handleList), " does not match the length of data list ", len(vectorList))
 */
    }
  }
  __pyx_L3:;

  /* "PyCafe.pyx":3224
 * 		#do this to avoid compiler warning messages
 * 		cdef vector[unsigned int] v
 * 		for i in range(0, len(handleList)):             # <<<<<<<<<<<<<<
 * 			v.push_back(handleList[i])
 * 
 */
  __pyx_t_9 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_9; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "PyCafe.pyx":3225
 * 		cdef vector[unsigned int] v
 * 		for i in range(0, len(handleList)):
 * 			v.push_back(handleList[i])             # <<<<<<<<<<<<<<
 * 
 * 		#Create temporary group from handleList
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3225; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_4); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    try {
      __pyx_v_v.push_back(__pyx_t_10);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }

  /* "PyCafe.pyx":3229
 * 		#Create temporary group from handleList
 * 		#Does group exist?
 * 		cdef PVDataHolder * pvdata = self._c_cafe.getPVData(v)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_pvdata = __pyx_v_self->_c_cafe->getPVData(__pyx_v_v);

  /* "PyCafe.pyx":3232
 * 
 * 
 * 		for i in range(0, len(vectorList)):             # <<<<<<<<<<<<<<
 * 
 * 			#if not list
 */
  if (unlikely(__pyx_v_vectorList == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_9 = PyList_GET_SIZE(__pyx_v_vectorList); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_9; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "PyCafe.pyx":3235
 * 
 * 			#if not list
 * 			if isinstance(vectorList[i],(str)):             # <<<<<<<<<<<<<<
 * 				pvdata[i].setString(vectorList[i])
 * 
 */
    if (unlikely(__pyx_v_vectorList == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3235; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyUnicode_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":3236
 * 			#if not list
 * 			if isinstance(vectorList[i],(str)):
 * 				pvdata[i].setString(vectorList[i])             # <<<<<<<<<<<<<<
 * 
 * 			elif isinstance(vectorList[i],(float)):
 */
      if (unlikely(__pyx_v_vectorList == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3236; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = __pyx_convert_string_from_py_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      (__pyx_v_pvdata[__pyx_v_i]).setString(__pyx_t_11);

      /* "PyCafe.pyx":3235
 * 
 * 			#if not list
 * 			if isinstance(vectorList[i],(str)):             # <<<<<<<<<<<<<<
 * 				pvdata[i].setString(vectorList[i])
 * 
 */
      goto __pyx_L13;
    }

    /* "PyCafe.pyx":3238
 * 				pvdata[i].setString(vectorList[i])
 * 
 * 			elif isinstance(vectorList[i],(float)):             # <<<<<<<<<<<<<<
 * 				pvdata[i].setDouble(vectorList[i])
 * 
 */
    if (unlikely(__pyx_v_vectorList == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3238; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyFloat_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":3239
 * 
 * 			elif isinstance(vectorList[i],(float)):
 * 				pvdata[i].setDouble(vectorList[i])             # <<<<<<<<<<<<<<
 * 
 * 			elif isinstance(vectorList[i],(long, int)):
 */
      if (unlikely(__pyx_v_vectorList == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3239; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      (__pyx_v_pvdata[__pyx_v_i]).setDouble(__pyx_t_12);

      /* "PyCafe.pyx":3238
 * 				pvdata[i].setString(vectorList[i])
 * 
 * 			elif isinstance(vectorList[i],(float)):             # <<<<<<<<<<<<<<
 * 				pvdata[i].setDouble(vectorList[i])
 * 
 */
      goto __pyx_L13;
    }

    /* "PyCafe.pyx":3241
 * 				pvdata[i].setDouble(vectorList[i])
 * 
 * 			elif isinstance(vectorList[i],(long, int)):             # <<<<<<<<<<<<<<
 * 				pvdata[i].setInt(vectorList[i])
 * 
 */
    if (unlikely(__pyx_v_vectorList == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3241; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyLong_Check(__pyx_t_4); 
    __pyx_t_7 = (__pyx_t_2 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_1 = __pyx_t_7;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_7 = PyInt_Check(__pyx_t_4); 
    __pyx_t_2 = (__pyx_t_7 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L14_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":3242
 * 
 * 			elif isinstance(vectorList[i],(long, int)):
 * 				pvdata[i].setInt(vectorList[i])             # <<<<<<<<<<<<<<
 * 
 * 			elif isinstance(vectorList[i], (list)):
 */
      if (unlikely(__pyx_v_vectorList == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3242; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      (__pyx_v_pvdata[__pyx_v_i]).setInt(__pyx_t_13);

      /* "PyCafe.pyx":3241
 * 				pvdata[i].setDouble(vectorList[i])
 * 
 * 			elif isinstance(vectorList[i],(long, int)):             # <<<<<<<<<<<<<<
 * 				pvdata[i].setInt(vectorList[i])
 * 
 */
      goto __pyx_L13;
    }

    /* "PyCafe.pyx":3244
 * 				pvdata[i].setInt(vectorList[i])
 * 
 * 			elif isinstance(vectorList[i], (list)):             # <<<<<<<<<<<<<<
 * 
 * 				#if list
 */
    if (unlikely(__pyx_v_vectorList == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3244; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyList_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":3247
 * 
 * 				#if list
 * 				valType=CAFE_INVALID_DATATYPE             # <<<<<<<<<<<<<<
 * 				pvdata[i].setNelem(len(vectorList[i]))
 * 				#for k in range(0, len(vectorList[i])):
 */
      __pyx_v_valType = CAFE_INVALID_DATATYPE;

      /* "PyCafe.pyx":3248
 * 				#if list
 * 				valType=CAFE_INVALID_DATATYPE
 * 				pvdata[i].setNelem(len(vectorList[i]))             # <<<<<<<<<<<<<<
 * 				#for k in range(0, len(vectorList[i])):
 * 				#Just check on first element
 */
      if (unlikely(__pyx_v_vectorList == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3248; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_14 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_14 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      (__pyx_v_pvdata[__pyx_v_i]).setNelem(__pyx_t_14);

      /* "PyCafe.pyx":3251
 * 				#for k in range(0, len(vectorList[i])):
 * 				#Just check on first element
 * 				for k in range(0,1): # can expand this to all elemnts or reduce to 1             # <<<<<<<<<<<<<<
 * 					if isinstance(vectorList[i][k],(str)):
 * 						valType=CAFE_STRING
 */
      for (__pyx_t_15 = 0; __pyx_t_15 < 1; __pyx_t_15+=1) {
        __pyx_v_k = __pyx_t_15;

        /* "PyCafe.pyx":3252
 * 				#Just check on first element
 * 				for k in range(0,1): # can expand this to all elemnts or reduce to 1
 * 					if isinstance(vectorList[i][k],(str)):             # <<<<<<<<<<<<<<
 * 						valType=CAFE_STRING
 * 						break
 */
        if (unlikely(__pyx_v_vectorList == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3252; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_4, __pyx_v_k, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3252; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_1 = PyUnicode_Check(__pyx_t_6); 
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_2 = (__pyx_t_1 != 0);
        if (__pyx_t_2) {

          /* "PyCafe.pyx":3253
 * 				for k in range(0,1): # can expand this to all elemnts or reduce to 1
 * 					if isinstance(vectorList[i][k],(str)):
 * 						valType=CAFE_STRING             # <<<<<<<<<<<<<<
 * 						break
 * 					elif isinstance(vectorList[i][k],(float)):
 */
          __pyx_v_valType = CAFE_STRING;

          /* "PyCafe.pyx":3254
 * 					if isinstance(vectorList[i][k],(str)):
 * 						valType=CAFE_STRING
 * 						break             # <<<<<<<<<<<<<<
 * 					elif isinstance(vectorList[i][k],(float)):
 * 						valType=CAFE_DOUBLE
 */
          goto __pyx_L17_break;

          /* "PyCafe.pyx":3252
 * 				#Just check on first element
 * 				for k in range(0,1): # can expand this to all elemnts or reduce to 1
 * 					if isinstance(vectorList[i][k],(str)):             # <<<<<<<<<<<<<<
 * 						valType=CAFE_STRING
 * 						break
 */
        }

        /* "PyCafe.pyx":3255
 * 						valType=CAFE_STRING
 * 						break
 * 					elif isinstance(vectorList[i][k],(float)):             # <<<<<<<<<<<<<<
 * 						valType=CAFE_DOUBLE
 * 					elif isinstance(vectorList[i][k],(long, int)):
 */
        if (unlikely(__pyx_v_vectorList == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_6 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3255; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_6, __pyx_v_k, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3255; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_2 = PyFloat_Check(__pyx_t_4); 
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_1 = (__pyx_t_2 != 0);
        if (__pyx_t_1) {

          /* "PyCafe.pyx":3256
 * 						break
 * 					elif isinstance(vectorList[i][k],(float)):
 * 						valType=CAFE_DOUBLE             # <<<<<<<<<<<<<<
 * 					elif isinstance(vectorList[i][k],(long, int)):
 * 						if valType != CAFE_DOUBLE:
 */
          __pyx_v_valType = CAFE_DOUBLE;

          /* "PyCafe.pyx":3255
 * 						valType=CAFE_STRING
 * 						break
 * 					elif isinstance(vectorList[i][k],(float)):             # <<<<<<<<<<<<<<
 * 						valType=CAFE_DOUBLE
 * 					elif isinstance(vectorList[i][k],(long, int)):
 */
          goto __pyx_L18;
        }

        /* "PyCafe.pyx":3257
 * 					elif isinstance(vectorList[i][k],(float)):
 * 						valType=CAFE_DOUBLE
 * 					elif isinstance(vectorList[i][k],(long, int)):             # <<<<<<<<<<<<<<
 * 						if valType != CAFE_DOUBLE:
 * 							valType=CAFE_LONG
 */
        if (unlikely(__pyx_v_vectorList == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3257; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_4, __pyx_v_k, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3257; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_2 = PyLong_Check(__pyx_t_6); 
        __pyx_t_7 = (__pyx_t_2 != 0);
        if (!__pyx_t_7) {
        } else {
          __pyx_t_1 = __pyx_t_7;
          goto __pyx_L19_bool_binop_done;
        }
        __pyx_t_7 = PyInt_Check(__pyx_t_6); 
        __pyx_t_2 = (__pyx_t_7 != 0);
        __pyx_t_1 = __pyx_t_2;
        __pyx_L19_bool_binop_done:;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_2 = (__pyx_t_1 != 0);
        if (__pyx_t_2) {

          /* "PyCafe.pyx":3258
 * 						valType=CAFE_DOUBLE
 * 					elif isinstance(vectorList[i][k],(long, int)):
 * 						if valType != CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 							valType=CAFE_LONG
 * 						else:
 */
          __pyx_t_2 = ((__pyx_v_valType != CAFE_DOUBLE) != 0);
          if (__pyx_t_2) {

            /* "PyCafe.pyx":3259
 * 					elif isinstance(vectorList[i][k],(long, int)):
 * 						if valType != CAFE_DOUBLE:
 * 							valType=CAFE_LONG             # <<<<<<<<<<<<<<
 * 						else:
 * 							valType=CAFE_STRING
 */
            __pyx_v_valType = CAFE_LONG;

            /* "PyCafe.pyx":3258
 * 						valType=CAFE_DOUBLE
 * 					elif isinstance(vectorList[i][k],(long, int)):
 * 						if valType != CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 							valType=CAFE_LONG
 * 						else:
 */
            goto __pyx_L21;
          }

          /* "PyCafe.pyx":3261
 * 							valType=CAFE_LONG
 * 						else:
 * 							valType=CAFE_STRING             # <<<<<<<<<<<<<<
 * 							break
 * 
 */
          /*else*/ {
            __pyx_v_valType = CAFE_STRING;

            /* "PyCafe.pyx":3262
 * 						else:
 * 							valType=CAFE_STRING
 * 							break             # <<<<<<<<<<<<<<
 * 
 * 				#check dt of first element
 */
            goto __pyx_L17_break;
          }
          __pyx_L21:;

          /* "PyCafe.pyx":3257
 * 					elif isinstance(vectorList[i][k],(float)):
 * 						valType=CAFE_DOUBLE
 * 					elif isinstance(vectorList[i][k],(long, int)):             # <<<<<<<<<<<<<<
 * 						if valType != CAFE_DOUBLE:
 * 							valType=CAFE_LONG
 */
        }
        __pyx_L18:;
      }
      __pyx_L17_break:;

      /* "PyCafe.pyx":3265
 * 
 * 				#check dt of first element
 * 				if valType==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 					pvdata[i].setVDouble(vectorList[i])
 * 				elif valType==CAFE_LONG:
 */
      switch (__pyx_v_valType) {
        case CAFE_DOUBLE:

        /* "PyCafe.pyx":3266
 * 				#check dt of first element
 * 				if valType==CAFE_DOUBLE:
 * 					pvdata[i].setVDouble(vectorList[i])             # <<<<<<<<<<<<<<
 * 				elif valType==CAFE_LONG:
 * 					pvdata[i].setVInt  (vectorList[i])
 */
        if (unlikely(__pyx_v_vectorList == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_6 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3266; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_16 = __pyx_convert_vector_from_py_double(__pyx_t_6); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        (__pyx_v_pvdata[__pyx_v_i]).setVDouble(__pyx_t_16);

        /* "PyCafe.pyx":3265
 * 
 * 				#check dt of first element
 * 				if valType==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 					pvdata[i].setVDouble(vectorList[i])
 * 				elif valType==CAFE_LONG:
 */
        break;

        /* "PyCafe.pyx":3267
 * 				if valType==CAFE_DOUBLE:
 * 					pvdata[i].setVDouble(vectorList[i])
 * 				elif valType==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 					pvdata[i].setVInt  (vectorList[i])
 * 				elif valType==CAFE_STRING:
 */
        case CAFE_LONG:

        /* "PyCafe.pyx":3268
 * 					pvdata[i].setVDouble(vectorList[i])
 * 				elif valType==CAFE_LONG:
 * 					pvdata[i].setVInt  (vectorList[i])             # <<<<<<<<<<<<<<
 * 				elif valType==CAFE_STRING:
 * 					pvdata[i].setVString(vectorList[i])
 */
        if (unlikely(__pyx_v_vectorList == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_6 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3268; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_17 = __pyx_convert_vector_from_py_int(__pyx_t_6); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        (__pyx_v_pvdata[__pyx_v_i]).setVInt(__pyx_t_17);

        /* "PyCafe.pyx":3267
 * 				if valType==CAFE_DOUBLE:
 * 					pvdata[i].setVDouble(vectorList[i])
 * 				elif valType==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 					pvdata[i].setVInt  (vectorList[i])
 * 				elif valType==CAFE_STRING:
 */
        break;

        /* "PyCafe.pyx":3269
 * 				elif valType==CAFE_LONG:
 * 					pvdata[i].setVInt  (vectorList[i])
 * 				elif valType==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 					pvdata[i].setVString(vectorList[i])
 * 
 */
        case CAFE_STRING:

        /* "PyCafe.pyx":3270
 * 					pvdata[i].setVInt  (vectorList[i])
 * 				elif valType==CAFE_STRING:
 * 					pvdata[i].setVString(vectorList[i])             # <<<<<<<<<<<<<<
 * 
 * 			else:
 */
        if (unlikely(__pyx_v_vectorList == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_6 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3270; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_18 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_t_6); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        (__pyx_v_pvdata[__pyx_v_i]).setVString(__pyx_t_18);

        /* "PyCafe.pyx":3269
 * 				elif valType==CAFE_LONG:
 * 					pvdata[i].setVInt  (vectorList[i])
 * 				elif valType==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 					pvdata[i].setVString(vectorList[i])
 * 
 */
        break;
        default: break;
      }

      /* "PyCafe.pyx":3244
 * 				pvdata[i].setInt(vectorList[i])
 * 
 * 			elif isinstance(vectorList[i], (list)):             # <<<<<<<<<<<<<<
 * 
 * 				#if list
 */
      goto __pyx_L13;
    }

    /* "PyCafe.pyx":3273
 * 
 * 			else:
 * 				print ("This line in PyCafe def setGroup should never appear!")             # <<<<<<<<<<<<<<
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setGroup. \n\
 * Unknown data input; should be one of <type 'int'> , <type 'str'>, <type 'float'> , <type 'list'>")
 */
    /*else*/ {
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__196, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "PyCafe.pyx":3274
 * 			else:
 * 				print ("This line in PyCafe def setGroup should never appear!")
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setGroup. \n\             # <<<<<<<<<<<<<<
 * Unknown data input; should be one of <type 'int'> , <type 'str'>, <type 'float'> , <type 'list'>")
 * 
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__197, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L13:;
  }

  /* "PyCafe.pyx":3280
 * 
 * 
 * 		cdef int status=ICAFE_NORMAL             # <<<<<<<<<<<<<<
 * 		with nogil:
 * 			status=self._c_cafe.setPVArray(v, pvdata)
 */
  __pyx_v_status = ICAFE_NORMAL;

  /* "PyCafe.pyx":3281
 * 
 * 		cdef int status=ICAFE_NORMAL
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.setPVArray(v, pvdata)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":3282
 * 		cdef int status=ICAFE_NORMAL
 * 		with nogil:
 * 			status=self._c_cafe.setPVArray(v, pvdata)             # <<<<<<<<<<<<<<
 * 
 * 		if status !=ICAFE_NORMAL:
 */
        __pyx_v_status = __pyx_v_self->_c_cafe->setPVArray(__pyx_v_v, __pyx_v_pvdata);
      }

      /* "PyCafe.pyx":3281
 * 
 * 		cdef int status=ICAFE_NORMAL
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.setPVArray(v, pvdata)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L24;
        }
        __pyx_L24:;
      }
  }

  /* "PyCafe.pyx":3284
 * 			status=self._c_cafe.setPVArray(v, pvdata)
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  __pyx_t_2 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":3285
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 			for i in range(0, len(handleList)):
 */
    __pyx_t_2 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":3286
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 			for i in range(0, len(handleList)):
 * 				if (pvdata[i].getStatus() != ICAFE_NORMAL):
 */
      __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

      /* "PyCafe.pyx":3285
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 			for i in range(0, len(handleList)):
 */
    }

    /* "PyCafe.pyx":3287
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 * 			for i in range(0, len(handleList)):             # <<<<<<<<<<<<<<
 * 				if (pvdata[i].getStatus() != ICAFE_NORMAL):
 * 					print ("Handle=", handleList[i], "PV=", self.hh.getPVFromHandle(handleList[i]) )
 */
    __pyx_t_9 = PyObject_Length(__pyx_v_handleList); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_9; __pyx_t_8+=1) {
      __pyx_v_i = __pyx_t_8;

      /* "PyCafe.pyx":3288
 * 				self._c_cafe.printStatusMessage(status)
 * 			for i in range(0, len(handleList)):
 * 				if (pvdata[i].getStatus() != ICAFE_NORMAL):             # <<<<<<<<<<<<<<
 * 					print ("Handle=", handleList[i], "PV=", self.hh.getPVFromHandle(handleList[i]) )
 * 					print ("with error status=", 	pvdata[i].getStatus())
 */
      __pyx_t_2 = (((__pyx_v_pvdata[__pyx_v_i]).getStatus() != ICAFE_NORMAL) != 0);
      if (__pyx_t_2) {

        /* "PyCafe.pyx":3289
 * 			for i in range(0, len(handleList)):
 * 				if (pvdata[i].getStatus() != ICAFE_NORMAL):
 * 					print ("Handle=", handleList[i], "PV=", self.hh.getPVFromHandle(handleList[i]) )             # <<<<<<<<<<<<<<
 * 					print ("with error status=", 	pvdata[i].getStatus())
 * 					self._c_cafe.printStatusMessage(pvdata[i].getStatus())
 */
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3289; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_handleList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3289; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_4); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyStr_FromString(__pyx_v_self->hh.getPVFromHandle(__pyx_t_10)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_kp_u_Handle);
        __Pyx_GIVEREF(__pyx_kp_u_Handle);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Handle);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_6);
        __Pyx_INCREF(__pyx_kp_u_PV_2);
        __Pyx_GIVEREF(__pyx_kp_u_PV_2);
        PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_PV_2);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_4);
        __pyx_t_6 = 0;
        __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "PyCafe.pyx":3290
 * 				if (pvdata[i].getStatus() != ICAFE_NORMAL):
 * 					print ("Handle=", handleList[i], "PV=", self.hh.getPVFromHandle(handleList[i]) )
 * 					print ("with error status=", 	pvdata[i].getStatus())             # <<<<<<<<<<<<<<
 * 					self._c_cafe.printStatusMessage(pvdata[i].getStatus())
 * 					print ("")
 */
        __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_pvdata[__pyx_v_i]).getStatus()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_kp_u_with_error_status);
        __Pyx_GIVEREF(__pyx_kp_u_with_error_status);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_with_error_status);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "PyCafe.pyx":3291
 * 					print ("Handle=", handleList[i], "PV=", self.hh.getPVFromHandle(handleList[i]) )
 * 					print ("with error status=", 	pvdata[i].getStatus())
 * 					self._c_cafe.printStatusMessage(pvdata[i].getStatus())             # <<<<<<<<<<<<<<
 * 					print ("")
 * 			#raise Exception("EXCEPTION RAISED in PyCafe def setCompoundList. Status = %d" %status)
 */
        __pyx_v_self->_c_cafe->printStatusMessage((__pyx_v_pvdata[__pyx_v_i]).getStatus());

        /* "PyCafe.pyx":3292
 * 					print ("with error status=", 	pvdata[i].getStatus())
 * 					self._c_cafe.printStatusMessage(pvdata[i].getStatus())
 * 					print ("")             # <<<<<<<<<<<<<<
 * 			#raise Exception("EXCEPTION RAISED in PyCafe def setCompoundList. Status = %d" %status)
 * 
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__198, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "PyCafe.pyx":3288
 * 				self._c_cafe.printStatusMessage(status)
 * 			for i in range(0, len(handleList)):
 * 				if (pvdata[i].getStatus() != ICAFE_NORMAL):             # <<<<<<<<<<<<<<
 * 					print ("Handle=", handleList[i], "PV=", self.hh.getPVFromHandle(handleList[i]) )
 * 					print ("with error status=", 	pvdata[i].getStatus())
 */
      }
    }

    /* "PyCafe.pyx":3284
 * 			status=self._c_cafe.setPVArray(v, pvdata)
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  }

  /* "PyCafe.pyx":3295
 * 			#raise Exception("EXCEPTION RAISED in PyCafe def setCompoundList. Status = %d" %status)
 * 
 * 		return status             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":3202
 * 
 * 	##################################################################################
 * 	def  setCompoundList(self, handleList, list vectorList):             # <<<<<<<<<<<<<<
 * 
 * 		if isinstance(handleList, (str)):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("PyCafe.CyCafe.setCompoundList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_handleList);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":3303
 * 
 * 	##################################################################################
 * 	def setGroup(self, ghandleName, list vectorList):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int ghandle=0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_223setGroup(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_223setGroup(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ghandleName = 0;
  PyObject *__pyx_v_vectorList = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setGroup (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ghandleName,&__pyx_n_s_vectorList,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ghandleName)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vectorList)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setGroup", 1, 2, 2, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3303; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setGroup") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3303; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_ghandleName = values[0];
    __pyx_v_vectorList = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setGroup", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3303; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.setGroup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vectorList), (&PyList_Type), 1, "vectorList", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_222setGroup(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_ghandleName, __pyx_v_vectorList);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_222setGroup(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_ghandleName, PyObject *__pyx_v_vectorList) {
  unsigned int __pyx_v_ghandle;
  PVGroup __pyx_v_pvg;
  PVDataHolder *__pyx_v_pvdata;
  Py_ssize_t __pyx_v_i;
  CAFE_DATATYPE __pyx_v_valType;
  long __pyx_v_k;
  int __pyx_v_status;
  PyObject *__pyx_v_statusList = NULL;
  PVDataHolder *__pyx_v_pvd;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  std::string __pyx_t_8;
  double __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  long __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  std::vector<double>  __pyx_t_14;
  std::vector<int>  __pyx_t_15;
  std::vector<std::string>  __pyx_t_16;
  int __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setGroup", 0);

  /* "PyCafe.pyx":3305
 * 	def setGroup(self, ghandleName, list vectorList):
 * 
 * 		cdef unsigned int ghandle=0             # <<<<<<<<<<<<<<
 * 		if isinstance(ghandleName, (int,long)) == 1:
 * 			ghandle=ghandleName
 */
  __pyx_v_ghandle = 0;

  /* "PyCafe.pyx":3306
 * 
 * 		cdef unsigned int ghandle=0
 * 		if isinstance(ghandleName, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			ghandle=ghandleName
 * 		elif isinstance(ghandleName, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_ghandleName); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_ghandleName); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":3307
 * 		cdef unsigned int ghandle=0
 * 		if isinstance(ghandleName, (int,long)) == 1:
 * 			ghandle=ghandleName             # <<<<<<<<<<<<<<
 * 		elif isinstance(ghandleName, (str)) == 1:
 * 			ghandle=self.checkForGroupHandle(ghandleName)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_ghandleName); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_ghandle = __pyx_t_4;

    /* "PyCafe.pyx":3306
 * 
 * 		cdef unsigned int ghandle=0
 * 		if isinstance(ghandleName, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			ghandle=ghandleName
 * 		elif isinstance(ghandleName, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":3308
 * 		if isinstance(ghandleName, (int,long)) == 1:
 * 			ghandle=ghandleName
 * 		elif isinstance(ghandleName, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			ghandle=self.checkForGroupHandle(ghandleName)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_ghandleName); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":3309
 * 			ghandle=ghandleName
 * 		elif isinstance(ghandleName, (str)) == 1:
 * 			ghandle=self.checkForGroupHandle(ghandleName)             # <<<<<<<<<<<<<<
 * 		else:
 * 			###
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_ghandleName))||((__pyx_v_ghandleName) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_ghandleName)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForGroupHandle(__pyx_v_self, ((PyObject*)__pyx_v_ghandleName), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_ghandle = __pyx_t_4;

    /* "PyCafe.pyx":3308
 * 		if isinstance(ghandleName, (int,long)) == 1:
 * 			ghandle=ghandleName
 * 		elif isinstance(ghandleName, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			ghandle=self.checkForGroupHandle(ghandleName)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":3312
 * 		else:
 * 			###
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setGroup. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if group handle, else <type 'str'> if group name")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__199, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":3317
 * 		cdef PVGroup pvg
 * 
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			self._c_cafe.groupAttach(ghandle, pvg)
 * 		###
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":3318
 * 
 * 		with nogil:
 * 			self._c_cafe.groupAttach(ghandle, pvg)             # <<<<<<<<<<<<<<
 * 		###
 * 		#print "len V", len(vectorList), " npv=", pvg.getNPV()
 */
        __pyx_v_self->_c_cafe->groupAttach(__pyx_v_ghandle, __pyx_v_pvg);
      }

      /* "PyCafe.pyx":3317
 * 		cdef PVGroup pvg
 * 
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			self._c_cafe.groupAttach(ghandle, pvg)
 * 		###
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L8;
        }
        __pyx_L8:;
      }
  }

  /* "PyCafe.pyx":3322
 * 		#print "len V", len(vectorList), " npv=", pvg.getNPV()
 * 
 * 		cdef PVDataHolder * pvdata = pvg.getPVData();             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_pvdata = __pyx_v_pvg.getPVData();

  /* "PyCafe.pyx":3325
 * 
 * 
 * 		for i in range(0, len(vectorList)):             # <<<<<<<<<<<<<<
 * 
 * 			#if not list
 */
  if (unlikely(__pyx_v_vectorList == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_6 = PyList_GET_SIZE(__pyx_v_vectorList); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "PyCafe.pyx":3328
 * 
 * 			#if not list
 * 			if isinstance(vectorList[i],(str)):             # <<<<<<<<<<<<<<
 * 				pvdata[i].setString(vectorList[i])
 * 
 */
    if (unlikely(__pyx_v_vectorList == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3328; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyUnicode_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":3329
 * 			#if not list
 * 			if isinstance(vectorList[i],(str)):
 * 				pvdata[i].setString(vectorList[i])             # <<<<<<<<<<<<<<
 * 
 * 			elif isinstance(vectorList[i],(float)):
 */
      if (unlikely(__pyx_v_vectorList == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3329; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_t_5); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_pvdata[__pyx_v_i]).setString(__pyx_t_8);

      /* "PyCafe.pyx":3328
 * 
 * 			#if not list
 * 			if isinstance(vectorList[i],(str)):             # <<<<<<<<<<<<<<
 * 				pvdata[i].setString(vectorList[i])
 * 
 */
      goto __pyx_L11;
    }

    /* "PyCafe.pyx":3331
 * 				pvdata[i].setString(vectorList[i])
 * 
 * 			elif isinstance(vectorList[i],(float)):             # <<<<<<<<<<<<<<
 * 				pvdata[i].setDouble(vectorList[i])
 * 
 */
    if (unlikely(__pyx_v_vectorList == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3331; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyFloat_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":3332
 * 
 * 			elif isinstance(vectorList[i],(float)):
 * 				pvdata[i].setDouble(vectorList[i])             # <<<<<<<<<<<<<<
 * 
 * 			elif isinstance(vectorList[i],(long, int)):
 */
      if (unlikely(__pyx_v_vectorList == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3332; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_pvdata[__pyx_v_i]).setDouble(__pyx_t_9);

      /* "PyCafe.pyx":3331
 * 				pvdata[i].setString(vectorList[i])
 * 
 * 			elif isinstance(vectorList[i],(float)):             # <<<<<<<<<<<<<<
 * 				pvdata[i].setDouble(vectorList[i])
 * 
 */
      goto __pyx_L11;
    }

    /* "PyCafe.pyx":3334
 * 				pvdata[i].setDouble(vectorList[i])
 * 
 * 			elif isinstance(vectorList[i],(long, int)):             # <<<<<<<<<<<<<<
 * 				pvdata[i].setInt(vectorList[i])
 * 
 */
    if (unlikely(__pyx_v_vectorList == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3334; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyLong_Check(__pyx_t_5); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_3 = PyInt_Check(__pyx_t_5); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L12_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":3335
 * 
 * 			elif isinstance(vectorList[i],(long, int)):
 * 				pvdata[i].setInt(vectorList[i])             # <<<<<<<<<<<<<<
 * 
 * 			elif isinstance(vectorList[i], (list)):
 */
      if (unlikely(__pyx_v_vectorList == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3335; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_pvdata[__pyx_v_i]).setInt(__pyx_t_10);

      /* "PyCafe.pyx":3334
 * 				pvdata[i].setDouble(vectorList[i])
 * 
 * 			elif isinstance(vectorList[i],(long, int)):             # <<<<<<<<<<<<<<
 * 				pvdata[i].setInt(vectorList[i])
 * 
 */
      goto __pyx_L11;
    }

    /* "PyCafe.pyx":3337
 * 				pvdata[i].setInt(vectorList[i])
 * 
 * 			elif isinstance(vectorList[i], (list)):             # <<<<<<<<<<<<<<
 * 
 * 				#if list
 */
    if (unlikely(__pyx_v_vectorList == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3337; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyList_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":3340
 * 
 * 				#if list
 * 				valType=CAFE_INVALID_DATATYPE             # <<<<<<<<<<<<<<
 * 				pvdata[i].setNelem(len(vectorList[i]))
 * 				#for k in range(0, len(vectorList[i])):
 */
      __pyx_v_valType = CAFE_INVALID_DATATYPE;

      /* "PyCafe.pyx":3341
 * 				#if list
 * 				valType=CAFE_INVALID_DATATYPE
 * 				pvdata[i].setNelem(len(vectorList[i]))             # <<<<<<<<<<<<<<
 * 				#for k in range(0, len(vectorList[i])):
 * 				#Just check on first element
 */
      if (unlikely(__pyx_v_vectorList == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3341; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_pvdata[__pyx_v_i]).setNelem(__pyx_t_11);

      /* "PyCafe.pyx":3344
 * 				#for k in range(0, len(vectorList[i])):
 * 				#Just check on first element
 * 				for k in range(0,1): # can expand this to all elemnts or reduce to 1             # <<<<<<<<<<<<<<
 * 					if isinstance(vectorList[i][k],(str)):
 * 						valType=CAFE_STRING
 */
      for (__pyx_t_12 = 0; __pyx_t_12 < 1; __pyx_t_12+=1) {
        __pyx_v_k = __pyx_t_12;

        /* "PyCafe.pyx":3345
 * 				#Just check on first element
 * 				for k in range(0,1): # can expand this to all elemnts or reduce to 1
 * 					if isinstance(vectorList[i][k],(str)):             # <<<<<<<<<<<<<<
 * 						valType=CAFE_STRING
 * 						break
 */
        if (unlikely(__pyx_v_vectorList == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3345; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_13 = __Pyx_GetItemInt(__pyx_t_5, __pyx_v_k, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_13 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3345; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_1 = PyUnicode_Check(__pyx_t_13); 
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_2 = (__pyx_t_1 != 0);
        if (__pyx_t_2) {

          /* "PyCafe.pyx":3346
 * 				for k in range(0,1): # can expand this to all elemnts or reduce to 1
 * 					if isinstance(vectorList[i][k],(str)):
 * 						valType=CAFE_STRING             # <<<<<<<<<<<<<<
 * 						break
 * 					elif isinstance(vectorList[i][k],(float)):
 */
          __pyx_v_valType = CAFE_STRING;

          /* "PyCafe.pyx":3347
 * 					if isinstance(vectorList[i][k],(str)):
 * 						valType=CAFE_STRING
 * 						break             # <<<<<<<<<<<<<<
 * 					elif isinstance(vectorList[i][k],(float)):
 * 						valType=CAFE_DOUBLE
 */
          goto __pyx_L15_break;

          /* "PyCafe.pyx":3345
 * 				#Just check on first element
 * 				for k in range(0,1): # can expand this to all elemnts or reduce to 1
 * 					if isinstance(vectorList[i][k],(str)):             # <<<<<<<<<<<<<<
 * 						valType=CAFE_STRING
 * 						break
 */
        }

        /* "PyCafe.pyx":3348
 * 						valType=CAFE_STRING
 * 						break
 * 					elif isinstance(vectorList[i][k],(float)):             # <<<<<<<<<<<<<<
 * 						valType=CAFE_DOUBLE
 * 					elif isinstance(vectorList[i][k],(long, int)):
 */
        if (unlikely(__pyx_v_vectorList == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_13 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_13 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3348; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_13, __pyx_v_k, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3348; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_2 = PyFloat_Check(__pyx_t_5); 
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_1 = (__pyx_t_2 != 0);
        if (__pyx_t_1) {

          /* "PyCafe.pyx":3349
 * 						break
 * 					elif isinstance(vectorList[i][k],(float)):
 * 						valType=CAFE_DOUBLE             # <<<<<<<<<<<<<<
 * 					elif isinstance(vectorList[i][k],(long, int)):
 * 						if valType != CAFE_DOUBLE:
 */
          __pyx_v_valType = CAFE_DOUBLE;

          /* "PyCafe.pyx":3348
 * 						valType=CAFE_STRING
 * 						break
 * 					elif isinstance(vectorList[i][k],(float)):             # <<<<<<<<<<<<<<
 * 						valType=CAFE_DOUBLE
 * 					elif isinstance(vectorList[i][k],(long, int)):
 */
          goto __pyx_L16;
        }

        /* "PyCafe.pyx":3350
 * 					elif isinstance(vectorList[i][k],(float)):
 * 						valType=CAFE_DOUBLE
 * 					elif isinstance(vectorList[i][k],(long, int)):             # <<<<<<<<<<<<<<
 * 						if valType != CAFE_DOUBLE:
 * 							valType=CAFE_LONG
 */
        if (unlikely(__pyx_v_vectorList == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3350; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_13 = __Pyx_GetItemInt(__pyx_t_5, __pyx_v_k, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_13 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3350; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_2 = PyLong_Check(__pyx_t_13); 
        __pyx_t_3 = (__pyx_t_2 != 0);
        if (!__pyx_t_3) {
        } else {
          __pyx_t_1 = __pyx_t_3;
          goto __pyx_L17_bool_binop_done;
        }
        __pyx_t_3 = PyInt_Check(__pyx_t_13); 
        __pyx_t_2 = (__pyx_t_3 != 0);
        __pyx_t_1 = __pyx_t_2;
        __pyx_L17_bool_binop_done:;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_2 = (__pyx_t_1 != 0);
        if (__pyx_t_2) {

          /* "PyCafe.pyx":3351
 * 						valType=CAFE_DOUBLE
 * 					elif isinstance(vectorList[i][k],(long, int)):
 * 						if valType != CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 							valType=CAFE_LONG
 * 						else:
 */
          __pyx_t_2 = ((__pyx_v_valType != CAFE_DOUBLE) != 0);
          if (__pyx_t_2) {

            /* "PyCafe.pyx":3352
 * 					elif isinstance(vectorList[i][k],(long, int)):
 * 						if valType != CAFE_DOUBLE:
 * 							valType=CAFE_LONG             # <<<<<<<<<<<<<<
 * 						else:
 * 							valType=CAFE_STRING
 */
            __pyx_v_valType = CAFE_LONG;

            /* "PyCafe.pyx":3351
 * 						valType=CAFE_DOUBLE
 * 					elif isinstance(vectorList[i][k],(long, int)):
 * 						if valType != CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 							valType=CAFE_LONG
 * 						else:
 */
            goto __pyx_L19;
          }

          /* "PyCafe.pyx":3354
 * 							valType=CAFE_LONG
 * 						else:
 * 							valType=CAFE_STRING             # <<<<<<<<<<<<<<
 * 							break
 * 
 */
          /*else*/ {
            __pyx_v_valType = CAFE_STRING;

            /* "PyCafe.pyx":3355
 * 						else:
 * 							valType=CAFE_STRING
 * 							break             # <<<<<<<<<<<<<<
 * 
 * 				#check dt of first element
 */
            goto __pyx_L15_break;
          }
          __pyx_L19:;

          /* "PyCafe.pyx":3350
 * 					elif isinstance(vectorList[i][k],(float)):
 * 						valType=CAFE_DOUBLE
 * 					elif isinstance(vectorList[i][k],(long, int)):             # <<<<<<<<<<<<<<
 * 						if valType != CAFE_DOUBLE:
 * 							valType=CAFE_LONG
 */
        }
        __pyx_L16:;
      }
      __pyx_L15_break:;

      /* "PyCafe.pyx":3358
 * 
 * 				#check dt of first element
 * 				if valType==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 					pvdata[i].setVDouble(vectorList[i])
 * 				elif valType==CAFE_LONG:
 */
      switch (__pyx_v_valType) {
        case CAFE_DOUBLE:

        /* "PyCafe.pyx":3359
 * 				#check dt of first element
 * 				if valType==CAFE_DOUBLE:
 * 					pvdata[i].setVDouble(vectorList[i])             # <<<<<<<<<<<<<<
 * 				elif valType==CAFE_LONG:
 * 					pvdata[i].setVInt  (vectorList[i])
 */
        if (unlikely(__pyx_v_vectorList == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_13 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_13 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3359; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_14 = __pyx_convert_vector_from_py_double(__pyx_t_13); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        (__pyx_v_pvdata[__pyx_v_i]).setVDouble(__pyx_t_14);

        /* "PyCafe.pyx":3358
 * 
 * 				#check dt of first element
 * 				if valType==CAFE_DOUBLE:             # <<<<<<<<<<<<<<
 * 					pvdata[i].setVDouble(vectorList[i])
 * 				elif valType==CAFE_LONG:
 */
        break;

        /* "PyCafe.pyx":3360
 * 				if valType==CAFE_DOUBLE:
 * 					pvdata[i].setVDouble(vectorList[i])
 * 				elif valType==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 					pvdata[i].setVInt  (vectorList[i])
 * 				elif valType==CAFE_STRING:
 */
        case CAFE_LONG:

        /* "PyCafe.pyx":3361
 * 					pvdata[i].setVDouble(vectorList[i])
 * 				elif valType==CAFE_LONG:
 * 					pvdata[i].setVInt  (vectorList[i])             # <<<<<<<<<<<<<<
 * 				elif valType==CAFE_STRING:
 * 					pvdata[i].setVString(vectorList[i])
 */
        if (unlikely(__pyx_v_vectorList == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_13 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_13 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3361; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_15 = __pyx_convert_vector_from_py_int(__pyx_t_13); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        (__pyx_v_pvdata[__pyx_v_i]).setVInt(__pyx_t_15);

        /* "PyCafe.pyx":3360
 * 				if valType==CAFE_DOUBLE:
 * 					pvdata[i].setVDouble(vectorList[i])
 * 				elif valType==CAFE_LONG:             # <<<<<<<<<<<<<<
 * 					pvdata[i].setVInt  (vectorList[i])
 * 				elif valType==CAFE_STRING:
 */
        break;

        /* "PyCafe.pyx":3362
 * 				elif valType==CAFE_LONG:
 * 					pvdata[i].setVInt  (vectorList[i])
 * 				elif valType==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 					pvdata[i].setVString(vectorList[i])
 * 
 */
        case CAFE_STRING:

        /* "PyCafe.pyx":3363
 * 					pvdata[i].setVInt  (vectorList[i])
 * 				elif valType==CAFE_STRING:
 * 					pvdata[i].setVString(vectorList[i])             # <<<<<<<<<<<<<<
 * 
 * 			else:
 */
        if (unlikely(__pyx_v_vectorList == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_13 = __Pyx_GetItemInt_List(__pyx_v_vectorList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_13 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3363; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_16 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_t_13); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        (__pyx_v_pvdata[__pyx_v_i]).setVString(__pyx_t_16);

        /* "PyCafe.pyx":3362
 * 				elif valType==CAFE_LONG:
 * 					pvdata[i].setVInt  (vectorList[i])
 * 				elif valType==CAFE_STRING:             # <<<<<<<<<<<<<<
 * 					pvdata[i].setVString(vectorList[i])
 * 
 */
        break;
        default: break;
      }

      /* "PyCafe.pyx":3337
 * 				pvdata[i].setInt(vectorList[i])
 * 
 * 			elif isinstance(vectorList[i], (list)):             # <<<<<<<<<<<<<<
 * 
 * 				#if list
 */
      goto __pyx_L11;
    }

    /* "PyCafe.pyx":3366
 * 
 * 			else:
 * 				print ("This line in PyCafe def setGroup should never appear!")             # <<<<<<<<<<<<<<
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setGroup. \n\
 * Unknown data input; should be one of <type 'int'> , <type 'str'>, <type 'float'> , <type 'list'>")
 */
    /*else*/ {
      __pyx_t_13 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__200, NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

      /* "PyCafe.pyx":3367
 * 			else:
 * 				print ("This line in PyCafe def setGroup should never appear!")
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setGroup. \n\             # <<<<<<<<<<<<<<
 * Unknown data input; should be one of <type 'int'> , <type 'str'>, <type 'float'> , <type 'list'>")
 * 
 */
      __pyx_t_13 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__201, NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_Raise(__pyx_t_13, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L11:;
  }

  /* "PyCafe.pyx":3372
 * 		#endForLoop
 * 
 * 		cdef int status=ICAFE_NORMAL             # <<<<<<<<<<<<<<
 * 		statusList=[]
 * 		pvg.setPVData(pvdata)
 */
  __pyx_v_status = ICAFE_NORMAL;

  /* "PyCafe.pyx":3373
 * 
 * 		cdef int status=ICAFE_NORMAL
 * 		statusList=[]             # <<<<<<<<<<<<<<
 * 		pvg.setPVData(pvdata)
 * 
 */
  __pyx_t_13 = PyList_New(0); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_v_statusList = ((PyObject*)__pyx_t_13);
  __pyx_t_13 = 0;

  /* "PyCafe.pyx":3374
 * 		cdef int status=ICAFE_NORMAL
 * 		statusList=[]
 * 		pvg.setPVData(pvdata)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_pvg.setPVData(__pyx_v_pvdata);

  /* "PyCafe.pyx":3377
 * 
 * 
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.groupSet(ghandle, pvg)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":3378
 * 
 * 		with nogil:
 * 			status=self._c_cafe.groupSet(ghandle, pvg)             # <<<<<<<<<<<<<<
 * 
 * 		cdef PVDataHolder * pvd
 */
        __pyx_v_status = __pyx_v_self->_c_cafe->groupSet(__pyx_v_ghandle, __pyx_v_pvg);
      }

      /* "PyCafe.pyx":3377
 * 
 * 
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.groupSet(ghandle, pvg)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L22;
        }
        __pyx_L22:;
      }
  }

  /* "PyCafe.pyx":3382
 * 		cdef PVDataHolder * pvd
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  __pyx_t_2 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":3383
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 			#do not raise exception
 */
    __pyx_t_2 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":3384
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 			#do not raise exception
 * 			#raise Exception("EXCEPTION RAISED in PyCafe def setGroup. Status = %d" %status)
 */
      __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

      /* "PyCafe.pyx":3383
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 			#do not raise exception
 */
    }

    /* "PyCafe.pyx":3388
 * 			#raise Exception("EXCEPTION RAISED in PyCafe def setGroup. Status = %d" %status)
 * 
 * 			pvd=pvg.getPVData()             # <<<<<<<<<<<<<<
 * 
 * 			for i in range(0, pvg.getNPV()):
 */
    __pyx_v_pvd = __pyx_v_pvg.getPVData();

    /* "PyCafe.pyx":3390
 * 			pvd=pvg.getPVData()
 * 
 * 			for i in range(0, pvg.getNPV()):             # <<<<<<<<<<<<<<
 * 				statusList.append(pvd[i].getStatus())
 * 		else:
 */
    __pyx_t_4 = __pyx_v_pvg.getNPV();
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_4; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "PyCafe.pyx":3391
 * 
 * 			for i in range(0, pvg.getNPV()):
 * 				statusList.append(pvd[i].getStatus())             # <<<<<<<<<<<<<<
 * 		else:
 * 			statusList.append(status)
 */
      __pyx_t_13 = __Pyx_PyInt_From_int((__pyx_v_pvd[__pyx_v_i]).getStatus()); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_statusList, __pyx_t_13); if (unlikely(__pyx_t_17 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    }

    /* "PyCafe.pyx":3382
 * 		cdef PVDataHolder * pvd
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
    goto __pyx_L23;
  }

  /* "PyCafe.pyx":3393
 * 				statusList.append(pvd[i].getStatus())
 * 		else:
 * 			statusList.append(status)             # <<<<<<<<<<<<<<
 * 
 * 		return status, statusList
 */
  /*else*/ {
    __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_statusList, __pyx_t_13); if (unlikely(__pyx_t_17 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  }
  __pyx_L23:;

  /* "PyCafe.pyx":3395
 * 			statusList.append(status)
 * 
 * 		return status, statusList             # <<<<<<<<<<<<<<
 * 
 * 	##################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_13);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_13);
  __Pyx_INCREF(__pyx_v_statusList);
  __Pyx_GIVEREF(__pyx_v_statusList);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_statusList);
  __pyx_t_13 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":3303
 * 
 * 	##################################################################################
 * 	def setGroup(self, ghandleName, list vectorList):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int ghandle=0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("PyCafe.CyCafe.setGroup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_statusList);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":3403
 * 
 * 	##################################################################################
 * 	def  setAndMatchMany(self, list handlePVSet, list valSet,  list handlePVMatch, double tolerance, double timeout, bint printFlag):             # <<<<<<<<<<<<<<
 * 
 * 		if not isinstance(handlePVSet, (list)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_225setAndMatchMany(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_225setAndMatchMany(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handlePVSet = 0;
  PyObject *__pyx_v_valSet = 0;
  PyObject *__pyx_v_handlePVMatch = 0;
  double __pyx_v_tolerance;
  double __pyx_v_timeout;
  int __pyx_v_printFlag;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAndMatchMany (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handlePVSet,&__pyx_n_s_valSet,&__pyx_n_s_handlePVMatch,&__pyx_n_s_tolerance,&__pyx_n_s_timeout,&__pyx_n_s_printFlag,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handlePVSet)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_valSet)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAndMatchMany", 1, 6, 6, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3403; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handlePVMatch)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAndMatchMany", 1, 6, 6, 2); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3403; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tolerance)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAndMatchMany", 1, 6, 6, 3); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3403; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_timeout)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAndMatchMany", 1, 6, 6, 4); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3403; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_printFlag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAndMatchMany", 1, 6, 6, 5); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3403; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setAndMatchMany") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3403; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_handlePVSet = ((PyObject*)values[0]);
    __pyx_v_valSet = ((PyObject*)values[1]);
    __pyx_v_handlePVMatch = ((PyObject*)values[2]);
    __pyx_v_tolerance = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_tolerance == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3403; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_timeout = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_timeout == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3403; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_printFlag = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_printFlag == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3403; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setAndMatchMany", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3403; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.setAndMatchMany", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_handlePVSet), (&PyList_Type), 1, "handlePVSet", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_valSet), (&PyList_Type), 1, "valSet", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_handlePVMatch), (&PyList_Type), 1, "handlePVMatch", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_224setAndMatchMany(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handlePVSet, __pyx_v_valSet, __pyx_v_handlePVMatch, __pyx_v_tolerance, __pyx_v_timeout, __pyx_v_printFlag);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_224setAndMatchMany(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePVSet, PyObject *__pyx_v_valSet, PyObject *__pyx_v_handlePVMatch, double __pyx_v_tolerance, double __pyx_v_timeout, int __pyx_v_printFlag) {
  std::vector<unsigned int>  __pyx_v_handleSet;
  std::vector<unsigned int>  __pyx_v_handleMatch;
  std::vector<double>  __pyx_v_valSetV;
  Py_ssize_t __pyx_v_i;
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  unsigned int __pyx_t_7;
  double __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setAndMatchMany", 0);

  /* "PyCafe.pyx":3405
 * 	def  setAndMatchMany(self, list handlePVSet, list valSet,  list handlePVMatch, double tolerance, double timeout, bint printFlag):
 * 
 * 		if not isinstance(handlePVSet, (list)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatchMany. \n\
 * First input argument, should be <type 'list'> of handles or PVs")
 */
  __pyx_t_1 = PyList_Check(__pyx_v_handlePVSet); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":3406
 * 
 * 		if not isinstance(handlePVSet, (list)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatchMany. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__202, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":3405
 * 	def  setAndMatchMany(self, list handlePVSet, list valSet,  list handlePVMatch, double tolerance, double timeout, bint printFlag):
 * 
 * 		if not isinstance(handlePVSet, (list)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatchMany. \n\
 * First input argument, should be <type 'list'> of handles or PVs")
 */
  }

  /* "PyCafe.pyx":3409
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 * 		if not isinstance(valSet, (list)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def valSet. \n\
 * Second input argument, should be <type 'list'> of scalar values")
 */
  __pyx_t_2 = PyList_Check(__pyx_v_valSet); 
  __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":3410
 * 
 * 		if not isinstance(valSet, (list)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def valSet. \n\             # <<<<<<<<<<<<<<
 * Second input argument, should be <type 'list'> of scalar values")
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__203, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":3409
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 * 		if not isinstance(valSet, (list)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def valSet. \n\
 * Second input argument, should be <type 'list'> of scalar values")
 */
  }

  /* "PyCafe.pyx":3413
 * Second input argument, should be <type 'list'> of scalar values")
 * 
 * 		if not isinstance(handlePVMatch, (list)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatchMany. \n\
 * Third input argument, should be <type 'list'> of handles or PVs")
 */
  __pyx_t_1 = PyList_Check(__pyx_v_handlePVMatch); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":3414
 * 
 * 		if not isinstance(handlePVMatch, (list)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatchMany. \n\             # <<<<<<<<<<<<<<
 * Third input argument, should be <type 'list'> of handles or PVs")
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__204, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":3413
 * Second input argument, should be <type 'list'> of scalar values")
 * 
 * 		if not isinstance(handlePVMatch, (list)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatchMany. \n\
 * Third input argument, should be <type 'list'> of handles or PVs")
 */
  }

  /* "PyCafe.pyx":3417
 * Third input argument, should be <type 'list'> of handles or PVs")
 * 
 * 		if (len(handlePVSet) != len(valSet)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatchMany. \n\
 * Lengths of first (handlePVSet) and second (valSet) input lists must match!")
 */
  if (unlikely(__pyx_v_handlePVSet == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_4 = PyList_GET_SIZE(__pyx_v_handlePVSet); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(__pyx_v_valSet == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_valSet); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_t_4 != __pyx_t_5) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":3418
 * 
 * 		if (len(handlePVSet) != len(valSet)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatchMany. \n\             # <<<<<<<<<<<<<<
 * Lengths of first (handlePVSet) and second (valSet) input lists must match!")
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__205, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":3417
 * Third input argument, should be <type 'list'> of handles or PVs")
 * 
 * 		if (len(handlePVSet) != len(valSet)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatchMany. \n\
 * Lengths of first (handlePVSet) and second (valSet) input lists must match!")
 */
  }

  /* "PyCafe.pyx":3421
 * Lengths of first (handlePVSet) and second (valSet) input lists must match!")
 * 
 * 		if (len(handlePVSet) != len(handlePVMatch)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatchMany. \n\
 * Lengths of first (handlePVSet) and third (handlePVMatch) input lists must match!")
 */
  if (unlikely(__pyx_v_handlePVSet == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_handlePVSet); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(__pyx_v_handlePVMatch == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_4 = PyList_GET_SIZE(__pyx_v_handlePVMatch); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_t_5 != __pyx_t_4) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":3422
 * 
 * 		if (len(handlePVSet) != len(handlePVMatch)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatchMany. \n\             # <<<<<<<<<<<<<<
 * Lengths of first (handlePVSet) and third (handlePVMatch) input lists must match!")
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__206, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":3421
 * Lengths of first (handlePVSet) and second (valSet) input lists must match!")
 * 
 * 		if (len(handlePVSet) != len(handlePVMatch)):             # <<<<<<<<<<<<<<
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatchMany. \n\
 * Lengths of first (handlePVSet) and third (handlePVMatch) input lists must match!")
 */
  }

  /* "PyCafe.pyx":3427
 * 
 * 		cdef vector[unsigned int] handleSet
 * 		handleSet.reserve(len(handlePVSet))             # <<<<<<<<<<<<<<
 * 
 * 		cdef vector[unsigned int] handleMatch
 */
  if (unlikely(__pyx_v_handlePVSet == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_4 = PyList_GET_SIZE(__pyx_v_handlePVSet); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_handleSet.reserve(__pyx_t_4);

  /* "PyCafe.pyx":3430
 * 
 * 		cdef vector[unsigned int] handleMatch
 * 		handleMatch.reserve(len(handlePVMatch))             # <<<<<<<<<<<<<<
 * 
 * 		cdef vector[double] valSetV
 */
  if (unlikely(__pyx_v_handlePVMatch == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_4 = PyList_GET_SIZE(__pyx_v_handlePVMatch); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_handleMatch.reserve(__pyx_t_4);

  /* "PyCafe.pyx":3433
 * 
 * 		cdef vector[double] valSetV
 * 		valSetV.reserve(len(valSet))             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(0, len(handlePVSet)):
 */
  if (unlikely(__pyx_v_valSet == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_4 = PyList_GET_SIZE(__pyx_v_valSet); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_valSetV.reserve(__pyx_t_4);

  /* "PyCafe.pyx":3435
 * 		valSetV.reserve(len(valSet))
 * 
 * 		for i in range(0, len(handlePVSet)):             # <<<<<<<<<<<<<<
 * 			if isinstance(handlePVSet[i], (int,long)) == 1:
 * 				handleSet.push_back(handlePVSet[i])
 */
  if (unlikely(__pyx_v_handlePVSet == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_4 = PyList_GET_SIZE(__pyx_v_handlePVSet); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "PyCafe.pyx":3436
 * 
 * 		for i in range(0, len(handlePVSet)):
 * 			if isinstance(handlePVSet[i], (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 				handleSet.push_back(handlePVSet[i])
 * 			elif isinstance(handlePVSet[i], (str)) == 1:
 */
    if (unlikely(__pyx_v_handlePVSet == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_handlePVSet, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3436; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyInt_Check(__pyx_t_3); 
    __pyx_t_6 = (__pyx_t_1 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_2 = __pyx_t_6;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_6 = PyLong_Check(__pyx_t_3); 
    __pyx_t_1 = (__pyx_t_6 != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L11_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":3437
 * 		for i in range(0, len(handlePVSet)):
 * 			if isinstance(handlePVSet[i], (int,long)) == 1:
 * 				handleSet.push_back(handlePVSet[i])             # <<<<<<<<<<<<<<
 * 			elif isinstance(handlePVSet[i], (str)) == 1:
 * 				handleSet.push_back(self.checkForHandle(handlePVSet))
 */
      if (unlikely(__pyx_v_handlePVSet == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_handlePVSet, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3437; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      try {
        __pyx_v_handleSet.push_back(__pyx_t_7);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "PyCafe.pyx":3436
 * 
 * 		for i in range(0, len(handlePVSet)):
 * 			if isinstance(handlePVSet[i], (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 				handleSet.push_back(handlePVSet[i])
 * 			elif isinstance(handlePVSet[i], (str)) == 1:
 */
      goto __pyx_L10;
    }

    /* "PyCafe.pyx":3438
 * 			if isinstance(handlePVSet[i], (int,long)) == 1:
 * 				handleSet.push_back(handlePVSet[i])
 * 			elif isinstance(handlePVSet[i], (str)) == 1:             # <<<<<<<<<<<<<<
 * 				handleSet.push_back(self.checkForHandle(handlePVSet))
 * 			else:
 */
    if (unlikely(__pyx_v_handlePVSet == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_handlePVSet, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3438; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyUnicode_Check(__pyx_t_3); 
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":3439
 * 				handleSet.push_back(handlePVSet[i])
 * 			elif isinstance(handlePVSet[i], (str)) == 1:
 * 				handleSet.push_back(self.checkForHandle(handlePVSet))             # <<<<<<<<<<<<<<
 * 			else:
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatchMany \n\
 */
      if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePVSet))||((__pyx_v_handlePVSet) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePVSet)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_3 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePVSet), 0, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      try {
        __pyx_v_handleSet.push_back(__pyx_t_7);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "PyCafe.pyx":3438
 * 			if isinstance(handlePVSet[i], (int,long)) == 1:
 * 				handleSet.push_back(handlePVSet[i])
 * 			elif isinstance(handlePVSet[i], (str)) == 1:             # <<<<<<<<<<<<<<
 * 				handleSet.push_back(self.checkForHandle(handlePVSet))
 * 			else:
 */
      goto __pyx_L10;
    }

    /* "PyCafe.pyx":3441
 * 				handleSet.push_back(self.checkForHandle(handlePVSet))
 * 			else:
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatchMany \n\             # <<<<<<<<<<<<<<
 * handlePVSet list member should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__207, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L10:;
  }

  /* "PyCafe.pyx":3445
 * 
 * 
 * 		for i in range(0, len(handlePVMatch)):             # <<<<<<<<<<<<<<
 * 			if isinstance(handlePVMatch[i], (int,long)) == 1:
 * 				handleMatch.push_back(handlePVMatch[i])
 */
  if (unlikely(__pyx_v_handlePVMatch == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_4 = PyList_GET_SIZE(__pyx_v_handlePVMatch); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "PyCafe.pyx":3446
 * 
 * 		for i in range(0, len(handlePVMatch)):
 * 			if isinstance(handlePVMatch[i], (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 				handleMatch.push_back(handlePVMatch[i])
 * 			elif isinstance(handlePVMatch[i], (str)) == 1:
 */
    if (unlikely(__pyx_v_handlePVMatch == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_handlePVMatch, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3446; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyInt_Check(__pyx_t_3); 
    __pyx_t_6 = (__pyx_t_1 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_2 = __pyx_t_6;
      goto __pyx_L16_bool_binop_done;
    }
    __pyx_t_6 = PyLong_Check(__pyx_t_3); 
    __pyx_t_1 = (__pyx_t_6 != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L16_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":3447
 * 		for i in range(0, len(handlePVMatch)):
 * 			if isinstance(handlePVMatch[i], (int,long)) == 1:
 * 				handleMatch.push_back(handlePVMatch[i])             # <<<<<<<<<<<<<<
 * 			elif isinstance(handlePVMatch[i], (str)) == 1:
 * 				handleMatch.push_back(self.checkForHandle(handlePVMatch))
 */
      if (unlikely(__pyx_v_handlePVMatch == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_handlePVMatch, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3447; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      try {
        __pyx_v_handleMatch.push_back(__pyx_t_7);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "PyCafe.pyx":3446
 * 
 * 		for i in range(0, len(handlePVMatch)):
 * 			if isinstance(handlePVMatch[i], (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 				handleMatch.push_back(handlePVMatch[i])
 * 			elif isinstance(handlePVMatch[i], (str)) == 1:
 */
      goto __pyx_L15;
    }

    /* "PyCafe.pyx":3448
 * 			if isinstance(handlePVMatch[i], (int,long)) == 1:
 * 				handleMatch.push_back(handlePVMatch[i])
 * 			elif isinstance(handlePVMatch[i], (str)) == 1:             # <<<<<<<<<<<<<<
 * 				handleMatch.push_back(self.checkForHandle(handlePVMatch))
 * 			else:
 */
    if (unlikely(__pyx_v_handlePVMatch == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_handlePVMatch, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3448; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyUnicode_Check(__pyx_t_3); 
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":3449
 * 				handleMatch.push_back(handlePVMatch[i])
 * 			elif isinstance(handlePVMatch[i], (str)) == 1:
 * 				handleMatch.push_back(self.checkForHandle(handlePVMatch))             # <<<<<<<<<<<<<<
 * 			else:
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatchMany \n\
 */
      if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePVMatch))||((__pyx_v_handlePVMatch) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePVMatch)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_3 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePVMatch), 0, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      try {
        __pyx_v_handleMatch.push_back(__pyx_t_7);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "PyCafe.pyx":3448
 * 			if isinstance(handlePVMatch[i], (int,long)) == 1:
 * 				handleMatch.push_back(handlePVMatch[i])
 * 			elif isinstance(handlePVMatch[i], (str)) == 1:             # <<<<<<<<<<<<<<
 * 				handleMatch.push_back(self.checkForHandle(handlePVMatch))
 * 			else:
 */
      goto __pyx_L15;
    }

    /* "PyCafe.pyx":3451
 * 				handleMatch.push_back(self.checkForHandle(handlePVMatch))
 * 			else:
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatchMany \n\             # <<<<<<<<<<<<<<
 * handlePVSet list member should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__208, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L15:;
  }

  /* "PyCafe.pyx":3454
 * handlePVSet list member should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 * 		for i in range(0, len(valSet)):             # <<<<<<<<<<<<<<
 * 			valSetV.push_back(valSet[i])
 * 
 */
  if (unlikely(__pyx_v_valSet == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_4 = PyList_GET_SIZE(__pyx_v_valSet); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "PyCafe.pyx":3455
 * 
 * 		for i in range(0, len(valSet)):
 * 			valSetV.push_back(valSet[i])             # <<<<<<<<<<<<<<
 * 
 * 		cdef int status
 */
    if (unlikely(__pyx_v_valSet == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_valSet, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3455; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    try {
      __pyx_v_valSetV.push_back(__pyx_t_8);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }

  /* "PyCafe.pyx":3459
 * 		cdef int status
 * 
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.setAndMatchMany(handleSet, valSetV, handleMatch, tolerance, timeout, printFlag)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":3460
 * 
 * 		with nogil:
 * 			status=self._c_cafe.setAndMatchMany(handleSet, valSetV, handleMatch, tolerance, timeout, printFlag)             # <<<<<<<<<<<<<<
 * 
 * 		if status !=ICAFE_NORMAL:
 */
        __pyx_v_status = __pyx_v_self->_c_cafe->setAndMatchMany(__pyx_v_handleSet, __pyx_v_valSetV, __pyx_v_handleMatch, __pyx_v_tolerance, __pyx_v_timeout, __pyx_v_printFlag);
      }

      /* "PyCafe.pyx":3459
 * 		cdef int status
 * 
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.setAndMatchMany(handleSet, valSetV, handleMatch, tolerance, timeout, printFlag)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L22;
        }
        __pyx_L22:;
      }
  }

  /* "PyCafe.pyx":3462
 * 			status=self._c_cafe.setAndMatchMany(handleSet, valSetV, handleMatch, tolerance, timeout, printFlag)
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  __pyx_t_2 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":3463
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def setAndMatchMany. Status = %d" %status)
 */
    __pyx_t_2 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_2) {

      /* "PyCafe.pyx":3464
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def setAndMatchMany. Status = %d" %status)
 * 
 */
      __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

      /* "PyCafe.pyx":3463
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def setAndMatchMany. Status = %d" %status)
 */
    }

    /* "PyCafe.pyx":3465
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def setAndMatchMany. Status = %d" %status)             # <<<<<<<<<<<<<<
 * 
 * 		return status
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_s_2, __pyx_t_3); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_3, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_9, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":3462
 * 			status=self._c_cafe.setAndMatchMany(handleSet, valSetV, handleMatch, tolerance, timeout, printFlag)
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  }

  /* "PyCafe.pyx":3467
 * 			raise Exception("EXCEPTION RAISED in PyCafe def setAndMatchMany. Status = %d" %status)
 * 
 * 		return status             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":3403
 * 
 * 	##################################################################################
 * 	def  setAndMatchMany(self, list handlePVSet, list valSet,  list handlePVMatch, double tolerance, double timeout, bint printFlag):             # <<<<<<<<<<<<<<
 * 
 * 		if not isinstance(handlePVSet, (list)):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("PyCafe.CyCafe.setAndMatchMany", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":3472
 * 
 * 	##################################################################################
 * 	def  setAndMatch(self, handlePVSet, double valSet,  handlePVMatch, double tolerance, double timeout, bint printFlag):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int handleSet=0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_227setAndMatch(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_227setAndMatch(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handlePVSet = 0;
  double __pyx_v_valSet;
  PyObject *__pyx_v_handlePVMatch = 0;
  double __pyx_v_tolerance;
  double __pyx_v_timeout;
  int __pyx_v_printFlag;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAndMatch (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handlePVSet,&__pyx_n_s_valSet,&__pyx_n_s_handlePVMatch,&__pyx_n_s_tolerance,&__pyx_n_s_timeout,&__pyx_n_s_printFlag,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handlePVSet)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_valSet)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAndMatch", 1, 6, 6, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3472; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handlePVMatch)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAndMatch", 1, 6, 6, 2); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3472; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tolerance)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAndMatch", 1, 6, 6, 3); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3472; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_timeout)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAndMatch", 1, 6, 6, 4); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3472; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_printFlag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAndMatch", 1, 6, 6, 5); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3472; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setAndMatch") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3472; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_handlePVSet = values[0];
    __pyx_v_valSet = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_valSet == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3472; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_handlePVMatch = values[2];
    __pyx_v_tolerance = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_tolerance == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3472; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_timeout = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_timeout == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3472; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_printFlag = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_printFlag == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3472; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setAndMatch", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3472; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.setAndMatch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_226setAndMatch(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handlePVSet, __pyx_v_valSet, __pyx_v_handlePVMatch, __pyx_v_tolerance, __pyx_v_timeout, __pyx_v_printFlag);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_226setAndMatch(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePVSet, double __pyx_v_valSet, PyObject *__pyx_v_handlePVMatch, double __pyx_v_tolerance, double __pyx_v_timeout, int __pyx_v_printFlag) {
  unsigned int __pyx_v_handleSet;
  unsigned int __pyx_v_handleMatch;
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setAndMatch", 0);

  /* "PyCafe.pyx":3474
 * 	def  setAndMatch(self, handlePVSet, double valSet,  handlePVMatch, double tolerance, double timeout, bint printFlag):
 * 
 * 		cdef unsigned int handleSet=0             # <<<<<<<<<<<<<<
 * 		if isinstance(handlePVSet, (int,long)) == 1:
 * 			handleSet=handlePVSet
 */
  __pyx_v_handleSet = 0;

  /* "PyCafe.pyx":3475
 * 
 * 		cdef unsigned int handleSet=0
 * 		if isinstance(handlePVSet, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handleSet=handlePVSet
 * 		elif isinstance(handlePVSet, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePVSet); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePVSet); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":3476
 * 		cdef unsigned int handleSet=0
 * 		if isinstance(handlePVSet, (int,long)) == 1:
 * 			handleSet=handlePVSet             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePVSet, (str)) == 1:
 * 			handleSet=self.checkForHandle(handlePVSet)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePVSet); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handleSet = __pyx_t_4;

    /* "PyCafe.pyx":3475
 * 
 * 		cdef unsigned int handleSet=0
 * 		if isinstance(handlePVSet, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handleSet=handlePVSet
 * 		elif isinstance(handlePVSet, (str)) == 1:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":3477
 * 		if isinstance(handlePVSet, (int,long)) == 1:
 * 			handleSet=handlePVSet
 * 		elif isinstance(handlePVSet, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handleSet=self.checkForHandle(handlePVSet)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePVSet); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":3478
 * 			handleSet=handlePVSet
 * 		elif isinstance(handlePVSet, (str)) == 1:
 * 			handleSet=self.checkForHandle(handlePVSet)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatch. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePVSet))||((__pyx_v_handlePVSet) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePVSet)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePVSet), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handleSet = __pyx_t_4;

    /* "PyCafe.pyx":3477
 * 		if isinstance(handlePVSet, (int,long)) == 1:
 * 			handleSet=handlePVSet
 * 		elif isinstance(handlePVSet, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handleSet=self.checkForHandle(handlePVSet)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":3480
 * 			handleSet=self.checkForHandle(handlePVSet)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatch. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__209, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":3483
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 * 		cdef unsigned int handleMatch=0             # <<<<<<<<<<<<<<
 * 		if isinstance(handlePVMatch, (int,long)) == 1:
 * 			handleMatch=handlePVMatch
 */
  __pyx_v_handleMatch = 0;

  /* "PyCafe.pyx":3484
 * 
 * 		cdef unsigned int handleMatch=0
 * 		if isinstance(handlePVMatch, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handleMatch=handlePVMatch
 * 		elif isinstance(handlePVMatch, (str)) == 1:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePVMatch); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePVMatch); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":3485
 * 		cdef unsigned int handleMatch=0
 * 		if isinstance(handlePVMatch, (int,long)) == 1:
 * 			handleMatch=handlePVMatch             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePVMatch, (str)) == 1:
 * 			handleMatch=self.checkForHandle(handlePVMatch)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePVMatch); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handleMatch = __pyx_t_4;

    /* "PyCafe.pyx":3484
 * 
 * 		cdef unsigned int handleMatch=0
 * 		if isinstance(handlePVMatch, (int,long)) == 1:             # <<<<<<<<<<<<<<
 * 			handleMatch=handlePVMatch
 * 		elif isinstance(handlePVMatch, (str)) == 1:
 */
    goto __pyx_L6;
  }

  /* "PyCafe.pyx":3486
 * 		if isinstance(handlePVMatch, (int,long)) == 1:
 * 			handleMatch=handlePVMatch
 * 		elif isinstance(handlePVMatch, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handleMatch=self.checkForHandle(handlePVMatch)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePVMatch); 
  __pyx_t_1 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":3487
 * 			handleMatch=handlePVMatch
 * 		elif isinstance(handlePVMatch, (str)) == 1:
 * 			handleMatch=self.checkForHandle(handlePVMatch)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatch. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePVMatch))||((__pyx_v_handlePVMatch) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePVMatch)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePVMatch), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handleMatch = __pyx_t_4;

    /* "PyCafe.pyx":3486
 * 		if isinstance(handlePVMatch, (int,long)) == 1:
 * 			handleMatch=handlePVMatch
 * 		elif isinstance(handlePVMatch, (str)) == 1:             # <<<<<<<<<<<<<<
 * 			handleMatch=self.checkForHandle(handlePVMatch)
 * 		else:
 */
    goto __pyx_L6;
  }

  /* "PyCafe.pyx":3489
 * 			handleMatch=self.checkForHandle(handlePVMatch)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatch. \n\             # <<<<<<<<<<<<<<
 * Third input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__210, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L6:;

  /* "PyCafe.pyx":3495
 * 		cdef int status
 * 
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.setAndMatch(handleSet, valSet, handleMatch, tolerance, timeout, printFlag)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":3496
 * 
 * 		with nogil:
 * 			status=self._c_cafe.setAndMatch(handleSet, valSet, handleMatch, tolerance, timeout, printFlag)             # <<<<<<<<<<<<<<
 * 
 * 		if status !=ICAFE_NORMAL:
 */
        __pyx_v_status = __pyx_v_self->_c_cafe->setAndMatch(__pyx_v_handleSet, __pyx_v_valSet, __pyx_v_handleMatch, __pyx_v_tolerance, __pyx_v_timeout, __pyx_v_printFlag);
      }

      /* "PyCafe.pyx":3495
 * 		cdef int status
 * 
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			status=self._c_cafe.setAndMatch(handleSet, valSet, handleMatch, tolerance, timeout, printFlag)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L11;
        }
        __pyx_L11:;
      }
  }

  /* "PyCafe.pyx":3498
 * 			status=self._c_cafe.setAndMatch(handleSet, valSet, handleMatch, tolerance, timeout, printFlag)
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  __pyx_t_1 = ((__pyx_v_status != ICAFE_NORMAL) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":3499
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def setAndMatch. Status = %d" %status)
 */
    __pyx_t_1 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":3500
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def setAndMatch. Status = %d" %status)
 * 
 */
      __pyx_v_self->_c_cafe->printStatusMessage(__pyx_v_status);

      /* "PyCafe.pyx":3499
 * 
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def setAndMatch. Status = %d" %status)
 */
    }

    /* "PyCafe.pyx":3501
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def setAndMatch. Status = %d" %status)             # <<<<<<<<<<<<<<
 * 
 * 		return status
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_s_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":3498
 * 			status=self._c_cafe.setAndMatch(handleSet, valSet, handleMatch, tolerance, timeout, printFlag)
 * 
 * 		if status !=ICAFE_NORMAL:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(status)
 */
  }

  /* "PyCafe.pyx":3503
 * 			raise Exception("EXCEPTION RAISED in PyCafe def setAndMatch. Status = %d" %status)
 * 
 * 		return status             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":3472
 * 
 * 	##################################################################################
 * 	def  setAndMatch(self, handlePVSet, double valSet,  handlePVMatch, double tolerance, double timeout, bint printFlag):             # <<<<<<<<<<<<<<
 * 
 * 		cdef unsigned int handleSet=0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("PyCafe.CyCafe.setAndMatch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":3507
 * 
 * 
 * 	def setNelemToRetrieveFromCacheToOne(self, handlePV):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_229setNelemToRetrieveFromCacheToOne(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_229setNelemToRetrieveFromCacheToOne(PyObject *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setNelemToRetrieveFromCacheToOne (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_228setNelemToRetrieveFromCacheToOne(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), ((PyObject *)__pyx_v_handlePV));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_228setNelemToRetrieveFromCacheToOne(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV) {
  unsigned int __pyx_v_handle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setNelemToRetrieveFromCacheToOne", 0);

  /* "PyCafe.pyx":3508
 * 
 * 	def setNelemToRetrieveFromCacheToOne(self, handlePV):
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 		if isinstance(handlePV, (int,long)):
 * 			handle=handlePV
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":3509
 * 	def setNelemToRetrieveFromCacheToOne(self, handlePV):
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)):             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)):
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":3510
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)):
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)):
 * 			handle=self.checkForHandle(handlePV)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":3509
 * 	def setNelemToRetrieveFromCacheToOne(self, handlePV):
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)):             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)):
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":3511
 * 		if isinstance(handlePV, (int,long)):
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)):             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":3512
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)):
 * 			handle=self.checkForHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def set. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":3511
 * 		if isinstance(handlePV, (int,long)):
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)):             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":3514
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def set. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__211, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":3517
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 * 		if handle == 0:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)
 */
  __pyx_t_1 = ((__pyx_v_handle == 0) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":3518
 * 
 * 		if handle == 0:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def setNelemToRetrieveFromCacheToOne")
 */
    __pyx_t_1 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":3519
 * 		if handle == 0:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def setNelemToRetrieveFromCacheToOne")
 * 
 */
      __pyx_v_self->_c_cafe->printStatusMessage(ECAFE_INVALID_HANDLE);

      /* "PyCafe.pyx":3518
 * 
 * 		if handle == 0:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def setNelemToRetrieveFromCacheToOne")
 */
    }

    /* "PyCafe.pyx":3520
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def setNelemToRetrieveFromCacheToOne")             # <<<<<<<<<<<<<<
 * 
 * 	  #returns previous nelem
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__212, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":3517
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 * 		if handle == 0:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)
 */
  }

  /* "PyCafe.pyx":3523
 * 
 * 	  #returns previous nelem
 * 		return self._c_cafe.setNelemToRetrieveFromCacheToOne(handle)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->_c_cafe->setNelemToRetrieveFromCacheToOne(__pyx_v_handle)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":3507
 * 
 * 
 * 	def setNelemToRetrieveFromCacheToOne(self, handlePV):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.setNelemToRetrieveFromCacheToOne", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":3526
 * 
 * 
 * 	def setNelemToRetrieveFromCache(self, handlePV, netrfc):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_231setNelemToRetrieveFromCache(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_231setNelemToRetrieveFromCache(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handlePV = 0;
  PyObject *__pyx_v_netrfc = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setNelemToRetrieveFromCache (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handlePV,&__pyx_n_s_netrfc,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_handlePV)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_netrfc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setNelemToRetrieveFromCache", 1, 2, 2, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3526; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setNelemToRetrieveFromCache") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3526; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_handlePV = values[0];
    __pyx_v_netrfc = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNelemToRetrieveFromCache", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3526; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyCafe.CyCafe.setNelemToRetrieveFromCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_230setNelemToRetrieveFromCache(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self), __pyx_v_handlePV, __pyx_v_netrfc);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_230setNelemToRetrieveFromCache(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self, PyObject *__pyx_v_handlePV, PyObject *__pyx_v_netrfc) {
  unsigned int __pyx_v_handle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setNelemToRetrieveFromCache", 0);

  /* "PyCafe.pyx":3527
 * 
 * 	def setNelemToRetrieveFromCache(self, handlePV, netrfc):
 * 		cdef unsigned int handle=0             # <<<<<<<<<<<<<<
 * 		if isinstance(handlePV, (int,long)):
 * 			handle=handlePV
 */
  __pyx_v_handle = 0;

  /* "PyCafe.pyx":3528
 * 	def setNelemToRetrieveFromCache(self, handlePV, netrfc):
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)):             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)):
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_handlePV); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_handlePV); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "PyCafe.pyx":3529
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)):
 * 			handle=handlePV             # <<<<<<<<<<<<<<
 * 		elif isinstance(handlePV, (str)):
 * 			handle=self.checkForHandle(handlePV)
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_handlePV); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":3528
 * 	def setNelemToRetrieveFromCache(self, handlePV, netrfc):
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)):             # <<<<<<<<<<<<<<
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)):
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":3530
 * 		if isinstance(handlePV, (int,long)):
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)):             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_handlePV); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":3531
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)):
 * 			handle=self.checkForHandle(handlePV)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def set. \n\
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_handlePV))||((__pyx_v_handlePV) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_handlePV)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = ((struct __pyx_vtabstruct_6PyCafe_CyCafe *)__pyx_v_self->__pyx_vtab)->checkForHandle(__pyx_v_self, ((PyObject*)__pyx_v_handlePV), 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_handle = __pyx_t_4;

    /* "PyCafe.pyx":3530
 * 		if isinstance(handlePV, (int,long)):
 * 			handle=handlePV
 * 		elif isinstance(handlePV, (str)):             # <<<<<<<<<<<<<<
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "PyCafe.pyx":3533
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def set. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__213, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "PyCafe.pyx":3537
 * 
 * 
 * 		if handle == 0:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)
 */
  __pyx_t_1 = ((__pyx_v_handle == 0) != 0);
  if (__pyx_t_1) {

    /* "PyCafe.pyx":3538
 * 
 * 		if handle == 0:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def setNelemToRetrieveFromCacheToOne")
 */
    __pyx_t_1 = ((__pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL >= __pyx_v_6PyCafe_PYCAFE_PRINT_LOW) != 0);
    if (__pyx_t_1) {

      /* "PyCafe.pyx":3539
 * 		if handle == 0:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)             # <<<<<<<<<<<<<<
 * 			raise Exception("EXCEPTION RAISED in PyCafe def setNelemToRetrieveFromCacheToOne")
 * 
 */
      __pyx_v_self->_c_cafe->printStatusMessage(ECAFE_INVALID_HANDLE);

      /* "PyCafe.pyx":3538
 * 
 * 		if handle == 0:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def setNelemToRetrieveFromCacheToOne")
 */
    }

    /* "PyCafe.pyx":3540
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def setNelemToRetrieveFromCacheToOne")             # <<<<<<<<<<<<<<
 * 
 * 	  #returns new nelem
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__214, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "PyCafe.pyx":3537
 * 
 * 
 * 		if handle == 0:             # <<<<<<<<<<<<<<
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)
 */
  }

  /* "PyCafe.pyx":3543
 * 
 * 	  #returns new nelem
 * 		return self._c_cafe.setNelemToRetrieveFromCacheToPrevious(handle, netrfc)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_netrfc); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->_c_cafe->setNelemToRetrieveFromCacheToPrevious(__pyx_v_handle, __pyx_t_4)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "PyCafe.pyx":3526
 * 
 * 
 * 	def setNelemToRetrieveFromCache(self, handlePV, netrfc):             # <<<<<<<<<<<<<<
 * 		cdef unsigned int handle=0
 * 		if isinstance(handlePV, (int,long)):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PyCafe.CyCafe.setNelemToRetrieveFromCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCafe.pyx":3547
 * 
 * 	##################################################################################
 * 	def  terminate(self):             # <<<<<<<<<<<<<<
 * 		with nogil:
 * 			self._c_cafe.terminate()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6PyCafe_6CyCafe_233terminate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6PyCafe_6CyCafe_233terminate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("terminate (wrapper)", 0);
  __pyx_r = __pyx_pf_6PyCafe_6CyCafe_232terminate(((struct __pyx_obj_6PyCafe_CyCafe *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6PyCafe_6CyCafe_232terminate(struct __pyx_obj_6PyCafe_CyCafe *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("terminate", 0);

  /* "PyCafe.pyx":3548
 * 	##################################################################################
 * 	def  terminate(self):
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			self._c_cafe.terminate()
 * 		return
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "PyCafe.pyx":3549
 * 	def  terminate(self):
 * 		with nogil:
 * 			self._c_cafe.terminate()             # <<<<<<<<<<<<<<
 * 		return
 * 	##################################################################################
 */
        __pyx_v_self->_c_cafe->terminate();
      }

      /* "PyCafe.pyx":3548
 * 	##################################################################################
 * 	def  terminate(self):
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			self._c_cafe.terminate()
 * 		return
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "PyCafe.pyx":3550
 * 		with nogil:
 * 			self._c_cafe.terminate()
 * 		return             # <<<<<<<<<<<<<<
 * 	##################################################################################
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "PyCafe.pyx":3547
 * 
 * 	##################################################################################
 * 	def  terminate(self):             # <<<<<<<<<<<<<<
 * 		with nogil:
 * 			self._c_cafe.terminate()
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":203
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":206
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":207
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":209
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":212
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
    goto __pyx_L4;
  }

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":214
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  /*else*/ {
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":217
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (__pyx_t_1) {

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__215, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":221
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (__pyx_t_1) {

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__216, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":224
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":225
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_1) {

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":230
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":232
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L11;
  }

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":236
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L11:;

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":238
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":239
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":242
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":243
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":246
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":250
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
    goto __pyx_L14;
  }

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":253
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
  /*else*/ {
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L14:;

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":256
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L20_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_L20_next_or:;

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L19_bool_binop_done:;

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_1) {

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__217, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":260
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = __pyx_k_b;
      break;

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = __pyx_k_B;
      break;

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = __pyx_k_h;
      break;

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = __pyx_k_H;
      break;

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":264
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = __pyx_k_i;
      break;

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = __pyx_k_I;
      break;

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = __pyx_k_l;
      break;

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = __pyx_k_L;
      break;

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = __pyx_k_q;
      break;

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = __pyx_k_Q;
      break;

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = __pyx_k_f;
      break;

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = __pyx_k_d_2;
      break;

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = __pyx_k_g;
      break;

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = __pyx_k_Zf;
      break;

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = __pyx_k_Zd;
      break;

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":275
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = __pyx_k_Zg;
      break;

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = __pyx_k_O;
      break;
      default:

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      break;
    }

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":279
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)malloc(0xFF));

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_f = __pyx_t_7;

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":294
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":771
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":774
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":777
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 777; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":780
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":783
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 783; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":790
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":791
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[2]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__218, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_6) {

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__219, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__220, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        {__pyx_filename = __pyx_f[2]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        {__pyx_filename = __pyx_f[2]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L15:;

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":969
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
    goto __pyx_L3;
  }

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":971
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
  /*else*/ {
    Py_INCREF(__pyx_v_base);

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":972
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":973
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":974
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":978
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  }

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":980
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":118
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

/* Python wrapper */
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  Py_ssize_t __pyx_v_itemsize;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_mode = 0;
  int __pyx_v_allocate_buffer;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_c);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_itemsize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate_buffer);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = ((PyObject*)values[0]);
    __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_format = values[2];
    __pyx_v_mode = values[3];
    if (values[4]) {
      __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "View.MemoryView":119
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
 *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */
      __pyx_v_allocate_buffer = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

  /* "View.MemoryView":118
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_dim;
  PyObject **__pyx_v_p;
  char __pyx_v_order;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_format);

  /* "View.MemoryView":125
 *         cdef PyObject **p
 * 
 *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
 *         self.itemsize = itemsize
 * 
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->ndim = ((int)__pyx_t_1);

  /* "View.MemoryView":126
 * 
 *         self.ndim = <int> len(shape)
 *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not self.ndim:
 */
  __pyx_v_self->itemsize = __pyx_v_itemsize;

  /* "View.MemoryView":128
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_self->ndim != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":129
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__221, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "View.MemoryView":128
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  }

  /* "View.MemoryView":131
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  __pyx_t_2 = ((__pyx_v_itemsize <= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":132
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__222, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "View.MemoryView":131
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  }

  /* "View.MemoryView":134
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  __pyx_t_2 = PyBytes_Check(__pyx_v_format); 
  __pyx_t_4 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":135
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__223, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "View.MemoryView":134
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  }

  /* "View.MemoryView":136
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
 *         self.format = self._format
 * 
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_format))||((__pyx_v_format) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_format)->tp_name), 0))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __pyx_v_format;
  __Pyx_INCREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->_format);
  __Pyx_DECREF(__pyx_v_self->_format);
  __pyx_v_self->_format = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "View.MemoryView":137
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_self->_format); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->format = __pyx_t_6;

  /* "View.MemoryView":140
 * 
 * 
 *         self._shape = <Py_ssize_t *> PyMem_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
 *         self._strides = self._shape + self.ndim
 * 
 */
  __pyx_v_self->_shape = ((Py_ssize_t *)PyMem_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

  /* "View.MemoryView":141
 * 
 *         self._shape = <Py_ssize_t *> PyMem_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
 *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
 * 
 *         if not self._shape:
 */
  __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

  /* "View.MemoryView":143
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  __pyx_t_4 = ((!(__pyx_v_self->_shape != 0)) != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":144
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__224, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "View.MemoryView":143
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  }

  /* "View.MemoryView":147
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  __pyx_t_7 = 0;
  __pyx_t_5 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_5); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_dim = __pyx_t_8;
    __pyx_v_idx = __pyx_t_7;
    __pyx_t_7 = (__pyx_t_7 + 1);

    /* "View.MemoryView":148
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    __pyx_t_4 = ((__pyx_v_dim <= 0) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":149
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))             # <<<<<<<<<<<<<<
 *             self._shape[idx] = dim
 * 
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_9);
      __pyx_t_3 = 0;
      __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_t_10); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_10, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "View.MemoryView":148
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    }

    /* "View.MemoryView":150
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
 * 
 *         cdef char order
 */
    (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;

    /* "View.MemoryView":147
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "View.MemoryView":153
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_4) {

    /* "View.MemoryView":154
 *         cdef char order
 *         if mode == 'fortran':
 *             order = b'F'             # <<<<<<<<<<<<<<
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 */
    __pyx_v_order = 'F';

    /* "View.MemoryView":155
 *         if mode == 'fortran':
 *             order = b'F'
 *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
 *         elif mode == 'c':
 *             order = b'C'
 */
    __Pyx_INCREF(__pyx_n_u_fortran);
    __Pyx_GIVEREF(__pyx_n_u_fortran);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_fortran;

    /* "View.MemoryView":153
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":156
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_4) {

    /* "View.MemoryView":157
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 *             order = b'C'             # <<<<<<<<<<<<<<
 *             self.mode = u'c'
 *         else:
 */
    __pyx_v_order = 'C';

    /* "View.MemoryView":158
 *         elif mode == 'c':
 *             order = b'C'
 *             self.mode = u'c'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 */
    __Pyx_INCREF(__pyx_n_u_c);
    __Pyx_GIVEREF(__pyx_n_u_c);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_c;

    /* "View.MemoryView":156
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":160
 *             self.mode = u'c'
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)             # <<<<<<<<<<<<<<
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_v_mode); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L10:;

  /* "View.MemoryView":162
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,             # <<<<<<<<<<<<<<
 *                                              itemsize, self.ndim, order)
 * 
 */
  __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

  /* "View.MemoryView":165
 *                                              itemsize, self.ndim, order)
 * 
 *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:
 */
  __pyx_v_self->free_data = __pyx_v_allocate_buffer;

  /* "View.MemoryView":166
 * 
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
 *         if allocate_buffer:
 * 
 */
  __pyx_t_5 = PyObject_RichCompare(__pyx_v_format, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_self->dtype_is_object = __pyx_t_4;

  /* "View.MemoryView":167
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = (__pyx_v_allocate_buffer != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":170
 * 
 * 
 *             self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")
 */
    __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

    /* "View.MemoryView":171
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    __pyx_t_4 = ((!(__pyx_v_self->data != 0)) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":172
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__225, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "View.MemoryView":171
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    }

    /* "View.MemoryView":174
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    __pyx_t_4 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":175
 * 
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data             # <<<<<<<<<<<<<<
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 */
      __pyx_v_p = ((PyObject **)__pyx_v_self->data);

      /* "View.MemoryView":176
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):             # <<<<<<<<<<<<<<
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)
 */
      if (unlikely(__pyx_v_itemsize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        {__pyx_filename = __pyx_f[3]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {
        PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
        {__pyx_filename = __pyx_f[3]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_1 = __Pyx_div_Py_ssize_t(__pyx_v_self->len, __pyx_v_itemsize);
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_1; __pyx_t_8+=1) {
        __pyx_v_i = __pyx_t_8;

        /* "View.MemoryView":177
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None             # <<<<<<<<<<<<<<
 *                     Py_INCREF(Py_None)
 * 
 */
        (__pyx_v_p[__pyx_v_i]) = Py_None;

        /* "View.MemoryView":178
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
        Py_INCREF(Py_None);
      }

      /* "View.MemoryView":174
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    }

    /* "View.MemoryView":167
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":118
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":181
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_bufmode;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "View.MemoryView":182
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
  __pyx_v_bufmode = -1;

  /* "View.MemoryView":183
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_c, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":184
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
    __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":183
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":185
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_fortran, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":186
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 */
    __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":185
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":187
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  __pyx_t_1 = ((!((__pyx_v_flags & __pyx_v_bufmode) != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":188
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__226, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "View.MemoryView":187
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  }

  /* "View.MemoryView":189
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data             # <<<<<<<<<<<<<<
 *         info.len = self.len
 *         info.ndim = self.ndim
 */
  __pyx_t_4 = __pyx_v_self->data;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":190
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 *         info.len = self.len             # <<<<<<<<<<<<<<
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 */
  __pyx_t_5 = __pyx_v_self->len;
  __pyx_v_info->len = __pyx_t_5;

  /* "View.MemoryView":191
 *         info.buf = self.data
 *         info.len = self.len
 *         info.ndim = self.ndim             # <<<<<<<<<<<<<<
 *         info.shape = self._shape
 *         info.strides = self._strides
 */
  __pyx_t_6 = __pyx_v_self->ndim;
  __pyx_v_info->ndim = __pyx_t_6;

  /* "View.MemoryView":192
 *         info.len = self.len
 *         info.ndim = self.ndim
 *         info.shape = self._shape             # <<<<<<<<<<<<<<
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 */
  __pyx_t_7 = __pyx_v_self->_shape;
  __pyx_v_info->shape = __pyx_t_7;

  /* "View.MemoryView":193
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 *         info.strides = self._strides             # <<<<<<<<<<<<<<
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 */
  __pyx_t_7 = __pyx_v_self->_strides;
  __pyx_v_info->strides = __pyx_t_7;

  /* "View.MemoryView":194
 *         info.shape = self._shape
 *         info.strides = self._strides
 *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "View.MemoryView":195
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 * 
 */
  __pyx_t_5 = __pyx_v_self->itemsize;
  __pyx_v_info->itemsize = __pyx_t_5;

  /* "View.MemoryView":196
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":198
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":199
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_4 = __pyx_v_self->format;
    __pyx_v_info->format = __pyx_t_4;

    /* "View.MemoryView":198
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
    goto __pyx_L5;
  }

  /* "View.MemoryView":201
 *             info.format = self.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.obj = self
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":203
 *             info.format = NULL
 * 
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":181
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":207
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

/* Python wrapper */
static void __pyx_array___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_array___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":208
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
  __pyx_t_1 = ((__pyx_v_self->callback_free_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":209
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
 *         elif self.free_data:
 *             if self.dtype_is_object:
 */
    __pyx_v_self->callback_free_data(__pyx_v_self->data);

    /* "View.MemoryView":208
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":210
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  __pyx_t_1 = (__pyx_v_self->free_data != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":211
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":212
 *         elif self.free_data:
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,             # <<<<<<<<<<<<<<
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);

      /* "View.MemoryView":211
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    }

    /* "View.MemoryView":214
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 *             free(self.data)             # <<<<<<<<<<<<<<
 *         PyMem_Free(self._shape)
 * 
 */
    free(__pyx_v_self->data);

    /* "View.MemoryView":210
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":215
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 *         PyMem_Free(self._shape)             # <<<<<<<<<<<<<<
 * 
 *     property memview:
 */
  PyMem_Free(__pyx_v_self->_shape);

  /* "View.MemoryView":207
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":219
 *     property memview:
 *         @cname('get_memview')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 * 
 *             flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 */

/* Python wrapper */
static PyObject *get_memview(PyObject *__pyx_v_self); /*proto*/
static PyObject *get_memview(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":221
 *         def __get__(self):
 * 
 *             flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
 *             return  memoryview(self, flags, self.dtype_is_object)
 * 
 */
  __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);

  /* "View.MemoryView":222
 * 
 *             flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *             return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":219
 *     property memview:
 *         @cname('get_memview')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 * 
 *             flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":225
 * 
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "View.MemoryView":226
 * 
 *     def __getattr__(self, attr):
 *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":225
 * 
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":228
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":229
 * 
 *     def __getitem__(self, item):
 *         return self.memview[item]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":228
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":231
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

/* Python wrapper */
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /*proto*/
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "View.MemoryView":232
 * 
 *     def __setitem__(self, item, value):
 *         self.memview[item] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":231
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":236
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char *__pyx_v_mode, char *__pyx_v_buf) {
  struct __pyx_array_obj *__pyx_v_result = 0;
  struct __pyx_array_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_cwrapper", 0);

  /* "View.MemoryView":240
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_buf == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":241
 * 
 *     if buf == NULL:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))             # <<<<<<<<<<<<<<
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":240
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":243
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
  /*else*/ {
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;

    /* "View.MemoryView":244
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)             # <<<<<<<<<<<<<<
 *         result.data = buf
 * 
 */
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_allocate_buffer, Py_False) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "View.MemoryView":243
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "View.MemoryView":245
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)
 *         result.data = buf             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_v_result->data = __pyx_v_buf;
  }
  __pyx_L3:;

  /* "View.MemoryView":247
 *         result.data = buf
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":236
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":273
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "View.MemoryView":274
 *     cdef object name
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.name
 */
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = __pyx_v_name;

  /* "View.MemoryView":273
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":275
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":276
 *         self.name = name
 *     def __repr__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* "View.MemoryView":275
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":290
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

static void *__pyx_align_pointer(void *__pyx_v_memory, size_t __pyx_v_alignment) {
  Py_intptr_t __pyx_v_aligned_p;
  size_t __pyx_v_offset;
  void *__pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":292
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory             # <<<<<<<<<<<<<<
 *     cdef size_t offset
 * 
 */
  __pyx_v_aligned_p = ((Py_intptr_t)__pyx_v_memory);

  /* "View.MemoryView":296
 * 
 *     with cython.cdivision(True):
 *         offset = aligned_p % alignment             # <<<<<<<<<<<<<<
 * 
 *     if offset > 0:
 */
  __pyx_v_offset = (__pyx_v_aligned_p % __pyx_v_alignment);

  /* "View.MemoryView":298
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  __pyx_t_1 = ((__pyx_v_offset > 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":299
 * 
 *     if offset > 0:
 *         aligned_p += alignment - offset             # <<<<<<<<<<<<<<
 * 
 *     return <void *> aligned_p
 */
    __pyx_v_aligned_p = (__pyx_v_aligned_p + (__pyx_v_alignment - __pyx_v_offset));

    /* "View.MemoryView":298
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  }

  /* "View.MemoryView":301
 *         aligned_p += alignment - offset
 * 
 *     return <void *> aligned_p             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview')
 */
  __pyx_r = ((void *)__pyx_v_aligned_p);
  goto __pyx_L0;

  /* "View.MemoryView":290
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":319
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

/* Python wrapper */
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  int __pyx_v_flags;
  int __pyx_v_dtype_is_object;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dtype_is_object);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[2]) {
      __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_dtype_is_object = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "View.MemoryView":320
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 */
  __Pyx_INCREF(__pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __Pyx_GOTREF(__pyx_v_self->obj);
  __Pyx_DECREF(__pyx_v_self->obj);
  __pyx_v_self->obj = __pyx_v_obj;

  /* "View.MemoryView":321
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 */
  __pyx_v_self->flags = __pyx_v_flags;

  /* "View.MemoryView":322
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_memoryview_type));
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_obj != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "View.MemoryView":323
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 */
    __pyx_t_4 = __Pyx_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "View.MemoryView":324
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    __pyx_t_1 = ((((PyObject *)__pyx_v_self->view.obj) == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":325
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
 *                 Py_INCREF(Py_None)
 * 
 */
      ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

      /* "View.MemoryView":326
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         self.lock = PyThread_allocate_lock()
 */
      Py_INCREF(Py_None);

      /* "View.MemoryView":324
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    }

    /* "View.MemoryView":322
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  }

  /* "View.MemoryView":328
 *                 Py_INCREF(Py_None)
 * 
 *         self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *         if self.lock == NULL:
 *             raise MemoryError
 */
  __pyx_v_self->lock = PyThread_allocate_lock();

  /* "View.MemoryView":329
 * 
 *         self.lock = PyThread_allocate_lock()
 *         if self.lock == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":330
 *         self.lock = PyThread_allocate_lock()
 *         if self.lock == NULL:
 *             raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "View.MemoryView":329
 * 
 *         self.lock = PyThread_allocate_lock()
 *         if self.lock == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 * 
 */
  }

  /* "View.MemoryView":332
 *             raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = self.view.format == b'O'
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":333
 * 
 *         if flags & PyBUF_FORMAT:
 *             self.dtype_is_object = self.view.format == b'O'             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype_is_object = dtype_is_object
 */
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_5, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_self->dtype_is_object = __pyx_t_1;

    /* "View.MemoryView":332
 *             raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = self.view.format == b'O'
 *         else:
 */
    goto __pyx_L8;
  }

  /* "View.MemoryView":335
 *             self.dtype_is_object = self.view.format == b'O'
 *         else:
 *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 */
  /*else*/ {
    __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;
  }
  __pyx_L8:;

  /* "View.MemoryView":337
 *             self.dtype_is_object = dtype_is_object
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(             # <<<<<<<<<<<<<<
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL
 */
  __pyx_v_self->acquisition_count_aligned_p = ((__pyx_atomic_int *)__pyx_align_pointer(((void *)(&(__pyx_v_self->acquisition_count[0]))), (sizeof(__pyx_atomic_int))));

  /* "View.MemoryView":339
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(memoryview self):
 */
  __pyx_v_self->typeinfo = NULL;

  /* "View.MemoryView":319
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":341
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

/* Python wrapper */
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":342
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 * 
 */
  __pyx_t_1 = (__pyx_v_self->obj != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":343
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)             # <<<<<<<<<<<<<<
 * 
 *         if self.lock != NULL:
 */
    __Pyx_ReleaseBuffer((&__pyx_v_self->view));

    /* "View.MemoryView":342
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 * 
 */
  }

  /* "View.MemoryView":345
 *             __Pyx_ReleaseBuffer(&self.view)
 * 
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             PyThread_free_lock(self.lock)
 * 
 */
  __pyx_t_2 = ((__pyx_v_self->lock != NULL) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":346
 * 
 *         if self.lock != NULL:
 *             PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 */
    PyThread_free_lock(__pyx_v_self->lock);

    /* "View.MemoryView":345
 *             __Pyx_ReleaseBuffer(&self.view)
 * 
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             PyThread_free_lock(self.lock)
 * 
 */
  }

  /* "View.MemoryView":341
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":348
 *             PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  Py_ssize_t __pyx_v_dim;
  char *__pyx_v_itemp;
  PyObject *__pyx_v_idx = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_item_pointer", 0);

  /* "View.MemoryView":350
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
 * 
 *         for dim, idx in enumerate(index):
 */
  __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

  /* "View.MemoryView":352
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {
    __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[3]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "View.MemoryView":353
 * 
 *         for dim, idx in enumerate(index):
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
 * 
 *         return itemp
 */
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_itemp = __pyx_t_7;

    /* "View.MemoryView":352
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":355
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 *         return itemp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_itemp;
  goto __pyx_L0;

  /* "View.MemoryView":348
 *             PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":358
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_indices = NULL;
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":359
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":360
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "View.MemoryView":359
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  }

  /* "View.MemoryView":362
 *             return self
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         cdef char *itemp
 */
  __pyx_t_3 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_have_slices = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_indices = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "View.MemoryView":365
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {

    /* "View.MemoryView":366
 *         cdef char *itemp
 *         if have_slices:
 *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
 *         else:
 *             itemp = self.get_item_pointer(indices)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":365
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  }

  /* "View.MemoryView":368
 *             return memview_slice(self, indices)
 *         else:
 *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
 *             return self.convert_item_to_object(itemp)
 * 
 */
  /*else*/ {
    __pyx_t_6 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_itemp = __pyx_t_6;

    /* "View.MemoryView":369
 *         else:
 *             itemp = self.get_item_pointer(indices)
 *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(memoryview self, object index, object value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":358
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":371
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 */

/* Python wrapper */
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_obj = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_INCREF(__pyx_v_index);

  /* "View.MemoryView":372
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         if have_slices:
 */
  __pyx_t_1 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_have_slices = __pyx_t_2;
  __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":374
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_4) {

    /* "View.MemoryView":375
 * 
 *         if have_slices:
 *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_obj = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "View.MemoryView":376
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_obj); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_4) {

      /* "View.MemoryView":377
 *             obj = self.is_slice(value)
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)
 */
      __pyx_t_1 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_1, __pyx_v_obj); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "View.MemoryView":376
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":379
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
 *         else:
 *             self.setitem_indexed(index, value)
 */
    /*else*/ {
      __pyx_t_3 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_3);
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_3), __pyx_v_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L4:;

    /* "View.MemoryView":374
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":381
 *                 self.setitem_slice_assign_scalar(self[index], value)
 *         else:
 *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef is_slice(self, obj):
 */
  /*else*/ {
    __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":371
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":383
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_slice", 0);
  __Pyx_INCREF(__pyx_v_obj);

  /* "View.MemoryView":384
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_memoryview_type); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":385
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "View.MemoryView":386
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->flags | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":387
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return None
 */
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_7);

        /* "View.MemoryView":386
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_obj);
        __Pyx_GIVEREF(__pyx_v_obj);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_obj);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "View.MemoryView":385
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L11_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "View.MemoryView":388
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
      __pyx_t_9 = PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_6) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":389
 *                                  self.dtype_is_object)
 *             except TypeError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         return obj
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_None);
        __pyx_r = Py_None;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_except_return;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "View.MemoryView":385
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L11_try_end:;
    }

    /* "View.MemoryView":384
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 */
  }

  /* "View.MemoryView":391
 *                 return None
 * 
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assignment(self, dst, src):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "View.MemoryView":383
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":393
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {
  __Pyx_memviewslice __pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_src_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assignment", 0);

  /* "View.MemoryView":397
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_memoryview_type))))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "View.MemoryView":398
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],             # <<<<<<<<<<<<<<
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 */
  if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_memoryview_type))))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "View.MemoryView":399
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":397
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  __pyx_t_4 = __pyx_memoryview_copy_contents((__pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice))[0]), (__pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice))[0]), __pyx_t_2, __pyx_t_3, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "View.MemoryView":393
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":401
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {
  int __pyx_v_array[0x80];
  void *__pyx_v_tmp;
  void *__pyx_v_item;
  __Pyx_memviewslice *__pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_tmp_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char const *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 0);

  /* "View.MemoryView":403
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 *         cdef int array[128]
 *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
 *         cdef void *item
 * 
 */
  __pyx_v_tmp = NULL;

  /* "View.MemoryView":408
 *         cdef __Pyx_memviewslice *dst_slice
 *         cdef __Pyx_memviewslice tmp_slice
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 */
  __pyx_v_dst_slice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice));

  /* "View.MemoryView":410
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
  __pyx_t_1 = ((((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array))) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":411
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
 *             if tmp == NULL:
 *                 raise MemoryError
 */
    __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

    /* "View.MemoryView":412
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    __pyx_t_1 = ((__pyx_v_tmp == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":413
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 *             item = tmp
 *         else:
 */
      PyErr_NoMemory(); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "View.MemoryView":412
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    }

    /* "View.MemoryView":414
 *             if tmp == NULL:
 *                 raise MemoryError
 *             item = tmp             # <<<<<<<<<<<<<<
 *         else:
 *             item = <void *> array
 */
    __pyx_v_item = __pyx_v_tmp;

    /* "View.MemoryView":410
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":416
 *             item = tmp
 *         else:
 *             item = <void *> array             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
  /*else*/ {
    __pyx_v_item = ((void *)__pyx_v_array);
  }
  __pyx_L3:;

  /* "View.MemoryView":418
 *             item = <void *> array
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value
 */
  /*try:*/ {

    /* "View.MemoryView":419
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":420
 *         try:
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)
 */
      (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);

      /* "View.MemoryView":419
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
      goto __pyx_L8;
    }

    /* "View.MemoryView":422
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L8:;

    /* "View.MemoryView":426
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    __pyx_t_1 = ((__pyx_v_self->view.suboffsets != NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":427
 * 
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 *                                 item, self.dtype_is_object)
 */
      __pyx_t_2 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "View.MemoryView":426
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    }

    /* "View.MemoryView":428
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
 *                                 item, self.dtype_is_object)
 *         finally:
 */
    __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);
  }

  /* "View.MemoryView":431
 *                                 item, self.dtype_is_object)
 *         finally:
 *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_indexed(self, index, value):
 */
  /*finally:*/ {
    /*normal exit:*/{
      PyMem_Free(__pyx_v_tmp);
      goto __pyx_L7;
    }
    /*exception exit:*/{
      __pyx_L6_error:;
      __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0)) __Pyx_ErrFetch(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __pyx_t_3 = __pyx_lineno; __pyx_t_4 = __pyx_clineno; __pyx_t_5 = __pyx_filename;
      {
        PyMem_Free(__pyx_v_tmp);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ErrRestore(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0;
      __pyx_lineno = __pyx_t_3; __pyx_clineno = __pyx_t_4; __pyx_filename = __pyx_t_5;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "View.MemoryView":401
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":433
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_indexed", 0);

  /* "View.MemoryView":434
 * 
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
 *         self.assign_item_from_object(itemp, value)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_itemp = __pyx_t_1;

  /* "View.MemoryView":435
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":433
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":437
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_v_struct = NULL;
  PyObject *__pyx_v_bytesitem = 0;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":440
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef bytes bytesitem
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":443
 *         cdef bytes bytesitem
 * 
 *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":444
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "View.MemoryView":445
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_unpack); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_6);
      __Pyx_INCREF(__pyx_v_bytesitem);
      __Pyx_GIVEREF(__pyx_v_bytesitem);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_bytesitem);
      __pyx_t_6 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_result = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "View.MemoryView":444
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    }

    /* "View.MemoryView":449
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
    /*else:*/ {
      __pyx_t_10 = strlen(__pyx_v_self->view.format); 
      __pyx_t_11 = ((__pyx_t_10 == 1) != 0);
      if (__pyx_t_11) {

        /* "View.MemoryView":450
 *         else:
 *             if len(self.view.format) == 1:
 *                 return result[0]             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;};
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L6_except_return;

        /* "View.MemoryView":449
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
      }

      /* "View.MemoryView":451
 *             if len(self.view.format) == 1:
 *                 return result[0]
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "View.MemoryView":446
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unable to convert item to object")
 *         else:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_error); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_12 = PyErr_ExceptionMatches(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_12) {
      __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_5, &__pyx_t_9) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_9);

      /* "View.MemoryView":447
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__227, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "View.MemoryView":444
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "View.MemoryView":437
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesitem);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":453
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_struct = NULL;
  char __pyx_v_c;
  PyObject *__pyx_v_bytesvalue = 0;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  char *__pyx_t_10;
  char *__pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":456
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef bytes bytesvalue
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":461
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_value); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "View.MemoryView":462
 * 
 *         if isinstance(value, tuple):
 *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":461
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":464
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
 * 
 *         for i, c in enumerate(bytesvalue):
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
    __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":466
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
  __pyx_t_7 = 0;
  if (unlikely(__pyx_v_bytesvalue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_INCREF(__pyx_v_bytesvalue);
  __pyx_t_9 = __pyx_v_bytesvalue;
  __pyx_t_11 = PyBytes_AS_STRING(__pyx_t_9);
  __pyx_t_12 = (__pyx_t_11 + PyBytes_GET_SIZE(__pyx_t_9));
  for (__pyx_t_13 = __pyx_t_11; __pyx_t_13 < __pyx_t_12; __pyx_t_13++) {
    __pyx_t_10 = __pyx_t_13;
    __pyx_v_c = (__pyx_t_10[0]);

    /* "View.MemoryView":467
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __pyx_v_i = __pyx_t_7;

    /* "View.MemoryView":466
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
    __pyx_t_7 = (__pyx_t_7 + 1);

    /* "View.MemoryView":467
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "View.MemoryView":453
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":470
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_STRIDES:
 *             info.shape = self.view.shape
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  char *__pyx_t_3;
  void *__pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "View.MemoryView":471
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":472
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_STRIDES:
 *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
 *         else:
 *             info.shape = NULL
 */
    __pyx_t_2 = __pyx_v_self->view.shape;
    __pyx_v_info->shape = __pyx_t_2;

    /* "View.MemoryView":471
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":474
 *             info.shape = self.view.shape
 *         else:
 *             info.shape = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
  /*else*/ {
    __pyx_v_info->shape = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":476
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":477
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.strides = NULL
 */
    __pyx_t_2 = __pyx_v_self->view.strides;
    __pyx_v_info->strides = __pyx_t_2;

    /* "View.MemoryView":476
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":479
 *             info.strides = self.view.strides
 *         else:
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_INDIRECT:
 */
  /*else*/ {
    __pyx_v_info->strides = NULL;
  }
  __pyx_L4:;

  /* "View.MemoryView":481
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":482
 * 
 *         if flags & PyBUF_INDIRECT:
 *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
 *         else:
 *             info.suboffsets = NULL
 */
    __pyx_t_2 = __pyx_v_self->view.suboffsets;
    __pyx_v_info->suboffsets = __pyx_t_2;

    /* "View.MemoryView":481
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
    goto __pyx_L5;
  }

  /* "View.MemoryView":484
 *             info.suboffsets = self.view.suboffsets
 *         else:
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  /*else*/ {
    __pyx_v_info->suboffsets = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":486
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":487
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.view.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_3 = __pyx_v_self->view.format;
    __pyx_v_info->format = __pyx_t_3;

    /* "View.MemoryView":486
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
    goto __pyx_L6;
  }

  /* "View.MemoryView":489
 *             info.format = self.view.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.buf = self.view.buf
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":491
 *             info.format = NULL
 * 
 *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 */
  __pyx_t_4 = __pyx_v_self->view.buf;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":492
 * 
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 */
  __pyx_t_5 = __pyx_v_self->view.ndim;
  __pyx_v_info->ndim = __pyx_t_5;

  /* "View.MemoryView":493
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
 *         info.len = self.view.len
 *         info.readonly = 0
 */
  __pyx_t_6 = __pyx_v_self->view.itemsize;
  __pyx_v_info->itemsize = __pyx_t_6;

  /* "View.MemoryView":494
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 *         info.obj = self
 */
  __pyx_t_6 = __pyx_v_self->view.len;
  __pyx_v_info->len = __pyx_t_6;

  /* "View.MemoryView":495
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":496
 *         info.len = self.view.len
 *         info.readonly = 0
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":470
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_STRIDES:
 *             info.shape = self.view.shape
 */

  /* function exit code */
  __pyx_r = 0;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":503
 *     property T:
 *         @cname('__pyx_memoryview_transpose')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef _memoryviewslice result = memoryview_copy(self)
 *             transpose_memslice(&result.from_slice)
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_transpose(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_transpose(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":504
 *         @cname('__pyx_memoryview_transpose')
 *         def __get__(self):
 *             cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
 *             transpose_memslice(&result.from_slice)
 *             return result
 */
  __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_memoryviewslice_type))))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":505
 *         def __get__(self):
 *             cdef _memoryviewslice result = memoryview_copy(self)
 *             transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
  __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "View.MemoryView":506
 *             cdef _memoryviewslice result = memoryview_copy(self)
 *             transpose_memslice(&result.from_slice)
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     property base:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":503
 *     property T:
 *         @cname('__pyx_memoryview_transpose')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef _memoryviewslice result = memoryview_copy(self)
 *             transpose_memslice(&result.from_slice)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":510
 *     property base:
 *         @cname('__pyx_memoryview__get__base')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.obj
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview__get__base(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview__get__base(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":511
 *         @cname('__pyx_memoryview__get__base')
 *         def __get__(self):
 *             return self.obj             # <<<<<<<<<<<<<<
 * 
 *     property shape:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->obj);
  __pyx_r = __pyx_v_self->obj;
  goto __pyx_L0;

  /* "View.MemoryView":510
 *     property base:
 *         @cname('__pyx_memoryview__get__base')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.obj
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":515
 *     property shape:
 *         @cname('__pyx_memoryview_get_shape')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_get_shape(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_shape(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":516
 *         @cname('__pyx_memoryview_get_shape')
 *         def __get__(self):
 *             return tuple([length for length in self.view.shape[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     property strides:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
  for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_length = (__pyx_t_2[0]);
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_length); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":515
 *     property shape:
 *         @cname('__pyx_memoryview_get_shape')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":520
 *     property strides:
 *         @cname('__pyx_memoryview_get_strides')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.view.strides == NULL:
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_get_strides(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_strides(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_stride;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":521
 *         @cname('__pyx_memoryview_get_strides')
 *         def __get__(self):
 *             if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *                 raise ValueError("Buffer view does not expose strides")
 */
  __pyx_t_1 = ((__pyx_v_self->view.strides == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":523
 *             if self.view.strides == NULL:
 * 
 *                 raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *             return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__228, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "View.MemoryView":521
 *         @cname('__pyx_memoryview_get_strides')
 *         def __get__(self):
 *             if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *                 raise ValueError("Buffer view does not expose strides")
 */
  }

  /* "View.MemoryView":525
 *                 raise ValueError("Buffer view does not expose strides")
 * 
 *             return tuple([stride for stride in self.view.strides[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     property suboffsets:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__pyx_v_self->view.strides + __pyx_v_self->view.ndim);
  for (__pyx_t_5 = __pyx_v_self->view.strides; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
    __pyx_t_3 = __pyx_t_5;
    __pyx_v_stride = (__pyx_t_3[0]);
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_stride); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":520
 *     property strides:
 *         @cname('__pyx_memoryview_get_strides')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.view.strides == NULL:
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":529
 *     property suboffsets:
 *         @cname('__pyx_memoryview_get_suboffsets')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.view.suboffsets == NULL:
 *                 return (-1,) * self.view.ndim
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_get_suboffsets(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_suboffsets(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":530
 *         @cname('__pyx_memoryview_get_suboffsets')
 *         def __get__(self):
 *             if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *                 return (-1,) * self.view.ndim
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.suboffsets == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":531
 *         def __get__(self):
 *             if self.view.suboffsets == NULL:
 *                 return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *             return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_tuple__229, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":530
 *         @cname('__pyx_memoryview_get_suboffsets')
 *         def __get__(self):
 *             if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *                 return (-1,) * self.view.ndim
 * 
 */
  }

  /* "View.MemoryView":533
 *                 return (-1,) * self.view.ndim
 * 
 *             return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     property ndim:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = (__pyx_v_self->view.suboffsets + __pyx_v_self->view.ndim);
  for (__pyx_t_6 = __pyx_v_self->view.suboffsets; __pyx_t_6 < __pyx_t_5; __pyx_t_6++) {
    __pyx_t_4 = __pyx_t_6;
    __pyx_v_suboffset = (__pyx_t_4[0]);
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_suboffset); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyList_AsTuple(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":529
 *     property suboffsets:
 *         @cname('__pyx_memoryview_get_suboffsets')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.view.suboffsets == NULL:
 *                 return (-1,) * self.view.ndim
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":537
 *     property ndim:
 *         @cname('__pyx_memoryview_get_ndim')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.view.ndim
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_get_ndim(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_ndim(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":538
 *         @cname('__pyx_memoryview_get_ndim')
 *         def __get__(self):
 *             return self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     property itemsize:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":537
 *     property ndim:
 *         @cname('__pyx_memoryview_get_ndim')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":542
 *     property itemsize:
 *         @cname('__pyx_memoryview_get_itemsize')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_get_itemsize(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_itemsize(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":543
 *         @cname('__pyx_memoryview_get_itemsize')
 *         def __get__(self):
 *             return self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     property nbytes:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":542
 *     property itemsize:
 *         @cname('__pyx_memoryview_get_itemsize')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":547
 *     property nbytes:
 *         @cname('__pyx_memoryview_get_nbytes')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.size * self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_get_nbytes(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_nbytes(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":548
 *         @cname('__pyx_memoryview_get_nbytes')
 *         def __get__(self):
 *             return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     property size:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":547
 *     property nbytes:
 *         @cname('__pyx_memoryview_get_nbytes')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.size * self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":552
 *     property size:
 *         @cname('__pyx_memoryview_get_size')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._size is None:
 *                 result = 1
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_get_size(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_size(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":553
 *         @cname('__pyx_memoryview_get_size')
 *         def __get__(self):
 *             if self._size is None:             # <<<<<<<<<<<<<<
 *                 result = 1
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_size == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":554
 *         def __get__(self):
 *             if self._size is None:
 *                 result = 1             # <<<<<<<<<<<<<<
 * 
 *                 for length in self.view.shape[:self.view.ndim]:
 */
    __Pyx_INCREF(__pyx_int_1);
    __pyx_v_result = __pyx_int_1;

    /* "View.MemoryView":556
 *                 result = 1
 * 
 *                 for length in self.view.shape[:self.view.ndim]:             # <<<<<<<<<<<<<<
 *                     result *= length
 * 
 */
    __pyx_t_4 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
    for (__pyx_t_5 = __pyx_v_self->view.shape; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_3[0])); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "View.MemoryView":557
 * 
 *                 for length in self.view.shape[:self.view.ndim]:
 *                     result *= length             # <<<<<<<<<<<<<<
 * 
 *                 self._size = result
 */
      __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_6);
      __pyx_t_6 = 0;
    }

    /* "View.MemoryView":559
 *                     result *= length
 * 
 *                 self._size = result             # <<<<<<<<<<<<<<
 * 
 *             return self._size
 */
    __Pyx_INCREF(__pyx_v_result);
    __Pyx_GIVEREF(__pyx_v_result);
    __Pyx_GOTREF(__pyx_v_self->_size);
    __Pyx_DECREF(__pyx_v_self->_size);
    __pyx_v_self->_size = __pyx_v_result;

    /* "View.MemoryView":553
 *         @cname('__pyx_memoryview_get_size')
 *         def __get__(self):
 *             if self._size is None:             # <<<<<<<<<<<<<<
 *                 result = 1
 * 
 */
  }

  /* "View.MemoryView":561
 *                 self._size = result
 * 
 *             return self._size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_size);
  __pyx_r = __pyx_v_self->_size;
  goto __pyx_L0;

  /* "View.MemoryView":552
 *     property size:
 *         @cname('__pyx_memoryview_get_size')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._size is None:
 *                 result = 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":563
 *             return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

/* Python wrapper */
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":564
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.ndim >= 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":565
 *     def __len__(self):
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_r = (__pyx_v_self->view.shape[0]);
    goto __pyx_L0;

    /* "View.MemoryView":564
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  }

  /* "View.MemoryView":567
 *             return self.view.shape[0]
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":563
 *             return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":569
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":570
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":571
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_id, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":570
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":569
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":573
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "View.MemoryView":574
 * 
 *     def __str__(self):
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_object, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":573
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":577
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_c_contig", 0);

  /* "View.MemoryView":580
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice, 'C', self.view.ndim)
 * 
 */
  __pyx_v_mslice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp));

  /* "View.MemoryView":581
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice, 'C', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def is_f_contig(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig(__pyx_v_mslice, 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":577
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":583
 *         return slice_is_contig(mslice, 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_f_contig", 0);

  /* "View.MemoryView":586
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice, 'F', self.view.ndim)
 * 
 */
  __pyx_v_mslice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp));

  /* "View.MemoryView":587
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice, 'F', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig(__pyx_v_mslice, 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":583
 *         return slice_is_contig(mslice, 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":589
 *         return slice_is_contig(mslice, 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_mslice;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "View.MemoryView":591
 *     def copy(self):
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &mslice)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

  /* "View.MemoryView":593
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 * 
 *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
 *                                    self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

  /* "View.MemoryView":594
 * 
 *         slice_copy(self, &mslice)
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                    self.view.itemsize,
 *                                    flags|PyBUF_C_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), __pyx_k_c, __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":599
 *                                    self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
 * 
 *     def copy_fortran(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":589
 *         return slice_is_contig(mslice, 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":601
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_fortran", 0);

  /* "View.MemoryView":603
 *     def copy_fortran(self):
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &src)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

  /* "View.MemoryView":605
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 * 
 *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
 *                                 self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

  /* "View.MemoryView":606
 * 
 *         slice_copy(self, &src)
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                 self.view.itemsize,
 *                                 flags|PyBUF_F_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), __pyx_k_fortran, __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_dst = __pyx_t_1;

  /* "View.MemoryView":611
 *                                 self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":601
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":615
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo *__pyx_v_typeinfo) {
  struct __pyx_memoryview_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_cwrapper", 0);

  /* "View.MemoryView":616
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
 *     result.typeinfo = typeinfo
 *     return result
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_o);
  __Pyx_GIVEREF(__pyx_v_o);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":617
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_v_result->typeinfo = __pyx_v_typeinfo;

  /* "View.MemoryView":618
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_check')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":615
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":621
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

static CYTHON_INLINE int __pyx_memoryview_check(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("memoryview_check", 0);

  /* "View.MemoryView":622
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):
 *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple _unellipsify(object index, int ndim):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":621
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":624
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {
  PyObject *__pyx_v_tup = NULL;
  PyObject *__pyx_v_result = NULL;
  int __pyx_v_have_slices;
  int __pyx_v_seen_ellipsis;
  CYTHON_UNUSED PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_item = NULL;
  Py_ssize_t __pyx_v_nslices;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_unellipsify", 0);

  /* "View.MemoryView":629
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
  __pyx_t_1 = PyTuple_Check(__pyx_v_index); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":630
 *     """
 *     if not isinstance(index, tuple):
 *         tup = (index,)             # <<<<<<<<<<<<<<
 *     else:
 *         tup = index
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);
    __pyx_v_tup = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "View.MemoryView":629
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":632
 *         tup = (index,)
 *     else:
 *         tup = index             # <<<<<<<<<<<<<<
 * 
 *     result = []
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_index);
    __pyx_v_tup = __pyx_v_index;
  }
  __pyx_L3:;

  /* "View.MemoryView":634
 *         tup = index
 * 
 *     result = []             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_result = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":635
 * 
 *     result = []
 *     have_slices = False             # <<<<<<<<<<<<<<
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 */
  __pyx_v_have_slices = 0;

  /* "View.MemoryView":636
 *     result = []
 *     have_slices = False
 *     seen_ellipsis = False             # <<<<<<<<<<<<<<
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 */
  __pyx_v_seen_ellipsis = 0;

  /* "View.MemoryView":637
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_tup)) || PyTuple_CheckExact(__pyx_v_tup)) {
    __pyx_t_4 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_tup); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[3]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "View.MemoryView":638
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
    __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":639
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
      __pyx_t_1 = ((!(__pyx_v_seen_ellipsis != 0)) != 0);
      if (__pyx_t_1) {

        /* "View.MemoryView":640
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
        __pyx_t_8 = PyObject_Length(__pyx_v_tup); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 640; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_7 = PyList_New(1 * ((((__pyx_v_ndim - __pyx_t_8) + 1)<0) ? 0:((__pyx_v_ndim - __pyx_t_8) + 1))); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 640; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        { Py_ssize_t __pyx_temp;
          for (__pyx_temp=0; __pyx_temp < ((__pyx_v_ndim - __pyx_t_8) + 1); __pyx_temp++) {
            __Pyx_INCREF(__pyx_slice__230);
            __Pyx_GIVEREF(__pyx_slice__230);
            PyList_SET_ITEM(__pyx_t_7, __pyx_temp, __pyx_slice__230);
          }
        }
        __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 640; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "View.MemoryView":641
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
 *             else:
 *                 result.append(slice(None))
 */
        __pyx_v_seen_ellipsis = 1;

        /* "View.MemoryView":639
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":643
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
      /*else*/ {
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_slice__231); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L7:;

      /* "View.MemoryView":644
 *             else:
 *                 result.append(slice(None))
 *             have_slices = True             # <<<<<<<<<<<<<<
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 */
      __pyx_v_have_slices = 1;

      /* "View.MemoryView":638
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":646
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
    /*else*/ {
      __pyx_t_2 = PySlice_Check(__pyx_v_item); 
      __pyx_t_10 = ((!(__pyx_t_2 != 0)) != 0);
      if (__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = ((!(PyIndex_Check(__pyx_v_item) != 0)) != 0);
      __pyx_t_1 = __pyx_t_10;
      __pyx_L9_bool_binop_done:;
      if (__pyx_t_1) {

        /* "View.MemoryView":647
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 *                 raise TypeError("Cannot index with type '%s'" % type(item))             # <<<<<<<<<<<<<<
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 */
        __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_Cannot_index_with_type_s, ((PyObject *)Py_TYPE(__pyx_v_item))); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_11, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_Raise(__pyx_t_7, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        {__pyx_filename = __pyx_f[3]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "View.MemoryView":646
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
      }

      /* "View.MemoryView":649
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 *             have_slices = have_slices or isinstance(item, slice)             # <<<<<<<<<<<<<<
 *             result.append(item)
 * 
 */
      __pyx_t_10 = (__pyx_v_have_slices != 0);
      if (!__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = PySlice_Check(__pyx_v_item); 
      __pyx_t_2 = (__pyx_t_10 != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L11_bool_binop_done:;
      __pyx_v_have_slices = __pyx_t_1;

      /* "View.MemoryView":650
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 *             result.append(item)             # <<<<<<<<<<<<<<
 * 
 *     nslices = ndim - len(result)
 */
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_item); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L6:;

    /* "View.MemoryView":637
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":652
 *             result.append(item)
 * 
 *     nslices = ndim - len(result)             # <<<<<<<<<<<<<<
 *     if nslices:
 *         result.extend([slice(None)] * nslices)
 */
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_result); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_nslices = (__pyx_v_ndim - __pyx_t_5);

  /* "View.MemoryView":653
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  __pyx_t_1 = (__pyx_v_nslices != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":654
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
    __pyx_t_3 = PyList_New(1 * ((__pyx_v_nslices<0) ? 0:__pyx_v_nslices)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_nslices; __pyx_temp++) {
        __Pyx_INCREF(__pyx_slice__232);
        __Pyx_GIVEREF(__pyx_slice__232);
        PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_slice__232);
      }
    }
    __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "View.MemoryView":653
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  }

  /* "View.MemoryView":656
 *         result.extend([slice(None)] * nslices)
 * 
 *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!__pyx_v_have_slices) {
  } else {
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_L14_bool_binop_done:;
  __pyx_t_4 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":624
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":658
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

static PyObject *assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assert_direct_dimensions", 0);

  /* "View.MemoryView":659
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")
 */
  __pyx_t_2 = (__pyx_v_suboffsets + __pyx_v_ndim);
  for (__pyx_t_3 = __pyx_v_suboffsets; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {
    __pyx_t_1 = __pyx_t_3;
    __pyx_v_suboffset = (__pyx_t_1[0]);

    /* "View.MemoryView":660
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    __pyx_t_4 = ((__pyx_v_suboffset >= 0) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":661
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__233, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "View.MemoryView":660
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    }
  }

  /* "View.MemoryView":658
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":668
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {
  int __pyx_v_new_ndim;
  int __pyx_v_suboffset_dim;
  int __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  __Pyx_memviewslice *__pyx_v_p_src;
  struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0;
  __Pyx_memviewslice *__pyx_v_p_dst;
  int *__pyx_v_p_suboffset_dim;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_stop;
  Py_ssize_t __pyx_v_step;
  int __pyx_v_have_start;
  int __pyx_v_have_stop;
  int __pyx_v_have_step;
  PyObject *__pyx_v_index = NULL;
  struct __pyx_memoryview_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_memoryview_obj *__pyx_t_4;
  char *__pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memview_slice", 0);

  /* "View.MemoryView":669
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
 *     cdef bint negative_step
 *     cdef __Pyx_memviewslice src, dst
 */
  __pyx_v_new_ndim = 0;
  __pyx_v_suboffset_dim = -1;

  /* "View.MemoryView":676
 * 
 * 
 *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
 * 
 *     cdef _memoryviewslice memviewsliceobj
 */
  memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst)));

  /* "View.MemoryView":680
 *     cdef _memoryviewslice memviewsliceobj
 * 
 *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_memview->view.ndim > 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "View.MemoryView":682
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":683
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":684
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, &src)
 */
    __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);

    /* "View.MemoryView":682
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":686
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
 *         p_src = &src
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

    /* "View.MemoryView":687
 *     else:
 *         slice_copy(memview, &src)
 *         p_src = &src             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_p_src = (&__pyx_v_src);
  }
  __pyx_L3:;

  /* "View.MemoryView":693
 * 
 * 
 *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
 *     dst.data = p_src.data
 * 
 */
  __pyx_t_4 = __pyx_v_p_src->memview;
  __pyx_v_dst.memview = __pyx_t_4;

  /* "View.MemoryView":694
 * 
 *     dst.memview = p_src.memview
 *     dst.data = p_src.data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_v_p_src->data;
  __pyx_v_dst.data = __pyx_t_5;

  /* "View.MemoryView":699
 * 
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
 *     cdef int *p_suboffset_dim = &suboffset_dim
 *     cdef Py_ssize_t start, stop, step
 */
  __pyx_v_p_dst = (&__pyx_v_dst);

  /* "View.MemoryView":700
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst
 *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start, stop, step
 *     cdef bint have_start, have_stop, have_step
 */
  __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);

  /* "View.MemoryView":704
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {
    __pyx_t_3 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[3]; __pyx_lineno = 704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_v_dim = __pyx_t_6;
    __pyx_t_6 = (__pyx_t_6 + 1);

    /* "View.MemoryView":705
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
    __pyx_t_2 = (PyIndex_Check(__pyx_v_index) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":709
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 *                 index, 0, 0, # start, stop, step             # <<<<<<<<<<<<<<
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 */
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "View.MemoryView":706
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_t_10, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "View.MemoryView":705
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":712
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
    __pyx_t_2 = (__pyx_v_index == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":713
 *                 False)
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 */
      (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;

      /* "View.MemoryView":714
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1
 */
      (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;

      /* "View.MemoryView":715
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
 *             new_ndim += 1
 *         else:
 */
      (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1L;

      /* "View.MemoryView":716
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 *         else:
 *             start = index.start or 0
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

      /* "View.MemoryView":712
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":718
 *             new_ndim += 1
 *         else:
 *             start = index.start or 0             # <<<<<<<<<<<<<<
 *             stop = index.stop or 0
 *             step = index.step or 0
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L7_bool_binop_done:;
      __pyx_v_start = __pyx_t_10;

      /* "View.MemoryView":719
 *         else:
 *             start = index.start or 0
 *             stop = index.stop or 0             # <<<<<<<<<<<<<<
 *             step = index.step or 0
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L9_bool_binop_done:;
      __pyx_v_stop = __pyx_t_10;

      /* "View.MemoryView":720
 *             start = index.start or 0
 *             stop = index.stop or 0
 *             step = index.step or 0             # <<<<<<<<<<<<<<
 * 
 *             have_start = index.start is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L11_bool_binop_done:;
      __pyx_v_step = __pyx_t_10;

      /* "View.MemoryView":722
 *             step = index.step or 0
 * 
 *             have_start = index.start is not None             # <<<<<<<<<<<<<<
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 722; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_start = __pyx_t_1;

      /* "View.MemoryView":723
 * 
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
 *             have_step = index.step is not None
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 723; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_stop = __pyx_t_1;

      /* "View.MemoryView":724
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None             # <<<<<<<<<<<<<<
 * 
 *             slice_memviewslice(
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_step = __pyx_t_1;

      /* "View.MemoryView":726
 *             have_step = index.step is not None
 * 
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "View.MemoryView":732
 *                 have_start, have_stop, have_step,
 *                 True)
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
    }
    __pyx_L6:;

    /* "View.MemoryView":704
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":734
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":735
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":736
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_dtype_func,
 *                                     memview.dtype_is_object)
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 736; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }

    /* "View.MemoryView":737
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 *     else:
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }

    /* "View.MemoryView":735
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":734
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  }

  /* "View.MemoryView":740
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":741
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
 *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "View.MemoryView":740
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":668
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":765
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {
  Py_ssize_t __pyx_v_new_shape;
  int __pyx_v_negative_step;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":785
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
  __pyx_t_1 = ((!(__pyx_v_is_slice != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":787
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    __pyx_t_1 = ((__pyx_v_start < 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":788
 * 
 *         if start < 0:
 *             start += shape             # <<<<<<<<<<<<<<
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 */
      __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

      /* "View.MemoryView":787
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    }

    /* "View.MemoryView":789
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    __pyx_t_1 = (0 <= __pyx_v_start);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);
    }
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":790
 *             start += shape
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
 *     else:
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, __pyx_k_Index_out_of_bounds_axis_d, __pyx_v_dim); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 790; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "View.MemoryView":789
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    }

    /* "View.MemoryView":785
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":793
 *     else:
 * 
 *         negative_step = have_step != 0 and step < 0             # <<<<<<<<<<<<<<
 * 
 *         if have_step and step == 0:
 */
  /*else*/ {
    __pyx_t_1 = ((__pyx_v_have_step != 0) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step < 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L6_bool_binop_done:;
    __pyx_v_negative_step = __pyx_t_2;

    /* "View.MemoryView":795
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    __pyx_t_1 = (__pyx_v_have_step != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step == 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_2) {

      /* "View.MemoryView":796
 * 
 *         if have_step and step == 0:
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, __pyx_k_Step_may_not_be_zero_axis_d, __pyx_v_dim); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "View.MemoryView":795
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    }

    /* "View.MemoryView":799
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
    __pyx_t_2 = (__pyx_v_have_start != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":800
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
      __pyx_t_2 = ((__pyx_v_start < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":801
 *         if have_start:
 *             if start < 0:
 *                 start += shape             # <<<<<<<<<<<<<<
 *                 if start < 0:
 *                     start = 0
 */
        __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

        /* "View.MemoryView":802
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        __pyx_t_2 = ((__pyx_v_start < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":803
 *                 start += shape
 *                 if start < 0:
 *                     start = 0             # <<<<<<<<<<<<<<
 *             elif start >= shape:
 *                 if negative_step:
 */
          __pyx_v_start = 0;

          /* "View.MemoryView":802
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        }

        /* "View.MemoryView":800
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
        goto __pyx_L12;
      }

      /* "View.MemoryView":804
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      __pyx_t_2 = ((__pyx_v_start >= __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":805
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
        __pyx_t_2 = (__pyx_v_negative_step != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":806
 *             elif start >= shape:
 *                 if negative_step:
 *                     start = shape - 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = shape
 */
          __pyx_v_start = (__pyx_v_shape - 1);

          /* "View.MemoryView":805
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
          goto __pyx_L14;
        }

        /* "View.MemoryView":808
 *                     start = shape - 1
 *                 else:
 *                     start = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        /*else*/ {
          __pyx_v_start = __pyx_v_shape;
        }
        __pyx_L14:;

        /* "View.MemoryView":804
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      }
      __pyx_L12:;

      /* "View.MemoryView":799
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
      goto __pyx_L11;
    }

    /* "View.MemoryView":810
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":811
 *         else:
 *             if negative_step:
 *                 start = shape - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 start = 0
 */
        __pyx_v_start = (__pyx_v_shape - 1);

        /* "View.MemoryView":810
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
        goto __pyx_L15;
      }

      /* "View.MemoryView":813
 *                 start = shape - 1
 *             else:
 *                 start = 0             # <<<<<<<<<<<<<<
 * 
 *         if have_stop:
 */
      /*else*/ {
        __pyx_v_start = 0;
      }
      __pyx_L15:;
    }
    __pyx_L11:;

    /* "View.MemoryView":815
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
    __pyx_t_2 = (__pyx_v_have_stop != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":816
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
      __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":817
 *         if have_stop:
 *             if stop < 0:
 *                 stop += shape             # <<<<<<<<<<<<<<
 *                 if stop < 0:
 *                     stop = 0
 */
        __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

        /* "View.MemoryView":818
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":819
 *                 stop += shape
 *                 if stop < 0:
 *                     stop = 0             # <<<<<<<<<<<<<<
 *             elif stop > shape:
 *                 stop = shape
 */
          __pyx_v_stop = 0;

          /* "View.MemoryView":818
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        }

        /* "View.MemoryView":816
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
        goto __pyx_L17;
      }

      /* "View.MemoryView":820
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      __pyx_t_2 = ((__pyx_v_stop > __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":821
 *                     stop = 0
 *             elif stop > shape:
 *                 stop = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        __pyx_v_stop = __pyx_v_shape;

        /* "View.MemoryView":820
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      }
      __pyx_L17:;

      /* "View.MemoryView":815
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
      goto __pyx_L16;
    }

    /* "View.MemoryView":823
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":824
 *         else:
 *             if negative_step:
 *                 stop = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = shape
 */
        __pyx_v_stop = -1L;

        /* "View.MemoryView":823
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
        goto __pyx_L19;
      }

      /* "View.MemoryView":826
 *                 stop = -1
 *             else:
 *                 stop = shape             # <<<<<<<<<<<<<<
 * 
 *         if not have_step:
 */
      /*else*/ {
        __pyx_v_stop = __pyx_v_shape;
      }
      __pyx_L19:;
    }
    __pyx_L16:;

    /* "View.MemoryView":828
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    __pyx_t_2 = ((!(__pyx_v_have_step != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":829
 * 
 *         if not have_step:
 *             step = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_step = 1;

      /* "View.MemoryView":828
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    }

    /* "View.MemoryView":833
 * 
 *         with cython.cdivision(True):
 *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
 * 
 *             if (stop - start) - step * new_shape:
 */
    __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

    /* "View.MemoryView":835
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":836
 * 
 *             if (stop - start) - step * new_shape:
 *                 new_shape += 1             # <<<<<<<<<<<<<<
 * 
 *         if new_shape < 0:
 */
      __pyx_v_new_shape = (__pyx_v_new_shape + 1);

      /* "View.MemoryView":835
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    }

    /* "View.MemoryView":838
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    __pyx_t_2 = ((__pyx_v_new_shape < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":839
 * 
 *         if new_shape < 0:
 *             new_shape = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_new_shape = 0;

      /* "View.MemoryView":838
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    }

    /* "View.MemoryView":842
 * 
 * 
 *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset
 */
    (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

    /* "View.MemoryView":843
 * 
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
 *         dst.suboffsets[new_ndim] = suboffset
 * 
 */
    (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;

    /* "View.MemoryView":844
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;
  }
  __pyx_L3:;

  /* "View.MemoryView":847
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
  __pyx_t_2 = (((__pyx_v_suboffset_dim[0]) < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":848
 * 
 *     if suboffset_dim[0] < 0:
 *         dst.data += start * stride             # <<<<<<<<<<<<<<
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 */
    __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));

    /* "View.MemoryView":847
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
    goto __pyx_L23;
  }

  /* "View.MemoryView":850
 *         dst.data += start * stride
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
 * 
 *     if suboffset >= 0:
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_suboffset_dim[0]);
    (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));
  }
  __pyx_L23:;

  /* "View.MemoryView":852
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":853
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
    __pyx_t_2 = ((!(__pyx_v_is_slice != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":854
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
      __pyx_t_2 = ((__pyx_v_new_ndim == 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":855
 *         if not is_slice:
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 */
        __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);

        /* "View.MemoryView":854
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
        goto __pyx_L26;
      }

      /* "View.MemoryView":857
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
 *                                      "must be indexed and not sliced", dim)
 *         else:
 */
      /*else*/ {

        /* "View.MemoryView":858
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 *                                      "must be indexed and not sliced", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             suboffset_dim[0] = new_ndim
 */
        __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, __pyx_k_All_dimensions_preceding_dimensi, __pyx_v_dim); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L26:;

      /* "View.MemoryView":853
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
      goto __pyx_L25;
    }

    /* "View.MemoryView":860
 *                                      "must be indexed and not sliced", dim)
 *         else:
 *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
    /*else*/ {
      (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;
    }
    __pyx_L25:;

    /* "View.MemoryView":852
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  }

  /* "View.MemoryView":862
 *             suboffset_dim[0] = new_ndim
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":765
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":868
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_suboffset;
  Py_ssize_t __pyx_v_itemsize;
  char *__pyx_v_resultp;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pybuffer_index", 0);

  /* "View.MemoryView":870
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t itemsize = view.itemsize
 *     cdef char *resultp
 */
  __pyx_v_suboffset = -1L;

  /* "View.MemoryView":871
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
 *     cdef char *resultp
 * 
 */
  __pyx_t_1 = __pyx_v_view->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":874
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
  __pyx_t_2 = ((__pyx_v_view->ndim == 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":875
 * 
 *     if view.ndim == 0:
 *         shape = view.len / itemsize             # <<<<<<<<<<<<<<
 *         stride = itemsize
 *     else:
 */
    if (unlikely(__pyx_v_itemsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 875; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 875; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_shape = __Pyx_div_Py_ssize_t(__pyx_v_view->len, __pyx_v_itemsize);

    /* "View.MemoryView":876
 *     if view.ndim == 0:
 *         shape = view.len / itemsize
 *         stride = itemsize             # <<<<<<<<<<<<<<
 *     else:
 *         shape = view.shape[dim]
 */
    __pyx_v_stride = __pyx_v_itemsize;

    /* "View.MemoryView":874
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":878
 *         stride = itemsize
 *     else:
 *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 */
  /*else*/ {
    __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

    /* "View.MemoryView":879
 *     else:
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]
 */
    __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

    /* "View.MemoryView":880
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    __pyx_t_2 = ((__pyx_v_view->suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":881
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 *     if index < 0:
 */
      __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);

      /* "View.MemoryView":880
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":883
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  __pyx_t_2 = ((__pyx_v_index < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":884
 * 
 *     if index < 0:
 *         index += view.shape[dim]             # <<<<<<<<<<<<<<
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 */
    __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

    /* "View.MemoryView":885
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    __pyx_t_2 = ((__pyx_v_index < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":886
 *         index += view.shape[dim]
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     if index >= shape:
 */
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "View.MemoryView":885
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    }

    /* "View.MemoryView":883
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  }

  /* "View.MemoryView":888
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_index >= __pyx_v_shape) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":889
 * 
 *     if index >= shape:
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     resultp = bufp + index * stride
 */
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "View.MemoryView":888
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  }

  /* "View.MemoryView":891
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset
 */
  __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

  /* "View.MemoryView":892
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":893
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
 * 
 *     return resultp
 */
    __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);

    /* "View.MemoryView":892
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  }

  /* "View.MemoryView":895
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 *     return resultp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_resultp;
  goto __pyx_L0;

  /* "View.MemoryView":868
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":901
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {
  int __pyx_v_ndim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  long __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":902
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:
 *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 */
  __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;
  __pyx_v_ndim = __pyx_t_1;

  /* "View.MemoryView":904
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t *strides = memslice.strides
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->shape;
  __pyx_v_shape = __pyx_t_2;

  /* "View.MemoryView":905
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->strides;
  __pyx_v_strides = __pyx_t_2;

  /* "View.MemoryView":909
 * 
 *     cdef int i, j
 *     for i in range(ndim / 2):             # <<<<<<<<<<<<<<
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 */
  __pyx_t_3 = __Pyx_div_long(__pyx_v_ndim, 2);
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_3; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":910
 *     cdef int i, j
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]
 */
    __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);

    /* "View.MemoryView":911
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 */
    __pyx_t_4 = (__pyx_v_strides[__pyx_v_j]);
    __pyx_t_5 = (__pyx_v_strides[__pyx_v_i]);
    (__pyx_v_strides[__pyx_v_i]) = __pyx_t_4;
    (__pyx_v_strides[__pyx_v_j]) = __pyx_t_5;

    /* "View.MemoryView":912
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 */
    __pyx_t_5 = (__pyx_v_shape[__pyx_v_j]);
    __pyx_t_4 = (__pyx_v_shape[__pyx_v_i]);
    (__pyx_v_shape[__pyx_v_i]) = __pyx_t_5;
    (__pyx_v_shape[__pyx_v_j]) = __pyx_t_4;

    /* "View.MemoryView":914
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    __pyx_t_7 = (((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0) != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = (((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_6) {

      /* "View.MemoryView":915
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
 * 
 *     return 1
 */
      __pyx_t_8 = __pyx_memoryview_err(__pyx_builtin_ValueError, __pyx_k_Cannot_transpose_memoryview_with); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "View.MemoryView":914
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    }
  }

  /* "View.MemoryView":917
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "View.MemoryView":901
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":934
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

/* Python wrapper */
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":935
 * 
 *     def __dealloc__(self):
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __PYX_XDEC_MEMVIEW((&__pyx_v_self->from_slice), 1);

  /* "View.MemoryView":934
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":937
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":938
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_object_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":939
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 939; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":938
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  }

  /* "View.MemoryView":941
 *             return self.to_object_func(itemp)
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_memoryview_convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":937
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":943
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":944
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_dtype_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":945
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)
 */
    __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "View.MemoryView":944
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":947
 *             self.to_dtype_func(itemp, value)
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     property base:
 */
  /*else*/ {
    __pyx_t_3 = __pyx_memoryview_assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":943
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":951
 *     property base:
 *         @cname('__pyx_memoryviewslice__get__base')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.from_object
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryviewslice__get__base(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryviewslice__get__base(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":952
 *         @cname('__pyx_memoryviewslice__get__base')
 *         def __get__(self):
 *             return self.from_object             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->from_object);
  __pyx_r = __pyx_v_self->from_object;
  goto __pyx_L0;

  /* "View.MemoryView":951
 *     property base:
 *         @cname('__pyx_memoryviewslice__get__base')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.from_object
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":958
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_TypeInfo *__pyx_t_4;
  Py_buffer __pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  Py_ssize_t *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_fromslice", 0);

  /* "View.MemoryView":966
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = ((((PyObject *)__pyx_v_memviewslice.memview) == Py_None) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":967
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "View.MemoryView":966
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "View.MemoryView":972
 * 
 * 
 *     result = _memoryviewslice(None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     result.from_slice = memviewslice
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryviewslice_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":974
 *     result = _memoryviewslice(None, 0, dtype_is_object)
 * 
 *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 */
  __pyx_v_result->from_slice = __pyx_v_memviewslice;

  /* "View.MemoryView":975
 * 
 *     result.from_slice = memviewslice
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 */
  __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

  /* "View.MemoryView":977
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base             # <<<<<<<<<<<<<<
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_memviewslice.memview), __pyx_n_s_base); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 977; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_result->from_object);
  __Pyx_DECREF(__pyx_v_result->from_object);
  __pyx_v_result->from_object = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "View.MemoryView":978
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
 * 
 *     result.view = memviewslice.memview.view
 */
  __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;
  __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

  /* "View.MemoryView":980
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 */
  __pyx_t_5 = __pyx_v_memviewslice.memview->view;
  __pyx_v_result->__pyx_base.view = __pyx_t_5;

  /* "View.MemoryView":981
 * 
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 */
  __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

  /* "View.MemoryView":982
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)
 */
  __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;

  /* "View.MemoryView":983
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
 *     Py_INCREF(Py_None)
 * 
 */
  ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;

  /* "View.MemoryView":984
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     result.flags = PyBUF_RECORDS
 */
  Py_INCREF(Py_None);

  /* "View.MemoryView":986
 *     Py_INCREF(Py_None)
 * 
 *     result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 */
  __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;

  /* "View.MemoryView":988
 *     result.flags = PyBUF_RECORDS
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 * 
 */
  __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);

  /* "View.MemoryView":989
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);

  /* "View.MemoryView":992
 * 
 * 
 *     result.view.suboffsets = NULL             # <<<<<<<<<<<<<<
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 */
  __pyx_v_result->__pyx_base.view.suboffsets = NULL;

  /* "View.MemoryView":993
 * 
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 */
  __pyx_t_7 = (__pyx_v_result->from_slice.suboffsets + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->from_slice.suboffsets; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_v_suboffset = (__pyx_t_6[0]);

    /* "View.MemoryView":994
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    __pyx_t_1 = ((__pyx_v_suboffset >= 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":995
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

      /* "View.MemoryView":996
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break             # <<<<<<<<<<<<<<
 * 
 *     result.view.len = result.view.itemsize
 */
      goto __pyx_L5_break;

      /* "View.MemoryView":994
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    }
  }
  __pyx_L5_break:;

  /* "View.MemoryView":998
 *             break
 * 
 *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length
 */
  __pyx_t_9 = __pyx_v_result->__pyx_base.view.itemsize;
  __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

  /* "View.MemoryView":999
 * 
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         result.view.len *= length
 * 
 */
  __pyx_t_7 = (__pyx_v_result->__pyx_base.view.shape + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->__pyx_base.view.shape; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 999; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":1000
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length             # <<<<<<<<<<<<<<
 * 
 *     result.to_object_func = to_object_func
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result->__pyx_base.view.len = __pyx_t_9;
  }

  /* "View.MemoryView":1002
 *         result.view.len *= length
 * 
 *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
 *     result.to_dtype_func = to_dtype_func
 * 
 */
  __pyx_v_result->to_object_func = __pyx_v_to_object_func;

  /* "View.MemoryView":1003
 * 
 *     result.to_object_func = to_object_func
 *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;

  /* "View.MemoryView":1005
 *     result.to_dtype_func = to_dtype_func
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":958
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1008
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 */

static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {
  struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0;
  __Pyx_memviewslice *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_slice_from_memview", 0);

  /* "View.MemoryView":1011
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1012
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview             # <<<<<<<<<<<<<<
 *         return &obj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1012; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":1013
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview
 *         return &obj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, mslice)
 */
    __pyx_r = (&__pyx_v_obj->from_slice);
    goto __pyx_L0;

    /* "View.MemoryView":1011
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  }

  /* "View.MemoryView":1015
 *         return &obj.from_slice
 *     else:
 *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
 *         return mslice
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

    /* "View.MemoryView":1016
 *     else:
 *         slice_copy(memview, mslice)
 *         return mslice             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_slice_copy')
 */
    __pyx_r = __pyx_v_mslice;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1008
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1019
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_dst) {
  int __pyx_v_dim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  Py_ssize_t *__pyx_v_suboffsets;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  __Pyx_RefNannySetupContext("slice_copy", 0);

  /* "View.MemoryView":1023
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 * 
 *     shape = memview.view.shape             # <<<<<<<<<<<<<<
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets
 */
  __pyx_t_1 = __pyx_v_memview->view.shape;
  __pyx_v_shape = __pyx_t_1;

  /* "View.MemoryView":1024
 * 
 *     shape = memview.view.shape
 *     strides = memview.view.strides             # <<<<<<<<<<<<<<
 *     suboffsets = memview.view.suboffsets
 * 
 */
  __pyx_t_1 = __pyx_v_memview->view.strides;
  __pyx_v_strides = __pyx_t_1;

  /* "View.MemoryView":1025
 *     shape = memview.view.shape
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 */
  __pyx_t_1 = __pyx_v_memview->view.suboffsets;
  __pyx_v_suboffsets = __pyx_t_1;

  /* "View.MemoryView":1027
 *     suboffsets = memview.view.suboffsets
 * 
 *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
 *     dst.data = <char *> memview.view.buf
 * 
 */
  __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

  /* "View.MemoryView":1028
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
 * 
 *     for dim in range(memview.view.ndim):
 */
  __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

  /* "View.MemoryView":1030
 *     dst.data = <char *> memview.view.buf
 * 
 *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 */
  __pyx_t_2 = __pyx_v_memview->view.ndim;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_dim = __pyx_t_3;

    /* "View.MemoryView":1031
 * 
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 */
    (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

    /* "View.MemoryView":1032
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
 */
    (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

    /* "View.MemoryView":1033
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object')
 */
    if ((__pyx_v_suboffsets != 0)) {
      __pyx_t_4 = (__pyx_v_suboffsets[__pyx_v_dim]);
    } else {
      __pyx_t_4 = -1L;
    }
    (__pyx_v_dst->suboffsets[__pyx_v_dim]) = __pyx_t_4;
  }

  /* "View.MemoryView":1019
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1036
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {
  __Pyx_memviewslice __pyx_v_memviewslice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy", 0);

  /* "View.MemoryView":1039
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 */
  __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

  /* "View.MemoryView":1040
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)
 *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1036
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1043
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {
  PyObject *(*__pyx_v_to_object_func)(char *);
  int (*__pyx_v_to_dtype_func)(char *, PyObject *);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *(*__pyx_t_3)(char *);
  int (*__pyx_t_4)(char *, PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 0);

  /* "View.MemoryView":1050
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1051
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 */
    __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;
    __pyx_v_to_object_func = __pyx_t_3;

    /* "View.MemoryView":1052
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
 *     else:
 *         to_object_func = NULL
 */
    __pyx_t_4 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;
    __pyx_v_to_dtype_func = __pyx_t_4;

    /* "View.MemoryView":1050
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1054
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 *         to_object_func = NULL             # <<<<<<<<<<<<<<
 *         to_dtype_func = NULL
 * 
 */
  /*else*/ {
    __pyx_v_to_object_func = NULL;

    /* "View.MemoryView":1055
 *     else:
 *         to_object_func = NULL
 *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 */
    __pyx_v_to_dtype_func = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":1057
 *         to_dtype_func = NULL
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "View.MemoryView":1059
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1057; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1043
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1065
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

static Py_ssize_t abs_py_ssize_t(Py_ssize_t __pyx_v_arg) {
  Py_ssize_t __pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":1066
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arg < 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1067
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:
 *         return -arg             # <<<<<<<<<<<<<<
 *     else:
 *         return arg
 */
    __pyx_r = (-__pyx_v_arg);
    goto __pyx_L0;

    /* "View.MemoryView":1066
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  }

  /* "View.MemoryView":1069
 *         return -arg
 *     else:
 *         return arg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_get_best_slice_order')
 */
  /*else*/ {
    __pyx_r = __pyx_v_arg;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1065
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1072
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_c_stride;
  Py_ssize_t __pyx_v_f_stride;
  char __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1077
 *     """
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t f_stride = 0
 * 
 */
  __pyx_v_c_stride = 0;

  /* "View.MemoryView":1078
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0
 *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_f_stride = 0;

  /* "View.MemoryView":1080
 *     cdef Py_ssize_t f_stride = 0
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1L; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1081
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1082
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1083
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
      goto __pyx_L4_break;

      /* "View.MemoryView":1081
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L4_break:;

  /* "View.MemoryView":1085
 *             break
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 */
  __pyx_t_1 = __pyx_v_ndim;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_1; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1086
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1087
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1088
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 */
      goto __pyx_L7_break;

      /* "View.MemoryView":1086
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L7_break:;

  /* "View.MemoryView":1090
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  __pyx_t_2 = ((abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1091
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'F'
 */
    __pyx_r = 'C';
    goto __pyx_L0;

    /* "View.MemoryView":1090
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  }

  /* "View.MemoryView":1093
 *         return 'C'
 *     else:
 *         return 'F'             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  /*else*/ {
    __pyx_r = 'F';
    goto __pyx_L0;
  }

  /* "View.MemoryView":1072
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1096
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent;
  Py_ssize_t __pyx_v_dst_extent;
  Py_ssize_t __pyx_v_src_stride;
  Py_ssize_t __pyx_v_dst_stride;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;

  /* "View.MemoryView":1103
 * 
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 */
  __pyx_v_src_extent = (__pyx_v_src_shape[0]);

  /* "View.MemoryView":1104
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 */
  __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

  /* "View.MemoryView":1105
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 */
  __pyx_v_src_stride = (__pyx_v_src_strides[0]);

  /* "View.MemoryView":1106
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);

  /* "View.MemoryView":1108
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1109
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    __pyx_t_2 = ((__pyx_v_src_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_dst_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }

    /* "View.MemoryView":1110
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 */
    __pyx_t_2 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));
    }
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;

    /* "View.MemoryView":1109
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    if (__pyx_t_1) {

      /* "View.MemoryView":1111
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
 *        else:
 *            for i in range(dst_extent):
 */
      memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent));

      /* "View.MemoryView":1109
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":1113
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 *            for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_dst_extent;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_v_i = __pyx_t_5;

        /* "View.MemoryView":1114
 *        else:
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
 *                src_data += src_stride
 *                dst_data += dst_stride
 */
        memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize);

        /* "View.MemoryView":1115
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride             # <<<<<<<<<<<<<<
 *                dst_data += dst_stride
 *     else:
 */
        __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

        /* "View.MemoryView":1116
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 *                dst_data += dst_stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dst_extent):
 */
        __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
      }
    }
    __pyx_L4:;

    /* "View.MemoryView":1108
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1118
 *                dst_data += dst_stride
 *     else:
 *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *             _copy_strided_to_strided(src_data, src_strides + 1,
 *                                      dst_data, dst_strides + 1,
 */
  /*else*/ {
    __pyx_t_4 = __pyx_v_dst_extent;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "View.MemoryView":1119
 *     else:
 *         for i in range(dst_extent):
 *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
 *                                      dst_data, dst_strides + 1,
 *                                      src_shape + 1, dst_shape + 1,
 */
      _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

      /* "View.MemoryView":1123
 *                                      src_shape + 1, dst_shape + 1,
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride             # <<<<<<<<<<<<<<
 *             dst_data += dst_stride
 * 
 */
      __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

      /* "View.MemoryView":1124
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride
 *             dst_data += dst_stride             # <<<<<<<<<<<<<<
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
 */
      __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1096
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

  /* function exit code */
}

/* "View.MemoryView":1126
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {

  /* "View.MemoryView":1129
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 */
  _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1126
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1133
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 */

static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *__pyx_v_src, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_size;
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1136
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 *     cdef Py_ssize_t size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_size = __pyx_t_1;

  /* "View.MemoryView":1138
 *     cdef Py_ssize_t size = src.memview.view.itemsize
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         size *= src.shape[i]
 * 
 */
  __pyx_t_2 = __pyx_v_ndim;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1139
 * 
 *     for i in range(ndim):
 *         size *= src.shape[i]             # <<<<<<<<<<<<<<
 * 
 *     return size
 */
    __pyx_v_size = (__pyx_v_size * (__pyx_v_src->shape[__pyx_v_i]));
  }

  /* "View.MemoryView":1141
 *         size *= src.shape[i]
 * 
 *     return size             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_fill_contig_strides_array')
 */
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "View.MemoryView":1133
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1144
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, Py_ssize_t __pyx_v_stride, int __pyx_v_ndim, char __pyx_v_order) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1153
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
  __pyx_t_1 = ((__pyx_v_order == 'F') != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1154
 * 
 *     if order == 'F':
 *         for idx in range(ndim):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride = stride * shape[idx]
 */
    __pyx_t_2 = __pyx_v_ndim;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_idx = __pyx_t_3;

      /* "View.MemoryView":1155
 *     if order == 'F':
 *         for idx in range(ndim):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride = stride * shape[idx]
 *     else:
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1156
 *         for idx in range(ndim):
 *             strides[idx] = stride
 *             stride = stride * shape[idx]             # <<<<<<<<<<<<<<
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }

    /* "View.MemoryView":1153
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1158
 *             stride = stride * shape[idx]
 *     else:
 *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride = stride * shape[idx]
 */
  /*else*/ {
    for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1L; __pyx_t_2-=1) {
      __pyx_v_idx = __pyx_t_2;

      /* "View.MemoryView":1159
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride = stride * shape[idx]
 * 
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1160
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride
 *             stride = stride * shape[idx]             # <<<<<<<<<<<<<<
 * 
 *     return stride
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1162
 *             stride = stride * shape[idx]
 * 
 *     return stride             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 */
  __pyx_r = __pyx_v_stride;
  goto __pyx_L0;

  /* "View.MemoryView":1144
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1165
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {
  int __pyx_v_i;
  void *__pyx_v_result;
  size_t __pyx_v_itemsize;
  size_t __pyx_v_size;
  void *__pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_memoryview_obj *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1176
 *     cdef void *result
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1177
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
 * 
 *     result = malloc(size)
 */
  __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

  /* "View.MemoryView":1179
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 *     result = malloc(size)             # <<<<<<<<<<<<<<
 *     if not result:
 *         _err(MemoryError, NULL)
 */
  __pyx_v_result = malloc(__pyx_v_size);

  /* "View.MemoryView":1180
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_result != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1181
 *     result = malloc(size)
 *     if not result:
 *         _err(MemoryError, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_err(__pyx_builtin_MemoryError, NULL); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "View.MemoryView":1180
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  }

  /* "View.MemoryView":1184
 * 
 * 
 *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 */
  __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

  /* "View.MemoryView":1185
 * 
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 */
  __pyx_t_4 = __pyx_v_src->memview;
  __pyx_v_tmpslice->memview = __pyx_t_4;

  /* "View.MemoryView":1186
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1
 */
  __pyx_t_3 = __pyx_v_ndim;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_3; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "View.MemoryView":1187
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
 *         tmpslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);

    /* "View.MemoryView":1188
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,
 */
    (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1190
 *         tmpslice.suboffsets[i] = -1
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,             # <<<<<<<<<<<<<<
 *                               ndim, order)
 * 
 */
  __pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order);

  /* "View.MemoryView":1194
 * 
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0
 */
  __pyx_t_3 = __pyx_v_ndim;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_3; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "View.MemoryView":1195
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    __pyx_t_2 = (((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1196
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     if slice_is_contig(src, order, ndim):
 */
      (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;

      /* "View.MemoryView":1195
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    }
  }

  /* "View.MemoryView":1198
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
  __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1199
 * 
 *     if slice_is_contig(src, order, ndim):
 *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 */
    memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size);

    /* "View.MemoryView":1198
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":1201
 *         memcpy(result, src.data, size)
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  /*else*/ {
    copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);
  }
  __pyx_L9:;

  /* "View.MemoryView":1203
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":1165
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1208
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_extents", 0);

  /* "View.MemoryView":1211
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 *                                                         (i, extent1, extent2))             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_dim')
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_extent1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_extent2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "View.MemoryView":1210
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %             # <<<<<<<<<<<<<<
 *                                                         (i, extent1, extent2))
 * 
 */
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "View.MemoryView":1208
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1214
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, char *__pyx_v_msg, int __pyx_v_dim) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_dim", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1215
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:
 *     raise error(msg.decode('ascii') % dim)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err')
 */
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyUnicode_Format(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_v_error);
  __pyx_t_3 = __pyx_v_error; __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "View.MemoryView":1214
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1218
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

static int __pyx_memoryview_err(PyObject *__pyx_v_error, char *__pyx_v_msg) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1219
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1220
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))             # <<<<<<<<<<<<<<
 *     else:
 *         raise error
 */
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_error);
    __pyx_t_4 = __pyx_v_error; __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "View.MemoryView":1219
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  }

  /* "View.MemoryView":1222
 *         raise error(msg.decode('ascii'))
 *     else:
 *         raise error             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_contents')
 */
  /*else*/ {
    __Pyx_Raise(__pyx_v_error, 0, 0, 0);
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "View.MemoryView":1218
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1225
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {
  void *__pyx_v_tmpdata;
  size_t __pyx_v_itemsize;
  int __pyx_v_i;
  char __pyx_v_order;
  int __pyx_v_broadcasting;
  int __pyx_v_direct_copy;
  __Pyx_memviewslice __pyx_v_tmp;
  int __pyx_v_ndim;
  int __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  void *__pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1233
 *     Check for overlapping memory and verify the shapes.
 *     """
 *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 */
  __pyx_v_tmpdata = NULL;

  /* "View.MemoryView":1234
 *     """
 *     cdef void *tmpdata = NULL
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 */
  __pyx_t_1 = __pyx_v_src.memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1236
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False
 */
  __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

  /* "View.MemoryView":1237
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
 *     cdef bint direct_copy = False
 *     cdef __Pyx_memviewslice tmp
 */
  __pyx_v_broadcasting = 0;

  /* "View.MemoryView":1238
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
 *     cdef __Pyx_memviewslice tmp
 * 
 */
  __pyx_v_direct_copy = 0;

  /* "View.MemoryView":1241
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
  __pyx_t_2 = ((__pyx_v_src_ndim < __pyx_v_dst_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1242
 * 
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);

    /* "View.MemoryView":1241
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1243
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_dst_ndim < __pyx_v_src_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1244
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);

    /* "View.MemoryView":1243
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":1246
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_3 = __pyx_v_dst_ndim;
  __pyx_t_4 = __pyx_v_src_ndim;
  if (((__pyx_t_3 > __pyx_t_4) != 0)) {
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_v_ndim = __pyx_t_5;

  /* "View.MemoryView":1248
 *     cdef int ndim = max(src_ndim, dst_ndim)
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 */
  __pyx_t_5 = __pyx_v_ndim;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_5; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1249
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i])) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1250
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
      __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) == 1) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":1251
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 *                 broadcasting = True             # <<<<<<<<<<<<<<
 *                 src.strides[i] = 0
 *             else:
 */
        __pyx_v_broadcasting = 1;

        /* "View.MemoryView":1252
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 */
        (__pyx_v_src.strides[__pyx_v_i]) = 0;

        /* "View.MemoryView":1250
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":1254
 *                 src.strides[i] = 0
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if src.suboffsets[i] >= 0:
 */
      /*else*/ {
        __pyx_t_4 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L7:;

      /* "View.MemoryView":1249
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    }

    /* "View.MemoryView":1256
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    __pyx_t_2 = (((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1257
 * 
 *         if src.suboffsets[i] >= 0:
 *             _err_dim(ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 */
      __pyx_t_4 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, __pyx_k_Dimension_d_is_not_direct, __pyx_v_i); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "View.MemoryView":1256
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    }
  }

  /* "View.MemoryView":1259
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(&src, order, ndim):
 */
  __pyx_t_2 = (__pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1261
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(&src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    __pyx_t_2 = ((!(__pyx_memviewslice_is_contig((&__pyx_v_src), __pyx_v_order, __pyx_v_ndim) != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1262
 * 
 *         if not slice_is_contig(&src, order, ndim):
 *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 */
      __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);

      /* "View.MemoryView":1261
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(&src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    }

    /* "View.MemoryView":1264
 *             order = get_best_order(&dst, ndim)
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
 *         src = tmp
 * 
 */
    __pyx_t_6 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_tmpdata = __pyx_t_6;

    /* "View.MemoryView":1265
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 *         src = tmp             # <<<<<<<<<<<<<<
 * 
 *     if not broadcasting:
 */
    __pyx_v_src = __pyx_v_tmp;

    /* "View.MemoryView":1259
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(&src, order, ndim):
 */
  }

  /* "View.MemoryView":1267
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_broadcasting != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1270
 * 
 * 
 *         if slice_is_contig(&src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(&dst, 'C', ndim)
 *         elif slice_is_contig(&src, 'F', ndim):
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig((&__pyx_v_src), 'C', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1271
 * 
 *         if slice_is_contig(&src, 'C', ndim):
 *             direct_copy = slice_is_contig(&dst, 'C', ndim)             # <<<<<<<<<<<<<<
 *         elif slice_is_contig(&src, 'F', ndim):
 *             direct_copy = slice_is_contig(&dst, 'F', ndim)
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig((&__pyx_v_dst), 'C', __pyx_v_ndim);

      /* "View.MemoryView":1270
 * 
 * 
 *         if slice_is_contig(&src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(&dst, 'C', ndim)
 *         elif slice_is_contig(&src, 'F', ndim):
 */
      goto __pyx_L12;
    }

    /* "View.MemoryView":1272
 *         if slice_is_contig(&src, 'C', ndim):
 *             direct_copy = slice_is_contig(&dst, 'C', ndim)
 *         elif slice_is_contig(&src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(&dst, 'F', ndim)
 * 
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig((&__pyx_v_src), 'F', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1273
 *             direct_copy = slice_is_contig(&dst, 'C', ndim)
 *         elif slice_is_contig(&src, 'F', ndim):
 *             direct_copy = slice_is_contig(&dst, 'F', ndim)             # <<<<<<<<<<<<<<
 * 
 *         if direct_copy:
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig((&__pyx_v_dst), 'F', __pyx_v_ndim);

      /* "View.MemoryView":1272
 *         if slice_is_contig(&src, 'C', ndim):
 *             direct_copy = slice_is_contig(&dst, 'C', ndim)
 *         elif slice_is_contig(&src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(&dst, 'F', ndim)
 * 
 */
    }
    __pyx_L12:;

    /* "View.MemoryView":1275
 *             direct_copy = slice_is_contig(&dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_2 = (__pyx_v_direct_copy != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1277
 *         if direct_copy:
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

      /* "View.MemoryView":1278
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 */
      memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim));

      /* "View.MemoryView":1279
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 *             free(tmpdata)
 *             return 0
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

      /* "View.MemoryView":1280
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      free(__pyx_v_tmpdata);

      /* "View.MemoryView":1281
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "View.MemoryView":1275
 *             direct_copy = slice_is_contig(&dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    }

    /* "View.MemoryView":1267
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1283
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (__pyx_v_order == 'F');
  if (__pyx_t_2) {
    __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));
  }
  __pyx_t_7 = (__pyx_t_2 != 0);
  if (__pyx_t_7) {

    /* "View.MemoryView":1286
 * 
 * 
 *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&dst)
 * 
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "View.MemoryView":1287
 * 
 *         transpose_memslice(&src)
 *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "View.MemoryView":1283
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1289
 *         transpose_memslice(&dst)
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1290
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 */
  copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1291
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 *     free(tmpdata)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1293
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 *     free(tmpdata)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  free(__pyx_v_tmpdata);

  /* "View.MemoryView":1294
 * 
 *     free(tmpdata)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1225
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1297
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim, int __pyx_v_ndim_other) {
  int __pyx_v_i;
  int __pyx_v_offset;
  int __pyx_t_1;
  int __pyx_t_2;

  /* "View.MemoryView":1301
 *                             int ndim_other) nogil:
 *     cdef int i
 *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);

  /* "View.MemoryView":1303
 *     cdef int offset = ndim_other - ndim
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1L; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1304
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]             # <<<<<<<<<<<<<<
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 */
    (__pyx_v_mslice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->shape[__pyx_v_i]);

    /* "View.MemoryView":1305
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 */
    (__pyx_v_mslice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->strides[__pyx_v_i]);

    /* "View.MemoryView":1306
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(offset):
 */
    (__pyx_v_mslice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->suboffsets[__pyx_v_i]);
  }

  /* "View.MemoryView":1308
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 *     for i in range(offset):             # <<<<<<<<<<<<<<
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 */
  __pyx_t_1 = __pyx_v_offset;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "View.MemoryView":1309
 * 
 *     for i in range(offset):
 *         mslice.shape[i] = 1             # <<<<<<<<<<<<<<
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1
 */
    (__pyx_v_mslice->shape[__pyx_v_i]) = 1;

    /* "View.MemoryView":1310
 *     for i in range(offset):
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_mslice->strides[__pyx_v_i]) = (__pyx_v_mslice->strides[0]);

    /* "View.MemoryView":1311
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_mslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1297
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1319
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_dtype_is_object, int __pyx_v_ndim, int __pyx_v_inc) {
  int __pyx_t_1;

  /* "View.MemoryView":1323
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  __pyx_t_1 = (__pyx_v_dtype_is_object != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1324
 * 
 *     if dtype_is_object:
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,             # <<<<<<<<<<<<<<
 *                                            dst.strides, ndim, inc)
 * 
 */
    __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);

    /* "View.MemoryView":1323
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  }

  /* "View.MemoryView":1319
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

  /* function exit code */
}

/* "View.MemoryView":1328
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  __Pyx_RefNannyDeclarations
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("refcount_objects_in_slice_with_gil", 0);

  /* "View.MemoryView":1331
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 */
  __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

  /* "View.MemoryView":1328
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "View.MemoryView":1334
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("refcount_objects_in_slice", 0);

  /* "View.MemoryView":1338
 *     cdef Py_ssize_t i
 * 
 *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
 *         if ndim == 1:
 *             if inc:
 */
  __pyx_t_1 = (__pyx_v_shape[0]);
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "View.MemoryView":1339
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
    __pyx_t_3 = ((__pyx_v_ndim == 1) != 0);
    if (__pyx_t_3) {

      /* "View.MemoryView":1340
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
      __pyx_t_3 = (__pyx_v_inc != 0);
      if (__pyx_t_3) {

        /* "View.MemoryView":1341
 *         if ndim == 1:
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])
 */
        Py_INCREF((((PyObject **)__pyx_v_data)[0]));

        /* "View.MemoryView":1340
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
        goto __pyx_L6;
      }

      /* "View.MemoryView":1343
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 */
      /*else*/ {
        Py_DECREF((((PyObject **)__pyx_v_data)[0]));
      }
      __pyx_L6:;

      /* "View.MemoryView":1339
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":1345
 *                 Py_DECREF((<PyObject **> data)[0])
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                       ndim - 1, inc)
 * 
 */
    /*else*/ {

      /* "View.MemoryView":1346
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 *                                       ndim - 1, inc)             # <<<<<<<<<<<<<<
 * 
 *         data += strides[0]
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);
    }
    __pyx_L5:;

    /* "View.MemoryView":1348
 *                                       ndim - 1, inc)
 * 
 *         data += strides[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_data = (__pyx_v_data + (__pyx_v_strides[0]));
  }

  /* "View.MemoryView":1334
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1354
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {

  /* "View.MemoryView":1357
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1358
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,             # <<<<<<<<<<<<<<
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

  /* "View.MemoryView":1360
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1354
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1364
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_extent;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;

  /* "View.MemoryView":1368
 *                               size_t itemsize, void *item) nogil:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t extent = shape[0]
 * 
 */
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1369
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]
 *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_extent = (__pyx_v_shape[0]);

  /* "View.MemoryView":1371
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1372
 * 
 *     if ndim == 1:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             memcpy(data, item, itemsize)
 *             data += stride
 */
    __pyx_t_2 = __pyx_v_extent;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "View.MemoryView":1373
 *     if ndim == 1:
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
 *             data += stride
 *     else:
 */
      memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize);

      /* "View.MemoryView":1374
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 *             data += stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(extent):
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }

    /* "View.MemoryView":1371
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1376
 *             data += stride
 *     else:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_extent;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "View.MemoryView":1377
 *     else:
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                 ndim - 1, itemsize, item)
 *             data += stride
 */
      __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

      /* "View.MemoryView":1379
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 *             data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1364
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

  /* function exit code */
}

/* "FromPyStructUtility":11
 * 
 * @cname("__pyx_convert__from_py_epicsTimeStamp")
 * cdef epicsTimeStamp __pyx_convert__from_py_epicsTimeStamp(obj) except *:             # <<<<<<<<<<<<<<
 *     cdef epicsTimeStamp result
 *     if not PyMapping_Check(obj):
 */

static struct epicsTimeStamp __pyx_convert__from_py_epicsTimeStamp(PyObject *__pyx_v_obj) {
  struct epicsTimeStamp __pyx_v_result;
  PyObject *__pyx_v_value = NULL;
  struct epicsTimeStamp __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert__from_py_epicsTimeStamp", 0);

  /* "FromPyStructUtility":13
 * cdef epicsTimeStamp __pyx_convert__from_py_epicsTimeStamp(obj) except *:
 *     cdef epicsTimeStamp result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 */
  __pyx_t_1 = ((!(PyMapping_Check(__pyx_v_obj) != 0)) != 0);
  if (__pyx_t_1) {

    /* "FromPyStructUtility":14
 *     cdef epicsTimeStamp result
 *     if not PyMapping_Check(obj):
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
    __pyx_t_2 = PyErr_Format(__pyx_builtin_TypeError, __pyx_k_Expected_16s_got_200s, __pyx_k_a_mapping, Py_TYPE(__pyx_v_obj)->tp_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "FromPyStructUtility":13
 * cdef epicsTimeStamp __pyx_convert__from_py_epicsTimeStamp(obj) except *:
 *     cdef epicsTimeStamp result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 */
  }

  /* "FromPyStructUtility":16
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['secPastEpoch']
 *     except KeyError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":17
 * 
 *     try:
 *         value = obj['secPastEpoch']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'secPastEpoch'")
 */
      __pyx_t_2 = PyObject_GetItem(__pyx_v_obj, __pyx_n_s_secPastEpoch); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L4_error;};
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_value = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "FromPyStructUtility":16
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['secPastEpoch']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L11_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "FromPyStructUtility":18
 *     try:
 *         value = obj['secPastEpoch']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'secPastEpoch'")
 *     result.secPastEpoch = value
 */
    __pyx_t_6 = PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_epicsTimeStamp", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "FromPyStructUtility":19
 *         value = obj['secPastEpoch']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'secPastEpoch'")             # <<<<<<<<<<<<<<
 *     result.secPastEpoch = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__234, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;

    /* "FromPyStructUtility":16
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['secPastEpoch']
 *     except KeyError:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L11_try_end:;
  }

  /* "FromPyStructUtility":20
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'secPastEpoch'")
 *     result.secPastEpoch = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['nsec']
 */
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_result.secPastEpoch = __pyx_t_6;

  /* "FromPyStructUtility":21
 *         raise ValueError("No value specified for struct attribute 'secPastEpoch'")
 *     result.secPastEpoch = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['nsec']
 *     except KeyError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "FromPyStructUtility":22
 *     result.secPastEpoch = value
 *     try:
 *         value = obj['nsec']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'nsec'")
 */
      __pyx_t_8 = PyObject_GetItem(__pyx_v_obj, __pyx_n_s_nsec); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L14_error;};
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "FromPyStructUtility":21
 *         raise ValueError("No value specified for struct attribute 'secPastEpoch'")
 *     result.secPastEpoch = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['nsec']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L21_try_end;
    __pyx_L14_error:;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "FromPyStructUtility":23
 *     try:
 *         value = obj['nsec']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'nsec'")
 *     result.nsec = value
 */
    __pyx_t_6 = PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_epicsTimeStamp", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_2) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_2);

      /* "FromPyStructUtility":24
 *         value = obj['nsec']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'nsec'")             # <<<<<<<<<<<<<<
 *     result.nsec = value
 *     return result
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__235, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
    }
    goto __pyx_L16_except_error;
    __pyx_L16_except_error:;

    /* "FromPyStructUtility":21
 *         raise ValueError("No value specified for struct attribute 'secPastEpoch'")
 *     result.secPastEpoch = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['nsec']
 *     except KeyError:
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L21_try_end:;
  }

  /* "FromPyStructUtility":25
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'nsec'")
 *     result.nsec = value             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_result.nsec = __pyx_t_6;

  /* "FromPyStructUtility":26
 *         raise ValueError("No value specified for struct attribute 'nsec'")
 *     result.nsec = value
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "FromPyStructUtility":11
 * 
 * @cname("__pyx_convert__from_py_epicsTimeStamp")
 * cdef epicsTimeStamp __pyx_convert__from_py_epicsTimeStamp(obj) except *:             # <<<<<<<<<<<<<<
 *     cdef epicsTimeStamp result
 *     if not PyMapping_Check(obj):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_epicsTimeStamp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_unsigned_int")
 * cdef object __pyx_convert_vector_to_py_unsigned_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_unsigned_int(const std::vector<unsigned int>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_unsigned_int", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_unsigned_int")
 * cdef object __pyx_convert_vector_to_py_unsigned_int(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyInt_From_unsigned_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_unsigned_int")
 * cdef object __pyx_convert_vector_to_py_unsigned_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_unsigned_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(const std::vector<std::string>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_string", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __pyx_convert_PyObject_string_to_py_std__in_string((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":50
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_string")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<std::string>  __pyx_convert_vector_from_py_std_3a__3a_string(PyObject *__pyx_v_o) {
  std::vector<std::string>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::string>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_string", 0);

  /* "vector.from_py":52
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[3]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":53
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_item); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":52
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":54
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":50
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_string")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "BufferFormatFromTypeInfo":1420
 * 
 * @cname('__pyx_format_from_typeinfo')
 * cdef bytes format_from_typeinfo(__Pyx_TypeInfo *type):             # <<<<<<<<<<<<<<
 *     cdef __Pyx_StructField *field
 *     cdef __pyx_typeinfo_string fmt
 */

static PyObject *__pyx_format_from_typeinfo(__Pyx_TypeInfo *__pyx_v_type) {
  __Pyx_StructField *__pyx_v_field;
  struct __pyx_typeinfo_string __pyx_v_fmt;
  PyObject *__pyx_v_part = 0;
  PyObject *__pyx_v_result = 0;
  PyObject *__pyx_v_alignment = NULL;
  PyObject *__pyx_v_parts = NULL;
  PyObject *__pyx_v_extents = NULL;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_StructField *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("format_from_typeinfo", 0);

  /* "BufferFormatFromTypeInfo":1425
 *     cdef bytes part, result
 * 
 *     if type.typegroup == 'S':             # <<<<<<<<<<<<<<
 *         assert type.fields != NULL and type.fields.type != NULL
 * 
 */
  __pyx_t_1 = ((__pyx_v_type->typegroup == 'S') != 0);
  if (__pyx_t_1) {

    /* "BufferFormatFromTypeInfo":1426
 * 
 *     if type.typegroup == 'S':
 *         assert type.fields != NULL and type.fields.type != NULL             # <<<<<<<<<<<<<<
 * 
 *         if type.flags & __PYX_BUF_FLAGS_PACKED_STRUCT:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_2 = ((__pyx_v_type->fields != NULL) != 0);
      if (__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L4_bool_binop_done;
      }
      __pyx_t_2 = ((__pyx_v_type->fields->type != NULL) != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L4_bool_binop_done:;
      if (unlikely(!__pyx_t_1)) {
        PyErr_SetNone(PyExc_AssertionError);
        {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    #endif

    /* "BufferFormatFromTypeInfo":1428
 *         assert type.fields != NULL and type.fields.type != NULL
 * 
 *         if type.flags & __PYX_BUF_FLAGS_PACKED_STRUCT:             # <<<<<<<<<<<<<<
 *             alignment = b'^'
 *         else:
 */
    __pyx_t_1 = ((__pyx_v_type->flags & __PYX_BUF_FLAGS_PACKED_STRUCT) != 0);
    if (__pyx_t_1) {

      /* "BufferFormatFromTypeInfo":1429
 * 
 *         if type.flags & __PYX_BUF_FLAGS_PACKED_STRUCT:
 *             alignment = b'^'             # <<<<<<<<<<<<<<
 *         else:
 *             alignment = b''
 */
      __Pyx_INCREF(__pyx_kp_b__236);
      __pyx_v_alignment = __pyx_kp_b__236;

      /* "BufferFormatFromTypeInfo":1428
 *         assert type.fields != NULL and type.fields.type != NULL
 * 
 *         if type.flags & __PYX_BUF_FLAGS_PACKED_STRUCT:             # <<<<<<<<<<<<<<
 *             alignment = b'^'
 *         else:
 */
      goto __pyx_L6;
    }

    /* "BufferFormatFromTypeInfo":1431
 *             alignment = b'^'
 *         else:
 *             alignment = b''             # <<<<<<<<<<<<<<
 * 
 *         parts = [b"T{"]
 */
    /*else*/ {
      __Pyx_INCREF(__pyx_kp_b__85);
      __pyx_v_alignment = __pyx_kp_b__85;
    }
    __pyx_L6:;

    /* "BufferFormatFromTypeInfo":1433
 *             alignment = b''
 * 
 *         parts = [b"T{"]             # <<<<<<<<<<<<<<
 *         field = type.fields
 * 
 */
    __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_kp_b_T);
    __Pyx_GIVEREF(__pyx_kp_b_T);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_kp_b_T);
    __pyx_v_parts = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "BufferFormatFromTypeInfo":1434
 * 
 *         parts = [b"T{"]
 *         field = type.fields             # <<<<<<<<<<<<<<
 * 
 *         while field.type:
 */
    __pyx_t_4 = __pyx_v_type->fields;
    __pyx_v_field = __pyx_t_4;

    /* "BufferFormatFromTypeInfo":1436
 *         field = type.fields
 * 
 *         while field.type:             # <<<<<<<<<<<<<<
 *             part = format_from_typeinfo(field.type)
 *             parts.append(part + b':' + field.name + b':')
 */
    while (1) {
      __pyx_t_1 = (__pyx_v_field->type != 0);
      if (!__pyx_t_1) break;

      /* "BufferFormatFromTypeInfo":1437
 * 
 *         while field.type:
 *             part = format_from_typeinfo(field.type)             # <<<<<<<<<<<<<<
 *             parts.append(part + b':' + field.name + b':')
 *             field += 1
 */
      __pyx_t_3 = __pyx_format_from_typeinfo(__pyx_v_field->type); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_part, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "BufferFormatFromTypeInfo":1438
 *         while field.type:
 *             part = format_from_typeinfo(field.type)
 *             parts.append(part + b':' + field.name + b':')             # <<<<<<<<<<<<<<
 *             field += 1
 * 
 */
      __pyx_t_3 = PyNumber_Add(__pyx_v_part, __pyx_kp_b__237); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_field->name); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyNumber_Add(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_Add(__pyx_t_6, __pyx_kp_b__237); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_parts, __pyx_t_5); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "BufferFormatFromTypeInfo":1439
 *             part = format_from_typeinfo(field.type)
 *             parts.append(part + b':' + field.name + b':')
 *             field += 1             # <<<<<<<<<<<<<<
 * 
 *         result = alignment.join(parts) + b'}'
 */
      __pyx_v_field = (__pyx_v_field + 1);
    }

    /* "BufferFormatFromTypeInfo":1441
 *             field += 1
 * 
 *         result = alignment.join(parts) + b'}'             # <<<<<<<<<<<<<<
 *     else:
 *         fmt = __Pyx_TypeInfoToFormat(type)
 */
    __pyx_t_5 = __Pyx_PyBytes_Join(__pyx_v_alignment, __pyx_v_parts); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_kp_b__238); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_6)->tp_name), 0))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_result = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "BufferFormatFromTypeInfo":1425
 *     cdef bytes part, result
 * 
 *     if type.typegroup == 'S':             # <<<<<<<<<<<<<<
 *         assert type.fields != NULL and type.fields.type != NULL
 * 
 */
    goto __pyx_L3;
  }

  /* "BufferFormatFromTypeInfo":1443
 *         result = alignment.join(parts) + b'}'
 *     else:
 *         fmt = __Pyx_TypeInfoToFormat(type)             # <<<<<<<<<<<<<<
 *         if type.arraysize[0]:
 *             extents = [unicode(type.arraysize[i]) for i in range(type.ndim)]
 */
  /*else*/ {
    __pyx_v_fmt = __Pyx_TypeInfoToFormat(__pyx_v_type);

    /* "BufferFormatFromTypeInfo":1444
 *     else:
 *         fmt = __Pyx_TypeInfoToFormat(type)
 *         if type.arraysize[0]:             # <<<<<<<<<<<<<<
 *             extents = [unicode(type.arraysize[i]) for i in range(type.ndim)]
 *             result = (u"(%s)" % u','.join(extents)).encode('ascii') + fmt.string
 */
    __pyx_t_1 = ((__pyx_v_type->arraysize[0]) != 0);
    if (__pyx_t_1) {

      /* "BufferFormatFromTypeInfo":1445
 *         fmt = __Pyx_TypeInfoToFormat(type)
 *         if type.arraysize[0]:
 *             extents = [unicode(type.arraysize[i]) for i in range(type.ndim)]             # <<<<<<<<<<<<<<
 *             result = (u"(%s)" % u','.join(extents)).encode('ascii') + fmt.string
 *         else:
 */
      __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = __pyx_v_type->ndim;
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
        __pyx_v_i = __pyx_t_9;
        __pyx_t_5 = __Pyx_PyInt_FromSize_t((__pyx_v_type->arraysize[__pyx_v_i])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyUnicode_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_5))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_v_extents = ((PyObject*)__pyx_t_6);
      __pyx_t_6 = 0;

      /* "BufferFormatFromTypeInfo":1446
 *         if type.arraysize[0]:
 *             extents = [unicode(type.arraysize[i]) for i in range(type.ndim)]
 *             result = (u"(%s)" % u','.join(extents)).encode('ascii') + fmt.string             # <<<<<<<<<<<<<<
 *         else:
 *             result = fmt.string
 */
      __pyx_t_6 = PyUnicode_Join(__pyx_kp_u__239, __pyx_v_extents); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = PyUnicode_Format(__pyx_kp_u_s_2, __pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyUnicode_AsASCIIString(((PyObject*)__pyx_t_5)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_FromString(__pyx_v_fmt.string); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyNumber_Add(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (!(likely(PyBytes_CheckExact(__pyx_t_3))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_result = ((PyObject*)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "BufferFormatFromTypeInfo":1444
 *     else:
 *         fmt = __Pyx_TypeInfoToFormat(type)
 *         if type.arraysize[0]:             # <<<<<<<<<<<<<<
 *             extents = [unicode(type.arraysize[i]) for i in range(type.ndim)]
 *             result = (u"(%s)" % u','.join(extents)).encode('ascii') + fmt.string
 */
      goto __pyx_L9;
    }

    /* "BufferFormatFromTypeInfo":1448
 *             result = (u"(%s)" % u','.join(extents)).encode('ascii') + fmt.string
 *         else:
 *             result = fmt.string             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_FromString(__pyx_v_fmt.string); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_result = ((PyObject*)__pyx_t_3);
      __pyx_t_3 = 0;
    }
    __pyx_L9:;
  }
  __pyx_L3:;

  /* "BufferFormatFromTypeInfo":1450
 *             result = fmt.string
 * 
 *     return result             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "BufferFormatFromTypeInfo":1420
 * 
 * @cname('__pyx_format_from_typeinfo')
 * cdef bytes format_from_typeinfo(__Pyx_TypeInfo *type):             # <<<<<<<<<<<<<<
 *     cdef __Pyx_StructField *field
 *     cdef __pyx_typeinfo_string fmt
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("BufferFormatFromTypeInfo.format_from_typeinfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_part);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_alignment);
  __Pyx_XDECREF(__pyx_v_parts);
  __Pyx_XDECREF(__pyx_v_extents);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *__pyx_v_o) {
  std::vector<int>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_int", 0);

  /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[3]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":52
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_item); if (unlikely(__pyx_t_5 == -1 && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":53
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_int", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_dbr_long_t(const std::vector<dbr_long_t>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_dbr_long_t", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_dbr_long_t")
 * cdef object __pyx_convert_vector_to_py_dbr_long_t(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyInt_From_dbr_long_t((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_dbr_long_t")
 * cdef object __pyx_convert_vector_to_py_dbr_long_t(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_dbr_long_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_double", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_char__const___2a_")
 * cdef vector[X] __pyx_convert_vector_from_py_char__const___2a_(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<char const *>  __pyx_convert_vector_from_py_char__const___2a_(PyObject *__pyx_v_o) {
  std::vector<char const *>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<char const *>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  char const * __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_char__const___2a_", 0);

  /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_char__const___2a_(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[3]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":52
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_v_item); if (unlikely(__pyx_t_5 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_char__const___2a_(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":53
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_char__const___2a_")
 * cdef vector[X] __pyx_convert_vector_from_py_char__const___2a_(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_char__const___2a_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *__pyx_v_o) {
  std::vector<double>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<double>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_double", 0);

  /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[3]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":52
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_item); if (unlikely(__pyx_t_5 == -1.0 && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":53
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_6PyCafe__finalizer(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6PyCafe__finalizer(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6PyCafe_10_finalizer_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6PyCafe__finalizer[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6PyCafe__finalizer = {
  PyVarObject_HEAD_INIT(0, 0)
  "PyCafe._finalizer", /*tp_name*/
  sizeof(struct __pyx_obj_6PyCafe__finalizer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6PyCafe__finalizer, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6PyCafe__finalizer, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6PyCafe__finalizer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6PyCafe_CyCa(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6PyCafe_4CyCa_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6PyCafe_CyCa(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBE_VALUE(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_12CY_DBE_VALUE_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBE_LOG(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_10CY_DBE_LOG_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBE_ARCHIVE(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_14CY_DBE_ARCHIVE_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBE_ALARM(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_12CY_DBE_ALARM_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBE_PROPERTY(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_15CY_DBE_PROPERTY_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_PRIMITIVE(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_16CY_DBR_PRIMITIVE_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_PLAIN(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_12CY_DBR_PLAIN_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_STS(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_10CY_DBR_STS_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_TIME(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_11CY_DBR_TIME_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_GR(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_9CY_DBR_GR_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_CTRL(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_11CY_DBR_CTRL_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_PUT(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_10CY_DBR_PUT_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_STSACK(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_13CY_DBR_STSACK_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_CLASS(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_12CY_DBR_CLASS_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_NONE(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_11CY_DBR_NONE_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_STRING(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_13CY_DBR_STRING_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_SHORT(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_12CY_DBR_SHORT_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_INT(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_10CY_DBR_INT_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_FLOAT(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_12CY_DBR_FLOAT_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_ENUM(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_11CY_DBR_ENUM_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_CHAR(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_11CY_DBR_CHAR_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_LONG(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_11CY_DBR_LONG_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_DOUBLE(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_13CY_DBR_DOUBLE_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_STS_STRING(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_17CY_DBR_STS_STRING_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_STS_SHORT(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_16CY_DBR_STS_SHORT_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_STS_INT(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_14CY_DBR_STS_INT_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_STS_FLOAT(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_16CY_DBR_STS_FLOAT_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_STS_ENUM(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_15CY_DBR_STS_ENUM_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_STS_CHAR(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_15CY_DBR_STS_CHAR_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_STS_LONG(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_15CY_DBR_STS_LONG_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_STS_DOUBLE(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_17CY_DBR_STS_DOUBLE_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_TIME_STRING(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_18CY_DBR_TIME_STRING_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_TIME_SHORT(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_17CY_DBR_TIME_SHORT_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_TIME_INT(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_15CY_DBR_TIME_INT_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_TIME_FLOAT(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_17CY_DBR_TIME_FLOAT_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_TIME_ENUM(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_16CY_DBR_TIME_ENUM_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_TIME_CHAR(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_16CY_DBR_TIME_CHAR_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_TIME_LONG(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_16CY_DBR_TIME_LONG_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_TIME_DOUBLE(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_18CY_DBR_TIME_DOUBLE_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_GR_STRING(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_16CY_DBR_GR_STRING_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_GR_SHORT(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_15CY_DBR_GR_SHORT_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_GR_INT(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_13CY_DBR_GR_INT_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_GR_FLOAT(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_15CY_DBR_GR_FLOAT_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_GR_ENUM(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_14CY_DBR_GR_ENUM_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_GR_CHAR(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_14CY_DBR_GR_CHAR_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_GR_LONG(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_14CY_DBR_GR_LONG_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_GR_DOUBLE(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_16CY_DBR_GR_DOUBLE_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_CTRL_STRING(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_18CY_DBR_CTRL_STRING_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_CTRL_SHORT(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_17CY_DBR_CTRL_SHORT_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_CTRL_INT(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_15CY_DBR_CTRL_INT_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_CTRL_FLOAT(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_17CY_DBR_CTRL_FLOAT_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_CTRL_ENUM(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_16CY_DBR_CTRL_ENUM_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_CTRL_CHAR(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_16CY_DBR_CTRL_CHAR_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_CTRL_LONG(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_16CY_DBR_CTRL_LONG_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_4CyCa_CY_DBR_CTRL_DOUBLE(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_4CyCa_18CY_DBR_CTRL_DOUBLE_1__get__(o);
}

static PyMethodDef __pyx_methods_6PyCafe_CyCa[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6PyCafe_CyCa[] = {
  {(char *)"CY_DBE_VALUE", __pyx_getprop_6PyCafe_4CyCa_CY_DBE_VALUE, 0, 0, 0},
  {(char *)"CY_DBE_LOG", __pyx_getprop_6PyCafe_4CyCa_CY_DBE_LOG, 0, 0, 0},
  {(char *)"CY_DBE_ARCHIVE", __pyx_getprop_6PyCafe_4CyCa_CY_DBE_ARCHIVE, 0, 0, 0},
  {(char *)"CY_DBE_ALARM", __pyx_getprop_6PyCafe_4CyCa_CY_DBE_ALARM, 0, 0, 0},
  {(char *)"CY_DBE_PROPERTY", __pyx_getprop_6PyCafe_4CyCa_CY_DBE_PROPERTY, 0, 0, 0},
  {(char *)"CY_DBR_PRIMITIVE", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_PRIMITIVE, 0, 0, 0},
  {(char *)"CY_DBR_PLAIN", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_PLAIN, 0, 0, 0},
  {(char *)"CY_DBR_STS", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_STS, 0, 0, 0},
  {(char *)"CY_DBR_TIME", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_TIME, 0, 0, 0},
  {(char *)"CY_DBR_GR", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_GR, 0, 0, 0},
  {(char *)"CY_DBR_CTRL", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_CTRL, 0, 0, 0},
  {(char *)"CY_DBR_PUT", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_PUT, 0, 0, 0},
  {(char *)"CY_DBR_STSACK", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_STSACK, 0, 0, 0},
  {(char *)"CY_DBR_CLASS", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_CLASS, 0, 0, 0},
  {(char *)"CY_DBR_NONE", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_NONE, 0, 0, 0},
  {(char *)"CY_DBR_STRING", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_STRING, 0, 0, 0},
  {(char *)"CY_DBR_SHORT", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_SHORT, 0, 0, 0},
  {(char *)"CY_DBR_INT", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_INT, 0, 0, 0},
  {(char *)"CY_DBR_FLOAT", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_FLOAT, 0, 0, 0},
  {(char *)"CY_DBR_ENUM", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_ENUM, 0, 0, 0},
  {(char *)"CY_DBR_CHAR", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_CHAR, 0, 0, 0},
  {(char *)"CY_DBR_LONG", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_LONG, 0, 0, 0},
  {(char *)"CY_DBR_DOUBLE", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_DOUBLE, 0, 0, 0},
  {(char *)"CY_DBR_STS_STRING", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_STS_STRING, 0, 0, 0},
  {(char *)"CY_DBR_STS_SHORT", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_STS_SHORT, 0, 0, 0},
  {(char *)"CY_DBR_STS_INT", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_STS_INT, 0, 0, 0},
  {(char *)"CY_DBR_STS_FLOAT", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_STS_FLOAT, 0, 0, 0},
  {(char *)"CY_DBR_STS_ENUM", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_STS_ENUM, 0, 0, 0},
  {(char *)"CY_DBR_STS_CHAR", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_STS_CHAR, 0, 0, 0},
  {(char *)"CY_DBR_STS_LONG", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_STS_LONG, 0, 0, 0},
  {(char *)"CY_DBR_STS_DOUBLE", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_STS_DOUBLE, 0, 0, 0},
  {(char *)"CY_DBR_TIME_STRING", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_TIME_STRING, 0, 0, 0},
  {(char *)"CY_DBR_TIME_SHORT", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_TIME_SHORT, 0, 0, 0},
  {(char *)"CY_DBR_TIME_INT", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_TIME_INT, 0, 0, 0},
  {(char *)"CY_DBR_TIME_FLOAT", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_TIME_FLOAT, 0, 0, 0},
  {(char *)"CY_DBR_TIME_ENUM", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_TIME_ENUM, 0, 0, 0},
  {(char *)"CY_DBR_TIME_CHAR", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_TIME_CHAR, 0, 0, 0},
  {(char *)"CY_DBR_TIME_LONG", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_TIME_LONG, 0, 0, 0},
  {(char *)"CY_DBR_TIME_DOUBLE", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_TIME_DOUBLE, 0, 0, 0},
  {(char *)"CY_DBR_GR_STRING", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_GR_STRING, 0, 0, 0},
  {(char *)"CY_DBR_GR_SHORT", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_GR_SHORT, 0, 0, 0},
  {(char *)"CY_DBR_GR_INT", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_GR_INT, 0, 0, 0},
  {(char *)"CY_DBR_GR_FLOAT", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_GR_FLOAT, 0, 0, 0},
  {(char *)"CY_DBR_GR_ENUM", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_GR_ENUM, 0, 0, 0},
  {(char *)"CY_DBR_GR_CHAR", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_GR_CHAR, 0, 0, 0},
  {(char *)"CY_DBR_GR_LONG", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_GR_LONG, 0, 0, 0},
  {(char *)"CY_DBR_GR_DOUBLE", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_GR_DOUBLE, 0, 0, 0},
  {(char *)"CY_DBR_CTRL_STRING", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_CTRL_STRING, 0, 0, 0},
  {(char *)"CY_DBR_CTRL_SHORT", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_CTRL_SHORT, 0, 0, 0},
  {(char *)"CY_DBR_CTRL_INT", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_CTRL_INT, 0, 0, 0},
  {(char *)"CY_DBR_CTRL_FLOAT", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_CTRL_FLOAT, 0, 0, 0},
  {(char *)"CY_DBR_CTRL_ENUM", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_CTRL_ENUM, 0, 0, 0},
  {(char *)"CY_DBR_CTRL_CHAR", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_CTRL_CHAR, 0, 0, 0},
  {(char *)"CY_DBR_CTRL_LONG", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_CTRL_LONG, 0, 0, 0},
  {(char *)"CY_DBR_CTRL_DOUBLE", __pyx_getprop_6PyCafe_4CyCa_CY_DBR_CTRL_DOUBLE, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6PyCafe_CyCa = {
  PyVarObject_HEAD_INIT(0, 0)
  "PyCafe.CyCa", /*tp_name*/
  sizeof(struct __pyx_obj_6PyCafe_CyCa), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6PyCafe_CyCa, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6PyCafe_CyCa, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6PyCafe_CyCa, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6PyCafe_CyCa, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6PyCafe_channelInfo(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6PyCafe_channelInfo *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6PyCafe_channelInfo *)o);
  new((void*)&(p->hostName)) std::string();
  new((void*)&(p->className)) std::string();
  new((void*)&(p->connectionStateAsString)) std::string();
  new((void*)&(p->cafeConnectionStateAsString)) std::string();
  new((void*)&(p->cdt)) CAFEDataTypeCode();
  new((void*)&(p->csc)) CAFEStatusCode();
  new((void*)&(p->caop)) CAOPCodes();
  if (unlikely(__pyx_pw_6PyCafe_11channelInfo_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6PyCafe_channelInfo(PyObject *o) {
  struct __pyx_obj_6PyCafe_channelInfo *p = (struct __pyx_obj_6PyCafe_channelInfo *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->hostName);
  __Pyx_call_destructor(p->className);
  __Pyx_call_destructor(p->connectionStateAsString);
  __Pyx_call_destructor(p->cafeConnectionStateAsString);
  __Pyx_call_destructor(p->cdt);
  __Pyx_call_destructor(p->csc);
  __Pyx_call_destructor(p->caop);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6PyCafe_11channelInfo_channelID(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_11channelInfo_9channelID_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_11channelInfo_connectFlag(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_11channelInfo_11connectFlag_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_11channelInfo_hostName(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_11channelInfo_8hostName_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_11channelInfo_nelem(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_11channelInfo_5nelem_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_11channelInfo_dataType(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_11channelInfo_8dataType_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_11channelInfo_accessRead(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_11channelInfo_10accessRead_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_11channelInfo_accessWrite(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_11channelInfo_11accessWrite_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_11channelInfo_className(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_11channelInfo_9className_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_11channelInfo_connectionState(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_11channelInfo_15connectionState_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_11channelInfo_cafeConnectionState(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_11channelInfo_19cafeConnectionState_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_11channelInfo_connectionStateAsString(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_11channelInfo_23connectionStateAsString_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_11channelInfo_cafeConnectionStateAsString(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_11channelInfo_27cafeConnectionStateAsString_1__get__(o);
}

static PyMethodDef __pyx_methods_6PyCafe_channelInfo[] = {
  {"show", (PyCFunction)__pyx_pw_6PyCafe_11channelInfo_3show, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6PyCafe_channelInfo[] = {
  {(char *)"channelID", __pyx_getprop_6PyCafe_11channelInfo_channelID, 0, 0, 0},
  {(char *)"connectFlag", __pyx_getprop_6PyCafe_11channelInfo_connectFlag, 0, 0, 0},
  {(char *)"hostName", __pyx_getprop_6PyCafe_11channelInfo_hostName, 0, 0, 0},
  {(char *)"nelem", __pyx_getprop_6PyCafe_11channelInfo_nelem, 0, 0, 0},
  {(char *)"dataType", __pyx_getprop_6PyCafe_11channelInfo_dataType, 0, 0, 0},
  {(char *)"accessRead", __pyx_getprop_6PyCafe_11channelInfo_accessRead, 0, 0, 0},
  {(char *)"accessWrite", __pyx_getprop_6PyCafe_11channelInfo_accessWrite, 0, 0, 0},
  {(char *)"className", __pyx_getprop_6PyCafe_11channelInfo_className, 0, 0, 0},
  {(char *)"connectionState", __pyx_getprop_6PyCafe_11channelInfo_connectionState, 0, 0, 0},
  {(char *)"cafeConnectionState", __pyx_getprop_6PyCafe_11channelInfo_cafeConnectionState, 0, 0, 0},
  {(char *)"connectionStateAsString", __pyx_getprop_6PyCafe_11channelInfo_connectionStateAsString, 0, 0, 0},
  {(char *)"cafeConnectionStateAsString", __pyx_getprop_6PyCafe_11channelInfo_cafeConnectionStateAsString, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6PyCafe_channelInfo = {
  PyVarObject_HEAD_INIT(0, 0)
  "PyCafe.channelInfo", /*tp_name*/
  sizeof(struct __pyx_obj_6PyCafe_channelInfo), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6PyCafe_channelInfo, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6PyCafe_channelInfo, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6PyCafe_channelInfo, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6PyCafe_channelInfo, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6PyCafe__epicsTimeStampAsDate(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6PyCafe__epicsTimeStampAsDate *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6PyCafe__epicsTimeStampAsDate *)o);
  p->etsDate = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6PyCafe_21_epicsTimeStampAsDate_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6PyCafe__epicsTimeStampAsDate(PyObject *o) {
  struct __pyx_obj_6PyCafe__epicsTimeStampAsDate *p = (struct __pyx_obj_6PyCafe__epicsTimeStampAsDate *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->etsDate);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6PyCafe__epicsTimeStampAsDate(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6PyCafe__epicsTimeStampAsDate *p = (struct __pyx_obj_6PyCafe__epicsTimeStampAsDate *)o;
  if (p->etsDate) {
    e = (*v)(p->etsDate, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6PyCafe__epicsTimeStampAsDate(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6PyCafe__epicsTimeStampAsDate *p = (struct __pyx_obj_6PyCafe__epicsTimeStampAsDate *)o;
  tmp = ((PyObject*)p->etsDate);
  p->etsDate = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_6PyCafe__epicsTimeStampAsDate[] = {
  {"get", (PyCFunction)__pyx_pw_6PyCafe_21_epicsTimeStampAsDate_3get, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6PyCafe__epicsTimeStampAsDate = {
  PyVarObject_HEAD_INIT(0, 0)
  "PyCafe._epicsTimeStampAsDate", /*tp_name*/
  sizeof(struct __pyx_obj_6PyCafe__epicsTimeStampAsDate), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6PyCafe__epicsTimeStampAsDate, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6PyCafe__epicsTimeStampAsDate, /*tp_traverse*/
  __pyx_tp_clear_6PyCafe__epicsTimeStampAsDate, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6PyCafe__epicsTimeStampAsDate, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6PyCafe__epicsTimeStampAsDate, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_6PyCafe_pvctrl __pyx_vtable_6PyCafe_pvctrl;

static PyObject *__pyx_tp_new_6PyCafe_pvctrl(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6PyCafe_pvctrl *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6PyCafe_pvctrl *)o);
  p->__pyx_vtab = __pyx_vtabptr_6PyCafe_pvctrl;
  new((void*)&(p->units)) std::string();
  p->enumStrings = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->upperDisplayLimit = Py_None; Py_INCREF(Py_None);
  p->lowerDisplayLimit = Py_None; Py_INCREF(Py_None);
  p->upperAlarmLimit = Py_None; Py_INCREF(Py_None);
  p->upperWarningLimit = Py_None; Py_INCREF(Py_None);
  p->lowerWarningLimit = Py_None; Py_INCREF(Py_None);
  p->lowerAlarmLimit = Py_None; Py_INCREF(Py_None);
  p->upperControlLimit = Py_None; Py_INCREF(Py_None);
  p->lowerControlLimit = Py_None; Py_INCREF(Py_None);
  p->value = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6PyCafe_6pvctrl_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6PyCafe_pvctrl(PyObject *o) {
  struct __pyx_obj_6PyCafe_pvctrl *p = (struct __pyx_obj_6PyCafe_pvctrl *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->units);
  Py_CLEAR(p->enumStrings);
  Py_CLEAR(p->upperDisplayLimit);
  Py_CLEAR(p->lowerDisplayLimit);
  Py_CLEAR(p->upperAlarmLimit);
  Py_CLEAR(p->upperWarningLimit);
  Py_CLEAR(p->lowerWarningLimit);
  Py_CLEAR(p->lowerAlarmLimit);
  Py_CLEAR(p->upperControlLimit);
  Py_CLEAR(p->lowerControlLimit);
  Py_CLEAR(p->value);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6PyCafe_pvctrl(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6PyCafe_pvctrl *p = (struct __pyx_obj_6PyCafe_pvctrl *)o;
  if (p->enumStrings) {
    e = (*v)(p->enumStrings, a); if (e) return e;
  }
  if (p->upperDisplayLimit) {
    e = (*v)(p->upperDisplayLimit, a); if (e) return e;
  }
  if (p->lowerDisplayLimit) {
    e = (*v)(p->lowerDisplayLimit, a); if (e) return e;
  }
  if (p->upperAlarmLimit) {
    e = (*v)(p->upperAlarmLimit, a); if (e) return e;
  }
  if (p->upperWarningLimit) {
    e = (*v)(p->upperWarningLimit, a); if (e) return e;
  }
  if (p->lowerWarningLimit) {
    e = (*v)(p->lowerWarningLimit, a); if (e) return e;
  }
  if (p->lowerAlarmLimit) {
    e = (*v)(p->lowerAlarmLimit, a); if (e) return e;
  }
  if (p->upperControlLimit) {
    e = (*v)(p->upperControlLimit, a); if (e) return e;
  }
  if (p->lowerControlLimit) {
    e = (*v)(p->lowerControlLimit, a); if (e) return e;
  }
  if (p->value) {
    e = (*v)(p->value, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6PyCafe_pvctrl(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6PyCafe_pvctrl *p = (struct __pyx_obj_6PyCafe_pvctrl *)o;
  tmp = ((PyObject*)p->enumStrings);
  p->enumStrings = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->upperDisplayLimit);
  p->upperDisplayLimit = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->lowerDisplayLimit);
  p->lowerDisplayLimit = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->upperAlarmLimit);
  p->upperAlarmLimit = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->upperWarningLimit);
  p->upperWarningLimit = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->lowerWarningLimit);
  p->lowerWarningLimit = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->lowerAlarmLimit);
  p->lowerAlarmLimit = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->upperControlLimit);
  p->upperControlLimit = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->lowerControlLimit);
  p->lowerControlLimit = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->value);
  p->value = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6PyCafe_6pvctrl_nelem(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_6pvctrl_5nelem_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_6pvctrl_alarmStatus(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_6pvctrl_11alarmStatus_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_6pvctrl_alarmSeverity(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_6pvctrl_13alarmSeverity_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_6pvctrl_precision(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_6pvctrl_9precision_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_6pvctrl_units(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_6pvctrl_5units_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_6pvctrl_noEnumStrings(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_6pvctrl_13noEnumStrings_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_6pvctrl_enumStrings(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_6pvctrl_11enumStrings_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_6pvctrl_upperDisplayLimit(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_6pvctrl_17upperDisplayLimit_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_6pvctrl_lowerDisplayLimit(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_6pvctrl_17lowerDisplayLimit_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_6pvctrl_upperAlarmLimit(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_6pvctrl_15upperAlarmLimit_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_6pvctrl_upperWarningLimit(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_6pvctrl_17upperWarningLimit_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_6pvctrl_lowerWarningLimit(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_6pvctrl_17lowerWarningLimit_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_6pvctrl_lowerAlarmLimit(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_6pvctrl_15lowerAlarmLimit_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_6pvctrl_upperControlLimit(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_6pvctrl_17upperControlLimit_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_6pvctrl_lowerControlLimit(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_6pvctrl_17lowerControlLimit_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_6pvctrl_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_6pvctrl_5value_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_6pvctrl_status(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_6pvctrl_6status_1__get__(o);
}

static PyMethodDef __pyx_methods_6PyCafe_pvctrl[] = {
  {"show", (PyCFunction)__pyx_pw_6PyCafe_6pvctrl_3show, METH_NOARGS, 0},
  {"showMax", (PyCFunction)__pyx_pw_6PyCafe_6pvctrl_5showMax, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6PyCafe_pvctrl[] = {
  {(char *)"nelem", __pyx_getprop_6PyCafe_6pvctrl_nelem, 0, 0, 0},
  {(char *)"alarmStatus", __pyx_getprop_6PyCafe_6pvctrl_alarmStatus, 0, 0, 0},
  {(char *)"alarmSeverity", __pyx_getprop_6PyCafe_6pvctrl_alarmSeverity, 0, 0, 0},
  {(char *)"precision", __pyx_getprop_6PyCafe_6pvctrl_precision, 0, 0, 0},
  {(char *)"units", __pyx_getprop_6PyCafe_6pvctrl_units, 0, 0, 0},
  {(char *)"noEnumStrings", __pyx_getprop_6PyCafe_6pvctrl_noEnumStrings, 0, 0, 0},
  {(char *)"enumStrings", __pyx_getprop_6PyCafe_6pvctrl_enumStrings, 0, 0, 0},
  {(char *)"upperDisplayLimit", __pyx_getprop_6PyCafe_6pvctrl_upperDisplayLimit, 0, 0, 0},
  {(char *)"lowerDisplayLimit", __pyx_getprop_6PyCafe_6pvctrl_lowerDisplayLimit, 0, 0, 0},
  {(char *)"upperAlarmLimit", __pyx_getprop_6PyCafe_6pvctrl_upperAlarmLimit, 0, 0, 0},
  {(char *)"upperWarningLimit", __pyx_getprop_6PyCafe_6pvctrl_upperWarningLimit, 0, 0, 0},
  {(char *)"lowerWarningLimit", __pyx_getprop_6PyCafe_6pvctrl_lowerWarningLimit, 0, 0, 0},
  {(char *)"lowerAlarmLimit", __pyx_getprop_6PyCafe_6pvctrl_lowerAlarmLimit, 0, 0, 0},
  {(char *)"upperControlLimit", __pyx_getprop_6PyCafe_6pvctrl_upperControlLimit, 0, 0, 0},
  {(char *)"lowerControlLimit", __pyx_getprop_6PyCafe_6pvctrl_lowerControlLimit, 0, 0, 0},
  {(char *)"value", __pyx_getprop_6PyCafe_6pvctrl_value, 0, 0, 0},
  {(char *)"status", __pyx_getprop_6PyCafe_6pvctrl_status, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6PyCafe_pvctrl = {
  PyVarObject_HEAD_INIT(0, 0)
  "PyCafe.pvctrl", /*tp_name*/
  sizeof(struct __pyx_obj_6PyCafe_pvctrl), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6PyCafe_pvctrl, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6PyCafe_pvctrl, /*tp_traverse*/
  __pyx_tp_clear_6PyCafe_pvctrl, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6PyCafe_pvctrl, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6PyCafe_pvctrl, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6PyCafe_pvctrl, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_6PyCafe_pvdata __pyx_vtable_6PyCafe_pvdata;

static PyObject *__pyx_tp_new_6PyCafe_pvdata(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6PyCafe_pvdata *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6PyCafe_pvdata *)o);
  p->__pyx_vtab = __pyx_vtabptr_6PyCafe_pvdata;
  p->ts = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->tsDate = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->value = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6PyCafe_6pvdata_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6PyCafe_pvdata(PyObject *o) {
  struct __pyx_obj_6PyCafe_pvdata *p = (struct __pyx_obj_6PyCafe_pvdata *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->ts);
  Py_CLEAR(p->tsDate);
  Py_CLEAR(p->value);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6PyCafe_pvdata(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6PyCafe_pvdata *p = (struct __pyx_obj_6PyCafe_pvdata *)o;
  if (p->ts) {
    e = (*v)(p->ts, a); if (e) return e;
  }
  if (p->tsDate) {
    e = (*v)(p->tsDate, a); if (e) return e;
  }
  if (p->value) {
    e = (*v)(p->value, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6PyCafe_pvdata(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6PyCafe_pvdata *p = (struct __pyx_obj_6PyCafe_pvdata *)o;
  tmp = ((PyObject*)p->ts);
  p->ts = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->tsDate);
  p->tsDate = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->value);
  p->value = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6PyCafe_6pvdata_nelem(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_6pvdata_5nelem_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_6pvdata_alarmStatus(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_6pvdata_11alarmStatus_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_6pvdata_alarmSeverity(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_6pvdata_13alarmSeverity_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_6pvdata_ts(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_6pvdata_2ts_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_6pvdata_tsDate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_6pvdata_6tsDate_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_6pvdata_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_6pvdata_5value_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_6pvdata_status(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_6pvdata_6status_1__get__(o);
}

static PyMethodDef __pyx_methods_6PyCafe_pvdata[] = {
  {"show", (PyCFunction)__pyx_pw_6PyCafe_6pvdata_3show, METH_NOARGS, 0},
  {"showMax", (PyCFunction)__pyx_pw_6PyCafe_6pvdata_5showMax, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6PyCafe_pvdata[] = {
  {(char *)"nelem", __pyx_getprop_6PyCafe_6pvdata_nelem, 0, 0, 0},
  {(char *)"alarmStatus", __pyx_getprop_6PyCafe_6pvdata_alarmStatus, 0, 0, 0},
  {(char *)"alarmSeverity", __pyx_getprop_6PyCafe_6pvdata_alarmSeverity, 0, 0, 0},
  {(char *)"ts", __pyx_getprop_6PyCafe_6pvdata_ts, 0, 0, 0},
  {(char *)"tsDate", __pyx_getprop_6PyCafe_6pvdata_tsDate, 0, 0, 0},
  {(char *)"value", __pyx_getprop_6PyCafe_6pvdata_value, 0, 0, 0},
  {(char *)"status", __pyx_getprop_6PyCafe_6pvdata_status, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6PyCafe_pvdata = {
  PyVarObject_HEAD_INIT(0, 0)
  "PyCafe.pvdata", /*tp_name*/
  sizeof(struct __pyx_obj_6PyCafe_pvdata), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6PyCafe_pvdata, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6PyCafe_pvdata, /*tp_traverse*/
  __pyx_tp_clear_6PyCafe_pvdata, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6PyCafe_pvdata, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6PyCafe_pvdata, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6PyCafe_pvdata, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_6PyCafe_pvgroup __pyx_vtable_6PyCafe_pvgroup;

static PyObject *__pyx_tp_new_6PyCafe_pvgroup(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6PyCafe_pvgroup *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6PyCafe_pvgroup *)o);
  p->__pyx_vtab = __pyx_vtabptr_6PyCafe_pvgroup;
  new((void*)&(p->name)) std::string();
  p->pvdata = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6PyCafe_7pvgroup_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6PyCafe_pvgroup(PyObject *o) {
  struct __pyx_obj_6PyCafe_pvgroup *p = (struct __pyx_obj_6PyCafe_pvgroup *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->name);
  Py_CLEAR(p->pvdata);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6PyCafe_pvgroup(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6PyCafe_pvgroup *p = (struct __pyx_obj_6PyCafe_pvgroup *)o;
  if (p->pvdata) {
    e = (*v)(p->pvdata, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6PyCafe_pvgroup(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6PyCafe_pvgroup *p = (struct __pyx_obj_6PyCafe_pvgroup *)o;
  tmp = ((PyObject*)p->pvdata);
  p->pvdata = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6PyCafe_7pvgroup_pvdata(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_7pvgroup_6pvdata_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_7pvgroup_npv(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_7pvgroup_3npv_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_7pvgroup_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_7pvgroup_4name_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_7pvgroup_groupStatus(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_7pvgroup_11groupStatus_1__get__(o);
}

static PyObject *__pyx_getprop_6PyCafe_7pvgroup_groupHandle(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6PyCafe_7pvgroup_11groupHandle_1__get__(o);
}

static PyMethodDef __pyx_methods_6PyCafe_pvgroup[] = {
  {"show", (PyCFunction)__pyx_pw_6PyCafe_7pvgroup_3show, METH_NOARGS, 0},
  {"showWithPV", (PyCFunction)__pyx_pw_6PyCafe_7pvgroup_5showWithPV, METH_O, 0},
  {"showMax", (PyCFunction)__pyx_pw_6PyCafe_7pvgroup_7showMax, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6PyCafe_pvgroup[] = {
  {(char *)"pvdata", __pyx_getprop_6PyCafe_7pvgroup_pvdata, 0, 0, 0},
  {(char *)"npv", __pyx_getprop_6PyCafe_7pvgroup_npv, 0, 0, 0},
  {(char *)"name", __pyx_getprop_6PyCafe_7pvgroup_name, 0, 0, 0},
  {(char *)"groupStatus", __pyx_getprop_6PyCafe_7pvgroup_groupStatus, 0, 0, 0},
  {(char *)"groupHandle", __pyx_getprop_6PyCafe_7pvgroup_groupHandle, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6PyCafe_pvgroup = {
  PyVarObject_HEAD_INIT(0, 0)
  "PyCafe.pvgroup", /*tp_name*/
  sizeof(struct __pyx_obj_6PyCafe_pvgroup), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6PyCafe_pvgroup, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6PyCafe_pvgroup, /*tp_traverse*/
  __pyx_tp_clear_6PyCafe_pvgroup, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6PyCafe_pvgroup, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6PyCafe_pvgroup, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6PyCafe_pvgroup, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_6PyCafe_CyCafe __pyx_vtable_6PyCafe_CyCafe;

static PyObject *__pyx_tp_new_6PyCafe_CyCafe(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6PyCafe_CyCafe *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6PyCafe_CyCafe *)o);
  p->__pyx_vtab = __pyx_vtabptr_6PyCafe_CyCafe;
  new((void*)&(p->valStr)) std::string();
  new((void*)&(p->vStr)) std::vector<std::string> ();
  new((void*)&(p->vFloat)) std::vector<double> ();
  new((void*)&(p->vInt)) std::vector<dbr_long_t> ();
  new((void*)&(p->hh)) HandleHelper();
  new((void*)&(p->cs)) CAFEStatus();
  new((void*)&(p->css)) CAFEStatusSeverity();
  p->pythonVersion = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6PyCafe_6CyCafe_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6PyCafe_CyCafe(PyObject *o) {
  struct __pyx_obj_6PyCafe_CyCafe *p = (struct __pyx_obj_6PyCafe_CyCafe *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6PyCafe_6CyCafe_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->valStr);
  __Pyx_call_destructor(p->vStr);
  __Pyx_call_destructor(p->vFloat);
  __Pyx_call_destructor(p->vInt);
  __Pyx_call_destructor(p->hh);
  __Pyx_call_destructor(p->cs);
  __Pyx_call_destructor(p->css);
  Py_CLEAR(p->pythonVersion);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6PyCafe_CyCafe(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6PyCafe_CyCafe *p = (struct __pyx_obj_6PyCafe_CyCafe *)o;
  if (p->pythonVersion) {
    e = (*v)(p->pythonVersion, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6PyCafe_CyCafe(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6PyCafe_CyCafe *p = (struct __pyx_obj_6PyCafe_CyCafe *)o;
  tmp = ((PyObject*)p->pythonVersion);
  p->pythonVersion = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_6PyCafe_CyCafe[] = {
  {"init", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_5init, METH_NOARGS, 0},
  {"open", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_7open, METH_O, 0},
  {"openNoWait", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_9openNoWait, METH_NOARGS, 0},
  {"openPrepare", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_11openPrepare, METH_NOARGS, 0},
  {"openGroupPrepare", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_13openGroupPrepare, METH_NOARGS, 0},
  {"openMonitorPrepare", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_15openMonitorPrepare, METH_NOARGS, 0},
  {"openNow", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_17openNow, METH_NOARGS, 0},
  {"openNowAndWait", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_19openNowAndWait, METH_O, 0},
  {"openGroupNowAndWait", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_21openGroupNowAndWait, METH_O, 0},
  {"openMonitorNow", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_23openMonitorNow, METH_NOARGS, 0},
  {"openMonitorNowAndWait", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_25openMonitorNowAndWait, METH_O, 0},
  {"attachContext", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_27attachContext, METH_O, 0},
  {"loadCollectionsFromXML", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_29loadCollectionsFromXML, METH_O, 0},
  {"loadGroupsFromXML", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_31loadGroupsFromXML, METH_O, 0},
  {"groupList", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_33groupList, METH_NOARGS, 0},
  {"getMonitorIDInCallback", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_35getMonitorIDInCallback, METH_O, 0},
  {"getDataTypeInCallback", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_37getDataTypeInCallback, METH_O, 0},
  {"getDbrDataTypeInCallback", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_39getDbrDataTypeInCallback, METH_O, 0},
  {"getDbrBaseInCallback", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_41getDbrBaseInCallback, METH_O, 0},
  {"getHandlesFromWithinGroup", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_43getHandlesFromWithinGroup, METH_O, 0},
  {"close", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_45close, METH_O, 0},
  {"closeChannels", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_47closeChannels, METH_NOARGS, 0},
  {"allConnected", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_49allConnected, METH_NOARGS, 0},
  {"isConnected", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_51isConnected, METH_O, 0},
  {"printDisconnected", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_53printDisconnected, METH_NOARGS, 0},
  {"printDisconnectedHandles", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_55printDisconnectedHandles, METH_NOARGS, 0},
  {"printHandles", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_57printHandles, METH_NOARGS, 0},
  {"printHandle", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_59printHandle, METH_O, 0},
  {"getStatusSeverity", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_61getStatusSeverity, METH_O, 0},
  {"getStatus", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_63getStatus, METH_O, 0},
  {"getAlarmStatusSeverity", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_65getAlarmStatusSeverity, METH_O, 0},
  {"getTimeStamp", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_67getTimeStamp, METH_O, 0},
  {"getTimeStampAsDate", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_69getTimeStampAsDate, METH_O, 0},
  {"checkForHandle", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_71checkForHandle, METH_VARARGS|METH_KEYWORDS, 0},
  {"checkForHandleList", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_73checkForHandleList, METH_VARARGS|METH_KEYWORDS, 0},
  {"checkForGroupHandle", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_75checkForGroupHandle, METH_VARARGS|METH_KEYWORDS, 0},
  {"getPVNameFromHandle", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_77getPVNameFromHandle, METH_O, 0},
  {"getHandleFromPVName", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_79getHandleFromPVName, METH_O, 0},
  {"getChannelInfo", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_81getChannelInfo, METH_O, 0},
  {"getChannelList", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_83getChannelList, METH_O, 0},
  {"setDbrBase", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_85setDbrBase, METH_VARARGS|METH_KEYWORDS, 0},
  {"getDbrBase", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_87getDbrBase, METH_O, 0},
  {"getNonBlocking", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_89getNonBlocking, METH_O, 0},
  {"getStr", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_91getStr, METH_O, 0},
  {"getInt", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_93getInt, METH_O, 0},
  {"getFloat", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_95getFloat, METH_O, 0},
  {"get", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_97get, METH_VARARGS|METH_KEYWORDS, 0},
  {"getIntList", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_99getIntList, METH_O, 0},
  {"getFloatList", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_101getFloatList, METH_O, 0},
  {"getStrList", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_103getStrList, METH_O, 0},
  {"getList", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_105getList, METH_VARARGS|METH_KEYWORDS, 0},
  {"getStrArray", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_107getStrArray, METH_VARARGS|METH_KEYWORDS, 0},
  {"getIntArray", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_109getIntArray, METH_VARARGS|METH_KEYWORDS, 0},
  {"getFloatArray", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_111getFloatArray, METH_VARARGS|METH_KEYWORDS, 0},
  {"getArray", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_113getArray, METH_VARARGS|METH_KEYWORDS, 0},
  {"getPVInt", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_115getPVInt, METH_O, 0},
  {"getPVFloat", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_117getPVFloat, METH_O, 0},
  {"getPVStr", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_119getPVStr, METH_O, 0},
  {"getPV", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_121getPV, METH_VARARGS|METH_KEYWORDS, 0},
  {"getPVStrList", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_123getPVStrList, METH_O, 0},
  {"getPVIntList", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_125getPVIntList, METH_O, 0},
  {"getPVFloatList", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_127getPVFloatList, METH_O, 0},
  {"getPVList", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_129getPVList, METH_VARARGS|METH_KEYWORDS, 0},
  {"printStatusIfError", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_131printStatusIfError, METH_VARARGS|METH_KEYWORDS, 0},
  {"getAsyn", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_133getAsyn, METH_O, 0},
  {"waitForBundledEvents", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_135waitForBundledEvents, METH_O, 0},
  {"getStrScalarList", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_137getStrScalarList, METH_O, 0},
  {"getIntScalarList", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_139getIntScalarList, METH_O, 0},
  {"getFloatScalarList", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_141getFloatScalarList, METH_O, 0},
  {"getScalarList", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_143getScalarList, METH_VARARGS|METH_KEYWORDS, 0},
  {"getCompoundList", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_145getCompoundList, METH_VARARGS|METH_KEYWORDS, 0},
  {"getStrCache", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_147getStrCache, METH_O, 0},
  {"getIntCache", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_149getIntCache, METH_O, 0},
  {"getFloatCache", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_151getFloatCache, METH_O, 0},
  {"getCache", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_153getCache, METH_VARARGS|METH_KEYWORDS, 0},
  {"getStrArrayCache", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_155getStrArrayCache, METH_VARARGS|METH_KEYWORDS, 0},
  {"getIntArrayCache", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_157getIntArrayCache, METH_VARARGS|METH_KEYWORDS, 0},
  {"getFloatArrayCache", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_159getFloatArrayCache, METH_VARARGS|METH_KEYWORDS, 0},
  {"getArrayCache", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_161getArrayCache, METH_VARARGS|METH_KEYWORDS, 0},
  {"getPVStrCache", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_163getPVStrCache, METH_O, 0},
  {"getPVIntCache", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_165getPVIntCache, METH_O, 0},
  {"getPVFloatCache", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_167getPVFloatCache, METH_O, 0},
  {"getPVCache", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_169getPVCache, METH_VARARGS|METH_KEYWORDS, 0},
  {"getCtrl", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_171getCtrl, METH_VARARGS|METH_KEYWORDS, 0},
  {"getCtrlCache", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_173getCtrlCache, METH_VARARGS|METH_KEYWORDS, 0},
  {"groupMonitorStart", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_175groupMonitorStart, METH_VARARGS|METH_KEYWORDS, 0},
  {"getGroupStr", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_177getGroupStr, METH_O, 0},
  {"getGroupInt", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_179getGroupInt, METH_O, 0},
  {"getGroupFloat", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_181getGroupFloat, METH_O, 0},
  {"getGroup", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_183getGroup, METH_VARARGS|METH_KEYWORDS, 0},
  {"getGroupCache", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_185getGroupCache, METH_VARARGS|METH_KEYWORDS, 0},
  {"getPVGroupStr", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_187getPVGroupStr, METH_O, 0},
  {"getPVGroupInt", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_189getPVGroupInt, METH_O, 0},
  {"getPVGroupFloat", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_191getPVGroupFloat, METH_O, 0},
  {"getPVGroup", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_193getPVGroup, METH_VARARGS|METH_KEYWORDS, 0},
  {"PVGroupValuesToList", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_195PVGroupValuesToList, METH_O, 0},
  {"groupMemberList", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_197groupMemberList, METH_O, 0},
  {"grouping", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_199grouping, METH_VARARGS|METH_KEYWORDS, 0},
  {"defineGroup", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_201defineGroup, METH_VARARGS|METH_KEYWORDS, 0},
  {"groupOpen", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_203groupOpen, METH_O, 0},
  {"groupClose", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_205groupClose, METH_O, 0},
  {"getNoMonitors", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_207getNoMonitors, METH_O, 0},
  {"getMonitorIDs", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_209getMonitorIDs, METH_O, 0},
  {"monitorStart", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_211monitorStart, METH_VARARGS|METH_KEYWORDS, 0},
  {"monitorStop", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_213monitorStop, METH_VARARGS|METH_KEYWORDS, 0},
  {"monitorStopAll", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_215monitorStopAll, METH_NOARGS, 0},
  {"set", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_217set, METH_VARARGS|METH_KEYWORDS, 0},
  {"setScalarList", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_219setScalarList, METH_VARARGS|METH_KEYWORDS, 0},
  {"setCompoundList", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_221setCompoundList, METH_VARARGS|METH_KEYWORDS, 0},
  {"setGroup", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_223setGroup, METH_VARARGS|METH_KEYWORDS, 0},
  {"setAndMatchMany", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_225setAndMatchMany, METH_VARARGS|METH_KEYWORDS, 0},
  {"setAndMatch", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_227setAndMatch, METH_VARARGS|METH_KEYWORDS, 0},
  {"setNelemToRetrieveFromCacheToOne", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_229setNelemToRetrieveFromCacheToOne, METH_O, 0},
  {"setNelemToRetrieveFromCache", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_231setNelemToRetrieveFromCache, METH_VARARGS|METH_KEYWORDS, 0},
  {"terminate", (PyCFunction)__pyx_pw_6PyCafe_6CyCafe_233terminate, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6PyCafe_CyCafe = {
  PyVarObject_HEAD_INIT(0, 0)
  "PyCafe.CyCafe", /*tp_name*/
  sizeof(struct __pyx_obj_6PyCafe_CyCafe), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6PyCafe_CyCafe, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6PyCafe_CyCafe, /*tp_traverse*/
  __pyx_tp_clear_6PyCafe_CyCafe, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6PyCafe_CyCafe, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6PyCafe_CyCafe, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_array_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_array_obj *)o);
  p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_format = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_array___cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_array(PyObject *o) {
  struct __pyx_array_obj *p = (struct __pyx_array_obj *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_array___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->mode);
  Py_CLEAR(p->_format);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_array(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_array(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_array___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_tp_getattro_array(PyObject *o, PyObject *n) {
  PyObject *v = PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_array___getattr__(o, n);
  }
  return v;
}

static PyObject *__pyx_getprop___pyx_array_memview(PyObject *o, CYTHON_UNUSED void *x) {
  return get_memview(o);
}

static PyMethodDef __pyx_methods_array[] = {
  {"__getattr__", (PyCFunction)__pyx_array___getattr__, METH_O|METH_COEXIST, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_array[] = {
  {(char *)"memview", __pyx_getprop___pyx_array_memview, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_array = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_array, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_array = {
  0, /*mp_length*/
  __pyx_array___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_array, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_array = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_array_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_array = {
  PyVarObject_HEAD_INIT(0, 0)
  "PyCafe.array", /*tp_name*/
  sizeof(struct __pyx_array_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_array, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_array, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_array, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_array, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_array, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_array, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_array, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_array, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_MemviewEnum_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_MemviewEnum_obj *)o);
  p->name = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_Enum(PyObject *o) {
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->name);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_Enum(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  if (p->name) {
    e = (*v)(p->name, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_Enum(PyObject *o) {
  PyObject* tmp;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  tmp = ((PyObject*)p->name);
  p->name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_Enum[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_MemviewEnum = {
  PyVarObject_HEAD_INIT(0, 0)
  "PyCafe.Enum", /*tp_name*/
  sizeof(struct __pyx_MemviewEnum_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_Enum, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_MemviewEnum___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_Enum, /*tp_traverse*/
  __pyx_tp_clear_Enum, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_Enum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_MemviewEnum___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_Enum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_memoryview __pyx_vtable_memoryview;

static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryview_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryview_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_memoryview;
  p->obj = Py_None; Py_INCREF(Py_None);
  p->_size = Py_None; Py_INCREF(Py_None);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  p->view.obj = NULL;
  if (unlikely(__pyx_memoryview___cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_memoryview(PyObject *o) {
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_memoryview___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->obj);
  Py_CLEAR(p->_size);
  Py_CLEAR(p->_array_interface);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_memoryview(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  if (p->obj) {
    e = (*v)(p->obj, a); if (e) return e;
  }
  if (p->_size) {
    e = (*v)(p->_size, a); if (e) return e;
  }
  if (p->_array_interface) {
    e = (*v)(p->_array_interface, a); if (e) return e;
  }
  if (p->view.obj) {
    e = (*v)(p->view.obj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_memoryview(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  tmp = ((PyObject*)p->obj);
  p->obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_size);
  p->_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_array_interface);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  Py_CLEAR(p->view.obj);
  return 0;
}
static PyObject *__pyx_sq_item_memoryview(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_memoryview(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_memoryview___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop___pyx_memoryview_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview_transpose(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview__get__base(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview_get_shape(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_strides(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview_get_strides(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_suboffsets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview_get_suboffsets(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview_get_ndim(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_itemsize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview_get_itemsize(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_nbytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview_get_nbytes(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview_get_size(o);
}

static PyMethodDef __pyx_methods_memoryview[] = {
  {"is_c_contig", (PyCFunction)__pyx_memoryview_is_c_contig, METH_NOARGS, 0},
  {"is_f_contig", (PyCFunction)__pyx_memoryview_is_f_contig, METH_NOARGS, 0},
  {"copy", (PyCFunction)__pyx_memoryview_copy, METH_NOARGS, 0},
  {"copy_fortran", (PyCFunction)__pyx_memoryview_copy_fortran, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_memoryview[] = {
  {(char *)"T", __pyx_getprop___pyx_memoryview_T, 0, 0, 0},
  {(char *)"base", __pyx_getprop___pyx_memoryview_base, 0, 0, 0},
  {(char *)"shape", __pyx_getprop___pyx_memoryview_shape, 0, 0, 0},
  {(char *)"strides", __pyx_getprop___pyx_memoryview_strides, 0, 0, 0},
  {(char *)"suboffsets", __pyx_getprop___pyx_memoryview_suboffsets, 0, 0, 0},
  {(char *)"ndim", __pyx_getprop___pyx_memoryview_ndim, 0, 0, 0},
  {(char *)"itemsize", __pyx_getprop___pyx_memoryview_itemsize, 0, 0, 0},
  {(char *)"nbytes", __pyx_getprop___pyx_memoryview_nbytes, 0, 0, 0},
  {(char *)"size", __pyx_getprop___pyx_memoryview_size, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_memoryview = {
  __pyx_memoryview___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_memoryview, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_memoryview = {
  __pyx_memoryview___len__, /*mp_length*/
  __pyx_memoryview___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_memoryview, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_memoryview = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_memoryview = {
  PyVarObject_HEAD_INIT(0, 0)
  "PyCafe.memoryview", /*tp_name*/
  sizeof(struct __pyx_memoryview_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_memoryview, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_memoryview___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_memoryview, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_memoryview, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_memoryview___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_memoryview, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_memoryview, /*tp_traverse*/
  __pyx_tp_clear_memoryview, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_memoryview, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_memoryview, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_memoryview, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct__memoryviewslice __pyx_vtable__memoryviewslice;

static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryviewslice_obj *p;
  PyObject *o = __pyx_tp_new_memoryview(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryviewslice_obj *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_memoryview*)__pyx_vtabptr__memoryviewslice;
  p->from_object = Py_None; Py_INCREF(Py_None);
  p->from_slice.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc__memoryviewslice(PyObject *o) {
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_memoryviewslice___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->from_object);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_memoryview(o);
}

static int __pyx_tp_traverse__memoryviewslice(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  e = __pyx_tp_traverse_memoryview(o, v, a); if (e) return e;
  if (p->from_object) {
    e = (*v)(p->from_object, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear__memoryviewslice(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  __pyx_tp_clear_memoryview(o);
  tmp = ((PyObject*)p->from_object);
  p->from_object = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  __PYX_XDEC_MEMVIEW(&p->from_slice, 1);
  return 0;
}

static PyObject *__pyx_getprop___pyx_memoryviewslice_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryviewslice__get__base(o);
}

static PyMethodDef __pyx_methods__memoryviewslice[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets__memoryviewslice[] = {
  {(char *)"base", __pyx_getprop___pyx_memoryviewslice_base, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_memoryviewslice = {
  PyVarObject_HEAD_INIT(0, 0)
  "PyCafe._memoryviewslice", /*tp_name*/
  sizeof(struct __pyx_memoryviewslice_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc__memoryviewslice, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Internal class for passing memoryview slices to Python", /*tp_doc*/
  __pyx_tp_traverse__memoryviewslice, /*tp_traverse*/
  __pyx_tp_clear__memoryviewslice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods__memoryviewslice, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets__memoryviewslice, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new__memoryviewslice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "PyCafe",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_ASCII, __pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 0, 1, 1},
  {&__pyx_kp_u_Allowed_DBR_TYPEs_are_DBR_PLAIN, __pyx_k_Allowed_DBR_TYPEs_are_DBR_PLAIN, sizeof(__pyx_k_Allowed_DBR_TYPEs_are_DBR_PLAIN), 0, 1, 0, 0},
  {&__pyx_kp_u_Analysing_statusList, __pyx_k_Analysing_statusList, sizeof(__pyx_k_Analysing_statusList), 0, 1, 0, 0},
  {&__pyx_kp_u_Assuming_DBR_TIME, __pyx_k_Assuming_DBR_TIME, sizeof(__pyx_k_Assuming_DBR_TIME), 0, 1, 0, 0},
  {&__pyx_kp_s_Buffer_view_does_not_expose_stri, __pyx_k_Buffer_view_does_not_expose_stri, sizeof(__pyx_k_Buffer_view_does_not_expose_stri), 0, 0, 1, 0},
  {&__pyx_kp_s_Can_only_create_a_buffer_that_is, __pyx_k_Can_only_create_a_buffer_that_is, sizeof(__pyx_k_Can_only_create_a_buffer_that_is), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_index_with_type_s, __pyx_k_Cannot_index_with_type_s, sizeof(__pyx_k_Cannot_index_with_type_s), 0, 0, 1, 0},
  {&__pyx_n_u_Channel, __pyx_k_Channel, sizeof(__pyx_k_Channel), 0, 1, 0, 1},
  {&__pyx_kp_u_Data_to_be_presented_in_native_d, __pyx_k_Data_to_be_presented_in_native_d, sizeof(__pyx_k_Data_to_be_presented_in_native_d), 0, 1, 0, 0},
  {&__pyx_kp_u_ERROR_GROUP_MEMBER_MISMATCH, __pyx_k_ERROR_GROUP_MEMBER_MISMATCH, sizeof(__pyx_k_ERROR_GROUP_MEMBER_MISMATCH), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_a, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_a, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_a), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_c, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_c, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_c), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_10, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_10, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_10), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_11, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_11, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_11), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_12, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_12, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_12), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_13, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_13, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_13), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_14, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_14, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_14), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_15, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_15, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_15), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_16, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_16, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_16), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_17, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_17, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_17), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_18, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_18, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_18), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_19, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_19, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_19), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_2, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_2, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_2), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_20, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_20, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_20), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_21, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_21, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_21), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_22, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_22, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_22), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_23, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_23, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_23), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_24, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_24, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_24), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_25, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_25, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_25), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_26, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_26, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_26), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_27, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_27, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_27), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_3, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_3, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_3), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_4, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_4, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_4), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_5, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_5, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_5), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_6, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_6, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_6), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_7, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_7, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_7), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_8, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_8, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_8), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_9, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_9, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_g_9), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_i, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_i, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_i), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_m, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_m, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_m), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_m_2, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_m_2, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_m_2), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_m_3, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_m_3, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_m_3), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_m_4, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_m_4, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_m_4), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_o, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_o, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_o), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_p, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_p, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_p), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_p_2, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_p_2, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_p_2), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_p_3, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_p_3, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_p_3), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_p_4, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_p_4, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_p_4), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_p_5, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_p_5, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_p_5), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_10, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_10, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_10), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_11, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_11, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_11), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_12, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_12, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_12), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_13, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_13, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_13), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_14, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_14, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_14), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_15, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_15, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_15), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_16, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_16, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_16), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_17, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_17, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_17), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_2, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_2, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_2), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_3, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_3, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_3), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_4, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_4, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_4), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_5, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_5, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_5), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_6, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_6, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_6), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_7, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_7, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_7), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_8, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_8, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_8), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_9, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_9, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_s_9), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_v, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_v, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_v), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_w, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_w, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_w), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_w_2, __pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_w_2, sizeof(__pyx_k_EXCEPTION_RAISED_IN_PyCafe_def_w_2), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_c, __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_c, sizeof(__pyx_k_EXCEPTION_RAISED_in_PyCafe_def_c), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_c_2, __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_c_2, sizeof(__pyx_k_EXCEPTION_RAISED_in_PyCafe_def_c_2), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g, __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g, sizeof(__pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_10, __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_10, sizeof(__pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_10), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_11, __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_11, sizeof(__pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_11), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_12, __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_12, sizeof(__pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_12), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_13, __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_13, sizeof(__pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_13), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_14, __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_14, sizeof(__pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_14), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_2, __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_2, sizeof(__pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_2), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_3, __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_3, sizeof(__pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_3), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_4, __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_4, sizeof(__pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_4), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_5, __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_5, sizeof(__pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_5), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_6, __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_6, sizeof(__pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_6), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_7, __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_7, sizeof(__pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_7), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_8, __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_8, sizeof(__pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_8), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_9, __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_9, sizeof(__pyx_k_EXCEPTION_RAISED_in_PyCafe_def_g_9), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_m, __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_m, sizeof(__pyx_k_EXCEPTION_RAISED_in_PyCafe_def_m), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_o, __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_o, sizeof(__pyx_k_EXCEPTION_RAISED_in_PyCafe_def_o), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_o_2, __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_o_2, sizeof(__pyx_k_EXCEPTION_RAISED_in_PyCafe_def_o_2), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_s, __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_s, sizeof(__pyx_k_EXCEPTION_RAISED_in_PyCafe_def_s), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_s_2, __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_s_2, sizeof(__pyx_k_EXCEPTION_RAISED_in_PyCafe_def_s_2), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_s_3, __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_s_3, sizeof(__pyx_k_EXCEPTION_RAISED_in_PyCafe_def_s_3), 0, 1, 0, 0},
  {&__pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_s_4, __pyx_k_EXCEPTION_RAISED_in_PyCafe_def_s_4, sizeof(__pyx_k_EXCEPTION_RAISED_in_PyCafe_def_s_4), 0, 1, 0, 0},
  {&__pyx_n_s_Ellipsis, __pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 0, 1, 1},
  {&__pyx_kp_s_Empty_shape_tuple_for_cython_arr, __pyx_k_Empty_shape_tuple_for_cython_arr, sizeof(__pyx_k_Empty_shape_tuple_for_cython_arr), 0, 0, 1, 0},
  {&__pyx_kp_u_Entering_0_for_element, __pyx_k_Entering_0_for_element, sizeof(__pyx_k_Entering_0_for_element), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_in_def_getAsyn, __pyx_k_Error_in_def_getAsyn, sizeof(__pyx_k_Error_in_def_getAsyn), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_in_def_getScalarList, __pyx_k_Error_in_def_getScalarList, sizeof(__pyx_k_Error_in_def_getScalarList), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_in_def_grouping_for_group, __pyx_k_Error_in_def_grouping_for_group, sizeof(__pyx_k_Error_in_def_grouping_for_group), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_in_def_waitForBundledEvent, __pyx_k_Error_in_def_waitForBundledEvent, sizeof(__pyx_k_Error_in_def_waitForBundledEvent), 0, 1, 0, 0},
  {&__pyx_n_s_Exception, __pyx_k_Exception, sizeof(__pyx_k_Exception), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_kp_u_GROUP_HANDLE, __pyx_k_GROUP_HANDLE, sizeof(__pyx_k_GROUP_HANDLE), 0, 1, 0, 0},
  {&__pyx_kp_u_GROUP_NAME, __pyx_k_GROUP_NAME, sizeof(__pyx_k_GROUP_NAME), 0, 1, 0, 0},
  {&__pyx_kp_u_GROUP_STATUS, __pyx_k_GROUP_STATUS, sizeof(__pyx_k_GROUP_STATUS), 0, 1, 0, 0},
  {&__pyx_kp_u_Handle, __pyx_k_Handle, sizeof(__pyx_k_Handle), 0, 1, 0, 0},
  {&__pyx_n_u_ICAFE_CA_OP_CONN_DOWN, __pyx_k_ICAFE_CA_OP_CONN_DOWN, sizeof(__pyx_k_ICAFE_CA_OP_CONN_DOWN), 0, 1, 0, 1},
  {&__pyx_n_u_ICAFE_CS_NEVER_CONN, __pyx_k_ICAFE_CS_NEVER_CONN, sizeof(__pyx_k_ICAFE_CS_NEVER_CONN), 0, 1, 0, 1},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Indirect_dimensions_not_supporte, __pyx_k_Indirect_dimensions_not_supporte, sizeof(__pyx_k_Indirect_dimensions_not_supporte), 0, 0, 1, 0},
  {&__pyx_kp_u_Input_data_whether_within_a_list, __pyx_k_Input_data_whether_within_a_list, sizeof(__pyx_k_Input_data_whether_within_a_list), 0, 1, 0, 0},
  {&__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_k_Invalid_mode_expected_c_or_fortr, sizeof(__pyx_k_Invalid_mode_expected_c_or_fortr), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_k_Invalid_shape_in_axis_d_d, sizeof(__pyx_k_Invalid_shape_in_axis_d_d), 0, 0, 1, 0},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_kp_u_Member, __pyx_k_Member, sizeof(__pyx_k_Member), 0, 1, 0, 0},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_k_MemoryView_of_r_at_0x_x, sizeof(__pyx_k_MemoryView_of_r_at_0x_x), 0, 0, 1, 0},
  {&__pyx_kp_s_MemoryView_of_r_object, __pyx_k_MemoryView_of_r_object, sizeof(__pyx_k_MemoryView_of_r_object), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at, __pyx_k_No_value_specified_for_struct_at, sizeof(__pyx_k_No_value_specified_for_struct_at), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at_2, __pyx_k_No_value_specified_for_struct_at_2, sizeof(__pyx_k_No_value_specified_for_struct_at_2), 0, 0, 1, 0},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_b_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 0, 1},
  {&__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_k_Out_of_bounds_on_buffer_access_a, sizeof(__pyx_k_Out_of_bounds_on_buffer_access_a), 0, 0, 1, 0},
  {&__pyx_kp_u_PV, __pyx_k_PV, sizeof(__pyx_k_PV), 0, 1, 0, 0},
  {&__pyx_kp_u_PV_2, __pyx_k_PV_2, sizeof(__pyx_k_PV_2), 0, 1, 0, 0},
  {&__pyx_n_u_PV_3, __pyx_k_PV_3, sizeof(__pyx_k_PV_3), 0, 1, 0, 1},
  {&__pyx_n_s_PyCafe, __pyx_k_PyCafe, sizeof(__pyx_k_PyCafe), 0, 0, 1, 1},
  {&__pyx_kp_u_PyCafe_def_set_WARNING_DATA_TYPE, __pyx_k_PyCafe_def_set_WARNING_DATA_TYPE, sizeof(__pyx_k_PyCafe_def_set_WARNING_DATA_TYPE), 0, 1, 0, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_kp_b_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 0, 0},
  {&__pyx_kp_u_The_value_entered_was, __pyx_k_The_value_entered_was, sizeof(__pyx_k_The_value_entered_was), 0, 1, 0, 0},
  {&__pyx_kp_u_This_line_in_PyCafe_def_getAsLis, __pyx_k_This_line_in_PyCafe_def_getAsLis, sizeof(__pyx_k_This_line_in_PyCafe_def_getAsLis), 0, 1, 0, 0},
  {&__pyx_kp_u_This_line_in_PyCafe_def_getCache, __pyx_k_This_line_in_PyCafe_def_getCache, sizeof(__pyx_k_This_line_in_PyCafe_def_getCache), 0, 1, 0, 0},
  {&__pyx_kp_u_This_line_in_PyCafe_def_get_shou, __pyx_k_This_line_in_PyCafe_def_get_shou, sizeof(__pyx_k_This_line_in_PyCafe_def_get_shou), 0, 1, 0, 0},
  {&__pyx_kp_u_This_line_in_PyCafe_def_setGroup, __pyx_k_This_line_in_PyCafe_def_setGroup, sizeof(__pyx_k_This_line_in_PyCafe_def_setGroup), 0, 1, 0, 0},
  {&__pyx_kp_u_This_line_in_PyCafe_def_setScala, __pyx_k_This_line_in_PyCafe_def_setScala, sizeof(__pyx_k_This_line_in_PyCafe_def_setScala), 0, 1, 0, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_u_UTF_8, __pyx_k_UTF_8, sizeof(__pyx_k_UTF_8), 0, 1, 0, 0},
  {&__pyx_kp_s_Unable_to_convert_item_to_object, __pyx_k_Unable_to_convert_item_to_object, sizeof(__pyx_k_Unable_to_convert_item_to_object), 0, 0, 1, 0},
  {&__pyx_kp_u_Valid_input_parameters_for_data, __pyx_k_Valid_input_parameters_for_data, sizeof(__pyx_k_Valid_input_parameters_for_data), 0, 1, 0, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_u_WARNING_PyCafe_def_setDbrBase_ha, __pyx_k_WARNING_PyCafe_def_setDbrBase_ha, sizeof(__pyx_k_WARNING_PyCafe_def_setDbrBase_ha), 0, 1, 0, 0},
  {&__pyx_kp_u_Warning_from_groupMonitorStart, __pyx_k_Warning_from_groupMonitorStart, sizeof(__pyx_k_Warning_from_groupMonitorStart), 0, 1, 0, 0},
  {&__pyx_kp_u_Warning_from_monitorStart_for_h, __pyx_k_Warning_from_monitorStart_for_h, sizeof(__pyx_k_Warning_from_monitorStart_for_h), 0, 1, 0, 0},
  {&__pyx_kp_u__102, __pyx_k__102, sizeof(__pyx_k__102), 0, 1, 0, 0},
  {&__pyx_kp_u__168, __pyx_k__168, sizeof(__pyx_k__168), 0, 1, 0, 0},
  {&__pyx_kp_u__169, __pyx_k__169, sizeof(__pyx_k__169), 0, 1, 0, 0},
  {&__pyx_kp_b__236, __pyx_k__236, sizeof(__pyx_k__236), 0, 0, 0, 0},
  {&__pyx_kp_b__237, __pyx_k__237, sizeof(__pyx_k__237), 0, 0, 0, 0},
  {&__pyx_kp_b__238, __pyx_k__238, sizeof(__pyx_k__238), 0, 0, 0, 0},
  {&__pyx_kp_u__239, __pyx_k__239, sizeof(__pyx_k__239), 0, 1, 0, 0},
  {&__pyx_kp_b__85, __pyx_k__85, sizeof(__pyx_k__85), 0, 0, 0, 0},
  {&__pyx_kp_u__85, __pyx_k__85, sizeof(__pyx_k__85), 0, 1, 0, 0},
  {&__pyx_kp_u__98, __pyx_k__98, sizeof(__pyx_k__98), 0, 1, 0, 0},
  {&__pyx_kp_u__99, __pyx_k__99, sizeof(__pyx_k__99), 0, 1, 0, 0},
  {&__pyx_kp_u_accessRead_d, __pyx_k_accessRead_d, sizeof(__pyx_k_accessRead_d), 0, 1, 0, 0},
  {&__pyx_kp_u_accessWrite_d, __pyx_k_accessWrite_d, sizeof(__pyx_k_accessWrite_d), 0, 1, 0, 0},
  {&__pyx_kp_s_afs_psi_ch_project_cafe_gitwork, __pyx_k_afs_psi_ch_project_cafe_gitwork, sizeof(__pyx_k_afs_psi_ch_project_cafe_gitwork), 0, 0, 1, 0},
  {&__pyx_n_s_alarmSeverity, __pyx_k_alarmSeverity, sizeof(__pyx_k_alarmSeverity), 0, 0, 1, 1},
  {&__pyx_kp_u_alarmSeverity_d, __pyx_k_alarmSeverity_d, sizeof(__pyx_k_alarmSeverity_d), 0, 1, 0, 0},
  {&__pyx_n_s_alarmStatus, __pyx_k_alarmStatus, sizeof(__pyx_k_alarmStatus), 0, 0, 1, 1},
  {&__pyx_kp_u_alarmStatus_d, __pyx_k_alarmStatus_d, sizeof(__pyx_k_alarmStatus_d), 0, 1, 0, 0},
  {&__pyx_n_s_allocate_buffer, __pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_kp_u_as_channel_is_not_connected, __pyx_k_as_channel_is_not_connected, sizeof(__pyx_k_as_channel_is_not_connected), 0, 1, 0, 0},
  {&__pyx_n_s_ascontiguousarray, __pyx_k_ascontiguousarray, sizeof(__pyx_k_ascontiguousarray), 0, 0, 1, 1},
  {&__pyx_n_s_asnumpy, __pyx_k_asnumpy, sizeof(__pyx_k_asnumpy), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
  {&__pyx_kp_u_cafeConnectionState_s_d, __pyx_k_cafeConnectionState_s_d, sizeof(__pyx_k_cafeConnectionState_s_d), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_PyCafe_CyCafe, __pyx_k_cafe_PyCafe_CyCafe, sizeof(__pyx_k_cafe_PyCafe_CyCafe), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_allConnected, __pyx_k_cafe_allConnected, sizeof(__pyx_k_cafe_allConnected), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_checkForGroupHandle_groupNa, __pyx_k_cafe_checkForGroupHandle_groupNa, sizeof(__pyx_k_cafe_checkForGroupHandle_groupNa), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_checkForHandleList_pvList, __pyx_k_cafe_checkForHandleList_pvList, sizeof(__pyx_k_cafe_checkForHandleList_pvList), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_checkForHandle_pv, __pyx_k_cafe_checkForHandle_pv, sizeof(__pyx_k_cafe_checkForHandle_pv), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_closeChannels, __pyx_k_cafe_closeChannels, sizeof(__pyx_k_cafe_closeChannels), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_close_handlePV_handle_pv, __pyx_k_cafe_close_handlePV_handle_pv, sizeof(__pyx_k_cafe_close_handlePV_handle_pv), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getAlarmStatusSeverity_hand, __pyx_k_cafe_getAlarmStatusSeverity_hand, sizeof(__pyx_k_cafe_getAlarmStatusSeverity_hand), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getArrayCache_handlePV_hand, __pyx_k_cafe_getArrayCache_handlePV_hand, sizeof(__pyx_k_cafe_getArrayCache_handlePV_hand), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getArrayCache_handlePV_hand_2, __pyx_k_cafe_getArrayCache_handlePV_hand_2, sizeof(__pyx_k_cafe_getArrayCache_handlePV_hand_2), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getArray_handlePV_handle_pv, __pyx_k_cafe_getArray_handlePV_handle_pv, sizeof(__pyx_k_cafe_getArray_handlePV_handle_pv), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getArray_handlePV_handle_pv_2, __pyx_k_cafe_getArray_handlePV_handle_pv_2, sizeof(__pyx_k_cafe_getArray_handlePV_handle_pv_2), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getChannelInfo_handlePV_han, __pyx_k_cafe_getChannelInfo_handlePV_han, sizeof(__pyx_k_cafe_getChannelInfo_handlePV_han), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getCtrlCache_handlePV_handl, __pyx_k_cafe_getCtrlCache_handlePV_handl, sizeof(__pyx_k_cafe_getCtrlCache_handlePV_handl), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getCtrlCache_handlePV_handl_2, __pyx_k_cafe_getCtrlCache_handlePV_handl_2, sizeof(__pyx_k_cafe_getCtrlCache_handlePV_handl_2), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getCtrl_handlePV_handle_pv, __pyx_k_cafe_getCtrl_handlePV_handle_pv, sizeof(__pyx_k_cafe_getCtrl_handlePV_handle_pv), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getCtrl_handlePV_handle_pv_2, __pyx_k_cafe_getCtrl_handlePV_handle_pv_2, sizeof(__pyx_k_cafe_getCtrl_handlePV_handle_pv_2), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getDbrBase_handlePV_handle, __pyx_k_cafe_getDbrBase_handlePV_handle, sizeof(__pyx_k_cafe_getDbrBase_handlePV_handle), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getFloatArrayCache_handlePV, __pyx_k_cafe_getFloatArrayCache_handlePV, sizeof(__pyx_k_cafe_getFloatArrayCache_handlePV), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getFloatArray_handlePV_hand, __pyx_k_cafe_getFloatArray_handlePV_hand, sizeof(__pyx_k_cafe_getFloatArray_handlePV_hand), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getFloatList_handlePV_handl, __pyx_k_cafe_getFloatList_handlePV_handl, sizeof(__pyx_k_cafe_getFloatList_handlePV_handl), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getFloatScalarList_handleLi, __pyx_k_cafe_getFloatScalarList_handleLi, sizeof(__pyx_k_cafe_getFloatScalarList_handleLi), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getFloathandlePV_handle_pv, __pyx_k_cafe_getFloathandlePV_handle_pv, sizeof(__pyx_k_cafe_getFloathandlePV_handle_pv), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getHandleFromPVName_str, __pyx_k_cafe_getHandleFromPVName_str, sizeof(__pyx_k_cafe_getHandleFromPVName_str), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getIntArrayCache_handlePV_h, __pyx_k_cafe_getIntArrayCache_handlePV_h, sizeof(__pyx_k_cafe_getIntArrayCache_handlePV_h), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getIntArray_handlePV_handle, __pyx_k_cafe_getIntArray_handlePV_handle, sizeof(__pyx_k_cafe_getIntArray_handlePV_handle), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getIntList_handlePV_handle, __pyx_k_cafe_getIntList_handlePV_handle, sizeof(__pyx_k_cafe_getIntList_handlePV_handle), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getIntScalarList_handleList, __pyx_k_cafe_getIntScalarList_handleList, sizeof(__pyx_k_cafe_getIntScalarList_handleList), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getInt_handlePV_handle_pv, __pyx_k_cafe_getInt_handlePV_handle_pv, sizeof(__pyx_k_cafe_getInt_handlePV_handle_pv), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getList_handlePV_handle_pv, __pyx_k_cafe_getList_handlePV_handle_pv, sizeof(__pyx_k_cafe_getList_handlePV_handle_pv), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getList_handlePV_handle_pv_2, __pyx_k_cafe_getList_handlePV_handle_pv_2, sizeof(__pyx_k_cafe_getList_handlePV_handle_pv_2), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getNoMonitors_handlePV_hand, __pyx_k_cafe_getNoMonitors_handlePV_hand, sizeof(__pyx_k_cafe_getNoMonitors_handlePV_hand), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getNonBlocking_handlePV_han, __pyx_k_cafe_getNonBlocking_handlePV_han, sizeof(__pyx_k_cafe_getNonBlocking_handlePV_han), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getPVCache_handlePV_handle, __pyx_k_cafe_getPVCache_handlePV_handle, sizeof(__pyx_k_cafe_getPVCache_handlePV_handle), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getPVCache_handlePV_handle_2, __pyx_k_cafe_getPVCache_handlePV_handle_2, sizeof(__pyx_k_cafe_getPVCache_handlePV_handle_2), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getPVFloatCache_handlePV_ha, __pyx_k_cafe_getPVFloatCache_handlePV_ha, sizeof(__pyx_k_cafe_getPVFloatCache_handlePV_ha), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getPVFloatList_handleList_h, __pyx_k_cafe_getPVFloatList_handleList_h, sizeof(__pyx_k_cafe_getPVFloatList_handleList_h), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getPVFloat_handlePV_handle, __pyx_k_cafe_getPVFloat_handlePV_handle, sizeof(__pyx_k_cafe_getPVFloat_handlePV_handle), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getPVIntCache_handlePV_hand, __pyx_k_cafe_getPVIntCache_handlePV_hand, sizeof(__pyx_k_cafe_getPVIntCache_handlePV_hand), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getPVIntList_handleList_han, __pyx_k_cafe_getPVIntList_handleList_han, sizeof(__pyx_k_cafe_getPVIntList_handleList_han), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getPVInt_handlePV_handle_pv, __pyx_k_cafe_getPVInt_handlePV_handle_pv, sizeof(__pyx_k_cafe_getPVInt_handlePV_handle_pv), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getPVList_handleList_handle, __pyx_k_cafe_getPVList_handleList_handle, sizeof(__pyx_k_cafe_getPVList_handleList_handle), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getPVList_handleList_handle_2, __pyx_k_cafe_getPVList_handleList_handle_2, sizeof(__pyx_k_cafe_getPVList_handleList_handle_2), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getPVNameFromHandle_int, __pyx_k_cafe_getPVNameFromHandle_int, sizeof(__pyx_k_cafe_getPVNameFromHandle_int), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getPVStrCache_handlePV_hand, __pyx_k_cafe_getPVStrCache_handlePV_hand, sizeof(__pyx_k_cafe_getPVStrCache_handlePV_hand), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getPVStrList_handleList_han, __pyx_k_cafe_getPVStrList_handleList_han, sizeof(__pyx_k_cafe_getPVStrList_handleList_han), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getPVStr_handlePV_handle_pv, __pyx_k_cafe_getPVStr_handlePV_handle_pv, sizeof(__pyx_k_cafe_getPVStr_handlePV_handle_pv), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getPV_handlePV_handle_pv, __pyx_k_cafe_getPV_handlePV_handle_pv, sizeof(__pyx_k_cafe_getPV_handlePV_handle_pv), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getPV_handlePV_handle_pv_dt, __pyx_k_cafe_getPV_handlePV_handle_pv_dt, sizeof(__pyx_k_cafe_getPV_handlePV_handle_pv_dt), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getScalarList_handleList_ha, __pyx_k_cafe_getScalarList_handleList_ha, sizeof(__pyx_k_cafe_getScalarList_handleList_ha), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getScalarList_handleList_ha_2, __pyx_k_cafe_getScalarList_handleList_ha_2, sizeof(__pyx_k_cafe_getScalarList_handleList_ha_2), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getStatus_handlePV_handle_p, __pyx_k_cafe_getStatus_handlePV_handle_p, sizeof(__pyx_k_cafe_getStatus_handlePV_handle_p), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getStrList_handlePV_handle, __pyx_k_cafe_getStrList_handlePV_handle, sizeof(__pyx_k_cafe_getStrList_handlePV_handle), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getStrScalarList_handleList, __pyx_k_cafe_getStrScalarList_handleList, sizeof(__pyx_k_cafe_getStrScalarList_handleList), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getStr_handlePV_handle_pv, __pyx_k_cafe_getStr_handlePV_handle_pv, sizeof(__pyx_k_cafe_getStr_handlePV_handle_pv), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getTimeStampDate_handlePV_h, __pyx_k_cafe_getTimeStampDate_handlePV_h, sizeof(__pyx_k_cafe_getTimeStampDate_handlePV_h), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_getTimeStamp_handlePV_handl, __pyx_k_cafe_getTimeStamp_handlePV_handl, sizeof(__pyx_k_cafe_getTimeStamp_handlePV_handl), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_get_handlePV_handle_pv, __pyx_k_cafe_get_handlePV_handle_pv, sizeof(__pyx_k_cafe_get_handlePV_handle_pv), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_get_handlePV_handle_pv_dt_n, __pyx_k_cafe_get_handlePV_handle_pv_dt_n, sizeof(__pyx_k_cafe_get_handlePV_handle_pv_dt_n), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_init, __pyx_k_cafe_init, sizeof(__pyx_k_cafe_init), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_isConnected_handlePV_handle, __pyx_k_cafe_isConnected_handlePV_handle, sizeof(__pyx_k_cafe_isConnected_handlePV_handle), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_monitorStopAll_handlePV_han, __pyx_k_cafe_monitorStopAll_handlePV_han, sizeof(__pyx_k_cafe_monitorStopAll_handlePV_han), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_monitorStop_handlePV_handle, __pyx_k_cafe_monitorStop_handlePV_handle, sizeof(__pyx_k_cafe_monitorStop_handlePV_handle), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_openNoWait, __pyx_k_cafe_openNoWait, sizeof(__pyx_k_cafe_openNoWait), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_openNow, __pyx_k_cafe_openNow, sizeof(__pyx_k_cafe_openNow), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_openNowAndWait_timeout, __pyx_k_cafe_openNowAndWait_timeout, sizeof(__pyx_k_cafe_openNowAndWait_timeout), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_printDisconnected, __pyx_k_cafe_printDisconnected, sizeof(__pyx_k_cafe_printDisconnected), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_printHandle_handlePV_handle, __pyx_k_cafe_printHandle_handlePV_handle, sizeof(__pyx_k_cafe_printHandle_handlePV_handle), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_printHandles, __pyx_k_cafe_printHandles, sizeof(__pyx_k_cafe_printHandles), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_setAndMatch_handlePVSet_han, __pyx_k_cafe_setAndMatch_handlePVSet_han, sizeof(__pyx_k_cafe_setAndMatch_handlePVSet_han), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_setDbrBase_handlePV_handle, __pyx_k_cafe_setDbrBase_handlePV_handle, sizeof(__pyx_k_cafe_setDbrBase_handlePV_handle), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_setGroup_ghandleName_vector, __pyx_k_cafe_setGroup_ghandleName_vector, sizeof(__pyx_k_cafe_setGroup_ghandleName_vector), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_setScalarList_handleList_ha, __pyx_k_cafe_setScalarList_handleList_ha, sizeof(__pyx_k_cafe_setScalarList_handleList_ha), 0, 1, 0, 0},
  {&__pyx_kp_u_cafe_set_handlePV_handle_pv_valS, __pyx_k_cafe_set_handlePV_handle_pv_valS, sizeof(__pyx_k_cafe_set_handlePV_handle_pv_valS), 0, 1, 0, 0},
  {&__pyx_n_s_cb, __pyx_k_cb, sizeof(__pyx_k_cb), 0, 0, 1, 1},
  {&__pyx_kp_u_channelID_x, __pyx_k_channelID_x, sizeof(__pyx_k_channelID_x), 0, 1, 0, 0},
  {&__pyx_n_s_checkForGroupHandle, __pyx_k_checkForGroupHandle, sizeof(__pyx_k_checkForGroupHandle), 0, 0, 1, 1},
  {&__pyx_n_s_checkForHandle, __pyx_k_checkForHandle, sizeof(__pyx_k_checkForHandle), 0, 0, 1, 1},
  {&__pyx_n_s_checkForHandleList, __pyx_k_checkForHandleList, sizeof(__pyx_k_checkForHandleList), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_kp_u_className_s, __pyx_k_className_s, sizeof(__pyx_k_className_s), 0, 1, 0, 0},
  {&__pyx_kp_u_connectFlag_d, __pyx_k_connectFlag_d, sizeof(__pyx_k_connectFlag_d), 0, 1, 0, 0},
  {&__pyx_kp_u_connectionState_s_d, __pyx_k_connectionState_s_d, sizeof(__pyx_k_connectionState_s_d), 0, 1, 0, 0},
  {&__pyx_kp_s_contiguous_and_direct, __pyx_k_contiguous_and_direct, sizeof(__pyx_k_contiguous_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_contiguous_and_indirect, __pyx_k_contiguous_and_indirect, sizeof(__pyx_k_contiguous_and_indirect), 0, 0, 1, 0},
  {&__pyx_kp_u_cyca_PyCafe_CyCa, __pyx_k_cyca_PyCafe_CyCa, sizeof(__pyx_k_cyca_PyCafe_CyCa), 0, 1, 0, 0},
  {&__pyx_kp_u_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 1, 0, 0},
  {&__pyx_kp_u_dataType_s_d, __pyx_k_dataType_s_d, sizeof(__pyx_k_dataType_s_d), 0, 1, 0, 0},
  {&__pyx_n_s_dbr, __pyx_k_dbr, sizeof(__pyx_k_dbr), 0, 0, 1, 1},
  {&__pyx_n_s_dbrBase, __pyx_k_dbrBase, sizeof(__pyx_k_dbrBase), 0, 0, 1, 1},
  {&__pyx_kp_u_dbr_base_type_should_be_one_of_D, __pyx_k_dbr_base_type_should_be_one_of_D, sizeof(__pyx_k_dbr_base_type_should_be_one_of_D), 0, 1, 0, 0},
  {&__pyx_kp_u_def_getScalarList, __pyx_k_def_getScalarList, sizeof(__pyx_k_def_getScalarList), 0, 1, 0, 0},
  {&__pyx_kp_u_does_not_match_the_length_of_da, __pyx_k_does_not_match_the_length_of_da, sizeof(__pyx_k_does_not_match_the_length_of_da), 0, 1, 0, 0},
  {&__pyx_n_u_double, __pyx_k_double, sizeof(__pyx_k_double), 0, 1, 0, 1},
  {&__pyx_n_s_dt, __pyx_k_dt, sizeof(__pyx_k_dt), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_dtype_is_object, __pyx_k_dtype_is_object, sizeof(__pyx_k_dtype_is_object), 0, 0, 1, 1},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_kp_u_enumStrings, __pyx_k_enumStrings, sizeof(__pyx_k_enumStrings), 0, 1, 0, 0},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_u_float, __pyx_k_float, sizeof(__pyx_k_float), 0, 1, 0, 1},
  {&__pyx_n_s_float64, __pyx_k_float64, sizeof(__pyx_k_float64), 0, 0, 1, 1},
  {&__pyx_n_s_force, __pyx_k_force, sizeof(__pyx_k_force), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 0, 1, 1},
  {&__pyx_n_u_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 1, 0, 1},
  {&__pyx_n_s_gName, __pyx_k_gName, sizeof(__pyx_k_gName), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_getArray, __pyx_k_getArray, sizeof(__pyx_k_getArray), 0, 0, 1, 1},
  {&__pyx_n_s_getArrayCache, __pyx_k_getArrayCache, sizeof(__pyx_k_getArrayCache), 0, 0, 1, 1},
  {&__pyx_n_s_getCache, __pyx_k_getCache, sizeof(__pyx_k_getCache), 0, 0, 1, 1},
  {&__pyx_n_s_getGroup, __pyx_k_getGroup, sizeof(__pyx_k_getGroup), 0, 0, 1, 1},
  {&__pyx_n_s_getHandlesFromWithinGroup, __pyx_k_getHandlesFromWithinGroup, sizeof(__pyx_k_getHandlesFromWithinGroup), 0, 0, 1, 1},
  {&__pyx_n_s_getList, __pyx_k_getList, sizeof(__pyx_k_getList), 0, 0, 1, 1},
  {&__pyx_n_s_getPV, __pyx_k_getPV, sizeof(__pyx_k_getPV), 0, 0, 1, 1},
  {&__pyx_n_s_getPVCache, __pyx_k_getPVCache, sizeof(__pyx_k_getPVCache), 0, 0, 1, 1},
  {&__pyx_n_s_getPVGroup, __pyx_k_getPVGroup, sizeof(__pyx_k_getPVGroup), 0, 0, 1, 1},
  {&__pyx_n_s_getPVList, __pyx_k_getPVList, sizeof(__pyx_k_getPVList), 0, 0, 1, 1},
  {&__pyx_n_s_getScalarList, __pyx_k_getScalarList, sizeof(__pyx_k_getScalarList), 0, 0, 1, 1},
  {&__pyx_n_s_getargspec, __pyx_k_getargspec, sizeof(__pyx_k_getargspec), 0, 0, 1, 1},
  {&__pyx_n_s_ghandleName, __pyx_k_ghandleName, sizeof(__pyx_k_ghandleName), 0, 0, 1, 1},
  {&__pyx_kp_u_ghandle_groupings_char_gname_lis, __pyx_k_ghandle_groupings_char_gname_lis, sizeof(__pyx_k_ghandle_groupings_char_gname_lis), 0, 1, 0, 0},
  {&__pyx_kp_u_ghandle_groupopen_char_gname, __pyx_k_ghandle_groupopen_char_gname, sizeof(__pyx_k_ghandle_groupopen_char_gname), 0, 1, 0, 0},
  {&__pyx_n_s_gname, __pyx_k_gname, sizeof(__pyx_k_gname), 0, 0, 1, 1},
  {&__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_k_got_differing_extents_in_dimensi, sizeof(__pyx_k_got_differing_extents_in_dimensi), 0, 0, 1, 0},
  {&__pyx_n_s_groupOpen, __pyx_k_groupOpen, sizeof(__pyx_k_groupOpen), 0, 0, 1, 1},
  {&__pyx_n_s_handleList, __pyx_k_handleList, sizeof(__pyx_k_handleList), 0, 0, 1, 1},
  {&__pyx_kp_u_handleList_cafe_defineGroup_gnam, __pyx_k_handleList_cafe_defineGroup_gnam, sizeof(__pyx_k_handleList_cafe_defineGroup_gnam), 0, 1, 0, 0},
  {&__pyx_n_s_handlePV, __pyx_k_handlePV, sizeof(__pyx_k_handlePV), 0, 0, 1, 1},
  {&__pyx_n_s_handlePVMatch, __pyx_k_handlePVMatch, sizeof(__pyx_k_handlePVMatch), 0, 0, 1, 1},
  {&__pyx_n_s_handlePVSet, __pyx_k_handlePVSet, sizeof(__pyx_k_handlePVSet), 0, 0, 1, 1},
  {&__pyx_kp_u_handle_handleList_cafe_open_pv, __pyx_k_handle_handleList_cafe_open_pv, sizeof(__pyx_k_handle_handleList_cafe_open_pv), 0, 1, 0, 0},
  {&__pyx_n_u_has, __pyx_k_has, sizeof(__pyx_k_has), 0, 1, 0, 1},
  {&__pyx_kp_u_has_error, __pyx_k_has_error, sizeof(__pyx_k_has_error), 0, 1, 0, 0},
  {&__pyx_kp_u_hence_assuming_DBR_TIME, __pyx_k_hence_assuming_DBR_TIME, sizeof(__pyx_k_hence_assuming_DBR_TIME), 0, 1, 0, 0},
  {&__pyx_kp_u_hostName_s, __pyx_k_hostName_s, sizeof(__pyx_k_hostName_s), 0, 1, 0, 0},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_inspect, __pyx_k_inspect, sizeof(__pyx_k_inspect), 0, 0, 1, 1},
  {&__pyx_n_u_int, __pyx_k_int, sizeof(__pyx_k_int), 0, 1, 0, 1},
  {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
  {&__pyx_n_u_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 1, 0, 1},
  {&__pyx_n_u_int64, __pyx_k_int64, sizeof(__pyx_k_int64), 0, 1, 0, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_kp_s_itemsize_0_for_cython_array, __pyx_k_itemsize_0_for_cython_array, sizeof(__pyx_k_itemsize_0_for_cython_array), 0, 0, 1, 0},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_kp_u_list_cafe_PVGroupValuesToList_pv, __pyx_k_list_cafe_PVGroupValuesToList_pv, sizeof(__pyx_k_list_cafe_PVGroupValuesToList_pv), 0, 1, 0, 0},
  {&__pyx_n_u_long, __pyx_k_long, sizeof(__pyx_k_long), 0, 1, 0, 1},
  {&__pyx_kp_u_lowerAlarmLimit_f, __pyx_k_lowerAlarmLimit_f, sizeof(__pyx_k_lowerAlarmLimit_f), 0, 1, 0, 0},
  {&__pyx_kp_u_lowerControlLimit_f, __pyx_k_lowerControlLimit_f, sizeof(__pyx_k_lowerControlLimit_f), 0, 1, 0, 0},
  {&__pyx_kp_u_lowerDisplayLimit_f, __pyx_k_lowerDisplayLimit_f, sizeof(__pyx_k_lowerDisplayLimit_f), 0, 1, 0, 0},
  {&__pyx_kp_u_lowerWarningLimit_f, __pyx_k_lowerWarningLimit_f, sizeof(__pyx_k_lowerWarningLimit_f), 0, 1, 0, 0},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mask, __pyx_k_mask, sizeof(__pyx_k_mask), 0, 0, 1, 1},
  {&__pyx_kp_u_members_while_group_has, __pyx_k_members_while_group_has, sizeof(__pyx_k_members_while_group_has), 0, 1, 0, 0},
  {&__pyx_n_s_memview, __pyx_k_memview, sizeof(__pyx_k_memview), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_mpid, __pyx_k_mpid, sizeof(__pyx_k_mpid), 0, 0, 1, 1},
  {&__pyx_kp_u_mpid_cafe_monitorStart_handlePV, __pyx_k_mpid_cafe_monitorStart_handlePV, sizeof(__pyx_k_mpid_cafe_monitorStart_handlePV), 0, 1, 0, 0},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_u_native, __pyx_k_native, sizeof(__pyx_k_native), 0, 1, 0, 1},
  {&__pyx_n_s_ndarray, __pyx_k_ndarray, sizeof(__pyx_k_ndarray), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_kp_u_nelem_d, __pyx_k_nelem_d, sizeof(__pyx_k_nelem_d), 0, 1, 0, 0},
  {&__pyx_n_s_netrfc, __pyx_k_netrfc, sizeof(__pyx_k_netrfc), 0, 0, 1, 1},
  {&__pyx_kp_u_noEnumStrings_d, __pyx_k_noEnumStrings_d, sizeof(__pyx_k_noEnumStrings_d), 0, 1, 0, 0},
  {&__pyx_kp_u_not_connected, __pyx_k_not_connected, sizeof(__pyx_k_not_connected), 0, 1, 0, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_nsec, __pyx_k_nsec, sizeof(__pyx_k_nsec), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
  {&__pyx_n_s_openNoWait, __pyx_k_openNoWait, sizeof(__pyx_k_openNoWait), 0, 0, 1, 1},
  {&__pyx_n_s_openNowAndWait, __pyx_k_openNowAndWait, sizeof(__pyx_k_openNowAndWait), 0, 0, 1, 1},
  {&__pyx_n_s_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
  {&__pyx_kp_u_precision_d, __pyx_k_precision_d, sizeof(__pyx_k_precision_d), 0, 1, 0, 0},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_printFlag, __pyx_k_printFlag, sizeof(__pyx_k_printFlag), 0, 0, 1, 1},
  {&__pyx_n_s_pv, __pyx_k_pv, sizeof(__pyx_k_pv), 0, 0, 1, 1},
  {&__pyx_n_s_pvList, __pyx_k_pvList, sizeof(__pyx_k_pvList), 0, 0, 1, 1},
  {&__pyx_kp_u_pvdataList_status_cafe_getPVGrou, __pyx_k_pvdataList_status_cafe_getPVGrou, sizeof(__pyx_k_pvdataList_status_cafe_getPVGrou), 0, 1, 0, 0},
  {&__pyx_n_s_pvlist, __pyx_k_pvlist, sizeof(__pyx_k_pvlist), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_getbuffer, __pyx_k_pyx_getbuffer, sizeof(__pyx_k_pyx_getbuffer), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_kp_u_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 1, 0, 0},
  {&__pyx_kp_u_s_2, __pyx_k_s_2, sizeof(__pyx_k_s_2), 0, 1, 0, 0},
  {&__pyx_n_s_secPastEpoch, __pyx_k_secPastEpoch, sizeof(__pyx_k_secPastEpoch), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_u_short, __pyx_k_short, sizeof(__pyx_k_short), 0, 1, 0, 1},
  {&__pyx_n_s_show, __pyx_k_show, sizeof(__pyx_k_show), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_sleep, __pyx_k_sleep, sizeof(__pyx_k_sleep), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_status, __pyx_k_status, sizeof(__pyx_k_status), 0, 0, 1, 1},
  {&__pyx_n_s_statusList, __pyx_k_statusList, sizeof(__pyx_k_statusList), 0, 0, 1, 1},
  {&__pyx_kp_u_status_d, __pyx_k_status_d, sizeof(__pyx_k_status_d), 0, 1, 0, 0},
  {&__pyx_kp_u_status_groupClose_gHandleName, __pyx_k_status_groupClose_gHandleName, sizeof(__pyx_k_status_groupClose_gHandleName), 0, 1, 0, 0},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_n_u_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 1, 0, 1},
  {&__pyx_kp_s_strided_and_direct, __pyx_k_strided_and_direct, sizeof(__pyx_k_strided_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_direct_or_indirect, __pyx_k_strided_and_direct_or_indirect, sizeof(__pyx_k_strided_and_direct_or_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_indirect, __pyx_k_strided_and_indirect, sizeof(__pyx_k_strided_and_indirect), 0, 0, 1, 0},
  {&__pyx_n_u_string, __pyx_k_string, sizeof(__pyx_k_string), 0, 1, 0, 1},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_timeout, __pyx_k_timeout, sizeof(__pyx_k_timeout), 0, 0, 1, 1},
  {&__pyx_n_s_tolerance, __pyx_k_tolerance, sizeof(__pyx_k_tolerance), 0, 0, 1, 1},
  {&__pyx_n_s_ts, __pyx_k_ts, sizeof(__pyx_k_ts), 0, 0, 1, 1},
  {&__pyx_kp_u_tsDate, __pyx_k_tsDate, sizeof(__pyx_k_tsDate), 0, 1, 0, 0},
  {&__pyx_n_s_tsDate_2, __pyx_k_tsDate_2, sizeof(__pyx_k_tsDate_2), 0, 0, 1, 1},
  {&__pyx_kp_u_ts_2, __pyx_k_ts_2, sizeof(__pyx_k_ts_2), 0, 1, 0, 0},
  {&__pyx_kp_u_ts_3, __pyx_k_ts_3, sizeof(__pyx_k_ts_3), 0, 1, 0, 0},
  {&__pyx_n_u_uint, __pyx_k_uint, sizeof(__pyx_k_uint), 0, 1, 0, 1},
  {&__pyx_n_u_uint32, __pyx_k_uint32, sizeof(__pyx_k_uint32), 0, 1, 0, 1},
  {&__pyx_n_u_uint64, __pyx_k_uint64, sizeof(__pyx_k_uint64), 0, 1, 0, 1},
  {&__pyx_n_u_ulong, __pyx_k_ulong, sizeof(__pyx_k_ulong), 0, 1, 0, 1},
  {&__pyx_kp_s_unable_to_allocate_array_data, __pyx_k_unable_to_allocate_array_data, sizeof(__pyx_k_unable_to_allocate_array_data), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_allocate_shape_and_str, __pyx_k_unable_to_allocate_shape_and_str, sizeof(__pyx_k_unable_to_allocate_shape_and_str), 0, 0, 1, 0},
  {&__pyx_kp_u_units_s, __pyx_k_units_s, sizeof(__pyx_k_units_s), 0, 1, 0, 0},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_kp_u_unknown_type_in_open, __pyx_k_unknown_type_in_open, sizeof(__pyx_k_unknown_type_in_open), 0, 1, 0, 0},
  {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
  {&__pyx_kp_u_upperAlarmLimit_f, __pyx_k_upperAlarmLimit_f, sizeof(__pyx_k_upperAlarmLimit_f), 0, 1, 0, 0},
  {&__pyx_kp_u_upperControlLimit_f, __pyx_k_upperControlLimit_f, sizeof(__pyx_k_upperControlLimit_f), 0, 1, 0, 0},
  {&__pyx_kp_u_upperDisplayLimit_f, __pyx_k_upperDisplayLimit_f, sizeof(__pyx_k_upperDisplayLimit_f), 0, 1, 0, 0},
  {&__pyx_kp_u_upperWarningLimit_f, __pyx_k_upperWarningLimit_f, sizeof(__pyx_k_upperWarningLimit_f), 0, 1, 0, 0},
  {&__pyx_n_u_ushort, __pyx_k_ushort, sizeof(__pyx_k_ushort), 0, 1, 0, 1},
  {&__pyx_n_u_utf8, __pyx_k_utf8, sizeof(__pyx_k_utf8), 0, 1, 0, 1},
  {&__pyx_n_s_valList, __pyx_k_valList, sizeof(__pyx_k_valList), 0, 0, 1, 1},
  {&__pyx_n_s_valSet, __pyx_k_valSet, sizeof(__pyx_k_valSet), 0, 0, 1, 1},
  {&__pyx_kp_u_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 1, 0, 0},
  {&__pyx_n_s_value_2, __pyx_k_value_2, sizeof(__pyx_k_value_2), 0, 0, 1, 1},
  {&__pyx_kp_u_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 1, 0, 0},
  {&__pyx_n_s_vectorList, __pyx_k_vectorList, sizeof(__pyx_k_vectorList), 0, 0, 1, 1},
  {&__pyx_kp_u_vectorList_status_statusList_caf, __pyx_k_vectorList_status_statusList_caf, sizeof(__pyx_k_vectorList_status_statusList_caf), 0, 1, 0, 0},
  {&__pyx_kp_u_with_error_status, __pyx_k_with_error_status, sizeof(__pyx_k_with_error_status), 0, 1, 0, 0},
  {&__pyx_kp_u_year, __pyx_k_year, sizeof(__pyx_k_year), 0, 1, 0, 0},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_Exception = __Pyx_GetBuiltinName(__pyx_n_s_Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_n_s_Ellipsis); if (!__pyx_builtin_Ellipsis) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 790; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "PyCafeDefs.pxi":3
 * 
 * def show():
 * 	print ("cafe=PyCafe.CyCafe()")             # <<<<<<<<<<<<<<
 * 	print ("cyca=PyCafe.CyCa()")
 * 	print ("cafe.init()")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_cafe_PyCafe_CyCafe); if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "PyCafeDefs.pxi":4
 * def show():
 * 	print ("cafe=PyCafe.CyCafe()")
 * 	print ("cyca=PyCafe.CyCa()")             # <<<<<<<<<<<<<<
 * 	print ("cafe.init()")
 * 	print ("cafe.openNoWait()")
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_cyca_PyCafe_CyCa); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "PyCafeDefs.pxi":5
 * 	print ("cafe=PyCafe.CyCafe()")
 * 	print ("cyca=PyCafe.CyCa()")
 * 	print ("cafe.init()")             # <<<<<<<<<<<<<<
 * 	print ("cafe.openNoWait()")
 * 	print ("<handle/handleList>=cafe.open(<pv/pvList>)")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_cafe_init); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "PyCafeDefs.pxi":6
 * 	print ("cyca=PyCafe.CyCa()")
 * 	print ("cafe.init()")
 * 	print ("cafe.openNoWait()")             # <<<<<<<<<<<<<<
 * 	print ("<handle/handleList>=cafe.open(<pv/pvList>)")
 * 	print ("cafe.openNowAndWait(timeout)")
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_cafe_openNoWait); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "PyCafeDefs.pxi":7
 * 	print ("cafe.init()")
 * 	print ("cafe.openNoWait()")
 * 	print ("<handle/handleList>=cafe.open(<pv/pvList>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.openNowAndWait(timeout)")
 * 	print ("cafe.openNow()")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_handle_handleList_cafe_open_pv); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "PyCafeDefs.pxi":8
 * 	print ("cafe.openNoWait()")
 * 	print ("<handle/handleList>=cafe.open(<pv/pvList>)")
 * 	print ("cafe.openNowAndWait(timeout)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.openNow()")
 * 	print ("cafe.close(handlePV=<handle/pv>)")
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_cafe_openNowAndWait_timeout); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "PyCafeDefs.pxi":9
 * 	print ("<handle/handleList>=cafe.open(<pv/pvList>)")
 * 	print ("cafe.openNowAndWait(timeout)")
 * 	print ("cafe.openNow()")             # <<<<<<<<<<<<<<
 * 	print ("cafe.close(handlePV=<handle/pv>)")
 * 	print ("cafe.closeChannels()")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u_cafe_openNow); if (unlikely(!__pyx_tuple__7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "PyCafeDefs.pxi":10
 * 	print ("cafe.openNowAndWait(timeout)")
 * 	print ("cafe.openNow()")
 * 	print ("cafe.close(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.closeChannels()")
 * 	print ("cafe.allConnected()")
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_u_cafe_close_handlePV_handle_pv); if (unlikely(!__pyx_tuple__8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "PyCafeDefs.pxi":11
 * 	print ("cafe.openNow()")
 * 	print ("cafe.close(handlePV=<handle/pv>)")
 * 	print ("cafe.closeChannels()")             # <<<<<<<<<<<<<<
 * 	print ("cafe.allConnected()")
 * 	print ("cafe.isConnected(handlePV=<handle/pv>)")
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_cafe_closeChannels); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "PyCafeDefs.pxi":12
 * 	print ("cafe.close(handlePV=<handle/pv>)")
 * 	print ("cafe.closeChannels()")
 * 	print ("cafe.allConnected()")             # <<<<<<<<<<<<<<
 * 	print ("cafe.isConnected(handlePV=<handle/pv>)")
 * 	print ("cafe.printDisconnected()")
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_cafe_allConnected); if (unlikely(!__pyx_tuple__10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "PyCafeDefs.pxi":13
 * 	print ("cafe.closeChannels()")
 * 	print ("cafe.allConnected()")
 * 	print ("cafe.isConnected(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.printDisconnected()")
 * 	print ("cafe.printHandles()")
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_cafe_isConnected_handlePV_handle); if (unlikely(!__pyx_tuple__11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "PyCafeDefs.pxi":14
 * 	print ("cafe.allConnected()")
 * 	print ("cafe.isConnected(handlePV=<handle/pv>)")
 * 	print ("cafe.printDisconnected()")             # <<<<<<<<<<<<<<
 * 	print ("cafe.printHandles()")
 * 	print ("cafe.printHandle(handlePV=<handle/pv>)")
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_u_cafe_printDisconnected); if (unlikely(!__pyx_tuple__12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "PyCafeDefs.pxi":15
 * 	print ("cafe.isConnected(handlePV=<handle/pv>)")
 * 	print ("cafe.printDisconnected()")
 * 	print ("cafe.printHandles()")             # <<<<<<<<<<<<<<
 * 	print ("cafe.printHandle(handlePV=<handle/pv>)")
 * 
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_u_cafe_printHandles); if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "PyCafeDefs.pxi":16
 * 	print ("cafe.printDisconnected()")
 * 	print ("cafe.printHandles()")
 * 	print ("cafe.printHandle(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 
 * 	print ("cafe.getStatus(handlePV=<handle/pv>)")
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_u_cafe_printHandle_handlePV_handle); if (unlikely(!__pyx_tuple__14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "PyCafeDefs.pxi":18
 * 	print ("cafe.printHandle(handlePV=<handle/pv>)")
 * 
 * 	print ("cafe.getStatus(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getAlarmStatusSeverity(handlePV=<handle/pv>)")
 * 	print ("cafe.getTimeStamp(handlePV=<handle/pv>)")
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_u_cafe_getStatus_handlePV_handle_p); if (unlikely(!__pyx_tuple__15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "PyCafeDefs.pxi":19
 * 
 * 	print ("cafe.getStatus(handlePV=<handle/pv>)")
 * 	print ("cafe.getAlarmStatusSeverity(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getTimeStamp(handlePV=<handle/pv>)")
 * 	print ("cafe.getTimeStampDate(handlePV=<handle/pv>)")
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_u_cafe_getAlarmStatusSeverity_hand); if (unlikely(!__pyx_tuple__16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "PyCafeDefs.pxi":20
 * 	print ("cafe.getStatus(handlePV=<handle/pv>)")
 * 	print ("cafe.getAlarmStatusSeverity(handlePV=<handle/pv>)")
 * 	print ("cafe.getTimeStamp(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getTimeStampDate(handlePV=<handle/pv>)")
 * 	print ("cafe.checkForHandle(<pv>)")
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_u_cafe_getTimeStamp_handlePV_handl); if (unlikely(!__pyx_tuple__17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "PyCafeDefs.pxi":21
 * 	print ("cafe.getAlarmStatusSeverity(handlePV=<handle/pv>)")
 * 	print ("cafe.getTimeStamp(handlePV=<handle/pv>)")
 * 	print ("cafe.getTimeStampDate(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.checkForHandle(<pv>)")
 * 	print ("cafe.checkForHandleList(<pvList>)")
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_u_cafe_getTimeStampDate_handlePV_h); if (unlikely(!__pyx_tuple__18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "PyCafeDefs.pxi":22
 * 	print ("cafe.getTimeStamp(handlePV=<handle/pv>)")
 * 	print ("cafe.getTimeStampDate(handlePV=<handle/pv>)")
 * 	print ("cafe.checkForHandle(<pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.checkForHandleList(<pvList>)")
 * 	print ("cafe.checkForGroupHandle(<groupName>)")
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_u_cafe_checkForHandle_pv); if (unlikely(!__pyx_tuple__19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "PyCafeDefs.pxi":23
 * 	print ("cafe.getTimeStampDate(handlePV=<handle/pv>)")
 * 	print ("cafe.checkForHandle(<pv>)")
 * 	print ("cafe.checkForHandleList(<pvList>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.checkForGroupHandle(<groupName>)")
 * 	print ("cafe.getPVNameFromHandle(int)")
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_u_cafe_checkForHandleList_pvList); if (unlikely(!__pyx_tuple__20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "PyCafeDefs.pxi":24
 * 	print ("cafe.checkForHandle(<pv>)")
 * 	print ("cafe.checkForHandleList(<pvList>)")
 * 	print ("cafe.checkForGroupHandle(<groupName>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getPVNameFromHandle(int)")
 * 	print ("cafe.getHandleFromPVName(str)")
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_u_cafe_checkForGroupHandle_groupNa); if (unlikely(!__pyx_tuple__21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "PyCafeDefs.pxi":25
 * 	print ("cafe.checkForHandleList(<pvList>)")
 * 	print ("cafe.checkForGroupHandle(<groupName>)")
 * 	print ("cafe.getPVNameFromHandle(int)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getHandleFromPVName(str)")
 * 	print ("cafe.getChannelInfo(handlePV=<handle/pv>)")
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_u_cafe_getPVNameFromHandle_int); if (unlikely(!__pyx_tuple__22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "PyCafeDefs.pxi":26
 * 	print ("cafe.checkForGroupHandle(<groupName>)")
 * 	print ("cafe.getPVNameFromHandle(int)")
 * 	print ("cafe.getHandleFromPVName(str)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getChannelInfo(handlePV=<handle/pv>)")
 * 	print ("cafe.setDbrBase(handlePV=<handle/pv>, unsigned int)") #dbrBase.DBR_XXX
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_u_cafe_getHandleFromPVName_str); if (unlikely(!__pyx_tuple__23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "PyCafeDefs.pxi":27
 * 	print ("cafe.getPVNameFromHandle(int)")
 * 	print ("cafe.getHandleFromPVName(str)")
 * 	print ("cafe.getChannelInfo(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.setDbrBase(handlePV=<handle/pv>, unsigned int)") #dbrBase.DBR_XXX
 * 	print ("cafe.getDbrBase(handlePV=<handle/pv>)")
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_u_cafe_getChannelInfo_handlePV_han); if (unlikely(!__pyx_tuple__24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "PyCafeDefs.pxi":28
 * 	print ("cafe.getHandleFromPVName(str)")
 * 	print ("cafe.getChannelInfo(handlePV=<handle/pv>)")
 * 	print ("cafe.setDbrBase(handlePV=<handle/pv>, unsigned int)") #dbrBase.DBR_XXX             # <<<<<<<<<<<<<<
 * 	print ("cafe.getDbrBase(handlePV=<handle/pv>)")
 * 
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_u_cafe_setDbrBase_handlePV_handle); if (unlikely(!__pyx_tuple__25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "PyCafeDefs.pxi":29
 * 	print ("cafe.getChannelInfo(handlePV=<handle/pv>)")
 * 	print ("cafe.setDbrBase(handlePV=<handle/pv>, unsigned int)") #dbrBase.DBR_XXX
 * 	print ("cafe.getDbrBase(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 
 * 	print ("cafe.getNonBlocking(handlePV=<handle/pv>)") 	#followed by getCache
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_u_cafe_getDbrBase_handlePV_handle); if (unlikely(!__pyx_tuple__26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "PyCafeDefs.pxi":31
 * 	print ("cafe.getDbrBase(handlePV=<handle/pv>)")
 * 
 * 	print ("cafe.getNonBlocking(handlePV=<handle/pv>)") 	#followed by getCache             # <<<<<<<<<<<<<<
 * 	print ("cafe.get(handlePV=<handle/pv>)") # return in native type
 * 	print ("cafe.get(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_u_cafe_getNonBlocking_handlePV_han); if (unlikely(!__pyx_tuple__27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "PyCafeDefs.pxi":32
 * 
 * 	print ("cafe.getNonBlocking(handlePV=<handle/pv>)") 	#followed by getCache
 * 	print ("cafe.get(handlePV=<handle/pv>)") # return in native type             # <<<<<<<<<<<<<<
 * 	print ("cafe.get(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getInt(handlePV=<handle/pv>)")
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_u_cafe_get_handlePV_handle_pv); if (unlikely(!__pyx_tuple__28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "PyCafeDefs.pxi":33
 * 	print ("cafe.getNonBlocking(handlePV=<handle/pv>)") 	#followed by getCache
 * 	print ("cafe.get(handlePV=<handle/pv>)") # return in native type
 * 	print ("cafe.get(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getInt(handlePV=<handle/pv>)")
 * 	print ("cafe.getFloathandlePV=<handle/pv>)")
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_u_cafe_get_handlePV_handle_pv_dt_n); if (unlikely(!__pyx_tuple__29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "PyCafeDefs.pxi":34
 * 	print ("cafe.get(handlePV=<handle/pv>)") # return in native type
 * 	print ("cafe.get(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getInt(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getFloathandlePV=<handle/pv>)")
 * 	print ("cafe.getStr(handlePV=<handle/pv>)")
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_u_cafe_getInt_handlePV_handle_pv); if (unlikely(!__pyx_tuple__30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "PyCafeDefs.pxi":35
 * 	print ("cafe.get(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getInt(handlePV=<handle/pv>)")
 * 	print ("cafe.getFloathandlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getStr(handlePV=<handle/pv>)")
 * 
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_u_cafe_getFloathandlePV_handle_pv); if (unlikely(!__pyx_tuple__31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "PyCafeDefs.pxi":36
 * 	print ("cafe.getInt(handlePV=<handle/pv>)")
 * 	print ("cafe.getFloathandlePV=<handle/pv>)")
 * 	print ("cafe.getStr(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 
 * 	print ("cafe.getList(handlePV=<handle/pv>)") # return List in native type
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_u_cafe_getStr_handlePV_handle_pv); if (unlikely(!__pyx_tuple__32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "PyCafeDefs.pxi":38
 * 	print ("cafe.getStr(handlePV=<handle/pv>)")
 * 
 * 	print ("cafe.getList(handlePV=<handle/pv>)") # return List in native type             # <<<<<<<<<<<<<<
 * 	print ("cafe.getList(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getIntList(handlePV=<handle/pv>)")
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_u_cafe_getList_handlePV_handle_pv); if (unlikely(!__pyx_tuple__33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "PyCafeDefs.pxi":39
 * 
 * 	print ("cafe.getList(handlePV=<handle/pv>)") # return List in native type
 * 	print ("cafe.getList(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getIntList(handlePV=<handle/pv>)")
 * 	print ("cafe.getFloatList(handlePV=<handle/pv>)")
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_u_cafe_getList_handlePV_handle_pv_2); if (unlikely(!__pyx_tuple__34)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "PyCafeDefs.pxi":40
 * 	print ("cafe.getList(handlePV=<handle/pv>)") # return List in native type
 * 	print ("cafe.getList(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getIntList(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getFloatList(handlePV=<handle/pv>)")
 * 	print ("cafe.getStrList(handlePV=<handle/pv>)")
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_u_cafe_getIntList_handlePV_handle); if (unlikely(!__pyx_tuple__35)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "PyCafeDefs.pxi":41
 * 	print ("cafe.getList(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getIntList(handlePV=<handle/pv>)")
 * 	print ("cafe.getFloatList(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getStrList(handlePV=<handle/pv>)")
 * 
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_u_cafe_getFloatList_handlePV_handl); if (unlikely(!__pyx_tuple__36)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "PyCafeDefs.pxi":42
 * 	print ("cafe.getIntList(handlePV=<handle/pv>)")
 * 	print ("cafe.getFloatList(handlePV=<handle/pv>)")
 * 	print ("cafe.getStrList(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 
 * 	# returns Memoryview in native type, except for when dt='str' which returns a List
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_u_cafe_getStrList_handlePV_handle); if (unlikely(!__pyx_tuple__37)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "PyCafeDefs.pxi":46
 * 	# returns Memoryview in native type, except for when dt='str' which returns a List
 * 	# returns np.array if asnumpy=True
 * 	print ("cafe.getArray(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getArray(handlePV=<handle/pv>, dt=<'int','float','str','native'(default)>)")
 * 	print ("cafe.getIntArray(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_u_cafe_getArray_handlePV_handle_pv); if (unlikely(!__pyx_tuple__38)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "PyCafeDefs.pxi":47
 * 	# returns np.array if asnumpy=True
 * 	print ("cafe.getArray(handlePV=<handle/pv>)")
 * 	print ("cafe.getArray(handlePV=<handle/pv>, dt=<'int','float','str','native'(default)>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getIntArray(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")
 * 	print ("cafe.getFloatArray(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_u_cafe_getArray_handlePV_handle_pv_2); if (unlikely(!__pyx_tuple__39)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "PyCafeDefs.pxi":48
 * 	print ("cafe.getArray(handlePV=<handle/pv>)")
 * 	print ("cafe.getArray(handlePV=<handle/pv>, dt=<'int','float','str','native'(default)>)")
 * 	print ("cafe.getIntArray(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getFloatArray(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")
 * 
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_u_cafe_getIntArray_handlePV_handle); if (unlikely(!__pyx_tuple__40)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "PyCafeDefs.pxi":49
 * 	print ("cafe.getArray(handlePV=<handle/pv>, dt=<'int','float','str','native'(default)>)")
 * 	print ("cafe.getIntArray(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")
 * 	print ("cafe.getFloatArray(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_u_cafe_getFloatArray_handlePV_hand); if (unlikely(!__pyx_tuple__41)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "PyCafeDefs.pxi":52
 * 
 * 
 * 	print ("cafe.getPV(handlePV=<handle/pv>)") # return PVData in native type             # <<<<<<<<<<<<<<
 * 	print ("cafe.getPV(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getPVInt(handlePV=<handle/pv>)")
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_u_cafe_getPV_handlePV_handle_pv); if (unlikely(!__pyx_tuple__42)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "PyCafeDefs.pxi":53
 * 
 * 	print ("cafe.getPV(handlePV=<handle/pv>)") # return PVData in native type
 * 	print ("cafe.getPV(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getPVInt(handlePV=<handle/pv>)")
 * 	print ("cafe.getPVFloat(handlePV=<handle/pv>)")
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_u_cafe_getPV_handlePV_handle_pv_dt); if (unlikely(!__pyx_tuple__43)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "PyCafeDefs.pxi":54
 * 	print ("cafe.getPV(handlePV=<handle/pv>)") # return PVData in native type
 * 	print ("cafe.getPV(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getPVInt(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getPVFloat(handlePV=<handle/pv>)")
 * 	print ("cafe.getPVStr(handlePV=<handle/pv>)")
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_u_cafe_getPVInt_handlePV_handle_pv); if (unlikely(!__pyx_tuple__44)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "PyCafeDefs.pxi":55
 * 	print ("cafe.getPV(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getPVInt(handlePV=<handle/pv>)")
 * 	print ("cafe.getPVFloat(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getPVStr(handlePV=<handle/pv>)")
 * 
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_u_cafe_getPVFloat_handlePV_handle); if (unlikely(!__pyx_tuple__45)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "PyCafeDefs.pxi":56
 * 	print ("cafe.getPVInt(handlePV=<handle/pv>)")
 * 	print ("cafe.getPVFloat(handlePV=<handle/pv>)")
 * 	print ("cafe.getPVStr(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 
 * 	print ("cafe.getPVList(handleList=<handleList/pvList>)") # return Array of PVData in native type
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_u_cafe_getPVStr_handlePV_handle_pv); if (unlikely(!__pyx_tuple__46)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "PyCafeDefs.pxi":58
 * 	print ("cafe.getPVStr(handlePV=<handle/pv>)")
 * 
 * 	print ("cafe.getPVList(handleList=<handleList/pvList>)") # return Array of PVData in native type             # <<<<<<<<<<<<<<
 * 	print ("cafe.getPVList(handleList=<handleList/pvList>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getPVIntList(handleList=<handleList/pvList>)")
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_u_cafe_getPVList_handleList_handle); if (unlikely(!__pyx_tuple__47)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "PyCafeDefs.pxi":59
 * 
 * 	print ("cafe.getPVList(handleList=<handleList/pvList>)") # return Array of PVData in native type
 * 	print ("cafe.getPVList(handleList=<handleList/pvList>, dt='native' (default) else <'int','float','str'>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getPVIntList(handleList=<handleList/pvList>)")
 * 	print ("cafe.getPVFloatList(handleList=<handleList/pvList>)")
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_u_cafe_getPVList_handleList_handle_2); if (unlikely(!__pyx_tuple__48)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "PyCafeDefs.pxi":60
 * 	print ("cafe.getPVList(handleList=<handleList/pvList>)") # return Array of PVData in native type
 * 	print ("cafe.getPVList(handleList=<handleList/pvList>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getPVIntList(handleList=<handleList/pvList>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getPVFloatList(handleList=<handleList/pvList>)")
 * 	print ("cafe.getPVStrList(handleList=<handleList/pvList>)")
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_kp_u_cafe_getPVIntList_handleList_han); if (unlikely(!__pyx_tuple__49)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "PyCafeDefs.pxi":61
 * 	print ("cafe.getPVList(handleList=<handleList/pvList>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getPVIntList(handleList=<handleList/pvList>)")
 * 	print ("cafe.getPVFloatList(handleList=<handleList/pvList>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getPVStrList(handleList=<handleList/pvList>)")
 * 
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_kp_u_cafe_getPVFloatList_handleList_h); if (unlikely(!__pyx_tuple__50)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "PyCafeDefs.pxi":62
 * 	print ("cafe.getPVIntList(handleList=<handleList/pvList>)")
 * 	print ("cafe.getPVFloatList(handleList=<handleList/pvList>)")
 * 	print ("cafe.getPVStrList(handleList=<handleList/pvList>)")             # <<<<<<<<<<<<<<
 * 
 * 	print ("cafe.getScalarList(handleList=<handleList/pvList>)") # return List in native type
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_u_cafe_getPVStrList_handleList_han); if (unlikely(!__pyx_tuple__51)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "PyCafeDefs.pxi":64
 * 	print ("cafe.getPVStrList(handleList=<handleList/pvList>)")
 * 
 * 	print ("cafe.getScalarList(handleList=<handleList/pvList>)") # return List in native type             # <<<<<<<<<<<<<<
 * 	print ("cafe.getScalarList(handleList=<handleList/pvList>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getIntScalarList(handleList=<handleList/pvList>)")
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_kp_u_cafe_getScalarList_handleList_ha); if (unlikely(!__pyx_tuple__52)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "PyCafeDefs.pxi":65
 * 
 * 	print ("cafe.getScalarList(handleList=<handleList/pvList>)") # return List in native type
 * 	print ("cafe.getScalarList(handleList=<handleList/pvList>, dt='native' (default) else <'int','float','str'>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getIntScalarList(handleList=<handleList/pvList>)")
 * 	print ("cafe.getFloatScalarList(handleList=<handleList/pvList>)")
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_u_cafe_getScalarList_handleList_ha_2); if (unlikely(!__pyx_tuple__53)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "PyCafeDefs.pxi":66
 * 	print ("cafe.getScalarList(handleList=<handleList/pvList>)") # return List in native type
 * 	print ("cafe.getScalarList(handleList=<handleList/pvList>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getIntScalarList(handleList=<handleList/pvList>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getFloatScalarList(handleList=<handleList/pvList>)")
 * 	print ("cafe.getStrScalarList(handleList=<handleList/pvList>)")
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_kp_u_cafe_getIntScalarList_handleList); if (unlikely(!__pyx_tuple__54)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "PyCafeDefs.pxi":67
 * 	print ("cafe.getScalarList(handleList=<handleList/pvList>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getIntScalarList(handleList=<handleList/pvList>)")
 * 	print ("cafe.getFloatScalarList(handleList=<handleList/pvList>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getStrScalarList(handleList=<handleList/pvList>)")
 * 
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_kp_u_cafe_getFloatScalarList_handleLi); if (unlikely(!__pyx_tuple__55)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "PyCafeDefs.pxi":68
 * 	print ("cafe.getIntScalarList(handleList=<handleList/pvList>)")
 * 	print ("cafe.getFloatScalarList(handleList=<handleList/pvList>)")
 * 	print ("cafe.getStrScalarList(handleList=<handleList/pvList>)")             # <<<<<<<<<<<<<<
 * 
 * 	print ("cafe.getPVCache(handlePV=<handle/pv>)") # return PVData in native type
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_kp_u_cafe_getStrScalarList_handleList); if (unlikely(!__pyx_tuple__56)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "PyCafeDefs.pxi":70
 * 	print ("cafe.getStrScalarList(handleList=<handleList/pvList>)")
 * 
 * 	print ("cafe.getPVCache(handlePV=<handle/pv>)") # return PVData in native type             # <<<<<<<<<<<<<<
 * 	print ("cafe.getPVCache(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getPVIntCache(handlePV=<handle/pv>)")
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_kp_u_cafe_getPVCache_handlePV_handle); if (unlikely(!__pyx_tuple__57)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "PyCafeDefs.pxi":71
 * 
 * 	print ("cafe.getPVCache(handlePV=<handle/pv>)") # return PVData in native type
 * 	print ("cafe.getPVCache(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getPVIntCache(handlePV=<handle/pv>)")
 * 	print ("cafe.getPVFloatCache(handlePV=<handle/pv>)")
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_kp_u_cafe_getPVCache_handlePV_handle_2); if (unlikely(!__pyx_tuple__58)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "PyCafeDefs.pxi":72
 * 	print ("cafe.getPVCache(handlePV=<handle/pv>)") # return PVData in native type
 * 	print ("cafe.getPVCache(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getPVIntCache(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getPVFloatCache(handlePV=<handle/pv>)")
 * 	print ("cafe.getPVStrCache(handlePV=<handle/pv>)")
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_kp_u_cafe_getPVIntCache_handlePV_hand); if (unlikely(!__pyx_tuple__59)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "PyCafeDefs.pxi":73
 * 	print ("cafe.getPVCache(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getPVIntCache(handlePV=<handle/pv>)")
 * 	print ("cafe.getPVFloatCache(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getPVStrCache(handlePV=<handle/pv>)")
 * 
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_kp_u_cafe_getPVFloatCache_handlePV_ha); if (unlikely(!__pyx_tuple__60)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "PyCafeDefs.pxi":74
 * 	print ("cafe.getPVIntCache(handlePV=<handle/pv>)")
 * 	print ("cafe.getPVFloatCache(handlePV=<handle/pv>)")
 * 	print ("cafe.getPVStrCache(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_kp_u_cafe_getPVStrCache_handlePV_hand); if (unlikely(!__pyx_tuple__61)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "PyCafeDefs.pxi":79
 * 	# returns Memoryview in native type, except for when dt='str' which returns a List
 * 	# returns np.array if asnumpy=True
 * 	print ("cafe.getArrayCache(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getArrayCache(handlePV=<handle/pv>, dt=<'int','float','str','native'(default)>)")
 * 	print ("cafe.getIntArrayCache(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_kp_u_cafe_getArrayCache_handlePV_hand); if (unlikely(!__pyx_tuple__62)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "PyCafeDefs.pxi":80
 * 	# returns np.array if asnumpy=True
 * 	print ("cafe.getArrayCache(handlePV=<handle/pv>)")
 * 	print ("cafe.getArrayCache(handlePV=<handle/pv>, dt=<'int','float','str','native'(default)>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getIntArrayCache(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")
 * 	print ("cafe.getFloatArrayCache(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_kp_u_cafe_getArrayCache_handlePV_hand_2); if (unlikely(!__pyx_tuple__63)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "PyCafeDefs.pxi":81
 * 	print ("cafe.getArrayCache(handlePV=<handle/pv>)")
 * 	print ("cafe.getArrayCache(handlePV=<handle/pv>, dt=<'int','float','str','native'(default)>)")
 * 	print ("cafe.getIntArrayCache(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getFloatArrayCache(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")
 * 
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_kp_u_cafe_getIntArrayCache_handlePV_h); if (unlikely(!__pyx_tuple__64)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "PyCafeDefs.pxi":82
 * 	print ("cafe.getArrayCache(handlePV=<handle/pv>, dt=<'int','float','str','native'(default)>)")
 * 	print ("cafe.getIntArrayCache(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")
 * 	print ("cafe.getFloatArrayCache(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")             # <<<<<<<<<<<<<<
 * 
 * 	print ("cafe.getCtrl(handlePV=<handle/pv>)")
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_kp_u_cafe_getFloatArrayCache_handlePV); if (unlikely(!__pyx_tuple__65)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "PyCafeDefs.pxi":84
 * 	print ("cafe.getFloatArrayCache(handlePV=<handle/pv>,asnumpy=<True,False(default)>)")
 * 
 * 	print ("cafe.getCtrl(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getCtrl(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getCtrlCache(handlePV=<handle/pv>)")
 */
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_kp_u_cafe_getCtrl_handlePV_handle_pv); if (unlikely(!__pyx_tuple__66)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);

  /* "PyCafeDefs.pxi":85
 * 
 * 	print ("cafe.getCtrl(handlePV=<handle/pv>)")
 * 	print ("cafe.getCtrl(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getCtrlCache(handlePV=<handle/pv>)")
 * 	print ("cafe.getCtrlCache(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_kp_u_cafe_getCtrl_handlePV_handle_pv_2); if (unlikely(!__pyx_tuple__67)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "PyCafeDefs.pxi":86
 * 	print ("cafe.getCtrl(handlePV=<handle/pv>)")
 * 	print ("cafe.getCtrl(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getCtrlCache(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.getCtrlCache(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 
 */
  __pyx_tuple__68 = PyTuple_Pack(1, __pyx_kp_u_cafe_getCtrlCache_handlePV_handl); if (unlikely(!__pyx_tuple__68)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);

  /* "PyCafeDefs.pxi":87
 * 	print ("cafe.getCtrl(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 	print ("cafe.getCtrlCache(handlePV=<handle/pv>)")
 * 	print ("cafe.getCtrlCache(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")             # <<<<<<<<<<<<<<
 * 
 * 	print ("mpid=cafe.monitorStart(handlePV=<handle/pv>), cb=None, dbr=None, mask=DBE_VALUE|DBE_LOG|DBE_ALARM)")
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_kp_u_cafe_getCtrlCache_handlePV_handl_2); if (unlikely(!__pyx_tuple__69)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "PyCafeDefs.pxi":89
 * 	print ("cafe.getCtrlCache(handlePV=<handle/pv>, dt='native' (default) else <'int','float','str'>)")
 * 
 * 	print ("mpid=cafe.monitorStart(handlePV=<handle/pv>), cb=None, dbr=None, mask=DBE_VALUE|DBE_LOG|DBE_ALARM)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.monitorStop(handlePV=<handle/pv>, mpID=None)")
 * 	print ("cafe.monitorStopAll(handlePV=<handle/pv>)")
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_kp_u_mpid_cafe_monitorStart_handlePV); if (unlikely(!__pyx_tuple__70)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);

  /* "PyCafeDefs.pxi":90
 * 
 * 	print ("mpid=cafe.monitorStart(handlePV=<handle/pv>), cb=None, dbr=None, mask=DBE_VALUE|DBE_LOG|DBE_ALARM)")
 * 	print ("cafe.monitorStop(handlePV=<handle/pv>, mpID=None)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.monitorStopAll(handlePV=<handle/pv>)")
 * 
 */
  __pyx_tuple__71 = PyTuple_Pack(1, __pyx_kp_u_cafe_monitorStop_handlePV_handle); if (unlikely(!__pyx_tuple__71)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);

  /* "PyCafeDefs.pxi":91
 * 	print ("mpid=cafe.monitorStart(handlePV=<handle/pv>), cb=None, dbr=None, mask=DBE_VALUE|DBE_LOG|DBE_ALARM)")
 * 	print ("cafe.monitorStop(handlePV=<handle/pv>, mpID=None)")
 * 	print ("cafe.monitorStopAll(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 
 * 	print ("cafe.getNoMonitors(handlePV=<handle/pv>)")
 */
  __pyx_tuple__72 = PyTuple_Pack(1, __pyx_kp_u_cafe_monitorStopAll_handlePV_han); if (unlikely(!__pyx_tuple__72)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);

  /* "PyCafeDefs.pxi":93
 * 	print ("cafe.monitorStopAll(handlePV=<handle/pv>)")
 * 
 * 	print ("cafe.getNoMonitors(handlePV=<handle/pv>)")             # <<<<<<<<<<<<<<
 * 
 * 	print ("cafe.set(handlePV=<handle/pv>, valSet)")
 */
  __pyx_tuple__73 = PyTuple_Pack(1, __pyx_kp_u_cafe_getNoMonitors_handlePV_hand); if (unlikely(!__pyx_tuple__73)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);

  /* "PyCafeDefs.pxi":95
 * 	print ("cafe.getNoMonitors(handlePV=<handle/pv>)")
 * 
 * 	print ("cafe.set(handlePV=<handle/pv>, valSet)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.setScalarList(handleList=<handleList/pvList>, valList)")
 * 	print ("cafe.setAndMatch(handlePVSet=<handle/pv>, valSet=<int,float,str>, handlePVMatch=<handle/pv>, \
 */
  __pyx_tuple__74 = PyTuple_Pack(1, __pyx_kp_u_cafe_set_handlePV_handle_pv_valS); if (unlikely(!__pyx_tuple__74)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);

  /* "PyCafeDefs.pxi":96
 * 
 * 	print ("cafe.set(handlePV=<handle/pv>, valSet)")
 * 	print ("cafe.setScalarList(handleList=<handleList/pvList>, valList)")             # <<<<<<<<<<<<<<
 * 	print ("cafe.setAndMatch(handlePVSet=<handle/pv>, valSet=<int,float,str>, handlePVMatch=<handle/pv>, \
 * 													tolerance=<int,float,str> , timeout=<float>, printFlag=<bint>)")
 */
  __pyx_tuple__75 = PyTuple_Pack(1, __pyx_kp_u_cafe_setScalarList_handleList_ha); if (unlikely(!__pyx_tuple__75)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);

  /* "PyCafeDefs.pxi":97
 * 	print ("cafe.set(handlePV=<handle/pv>, valSet)")
 * 	print ("cafe.setScalarList(handleList=<handleList/pvList>, valList)")
 * 	print ("cafe.setAndMatch(handlePVSet=<handle/pv>, valSet=<int,float,str>, handlePVMatch=<handle/pv>, \             # <<<<<<<<<<<<<<
 * 													tolerance=<int,float,str> , timeout=<float>, printFlag=<bint>)")
 * 	#Synchronous groups
 */
  __pyx_tuple__76 = PyTuple_Pack(1, __pyx_kp_u_cafe_setAndMatch_handlePVSet_han); if (unlikely(!__pyx_tuple__76)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);

  /* "PyCafeDefs.pxi":100
 * 													tolerance=<int,float,str> , timeout=<float>, printFlag=<bint>)")
 * 	#Synchronous groups
 * 	print ("ghandle = groupings(char * gname, list _pvlist)")             # <<<<<<<<<<<<<<
 * 	print ("ghandle = groupopen(char * gname)")
 * 	print ("status  = groupClose(<gHandleName>)")
 */
  __pyx_tuple__77 = PyTuple_Pack(1, __pyx_kp_u_ghandle_groupings_char_gname_lis); if (unlikely(!__pyx_tuple__77)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);

  /* "PyCafeDefs.pxi":101
 * 	#Synchronous groups
 * 	print ("ghandle = groupings(char * gname, list _pvlist)")
 * 	print ("ghandle = groupopen(char * gname)")             # <<<<<<<<<<<<<<
 * 	print ("status  = groupClose(<gHandleName>)")
 * 	print ("handleList[]=cafe.defineGroup(gname, pvList)")
 */
  __pyx_tuple__78 = PyTuple_Pack(1, __pyx_kp_u_ghandle_groupopen_char_gname); if (unlikely(!__pyx_tuple__78)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);

  /* "PyCafeDefs.pxi":102
 * 	print ("ghandle = groupings(char * gname, list _pvlist)")
 * 	print ("ghandle = groupopen(char * gname)")
 * 	print ("status  = groupClose(<gHandleName>)")             # <<<<<<<<<<<<<<
 * 	print ("handleList[]=cafe.defineGroup(gname, pvList)")
 * 	print ("list[]=cafe.PVGroupValuesToList(pvgroup)")
 */
  __pyx_tuple__79 = PyTuple_Pack(1, __pyx_kp_u_status_groupClose_gHandleName); if (unlikely(!__pyx_tuple__79)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);

  /* "PyCafeDefs.pxi":103
 * 	print ("ghandle = groupopen(char * gname)")
 * 	print ("status  = groupClose(<gHandleName>)")
 * 	print ("handleList[]=cafe.defineGroup(gname, pvList)")             # <<<<<<<<<<<<<<
 * 	print ("list[]=cafe.PVGroupValuesToList(pvgroup)")
 * 	print ("vectorList,status,statusList = cafe.getGroup(ghandleName, dt='native')")
 */
  __pyx_tuple__80 = PyTuple_Pack(1, __pyx_kp_u_handleList_cafe_defineGroup_gnam); if (unlikely(!__pyx_tuple__80)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);

  /* "PyCafeDefs.pxi":104
 * 	print ("status  = groupClose(<gHandleName>)")
 * 	print ("handleList[]=cafe.defineGroup(gname, pvList)")
 * 	print ("list[]=cafe.PVGroupValuesToList(pvgroup)")             # <<<<<<<<<<<<<<
 * 	print ("vectorList,status,statusList = cafe.getGroup(ghandleName, dt='native')")
 * 	print ("pvdataList[],status        = cafe.getPVGroup(ghandleName, dt='native')")
 */
  __pyx_tuple__81 = PyTuple_Pack(1, __pyx_kp_u_list_cafe_PVGroupValuesToList_pv); if (unlikely(!__pyx_tuple__81)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);

  /* "PyCafeDefs.pxi":105
 * 	print ("handleList[]=cafe.defineGroup(gname, pvList)")
 * 	print ("list[]=cafe.PVGroupValuesToList(pvgroup)")
 * 	print ("vectorList,status,statusList = cafe.getGroup(ghandleName, dt='native')")             # <<<<<<<<<<<<<<
 * 	print ("pvdataList[],status        = cafe.getPVGroup(ghandleName, dt='native')")
 * 	print ("cafe.setGroup(ghandleName, vectorList)")
 */
  __pyx_tuple__82 = PyTuple_Pack(1, __pyx_kp_u_vectorList_status_statusList_caf); if (unlikely(!__pyx_tuple__82)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);

  /* "PyCafeDefs.pxi":106
 * 	print ("list[]=cafe.PVGroupValuesToList(pvgroup)")
 * 	print ("vectorList,status,statusList = cafe.getGroup(ghandleName, dt='native')")
 * 	print ("pvdataList[],status        = cafe.getPVGroup(ghandleName, dt='native')")             # <<<<<<<<<<<<<<
 * 	print ("cafe.setGroup(ghandleName, vectorList)")
 * 
 */
  __pyx_tuple__83 = PyTuple_Pack(1, __pyx_kp_u_pvdataList_status_cafe_getPVGrou); if (unlikely(!__pyx_tuple__83)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);

  /* "PyCafeDefs.pxi":107
 * 	print ("vectorList,status,statusList = cafe.getGroup(ghandleName, dt='native')")
 * 	print ("pvdataList[],status        = cafe.getPVGroup(ghandleName, dt='native')")
 * 	print ("cafe.setGroup(ghandleName, vectorList)")             # <<<<<<<<<<<<<<
 * 
 * 	return
 */
  __pyx_tuple__84 = PyTuple_Pack(1, __pyx_kp_u_cafe_setGroup_ghandleName_vector); if (unlikely(!__pyx_tuple__84)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);

  /* "PyCafeDefs.pxi":338
 * 		self.channelID=0
 * 		self.connectFlag=False
 * 		self.hostName=(<bytes>("")).encode('UTF-8')             # <<<<<<<<<<<<<<
 * 		self.nelem=0
 * 		self.dataType=ICAFE_TYPENOTCONN
 */
  __pyx_tuple__86 = PyTuple_Pack(1, __pyx_kp_u_UTF_8); if (unlikely(!__pyx_tuple__86)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);

  /* "PyCafeDefs.pxi":343
 * 		self.accessRead=0
 * 		self.accessWrite=0
 * 		self.className=(<bytes>("")).encode('UTF-8')             # <<<<<<<<<<<<<<
 * 		self.connectionState=ICAFE_CA_OP_CONN_DOWN
 * 		self.cafeConnectionState=ICAFE_CS_NEVER_CONN
 */
  __pyx_tuple__87 = PyTuple_Pack(1, __pyx_kp_u_UTF_8); if (unlikely(!__pyx_tuple__87)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);

  /* "PyCafeDefs.pxi":346
 * 		self.connectionState=ICAFE_CA_OP_CONN_DOWN
 * 		self.cafeConnectionState=ICAFE_CS_NEVER_CONN
 * 		self.connectionStateAsString=(<bytes>('ICAFE_CA_OP_CONN_DOWN')).encode('UTF-8')             # <<<<<<<<<<<<<<
 * 		self.cafeConnectionStateAsString=(<bytes>('ICAFE_CS_NEVER_CONN')).encode('UTF-8')
 * 
 */
  __pyx_tuple__88 = PyTuple_Pack(1, __pyx_kp_u_UTF_8); if (unlikely(!__pyx_tuple__88)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);

  /* "PyCafeDefs.pxi":347
 * 		self.cafeConnectionState=ICAFE_CS_NEVER_CONN
 * 		self.connectionStateAsString=(<bytes>('ICAFE_CA_OP_CONN_DOWN')).encode('UTF-8')
 * 		self.cafeConnectionStateAsString=(<bytes>('ICAFE_CS_NEVER_CONN')).encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 * 	def show(self):
 */
  __pyx_tuple__89 = PyTuple_Pack(1, __pyx_kp_u_UTF_8); if (unlikely(!__pyx_tuple__89)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);

  /* "PyCafeDefs.pxi":419
 * 		self.alarmSeverity=-1
 * 		self.precision=0
 * 		self.units=(<bytes>("")).encode('UTF-8')             # <<<<<<<<<<<<<<
 * 		self.noEnumStrings=0
 * 		self.enumStrings=[]
 */
  __pyx_tuple__90 = PyTuple_Pack(1, __pyx_kp_u_UTF_8); if (unlikely(!__pyx_tuple__90)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);

  /* "PyCafeDefs.pxi":454
 * 				print  ("value         =", self.value[0],	)
 * 		else:
 * 			print  ("values	      =",)             # <<<<<<<<<<<<<<
 * 			if isinstance (self.value[0], list):
 * 				for i in range(0, nelem):
 */
  __pyx_tuple__91 = PyTuple_Pack(1, __pyx_kp_u_values); if (unlikely(!__pyx_tuple__91)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);

  /* "PyCafeDefs.pxi":461
 * 				for i in range(0, nelem):
 * 					print (self.value[i],"[%d]" %i,	)
 * 		print ("")             # <<<<<<<<<<<<<<
 * 		print ("status        = %d" % self.status)
 * 		print ("alarmStatus   = %d" % self.alarmStatus)
 */
  __pyx_tuple__92 = PyTuple_Pack(1, __pyx_kp_u__85); if (unlikely(!__pyx_tuple__92)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);

  /* "PyCafeDefs.pxi":470
 * 
 * 		if self.noEnumStrings > 0:
 * 			print ("enumStrings   =",)             # <<<<<<<<<<<<<<
 * 			for i in range(0, self.noEnumStrings):
 * 				print (self.enumStrings[i],"[%s]" %i,)
 */
  __pyx_tuple__93 = PyTuple_Pack(1, __pyx_kp_u_enumStrings); if (unlikely(!__pyx_tuple__93)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);

  /* "PyCafeDefs.pxi":473
 * 			for i in range(0, self.noEnumStrings):
 * 				print (self.enumStrings[i],"[%s]" %i,)
 * 			print ("")             # <<<<<<<<<<<<<<
 * 
 * 		print ("upperDisplayLimit = %f" % self.upperDisplayLimit)
 */
  __pyx_tuple__94 = PyTuple_Pack(1, __pyx_kp_u__85); if (unlikely(!__pyx_tuple__94)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);

  /* "PyCafeDefs.pxi":533
 * 				print  ("value         =", self.value[0],	)
 * 		else:
 * 			print  ("values	      =",)             # <<<<<<<<<<<<<<
 * 			if isinstance (self.value[0], list):
 * 				for i in range(0, nelem):
 */
  __pyx_tuple__95 = PyTuple_Pack(1, __pyx_kp_u_values); if (unlikely(!__pyx_tuple__95)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);

  /* "PyCafeDefs.pxi":540
 * 				for i in range(0, nelem):
 * 					print (self.value[i],"[%d]" %i,)
 * 		print ("")             # <<<<<<<<<<<<<<
 * 		print ("status        = %d" % self.status)
 * 		#if self.alarmStatus != -1:
 */
  __pyx_tuple__96 = PyTuple_Pack(1, __pyx_kp_u__85); if (unlikely(!__pyx_tuple__96)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);

  /* "PyCafeDefs.pxi":575
 * 	def showWithPV(self,glist):
 * 		if len(glist) != self.npv:
 * 			print ("ERROR: GROUP MEMBER MISMATCH!!")             # <<<<<<<<<<<<<<
 * 			print (glist, "has", len(glist), "members while group has", self.npv,"!!")
 * 			return
 */
  __pyx_tuple__97 = PyTuple_Pack(1, __pyx_kp_u_ERROR_GROUP_MEMBER_MISMATCH); if (unlikely(!__pyx_tuple__97)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__97);
  __Pyx_GIVEREF(__pyx_tuple__97);

  /* "PyCafeDefs.pxi":606
 * 				print ("PV            =", grouplist[i])
 * 
 * 			print  ("values	      =",)             # <<<<<<<<<<<<<<
 * 			for j in range(0, len(self.pvdata[i].value)):
 * 				print (self.pvdata[i].value[j],"[%d]" %j,)
 */
  __pyx_tuple__100 = PyTuple_Pack(1, __pyx_kp_u_values); if (unlikely(!__pyx_tuple__100)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);

  /* "PyCafeDefs.pxi":609
 * 			for j in range(0, len(self.pvdata[i].value)):
 * 				print (self.pvdata[i].value[j],"[%d]" %j,)
 * 			print ("")             # <<<<<<<<<<<<<<
 * 			print ("status        = %d" % self.pvdata[i].status)
 * 			print ("alarmStatus   = %d" % self.pvdata[i].alarmStatus)
 */
  __pyx_tuple__101 = PyTuple_Pack(1, __pyx_kp_u__85); if (unlikely(!__pyx_tuple__101)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__101);
  __Pyx_GIVEREF(__pyx_tuple__101);

  /* "PyCafeDefs.pxi":617
 * 			self.pvdata[i].tsDate[2], self.pvdata[i].tsDate[3],\
 * 			self.pvdata[i].tsDate[4], self.pvdata[i].tsDate[5], self.pvdata[i].tsDate[6])
 * 			print ("--------------------------------------------")             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
  __pyx_tuple__103 = PyTuple_Pack(1, __pyx_kp_u__102); if (unlikely(!__pyx_tuple__103)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__103);
  __Pyx_GIVEREF(__pyx_tuple__103);

  /* "PyCafeDefs.pxi":665
 * 		dtcheck=dtn		#need a line here
 * 	else:
 * 		print ("Valid input parameters for data type are: 'int', 'float', 'str', or 'native'")             # <<<<<<<<<<<<<<
 * 		print ("Data to be presented in native data type")
 * 
 */
  __pyx_tuple__104 = PyTuple_Pack(1, __pyx_kp_u_Valid_input_parameters_for_data); if (unlikely(!__pyx_tuple__104)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);

  /* "PyCafeDefs.pxi":666
 * 	else:
 * 		print ("Valid input parameters for data type are: 'int', 'float', 'str', or 'native'")
 * 		print ("Data to be presented in native data type")             # <<<<<<<<<<<<<<
 * 
 * 	return dtcheck
 */
  __pyx_tuple__105 = PyTuple_Pack(1, __pyx_kp_u_Data_to_be_presented_in_native_d); if (unlikely(!__pyx_tuple__105)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__105);
  __Pyx_GIVEREF(__pyx_tuple__105);

  /* "PyCafe.pyx":104
 * 					#print ("unicode")
 * 
 * 					py_string = (<bytes>pv[i]).encode('UTF-8')             # <<<<<<<<<<<<<<
 * 					pvV.push_back (py_string )
 * 
 */
  __pyx_tuple__106 = PyTuple_Pack(1, __pyx_kp_u_UTF_8); if (unlikely(!__pyx_tuple__106)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);

  /* "PyCafe.pyx":108
 * 
 * 				elif isinstance(pv[i], unicode):
 * 					py_string = (<bytes>pv[i]).encode('UTF-8')             # <<<<<<<<<<<<<<
 * 					pvV.push_back( py_string )
 * 				elif isinstance(pv[i], bytes):
 */
  __pyx_tuple__107 = PyTuple_Pack(1, __pyx_kp_u_UTF_8); if (unlikely(!__pyx_tuple__107)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__107);
  __Pyx_GIVEREF(__pyx_tuple__107);

  /* "PyCafe.pyx":112
 * 				elif isinstance(pv[i], bytes):
 * 
 * 					pvV.push_back( (<bytes>pv[i]).encode('utf8') )             # <<<<<<<<<<<<<<
 * 				else:
 * 					print ("unknown type in open")
 */
  __pyx_tuple__108 = PyTuple_Pack(1, __pyx_n_u_utf8); if (unlikely(!__pyx_tuple__108)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);

  /* "PyCafe.pyx":114
 * 					pvV.push_back( (<bytes>pv[i]).encode('utf8') )
 * 				else:
 * 					print ("unknown type in open")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__109 = PyTuple_Pack(1, __pyx_kp_u_unknown_type_in_open); if (unlikely(!__pyx_tuple__109)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__109);
  __Pyx_GIVEREF(__pyx_tuple__109);

  /* "PyCafe.pyx":226
 * 			return self._c_cafe.attachContextByPVName(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def attachContext.\n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  __pyx_tuple__110 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_a); if (unlikely(!__pyx_tuple__110)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);

  /* "PyCafe.pyx":283
 * 			groupHandle=self.hh.getGroupHandleFromGroupName(gHandleName)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getHandlesFromWithinGroup. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if groupHandle, else <type 'str'> if groupName")
 * 		cdef vector[unsigned int] hList
 */
  __pyx_tuple__111 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g); if (unlikely(!__pyx_tuple__111)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__111);
  __Pyx_GIVEREF(__pyx_tuple__111);

  /* "PyCafe.pyx":301
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def close.\n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  __pyx_tuple__112 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_c); if (unlikely(!__pyx_tuple__112)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);

  /* "PyCafe.pyx":329
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def isConnected. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 		return <bint>self._c_cafe.isChannelConnected(handle)
 */
  __pyx_tuple__113 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_i); if (unlikely(!__pyx_tuple__113)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__113);
  __Pyx_GIVEREF(__pyx_tuple__113);

  /* "PyCafe.pyx":352
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def printHandle. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 		return self._c_cafe.printHandle(handle)
 */
  __pyx_tuple__114 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_p); if (unlikely(!__pyx_tuple__114)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);

  /* "PyCafe.pyx":371
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getStatus. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 		return self.hh.getStatus(handle)
 */
  __pyx_tuple__115 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_2); if (unlikely(!__pyx_tuple__115)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__115);
  __Pyx_GIVEREF(__pyx_tuple__115);

  /* "PyCafe.pyx":383
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def get. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  __pyx_tuple__116 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_3); if (unlikely(!__pyx_tuple__116)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);

  /* "PyCafe.pyx":398
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def get. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  __pyx_tuple__117 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_3); if (unlikely(!__pyx_tuple__117)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__117);
  __Pyx_GIVEREF(__pyx_tuple__117);

  /* "PyCafe.pyx":418
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def get. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  __pyx_tuple__118 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_3); if (unlikely(!__pyx_tuple__118)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);

  /* "PyCafe.pyx":507
 * 			handle=self.checkForHandle(handlePV, force=True)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getChannelInfor \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  __pyx_tuple__119 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_4); if (unlikely(!__pyx_tuple__119)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 507; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__119);
  __Pyx_GIVEREF(__pyx_tuple__119);

  /* "PyCafe.pyx":513
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def getChannelInfo")             # <<<<<<<<<<<<<<
 * 
 * 		cdef ChannelRegalia cr
 */
  __pyx_tuple__120 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g); if (unlikely(!__pyx_tuple__120)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);

  /* "PyCafe.pyx":544
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setDbrBase. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  __pyx_tuple__121 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s); if (unlikely(!__pyx_tuple__121)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__121);
  __Pyx_GIVEREF(__pyx_tuple__121);

  /* "PyCafe.pyx":549
 * 		#Print Warning Message
 * 		if dbrBase > DBR_TIME:
 * 			print ("WARNING: PyCafe def setDbrBase(handle/PV, DBR_TYPE)")             # <<<<<<<<<<<<<<
 * 			print ("Allowed DBR_TYPEs are DBR_PLAIN (0), DBR_STS(1), DBR_TIME(2)")
 * 			print ("The value entered was", dbrBase, "hence assuming DBR_TIME" )
 */
  __pyx_tuple__122 = PyTuple_Pack(1, __pyx_kp_u_WARNING_PyCafe_def_setDbrBase_ha); if (unlikely(!__pyx_tuple__122)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);

  /* "PyCafe.pyx":550
 * 		if dbrBase > DBR_TIME:
 * 			print ("WARNING: PyCafe def setDbrBase(handle/PV, DBR_TYPE)")
 * 			print ("Allowed DBR_TYPEs are DBR_PLAIN (0), DBR_STS(1), DBR_TIME(2)")             # <<<<<<<<<<<<<<
 * 			print ("The value entered was", dbrBase, "hence assuming DBR_TIME" )
 * 
 */
  __pyx_tuple__123 = PyTuple_Pack(1, __pyx_kp_u_Allowed_DBR_TYPEs_are_DBR_PLAIN); if (unlikely(!__pyx_tuple__123)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__123);
  __Pyx_GIVEREF(__pyx_tuple__123);

  /* "PyCafe.pyx":566
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setDbrBase. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  __pyx_tuple__124 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s); if (unlikely(!__pyx_tuple__124)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);

  /* "PyCafe.pyx":590
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def get. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 		with nogil:
 */
  __pyx_tuple__125 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_3); if (unlikely(!__pyx_tuple__125)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 590; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__125);
  __Pyx_GIVEREF(__pyx_tuple__125);

  /* "PyCafe.pyx":634
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def get. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 		cdef int status
 */
  __pyx_tuple__126 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_3); if (unlikely(!__pyx_tuple__126)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);

  /* "PyCafe.pyx":688
 * 					return self.valInt
 * 		else:
 * 			print ("This line in PyCafe def get should never appear!")             # <<<<<<<<<<<<<<
 * 			return 0
 * 
 */
  __pyx_tuple__127 = PyTuple_Pack(1, __pyx_kp_u_This_line_in_PyCafe_def_get_shou); if (unlikely(!__pyx_tuple__127)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__127);
  __Pyx_GIVEREF(__pyx_tuple__127);

  /* "PyCafe.pyx":726
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getList. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  __pyx_tuple__128 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_5); if (unlikely(!__pyx_tuple__128)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);

  /* "PyCafe.pyx":835
 * 			return 0
 * 		else:
 * 			print ("This line in PyCafe def getAsList should never appear!")             # <<<<<<<<<<<<<<
 * 			return 0
 * 
 */
  __pyx_tuple__129 = PyTuple_Pack(1, __pyx_kp_u_This_line_in_PyCafe_def_getAsLis); if (unlikely(!__pyx_tuple__129)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__129);
  __Pyx_GIVEREF(__pyx_tuple__129);

  /* "PyCafe.pyx":891
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getArray. \n \             # <<<<<<<<<<<<<<
 * 			First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  __pyx_tuple__130 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_6); if (unlikely(!__pyx_tuple__130)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);

  /* "PyCafe.pyx":1129
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getPV. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  __pyx_tuple__131 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_7); if (unlikely(!__pyx_tuple__131)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__131);
  __Pyx_GIVEREF(__pyx_tuple__131);

  /* "PyCafe.pyx":1176
 * 
 * 		if not isinstance(handleList, (list)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getPVList. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 */
  __pyx_tuple__132 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_8); if (unlikely(!__pyx_tuple__132)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__132);
  __Pyx_GIVEREF(__pyx_tuple__132);

  /* "PyCafe.pyx":1182
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getPVList. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 * 
 */
  __pyx_tuple__133 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_9); if (unlikely(!__pyx_tuple__133)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__133);
  __Pyx_GIVEREF(__pyx_tuple__133);

  /* "PyCafe.pyx":1221
 * 					print ("with error status=", 	pvd[i].getStatus()	)
 * 					self._c_cafe.printStatusMessage(status)
 * 					print ("")             # <<<<<<<<<<<<<<
 * 			#raise Exception("EXCEPTION RAISED in PyCafe def getPVList. Status = %d" %status)
 * 
 */
  __pyx_tuple__134 = PyTuple_Pack(1, __pyx_kp_u__85); if (unlikely(!__pyx_tuple__134)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__134);
  __Pyx_GIVEREF(__pyx_tuple__134);

  /* "PyCafe.pyx":1339
 * 
 * 		if not isinstance(handleList, (list)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def printStatusIfError. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 */
  __pyx_tuple__135 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_p_2); if (unlikely(!__pyx_tuple__135)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__135);
  __Pyx_GIVEREF(__pyx_tuple__135);

  /* "PyCafe.pyx":1345
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def printStatusIfError. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 * 
 */
  __pyx_tuple__136 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_p_3); if (unlikely(!__pyx_tuple__136)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__136);
  __Pyx_GIVEREF(__pyx_tuple__136);

  /* "PyCafe.pyx":1355
 * 
 * 		if not isinstance(statusList, (list)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def printStatusIfError. \n\             # <<<<<<<<<<<<<<
 * Second input argument, should be <type 'list'> of handles or PVs")
 * 
 */
  __pyx_tuple__137 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_p_4); if (unlikely(!__pyx_tuple__137)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__137);
  __Pyx_GIVEREF(__pyx_tuple__137);

  /* "PyCafe.pyx":1359
 * 
 * 		if not isinstance(statusList[0], (int, long,float)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def printStatusIFError. \n\             # <<<<<<<<<<<<<<
 * Second input argument, should be a 'list' of <type 'int'> ")
 * 
 */
  __pyx_tuple__138 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_p_5); if (unlikely(!__pyx_tuple__138)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__138);
  __Pyx_GIVEREF(__pyx_tuple__138);

  /* "PyCafe.pyx":1383
 * 
 * 		if not isinstance(handleList, (list)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getAsy. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 */
  __pyx_tuple__139 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_10); if (unlikely(!__pyx_tuple__139)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__139);
  __Pyx_GIVEREF(__pyx_tuple__139);

  /* "PyCafe.pyx":1389
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getAsy. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 * 
 */
  __pyx_tuple__140 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_11); if (unlikely(!__pyx_tuple__140)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__140);
  __Pyx_GIVEREF(__pyx_tuple__140);

  /* "PyCafe.pyx":1409
 * 		if (status!=ICAFE_NORMAL):
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				print ("Error in def getAsyn: ")             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 			return status
 */
  __pyx_tuple__141 = PyTuple_Pack(1, __pyx_kp_u_Error_in_def_getAsyn); if (unlikely(!__pyx_tuple__141)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__141);
  __Pyx_GIVEREF(__pyx_tuple__141);

  /* "PyCafe.pyx":1427
 * 
 * 		if not isinstance(handleList, (list)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def waitForBundledEvents. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 */
  __pyx_tuple__142 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_w); if (unlikely(!__pyx_tuple__142)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__142);
  __Pyx_GIVEREF(__pyx_tuple__142);

  /* "PyCafe.pyx":1433
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def waitForBundledEvents. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 * 
 */
  __pyx_tuple__143 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_w_2); if (unlikely(!__pyx_tuple__143)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__143);
  __Pyx_GIVEREF(__pyx_tuple__143);

  /* "PyCafe.pyx":1452
 * 		if (status!=ICAFE_NORMAL):
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				print ("Error in def  waitForBundledEvents: ")             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(status)
 * 			return status
 */
  __pyx_tuple__144 = PyTuple_Pack(1, __pyx_kp_u_Error_in_def_waitForBundledEvent); if (unlikely(!__pyx_tuple__144)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__144);
  __Pyx_GIVEREF(__pyx_tuple__144);

  /* "PyCafe.pyx":1481
 * 
 * 		if not isinstance(handleList, (list)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getScalarList. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 */
  __pyx_tuple__145 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_12); if (unlikely(!__pyx_tuple__145)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__145);
  __Pyx_GIVEREF(__pyx_tuple__145);

  /* "PyCafe.pyx":1487
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getScalarList. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 * 
 */
  __pyx_tuple__146 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_13); if (unlikely(!__pyx_tuple__146)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__146);
  __Pyx_GIVEREF(__pyx_tuple__146);

  /* "PyCafe.pyx":1529
 * 		if (statusBundle!=ICAFE_NORMAL):
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				print ("Error in def  getScalarList: ")             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(statusBundle)
 * 
 */
  __pyx_tuple__147 = PyTuple_Pack(1, __pyx_kp_u_Error_in_def_getScalarList); if (unlikely(!__pyx_tuple__147)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__147);
  __Pyx_GIVEREF(__pyx_tuple__147);

  /* "PyCafe.pyx":1685
 * 				localList.append(0)
 * 				if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_HIGH:
 * 					print ("def getScalarList:")             # <<<<<<<<<<<<<<
 * 					print ("Entering 0 for element", i, "as channel is not connected!")
 * 
 */
  __pyx_tuple__148 = PyTuple_Pack(1, __pyx_kp_u_def_getScalarList); if (unlikely(!__pyx_tuple__148)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__148);
  __Pyx_GIVEREF(__pyx_tuple__148);

  /* "PyCafe.pyx":1707
 * 		else:
 * 			if not isinstance(handleList, (list)):
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def getCompoundList. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 */
  __pyx_tuple__149 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_14); if (unlikely(!__pyx_tuple__149)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__149);
  __Pyx_GIVEREF(__pyx_tuple__149);

  /* "PyCafe.pyx":1713
 * 				handleList=self.checkForHandleList(handleList)
 * 			elif not isinstance(handleList[0], (int, long)):
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def getCompoundList. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 * 
 */
  __pyx_tuple__150 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_15); if (unlikely(!__pyx_tuple__150)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__150);
  __Pyx_GIVEREF(__pyx_tuple__150);

  /* "PyCafe.pyx":1751
 * 		if (statusBundle!=ICAFE_NORMAL):
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				print ("Error in def  getScalarList: ")             # <<<<<<<<<<<<<<
 * 				self._c_cafe.printStatusMessage(statusBundle)
 * 
 */
  __pyx_tuple__151 = PyTuple_Pack(1, __pyx_kp_u_Error_in_def_getScalarList); if (unlikely(!__pyx_tuple__151)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__151);
  __Pyx_GIVEREF(__pyx_tuple__151);

  /* "PyCafe.pyx":1919
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getCache. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  __pyx_tuple__152 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_16); if (unlikely(!__pyx_tuple__152)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__152);
  __Pyx_GIVEREF(__pyx_tuple__152);

  /* "PyCafe.pyx":1974
 * 					return self.valInt
 * 		else:
 * 			print ("This line in PyCafe def getCache should never appear!")             # <<<<<<<<<<<<<<
 * 			return 0
 * 
 */
  __pyx_tuple__153 = PyTuple_Pack(1, __pyx_kp_u_This_line_in_PyCafe_def_getCache); if (unlikely(!__pyx_tuple__153)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1974; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__153);
  __Pyx_GIVEREF(__pyx_tuple__153);

  /* "PyCafe.pyx":2026
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getArrayCache. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  __pyx_tuple__154 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_17); if (unlikely(!__pyx_tuple__154)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2026; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__154);
  __Pyx_GIVEREF(__pyx_tuple__154);

  /* "PyCafe.pyx":2168
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getPVCache. \n \             # <<<<<<<<<<<<<<
 * 			First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  __pyx_tuple__155 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_18); if (unlikely(!__pyx_tuple__155)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__155);
  __Pyx_GIVEREF(__pyx_tuple__155);

  /* "PyCafe.pyx":2204
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getCtrl. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  __pyx_tuple__156 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_19); if (unlikely(!__pyx_tuple__156)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__156);
  __Pyx_GIVEREF(__pyx_tuple__156);

  /* "PyCafe.pyx":2241
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getCtrlCache. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  __pyx_tuple__157 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_20); if (unlikely(!__pyx_tuple__157)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__157);
  __Pyx_GIVEREF(__pyx_tuple__157);

  /* "PyCafe.pyx":2277
 * 			ghandle=self.checkForGroupHandle(ghandleName)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def groupMonitorStart. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if group handle, else <type 'str'> if group name")
 * 
 */
  __pyx_tuple__160 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_21); if (unlikely(!__pyx_tuple__160)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__160);
  __Pyx_GIVEREF(__pyx_tuple__160);

  /* "PyCafe.pyx":2285
 * 			if dbr not in [DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL]:
 * 				print ("***Warning*** from groupMonitorStart for handle(orPV)=", ghandleName)
 * 				print ("dbr base type should be one of DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL")             # <<<<<<<<<<<<<<
 * 				print ("Assuming DBR_TIME")
 * 				dbr=DBR_TIME
 */
  __pyx_tuple__161 = PyTuple_Pack(1, __pyx_kp_u_dbr_base_type_should_be_one_of_D); if (unlikely(!__pyx_tuple__161)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__161);
  __Pyx_GIVEREF(__pyx_tuple__161);

  /* "PyCafe.pyx":2286
 * 				print ("***Warning*** from groupMonitorStart for handle(orPV)=", ghandleName)
 * 				print ("dbr base type should be one of DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL")
 * 				print ("Assuming DBR_TIME")             # <<<<<<<<<<<<<<
 * 				dbr=DBR_TIME
 * 
 */
  __pyx_tuple__162 = PyTuple_Pack(1, __pyx_kp_u_Assuming_DBR_TIME); if (unlikely(!__pyx_tuple__162)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__162);
  __Pyx_GIVEREF(__pyx_tuple__162);

  /* "PyCafe.pyx":2357
 * 		else:
 * 
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getGroup. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if group handle, else <type 'str'> if group name")
 * 
 */
  __pyx_tuple__163 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_22); if (unlikely(!__pyx_tuple__163)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__163);
  __Pyx_GIVEREF(__pyx_tuple__163);

  /* "PyCafe.pyx":2477
 * 		else:
 * 
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getGroup. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if group handle, else <type 'str'> if group name")
 * 
 */
  __pyx_tuple__164 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_22); if (unlikely(!__pyx_tuple__164)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__164);
  __Pyx_GIVEREF(__pyx_tuple__164);

  /* "PyCafe.pyx":2598
 * 			ghandle=self.checkForGroupHandle(ghandleName)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getPVGroup. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if group handle, else <type 'str'> if group name")
 * 
 */
  __pyx_tuple__165 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_23); if (unlikely(!__pyx_tuple__165)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__165);
  __Pyx_GIVEREF(__pyx_tuple__165);

  /* "PyCafe.pyx":2698
 * 			if status !=ICAFE_NORMAL:
 * 				if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 					print ("")             # <<<<<<<<<<<<<<
 * 					print ("Error in def grouping for group named", _gname)
 * 					self._c_cafe.printStatusMessage(status)
 */
  __pyx_tuple__166 = PyTuple_Pack(1, __pyx_kp_u__85); if (unlikely(!__pyx_tuple__166)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__166);
  __Pyx_GIVEREF(__pyx_tuple__166);

  /* "PyCafe.pyx":2701
 * 					print ("Error in def grouping for group named", _gname)
 * 					self._c_cafe.printStatusMessage(status)
 * 					print ("Analysing statusList[]...")             # <<<<<<<<<<<<<<
 * 					for i in range(0, len(statusList)):
 * 						if statusList[i] !=ICAFE_NORMAL:
 */
  __pyx_tuple__167 = PyTuple_Pack(1, __pyx_kp_u_Analysing_statusList); if (unlikely(!__pyx_tuple__167)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2701; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__167);
  __Pyx_GIVEREF(__pyx_tuple__167);

  /* "PyCafe.pyx":2706
 * 							print ("PV", _pvlist[i], "[",i,"]", " has error: ")
 * 							self._c_cafe.printStatusMessage(statusList[i])
 * 							print ("")             # <<<<<<<<<<<<<<
 * 		return ghandle
 * 
 */
  __pyx_tuple__170 = PyTuple_Pack(1, __pyx_kp_u__85); if (unlikely(!__pyx_tuple__170)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__170);
  __Pyx_GIVEREF(__pyx_tuple__170);

  /* "PyCafe.pyx":2725
 * 	def groupOpen(self, char * gname):
 * 		if isinstance(gname, (str)) == 0:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def groupOpen. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'str'> for group name")
 * 
 */
  __pyx_tuple__171 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_24); if (unlikely(!__pyx_tuple__171)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__171);
  __Pyx_GIVEREF(__pyx_tuple__171);

  /* "PyCafe.pyx":2749
 * 			gHandle=self.checkForGroupHandle(gHandleName)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def groupClose \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if groupHandle, else <type 'str'> if groupName")
 * 
 */
  __pyx_tuple__172 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_25); if (unlikely(!__pyx_tuple__172)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__172);
  __Pyx_GIVEREF(__pyx_tuple__172);

  /* "PyCafe.pyx":2755
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def groupClose")             # <<<<<<<<<<<<<<
 * 
 * 		try:
 */
  __pyx_tuple__173 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_g_14); if (unlikely(!__pyx_tuple__173)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__173);
  __Pyx_GIVEREF(__pyx_tuple__173);

  /* "PyCafe.pyx":2777
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getNoMonitors. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 		return self.hh.getNmonitor(handle)
 */
  __pyx_tuple__174 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_26); if (unlikely(!__pyx_tuple__174)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2777; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__174);
  __Pyx_GIVEREF(__pyx_tuple__174);

  /* "PyCafe.pyx":2790
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def getMonitorIDs. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  __pyx_tuple__175 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_g_27); if (unlikely(!__pyx_tuple__175)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2790; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__175);
  __Pyx_GIVEREF(__pyx_tuple__175);

  /* "PyCafe.pyx":2808
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def monitorStart. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  __pyx_tuple__178 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_m); if (unlikely(!__pyx_tuple__178)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2808; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__178);
  __Pyx_GIVEREF(__pyx_tuple__178);

  /* "PyCafe.pyx":2832
 * 			else:
 * 				print ("***Warning*** from monitorStart for handle=",handlePV)
 * 				print ("dbr base type should be one of DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL")             # <<<<<<<<<<<<<<
 * 				print ("Assuming DBR_TIME")
 * 				mp.setCafeDbrType(DBR_TIME)
 */
  __pyx_tuple__179 = PyTuple_Pack(1, __pyx_kp_u_dbr_base_type_should_be_one_of_D); if (unlikely(!__pyx_tuple__179)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__179);
  __Pyx_GIVEREF(__pyx_tuple__179);

  /* "PyCafe.pyx":2833
 * 				print ("***Warning*** from monitorStart for handle=",handlePV)
 * 				print ("dbr base type should be one of DBR_PLAIN, DBR_STS, DBR_TIME, DBR_GR, DBR_CTRL")
 * 				print ("Assuming DBR_TIME")             # <<<<<<<<<<<<<<
 * 				mp.setCafeDbrType(DBR_TIME)
 * 
 */
  __pyx_tuple__180 = PyTuple_Pack(1, __pyx_kp_u_Assuming_DBR_TIME); if (unlikely(!__pyx_tuple__180)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__180);
  __Pyx_GIVEREF(__pyx_tuple__180);

  /* "PyCafe.pyx":2872
 * 		#Need this to allow a fraction of a second for the callback fn to be called
 * 		#if setPyHandler is used
 * 		time.sleep(0.01);             # <<<<<<<<<<<<<<
 * 		if status !=ICAFE_NORMAL:
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 */
  __pyx_tuple__181 = PyTuple_Pack(1, __pyx_float_0_01); if (unlikely(!__pyx_tuple__181)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__181);
  __Pyx_GIVEREF(__pyx_tuple__181);

  /* "PyCafe.pyx":2895
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def monitorStop. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  __pyx_tuple__182 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_m_3); if (unlikely(!__pyx_tuple__182)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2895; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__182);
  __Pyx_GIVEREF(__pyx_tuple__182);

  /* "PyCafe.pyx":2912
 * 				with nogil:
 * 					status=self._c_cafe.monitorStopWithID(handle, mpidUI)
 * 				time.sleep(0.01)             # <<<<<<<<<<<<<<
 * 				if (status==ICAFE_NORMAL):
 * 					#index=self.monidList.index(mpidUI)
 */
  __pyx_tuple__183 = PyTuple_Pack(1, __pyx_float_0_01); if (unlikely(!__pyx_tuple__183)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2912; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__183);
  __Pyx_GIVEREF(__pyx_tuple__183);

  /* "PyCafe.pyx":2920
 * 					del monDictGlobal[mpidUI]
 * 			else:
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def monitorStop. \n\             # <<<<<<<<<<<<<<
 * monitorPolicy ID (mpid) should be <type 'int'>")
 * 		else:
 */
  __pyx_tuple__184 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_m_4); if (unlikely(!__pyx_tuple__184)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__184);
  __Pyx_GIVEREF(__pyx_tuple__184);

  /* "PyCafe.pyx":2925
 * 			with nogil:
 * 				status=self._c_cafe.monitorStop(handle)
 * 			time.sleep(0.01)             # <<<<<<<<<<<<<<
 * 
 * 			if (status==ICAFE_NORMAL):
 */
  __pyx_tuple__185 = PyTuple_Pack(1, __pyx_float_0_01); if (unlikely(!__pyx_tuple__185)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__185);
  __Pyx_GIVEREF(__pyx_tuple__185);

  /* "PyCafe.pyx":2957
 * 			status=self._c_cafe.monitorStopAll()
 * 
 * 		time.sleep(0.01)             # <<<<<<<<<<<<<<
 * 		#print "-------"
 * 		#print self.monidList
 */
  __pyx_tuple__186 = PyTuple_Pack(1, __pyx_float_0_01); if (unlikely(!__pyx_tuple__186)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__186);
  __Pyx_GIVEREF(__pyx_tuple__186);

  /* "PyCafe.pyx":2993
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def set. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  __pyx_tuple__187 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_2); if (unlikely(!__pyx_tuple__187)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__187);
  __Pyx_GIVEREF(__pyx_tuple__187);

  /* "PyCafe.pyx":3091
 * 				status=self._c_cafe.setString(handle, valSetS)
 * 		else:
 * 			print("PyCafe def set WARNING: DATA TYPE NOT SUPPORTED")             # <<<<<<<<<<<<<<
 * 			print("Input data (whether within a 'list','array.array','cython.view.memoryview' \n\
 * or not) should be of <type 'int'>, <type 'float'> or <type 'str'>")
 */
  __pyx_tuple__188 = PyTuple_Pack(1, __pyx_kp_u_PyCafe_def_set_WARNING_DATA_TYPE); if (unlikely(!__pyx_tuple__188)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3091; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__188);
  __Pyx_GIVEREF(__pyx_tuple__188);

  /* "PyCafe.pyx":3092
 * 		else:
 * 			print("PyCafe def set WARNING: DATA TYPE NOT SUPPORTED")
 * 			print("Input data (whether within a 'list','array.array','cython.view.memoryview' \n\             # <<<<<<<<<<<<<<
 * or not) should be of <type 'int'>, <type 'float'> or <type 'str'>")
 * 
 */
  __pyx_tuple__189 = PyTuple_Pack(1, __pyx_kp_u_Input_data_whether_within_a_list); if (unlikely(!__pyx_tuple__189)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3092; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__189);
  __Pyx_GIVEREF(__pyx_tuple__189);

  /* "PyCafe.pyx":3114
 * 
 * 		if not isinstance(handleList, (list)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setScalarList. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 */
  __pyx_tuple__190 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_3); if (unlikely(!__pyx_tuple__190)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__190);
  __Pyx_GIVEREF(__pyx_tuple__190);

  /* "PyCafe.pyx":3120
 * 			handleList=self.checkForHandleList(handleList)
 * 		elif not isinstance(handleList[0], (int, long)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setScalarList. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 * 
 */
  __pyx_tuple__191 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_4); if (unlikely(!__pyx_tuple__191)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__191);
  __Pyx_GIVEREF(__pyx_tuple__191);

  /* "PyCafe.pyx":3166
 * 				pvd[i].setInt(valList[i])
 * 			else:
 * 				print ("This line in PyCafe def setScalarList should never appear!")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__192 = PyTuple_Pack(1, __pyx_kp_u_This_line_in_PyCafe_def_setScala); if (unlikely(!__pyx_tuple__192)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__192);
  __Pyx_GIVEREF(__pyx_tuple__192);

  /* "PyCafe.pyx":3187
 * 					print ("with error status=", 	pvd[i].getStatus())
 * 					self._c_cafe.printStatusMessage(pvd[i].getStatus())
 * 					print ("")             # <<<<<<<<<<<<<<
 * 			#raise Exception("EXCEPTION RAISED in PyCafe def setScalarList. Status = %d" %status)
 * 
 */
  __pyx_tuple__193 = PyTuple_Pack(1, __pyx_kp_u__85); if (unlikely(!__pyx_tuple__193)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__193);
  __Pyx_GIVEREF(__pyx_tuple__193);

  /* "PyCafe.pyx":3208
 * 		else:
 * 			if not isinstance(handleList, (list)):
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setCompoundList. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 */
  __pyx_tuple__194 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_6); if (unlikely(!__pyx_tuple__194)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__194);
  __Pyx_GIVEREF(__pyx_tuple__194);

  /* "PyCafe.pyx":3214
 * 				handleList=self.checkForHandleList(handleList)
 * 			elif not isinstance(handleList[0], (int, long)):
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setCompoundList. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be a 'list' of <type 'int'> if handles or <type 'str'> if PVs")
 * 
 */
  __pyx_tuple__195 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_7); if (unlikely(!__pyx_tuple__195)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__195);
  __Pyx_GIVEREF(__pyx_tuple__195);

  /* "PyCafe.pyx":3273
 * 
 * 			else:
 * 				print ("This line in PyCafe def setGroup should never appear!")             # <<<<<<<<<<<<<<
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setGroup. \n\
 * Unknown data input; should be one of <type 'int'> , <type 'str'>, <type 'float'> , <type 'list'>")
 */
  __pyx_tuple__196 = PyTuple_Pack(1, __pyx_kp_u_This_line_in_PyCafe_def_setGroup); if (unlikely(!__pyx_tuple__196)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__196);
  __Pyx_GIVEREF(__pyx_tuple__196);

  /* "PyCafe.pyx":3274
 * 			else:
 * 				print ("This line in PyCafe def setGroup should never appear!")
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setGroup. \n\             # <<<<<<<<<<<<<<
 * Unknown data input; should be one of <type 'int'> , <type 'str'>, <type 'float'> , <type 'list'>")
 * 
 */
  __pyx_tuple__197 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_9); if (unlikely(!__pyx_tuple__197)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__197);
  __Pyx_GIVEREF(__pyx_tuple__197);

  /* "PyCafe.pyx":3292
 * 					print ("with error status=", 	pvdata[i].getStatus())
 * 					self._c_cafe.printStatusMessage(pvdata[i].getStatus())
 * 					print ("")             # <<<<<<<<<<<<<<
 * 			#raise Exception("EXCEPTION RAISED in PyCafe def setCompoundList. Status = %d" %status)
 * 
 */
  __pyx_tuple__198 = PyTuple_Pack(1, __pyx_kp_u__85); if (unlikely(!__pyx_tuple__198)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__198);
  __Pyx_GIVEREF(__pyx_tuple__198);

  /* "PyCafe.pyx":3312
 * 		else:
 * 			###
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setGroup. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if group handle, else <type 'str'> if group name")
 * 
 */
  __pyx_tuple__199 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_10); if (unlikely(!__pyx_tuple__199)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__199);
  __Pyx_GIVEREF(__pyx_tuple__199);

  /* "PyCafe.pyx":3366
 * 
 * 			else:
 * 				print ("This line in PyCafe def setGroup should never appear!")             # <<<<<<<<<<<<<<
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setGroup. \n\
 * Unknown data input; should be one of <type 'int'> , <type 'str'>, <type 'float'> , <type 'list'>")
 */
  __pyx_tuple__200 = PyTuple_Pack(1, __pyx_kp_u_This_line_in_PyCafe_def_setGroup); if (unlikely(!__pyx_tuple__200)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__200);
  __Pyx_GIVEREF(__pyx_tuple__200);

  /* "PyCafe.pyx":3367
 * 			else:
 * 				print ("This line in PyCafe def setGroup should never appear!")
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setGroup. \n\             # <<<<<<<<<<<<<<
 * Unknown data input; should be one of <type 'int'> , <type 'str'>, <type 'float'> , <type 'list'>")
 * 
 */
  __pyx_tuple__201 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_9); if (unlikely(!__pyx_tuple__201)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__201);
  __Pyx_GIVEREF(__pyx_tuple__201);

  /* "PyCafe.pyx":3406
 * 
 * 		if not isinstance(handlePVSet, (list)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatchMany. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'list'> of handles or PVs")
 * 
 */
  __pyx_tuple__202 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_11); if (unlikely(!__pyx_tuple__202)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__202);
  __Pyx_GIVEREF(__pyx_tuple__202);

  /* "PyCafe.pyx":3410
 * 
 * 		if not isinstance(valSet, (list)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def valSet. \n\             # <<<<<<<<<<<<<<
 * Second input argument, should be <type 'list'> of scalar values")
 * 
 */
  __pyx_tuple__203 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_v); if (unlikely(!__pyx_tuple__203)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__203);
  __Pyx_GIVEREF(__pyx_tuple__203);

  /* "PyCafe.pyx":3414
 * 
 * 		if not isinstance(handlePVMatch, (list)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatchMany. \n\             # <<<<<<<<<<<<<<
 * Third input argument, should be <type 'list'> of handles or PVs")
 * 
 */
  __pyx_tuple__204 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_12); if (unlikely(!__pyx_tuple__204)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__204);
  __Pyx_GIVEREF(__pyx_tuple__204);

  /* "PyCafe.pyx":3418
 * 
 * 		if (len(handlePVSet) != len(valSet)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatchMany. \n\             # <<<<<<<<<<<<<<
 * Lengths of first (handlePVSet) and second (valSet) input lists must match!")
 * 
 */
  __pyx_tuple__205 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_13); if (unlikely(!__pyx_tuple__205)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__205);
  __Pyx_GIVEREF(__pyx_tuple__205);

  /* "PyCafe.pyx":3422
 * 
 * 		if (len(handlePVSet) != len(handlePVMatch)):
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatchMany. \n\             # <<<<<<<<<<<<<<
 * Lengths of first (handlePVSet) and third (handlePVMatch) input lists must match!")
 * 
 */
  __pyx_tuple__206 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_14); if (unlikely(!__pyx_tuple__206)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__206);
  __Pyx_GIVEREF(__pyx_tuple__206);

  /* "PyCafe.pyx":3441
 * 				handleSet.push_back(self.checkForHandle(handlePVSet))
 * 			else:
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatchMany \n\             # <<<<<<<<<<<<<<
 * handlePVSet list member should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  __pyx_tuple__207 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_15); if (unlikely(!__pyx_tuple__207)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__207);
  __Pyx_GIVEREF(__pyx_tuple__207);

  /* "PyCafe.pyx":3451
 * 				handleMatch.push_back(self.checkForHandle(handlePVMatch))
 * 			else:
 * 				raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatchMany \n\             # <<<<<<<<<<<<<<
 * handlePVSet list member should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  __pyx_tuple__208 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_15); if (unlikely(!__pyx_tuple__208)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__208);
  __Pyx_GIVEREF(__pyx_tuple__208);

  /* "PyCafe.pyx":3480
 * 			handleSet=self.checkForHandle(handlePVSet)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatch. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  __pyx_tuple__209 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_16); if (unlikely(!__pyx_tuple__209)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__209);
  __Pyx_GIVEREF(__pyx_tuple__209);

  /* "PyCafe.pyx":3489
 * 			handleMatch=self.checkForHandle(handlePVMatch)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def setAndMatch. \n\             # <<<<<<<<<<<<<<
 * Third input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  __pyx_tuple__210 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_17); if (unlikely(!__pyx_tuple__210)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__210);
  __Pyx_GIVEREF(__pyx_tuple__210);

  /* "PyCafe.pyx":3514
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def set. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  __pyx_tuple__211 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_2); if (unlikely(!__pyx_tuple__211)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__211);
  __Pyx_GIVEREF(__pyx_tuple__211);

  /* "PyCafe.pyx":3520
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def setNelemToRetrieveFromCacheToOne")             # <<<<<<<<<<<<<<
 * 
 * 	  #returns previous nelem
 */
  __pyx_tuple__212 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_s_4); if (unlikely(!__pyx_tuple__212)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__212);
  __Pyx_GIVEREF(__pyx_tuple__212);

  /* "PyCafe.pyx":3533
 * 			handle=self.checkForHandle(handlePV)
 * 		else:
 * 			raise Exception ("EXCEPTION RAISED IN PyCafe def set. \n\             # <<<<<<<<<<<<<<
 * First input argument, should be <type 'int'> if handle, else <type 'str'> if PV")
 * 
 */
  __pyx_tuple__213 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_IN_PyCafe_def_s_2); if (unlikely(!__pyx_tuple__213)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__213);
  __Pyx_GIVEREF(__pyx_tuple__213);

  /* "PyCafe.pyx":3540
 * 			if PYCAFE_PRINT_LEVEL>=PYCAFE_PRINT_LOW:
 * 				self._c_cafe.printStatusMessage(ECAFE_INVALID_HANDLE)
 * 			raise Exception("EXCEPTION RAISED in PyCafe def setNelemToRetrieveFromCacheToOne")             # <<<<<<<<<<<<<<
 * 
 * 	  #returns new nelem
 */
  __pyx_tuple__214 = PyTuple_Pack(1, __pyx_kp_u_EXCEPTION_RAISED_in_PyCafe_def_s_4); if (unlikely(!__pyx_tuple__214)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__214);
  __Pyx_GIVEREF(__pyx_tuple__214);

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__215 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__215)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__215);
  __Pyx_GIVEREF(__pyx_tuple__215);

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__216 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__216)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__216);
  __Pyx_GIVEREF(__pyx_tuple__216);

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__217 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__217)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__217);
  __Pyx_GIVEREF(__pyx_tuple__217);

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__218 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__218)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__218);
  __Pyx_GIVEREF(__pyx_tuple__218);

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__219 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__219)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__219);
  __Pyx_GIVEREF(__pyx_tuple__219);

  /* "../../../../../../../../opt/gfa/python-3.5/latest/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__220 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__220)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__220);
  __Pyx_GIVEREF(__pyx_tuple__220);

  /* "View.MemoryView":129
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
  __pyx_tuple__221 = PyTuple_Pack(1, __pyx_kp_s_Empty_shape_tuple_for_cython_arr); if (unlikely(!__pyx_tuple__221)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__221);
  __Pyx_GIVEREF(__pyx_tuple__221);

  /* "View.MemoryView":132
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
  __pyx_tuple__222 = PyTuple_Pack(1, __pyx_kp_s_itemsize_0_for_cython_array); if (unlikely(!__pyx_tuple__222)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__222);
  __Pyx_GIVEREF(__pyx_tuple__222);

  /* "View.MemoryView":135
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
  __pyx_tuple__223 = PyTuple_Pack(1, __pyx_n_s_ASCII); if (unlikely(!__pyx_tuple__223)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__223);
  __Pyx_GIVEREF(__pyx_tuple__223);

  /* "View.MemoryView":144
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__224 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_shape_and_str); if (unlikely(!__pyx_tuple__224)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__224);
  __Pyx_GIVEREF(__pyx_tuple__224);

  /* "View.MemoryView":172
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
  __pyx_tuple__225 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_array_data); if (unlikely(!__pyx_tuple__225)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__225);
  __Pyx_GIVEREF(__pyx_tuple__225);

  /* "View.MemoryView":188
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
  __pyx_tuple__226 = PyTuple_Pack(1, __pyx_kp_s_Can_only_create_a_buffer_that_is); if (unlikely(!__pyx_tuple__226)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__226);
  __Pyx_GIVEREF(__pyx_tuple__226);

  /* "View.MemoryView":447
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
  __pyx_tuple__227 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_convert_item_to_object); if (unlikely(!__pyx_tuple__227)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__227);
  __Pyx_GIVEREF(__pyx_tuple__227);

  /* "View.MemoryView":523
 *             if self.view.strides == NULL:
 * 
 *                 raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *             return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
  __pyx_tuple__228 = PyTuple_Pack(1, __pyx_kp_s_Buffer_view_does_not_expose_stri); if (unlikely(!__pyx_tuple__228)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__228);
  __Pyx_GIVEREF(__pyx_tuple__228);

  /* "View.MemoryView":531
 *         def __get__(self):
 *             if self.view.suboffsets == NULL:
 *                 return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *             return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
  __pyx_tuple__229 = PyTuple_New(1); if (unlikely(!__pyx_tuple__229)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__229);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_tuple__229, 0, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_tuple__229);

  /* "View.MemoryView":640
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
  __pyx_slice__230 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__230)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 640; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_slice__230);
  __Pyx_GIVEREF(__pyx_slice__230);

  /* "View.MemoryView":643
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
  __pyx_slice__231 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__231)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_slice__231);
  __Pyx_GIVEREF(__pyx_slice__231);

  /* "View.MemoryView":654
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
  __pyx_slice__232 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__232)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_slice__232);
  __Pyx_GIVEREF(__pyx_slice__232);

  /* "View.MemoryView":661
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__233 = PyTuple_Pack(1, __pyx_kp_s_Indirect_dimensions_not_supporte); if (unlikely(!__pyx_tuple__233)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__233);
  __Pyx_GIVEREF(__pyx_tuple__233);

  /* "FromPyStructUtility":19
 *         value = obj['secPastEpoch']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'secPastEpoch'")             # <<<<<<<<<<<<<<
 *     result.secPastEpoch = value
 *     try:
 */
  __pyx_tuple__234 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at); if (unlikely(!__pyx_tuple__234)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__234);
  __Pyx_GIVEREF(__pyx_tuple__234);

  /* "FromPyStructUtility":24
 *         value = obj['nsec']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'nsec'")             # <<<<<<<<<<<<<<
 *     result.nsec = value
 *     return result
 */
  __pyx_tuple__235 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_2); if (unlikely(!__pyx_tuple__235)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__235);
  __Pyx_GIVEREF(__pyx_tuple__235);

  /* "PyCafeDefs.pxi":2
 * 
 * def show():             # <<<<<<<<<<<<<<
 * 	print ("cafe=PyCafe.CyCafe()")
 * 	print ("cyca=PyCafe.CyCa()")
 */
  __pyx_codeobj__240 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_afs_psi_ch_project_cafe_gitwork, __pyx_n_s_show, 2, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__240)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "View.MemoryView":278
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_tuple__241 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct_or_indirect); if (unlikely(!__pyx_tuple__241)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__241);
  __Pyx_GIVEREF(__pyx_tuple__241);

  /* "View.MemoryView":279
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_tuple__242 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct); if (unlikely(!__pyx_tuple__242)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__242);
  __Pyx_GIVEREF(__pyx_tuple__242);

  /* "View.MemoryView":280
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__243 = PyTuple_Pack(1, __pyx_kp_s_strided_and_indirect); if (unlikely(!__pyx_tuple__243)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__243);
  __Pyx_GIVEREF(__pyx_tuple__243);

  /* "View.MemoryView":283
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_tuple__244 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_direct); if (unlikely(!__pyx_tuple__244)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__244);
  __Pyx_GIVEREF(__pyx_tuple__244);

  /* "View.MemoryView":284
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__245 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_indirect); if (unlikely(!__pyx_tuple__245)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__245);
  __Pyx_GIVEREF(__pyx_tuple__245);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_float_0_01 = PyFloat_FromDouble(0.01); if (unlikely(!__pyx_float_0_01)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initPyCafe(void); /*proto*/
PyMODINIT_FUNC initPyCafe(void)
#else
PyMODINIT_FUNC PyInit_PyCafe(void); /*proto*/
PyMODINIT_FUNC PyInit_PyCafe(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_PyCafe(void)", 0);
  if (__Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("PyCafe", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_PyCafe) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "PyCafe")) {
      if (unlikely(PyDict_SetItemString(modules, "PyCafe", __pyx_m) < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  __pyx_v_6PyCafe_py_cb = Py_None; Py_INCREF(Py_None);
  __pyx_v_6PyCafe_py_cb_handle = Py_None; Py_INCREF(Py_None);
  __pyx_v_6PyCafe_py_cb_ctrl = Py_None; Py_INCREF(Py_None);
  __pyx_v_6PyCafe_monDictGlobal = ((PyObject*)Py_None); Py_INCREF(Py_None);
  generic = Py_None; Py_INCREF(Py_None);
  strided = Py_None; Py_INCREF(Py_None);
  indirect = Py_None; Py_INCREF(Py_None);
  contiguous = Py_None; Py_INCREF(Py_None);
  indirect_contiguous = Py_None; Py_INCREF(Py_None);
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("py_cb_wrapper", (void (*)(void))__pyx_f_6PyCafe_py_cb_wrapper, "void (PVDataHolder, unsigned int, std::string)") < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("py_cb_ctrl_wrapper", (void (*)(void))__pyx_f_6PyCafe_py_cb_ctrl_wrapper, "void (PVCtrlHolder, unsigned int, std::string)") < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("py_cb_handle_wrapper", (void (*)(void))__pyx_f_6PyCafe_py_cb_handle_wrapper, "void (unsigned int)") < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("py_cb_handle_monid_wrapper", (void (*)(void))__pyx_f_6PyCafe_py_cb_handle_monid_wrapper, "void (unsigned int, unsigned long)") < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_6PyCafe__finalizer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6PyCafe__finalizer.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "_finalizer", (PyObject *)&__pyx_type_6PyCafe__finalizer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6PyCafe__finalizer = &__pyx_type_6PyCafe__finalizer;
  if (PyType_Ready(&__pyx_type_6PyCafe_CyCa) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6PyCafe_CyCa.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "CyCa", (PyObject *)&__pyx_type_6PyCafe_CyCa) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6PyCafe_CyCa = &__pyx_type_6PyCafe_CyCa;
  if (PyType_Ready(&__pyx_type_6PyCafe_channelInfo) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6PyCafe_channelInfo.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "channelInfo", (PyObject *)&__pyx_type_6PyCafe_channelInfo) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6PyCafe_channelInfo = &__pyx_type_6PyCafe_channelInfo;
  if (PyType_Ready(&__pyx_type_6PyCafe__epicsTimeStampAsDate) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6PyCafe__epicsTimeStampAsDate.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "_epicsTimeStampAsDate", (PyObject *)&__pyx_type_6PyCafe__epicsTimeStampAsDate) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6PyCafe__epicsTimeStampAsDate = &__pyx_type_6PyCafe__epicsTimeStampAsDate;
  __pyx_vtabptr_6PyCafe_pvctrl = &__pyx_vtable_6PyCafe_pvctrl;
  __pyx_vtable_6PyCafe_pvctrl.showPrint = (PyObject *(*)(struct __pyx_obj_6PyCafe_pvctrl *, PyObject *))__pyx_f_6PyCafe_6pvctrl_showPrint;
  if (PyType_Ready(&__pyx_type_6PyCafe_pvctrl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6PyCafe_pvctrl.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_6PyCafe_pvctrl.tp_dict, __pyx_vtabptr_6PyCafe_pvctrl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "pvctrl", (PyObject *)&__pyx_type_6PyCafe_pvctrl) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6PyCafe_pvctrl = &__pyx_type_6PyCafe_pvctrl;
  __pyx_vtabptr_6PyCafe_pvdata = &__pyx_vtable_6PyCafe_pvdata;
  __pyx_vtable_6PyCafe_pvdata.showPrint = (PyObject *(*)(struct __pyx_obj_6PyCafe_pvdata *, PyObject *))__pyx_f_6PyCafe_6pvdata_showPrint;
  if (PyType_Ready(&__pyx_type_6PyCafe_pvdata) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6PyCafe_pvdata.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_6PyCafe_pvdata.tp_dict, __pyx_vtabptr_6PyCafe_pvdata) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "pvdata", (PyObject *)&__pyx_type_6PyCafe_pvdata) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6PyCafe_pvdata = &__pyx_type_6PyCafe_pvdata;
  __pyx_vtabptr_6PyCafe_pvgroup = &__pyx_vtable_6PyCafe_pvgroup;
  __pyx_vtable_6PyCafe_pvgroup.showPrint = (PyObject *(*)(struct __pyx_obj_6PyCafe_pvgroup *, PyObject *, PyObject *))__pyx_f_6PyCafe_7pvgroup_showPrint;
  if (PyType_Ready(&__pyx_type_6PyCafe_pvgroup) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6PyCafe_pvgroup.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_6PyCafe_pvgroup.tp_dict, __pyx_vtabptr_6PyCafe_pvgroup) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "pvgroup", (PyObject *)&__pyx_type_6PyCafe_pvgroup) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6PyCafe_pvgroup = &__pyx_type_6PyCafe_pvgroup;
  __pyx_vtabptr_6PyCafe_CyCafe = &__pyx_vtable_6PyCafe_CyCafe;
  __pyx_vtable_6PyCafe_CyCafe.checkForHandle = (PyObject *(*)(struct __pyx_obj_6PyCafe_CyCafe *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6PyCafe_6CyCafe_checkForHandle *__pyx_optional_args))__pyx_f_6PyCafe_6CyCafe_checkForHandle;
  __pyx_vtable_6PyCafe_CyCafe.checkForHandleList = (PyObject *(*)(struct __pyx_obj_6PyCafe_CyCafe *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6PyCafe_6CyCafe_checkForHandleList *__pyx_optional_args))__pyx_f_6PyCafe_6CyCafe_checkForHandleList;
  __pyx_vtable_6PyCafe_CyCafe.checkForGroupHandle = (PyObject *(*)(struct __pyx_obj_6PyCafe_CyCafe *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6PyCafe_6CyCafe_checkForGroupHandle *__pyx_optional_args))__pyx_f_6PyCafe_6CyCafe_checkForGroupHandle;
  if (PyType_Ready(&__pyx_type_6PyCafe_CyCafe) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6PyCafe_CyCafe.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_6PyCafe_CyCafe.tp_dict, __pyx_vtabptr_6PyCafe_CyCafe) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "CyCafe", (PyObject *)&__pyx_type_6PyCafe_CyCafe) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6PyCafe_CyCafe = &__pyx_type_6PyCafe_CyCafe;
  if (PyType_Ready(&__pyx_type___pyx_array) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type___pyx_array.tp_print = 0;
  __pyx_array_type = &__pyx_type___pyx_array;
  if (PyType_Ready(&__pyx_type___pyx_MemviewEnum) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type___pyx_MemviewEnum.tp_print = 0;
  __pyx_MemviewEnum_type = &__pyx_type___pyx_MemviewEnum;
  __pyx_vtabptr_memoryview = &__pyx_vtable_memoryview;
  __pyx_vtable_memoryview.get_item_pointer = (char *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_get_item_pointer;
  __pyx_vtable_memoryview.is_slice = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_is_slice;
  __pyx_vtable_memoryview.setitem_slice_assignment = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_slice_assignment;
  __pyx_vtable_memoryview.setitem_slice_assign_scalar = (PyObject *(*)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_setitem_slice_assign_scalar;
  __pyx_vtable_memoryview.setitem_indexed = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_indexed;
  __pyx_vtable_memoryview.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryview_convert_item_to_object;
  __pyx_vtable_memoryview.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryview_assign_item_from_object;
  if (PyType_Ready(&__pyx_type___pyx_memoryview) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type___pyx_memoryview.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryview.tp_dict, __pyx_vtabptr_memoryview) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_memoryview_type = &__pyx_type___pyx_memoryview;
  __pyx_vtabptr__memoryviewslice = &__pyx_vtable__memoryviewslice;
  __pyx_vtable__memoryviewslice.__pyx_base = *__pyx_vtabptr_memoryview;
  __pyx_vtable__memoryviewslice.__pyx_base.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryviewslice_convert_item_to_object;
  __pyx_vtable__memoryviewslice.__pyx_base.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryviewslice_assign_item_from_object;
  __pyx_type___pyx_memoryviewslice.tp_base = __pyx_memoryview_type;
  if (PyType_Ready(&__pyx_type___pyx_memoryviewslice) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type___pyx_memoryviewslice.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryviewslice.tp_dict, __pyx_vtabptr__memoryviewslice) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_memoryviewslice_type = &__pyx_type___pyx_memoryviewslice;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif

  /* "PyCafe.pyx":5
 * 
 * cimport PyCafe as ccafe
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as cnp
 * import array
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafe.pyx":7
 * import numpy as np
 * cimport numpy as cnp
 * import array             # <<<<<<<<<<<<<<
 * from cython.view cimport array as cvarray
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_array, 0, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafe.pyx":14
 * from cython cimport view
 * #import ctypes
 * import time             # <<<<<<<<<<<<<<
 * 
 * import cython
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_time, 0, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_time, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafe.pyx":17
 * 
 * import cython
 * import inspect             # <<<<<<<<<<<<<<
 * import sys
 * 
 */
  __pyx_t_1 = __Pyx_patch_inspect(__Pyx_Import(__pyx_n_s_inspect, 0, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_inspect, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafe.pyx":18
 * import cython
 * import inspect
 * import sys             # <<<<<<<<<<<<<<
 * 
 * include "PyCafeDefs.pxi"
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":2
 * 
 * def show():             # <<<<<<<<<<<<<<
 * 	print ("cafe=PyCafe.CyCafe()")
 * 	print ("cyca=PyCafe.CyCa()")
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6PyCafe_1show, NULL, __pyx_n_s_PyCafe); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_show, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyCafeDefs.pxi":112
 * 
 * 
 * cdef int PYCAFE_PRINT_HIGH=9             # <<<<<<<<<<<<<<
 * cdef int PYCAFE_PRINT_MED=5
 * cdef int PYCAFE_PRINT_LOW=1
 */
  __pyx_v_6PyCafe_PYCAFE_PRINT_HIGH = 9;

  /* "PyCafeDefs.pxi":113
 * 
 * cdef int PYCAFE_PRINT_HIGH=9
 * cdef int PYCAFE_PRINT_MED=5             # <<<<<<<<<<<<<<
 * cdef int PYCAFE_PRINT_LOW=1
 * 
 */
  __pyx_v_6PyCafe_PYCAFE_PRINT_MED = 5;

  /* "PyCafeDefs.pxi":114
 * cdef int PYCAFE_PRINT_HIGH=9
 * cdef int PYCAFE_PRINT_MED=5
 * cdef int PYCAFE_PRINT_LOW=1             # <<<<<<<<<<<<<<
 * 
 * cdef int PYCAFE_PRINT_LEVEL=PYCAFE_PRINT_MED
 */
  __pyx_v_6PyCafe_PYCAFE_PRINT_LOW = 1;

  /* "PyCafeDefs.pxi":116
 * cdef int PYCAFE_PRINT_LOW=1
 * 
 * cdef int PYCAFE_PRINT_LEVEL=PYCAFE_PRINT_MED             # <<<<<<<<<<<<<<
 * 
 * ctypedef 	shared_ptr[vector [double]] vdouble_ptr
 */
  __pyx_v_6PyCafe_PYCAFE_PRINT_LEVEL = __pyx_v_6PyCafe_PYCAFE_PRINT_MED;

  /* "PyCafeDefs.pxi":121
 * ctypedef 	shared_ptr[vector [float]] vfloat_ptr
 * 
 * cdef object py_cb = None             # <<<<<<<<<<<<<<
 * cdef object py_cb_handle = None
 * cdef object py_cb_ctrl = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_XGOTREF(__pyx_v_6PyCafe_py_cb);
  __Pyx_DECREF_SET(__pyx_v_6PyCafe_py_cb, Py_None);
  __Pyx_GIVEREF(Py_None);

  /* "PyCafeDefs.pxi":122
 * 
 * cdef object py_cb = None
 * cdef object py_cb_handle = None             # <<<<<<<<<<<<<<
 * cdef object py_cb_ctrl = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_XGOTREF(__pyx_v_6PyCafe_py_cb_handle);
  __Pyx_DECREF_SET(__pyx_v_6PyCafe_py_cb_handle, Py_None);
  __Pyx_GIVEREF(Py_None);

  /* "PyCafeDefs.pxi":123
 * cdef object py_cb = None
 * cdef object py_cb_handle = None
 * cdef object py_cb_ctrl = None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_XGOTREF(__pyx_v_6PyCafe_py_cb_ctrl);
  __Pyx_DECREF_SET(__pyx_v_6PyCafe_py_cb_ctrl, Py_None);
  __Pyx_GIVEREF(Py_None);

  /* "PyCafe.pyx":22
 * include "PyCafeDefs.pxi"
 * 
 * cdef dict monDictGlobal={}             # <<<<<<<<<<<<<<
 * 
 * ##################################################################################
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(__pyx_v_6PyCafe_monDictGlobal);
  __Pyx_DECREF_SET(__pyx_v_6PyCafe_monDictGlobal, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCafe.pyx":2268
 * 
 * 	##################################################################################
 * 	def groupMonitorStart(self, ghandleName, object cb=None, DBR_TYPE dbr=DBR_TIME, unsigned int mask=DBE_VALUE|DBE_LOG|DBE_ALARM):             # <<<<<<<<<<<<<<
 * 	##########################################################################################
 * 
 */
  __pyx_k__158 = DBR_TIME;
  __pyx_k__159 = ((DBE_VALUE | DBE_LOG) | DBE_ALARM);

  /* "PyCafe.pyx":2797
 * 
 * 	##########################################################################################
 * 	def  monitorStart(self, handlePV, object cb=None, DBR_TYPE dbr=DBR_TIME, unsigned int mask=DBE_VALUE|DBE_LOG|DBE_ALARM):             # <<<<<<<<<<<<<<
 * 
 * 		#cdef pCallback my_callback
 */
  __pyx_k__176 = DBR_TIME;
  __pyx_k__177 = ((DBE_VALUE | DBE_LOG) | DBE_ALARM);

  /* "PyCafe.pyx":1
 * #distutils: language = c++             # <<<<<<<<<<<<<<
 * # file: PyCafe.pyx
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":205
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(array self):
 */
  __pyx_t_1 = __pyx_capsule_create(((void *)(&__pyx_array_getbuffer)), __pyx_k_getbuffer_obj_view_flags); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_array_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_array_type);

  /* "View.MemoryView":278
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__241, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(generic);
  __Pyx_DECREF_SET(generic, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":279
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__242, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(strided);
  __Pyx_DECREF_SET(strided, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":280
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__243, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(indirect);
  __Pyx_DECREF_SET(indirect, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":283
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__244, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(contiguous);
  __Pyx_DECREF_SET(contiguous, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":284
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__245, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(indirect_contiguous);
  __Pyx_DECREF_SET(indirect_contiguous, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":498
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), __pyx_k_getbuffer_obj_view_flags); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_memoryview_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_memoryview_type);

  /* "View.MemoryView":954
 *             return self.from_object
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), __pyx_k_getbuffer_obj_view_flags); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_memoryviewslice_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_memoryviewslice_type);

  /* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init PyCafe", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init PyCafe");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#endif
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                #if PyLong_SHIFT < 30 && PyLong_SHIFT != 15
                default: return PyLong_Type.tp_richcompare(op1, op2, Py_EQ);
                #else
                default: Py_RETURN_FALSE;
                #endif
            }
        }
            if (a == b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            if ((double)a == (double)b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    return PyObject_RichCompare(op1, op2, Py_EQ);
}
#endif

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            args = PyTuple_New(2);
            if (unlikely(!args)) goto bad;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
bad:
    Py_XDECREF(method);
    return result;
}

static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

static CYTHON_INLINE int __Pyx_IsLittleEndian(void) {
  unsigned int n = 1;
  return *(unsigned char*)(&n) != 0;
}
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static CYTHON_INLINE PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}
static CYTHON_INLINE void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static CYTHON_INLINE int __Pyx_GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  if (obj == Py_None || obj == NULL) {
    __Pyx_ZeroBuffer(buf);
    return 0;
  }
  buf->buf = NULL;
  if (__Pyx_GetBuffer(obj, buf, flags) == -1) goto fail;
  if (buf->ndim != nd) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if ((unsigned)buf->itemsize != dtype->size) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_ZeroBuffer(buf);
  return -1;
}
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (info->buf == NULL) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}

static int
__Pyx_init_memviewslice(struct __pyx_memoryview_obj *memview,
                        int ndim,
                        __Pyx_memviewslice *memviewslice,
                        int memview_is_new_reference)
{
    __Pyx_RefNannyDeclarations
    int i, retval=-1;
    Py_buffer *buf = &memview->view;
    __Pyx_RefNannySetupContext("init_memviewslice", 0);
    if (!buf) {
        PyErr_SetString(PyExc_ValueError,
            "buf is NULL.");
        goto fail;
    } else if (memviewslice->memview || memviewslice->data) {
        PyErr_SetString(PyExc_ValueError,
            "memviewslice is already initialized!");
        goto fail;
    }
    if (buf->strides) {
        for (i = 0; i < ndim; i++) {
            memviewslice->strides[i] = buf->strides[i];
        }
    } else {
        Py_ssize_t stride = buf->itemsize;
        for (i = ndim - 1; i >= 0; i--) {
            memviewslice->strides[i] = stride;
            stride *= buf->shape[i];
        }
    }
    for (i = 0; i < ndim; i++) {
        memviewslice->shape[i]   = buf->shape[i];
        if (buf->suboffsets) {
            memviewslice->suboffsets[i] = buf->suboffsets[i];
        } else {
            memviewslice->suboffsets[i] = -1;
        }
    }
    memviewslice->memview = memview;
    memviewslice->data = (char *)buf->buf;
    if (__pyx_add_acquisition_count(memview) == 0 && !memview_is_new_reference) {
        Py_INCREF(memview);
    }
    retval = 0;
    goto no_fail;
fail:
    memviewslice->memview = 0;
    memviewslice->data = 0;
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}
static CYTHON_INLINE void __pyx_fatalerror(const char *fmt, ...) {
    va_list vargs;
    char msg[200];
#ifdef HAVE_STDARG_PROTOTYPES
    va_start(vargs, fmt);
#else
    va_start(vargs);
#endif
    vsnprintf(msg, 200, fmt, vargs);
    Py_FatalError(msg);
    va_end(vargs);
}
static CYTHON_INLINE int
__pyx_add_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)++;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE int
__pyx_sub_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)--;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE void
__Pyx_INC_MEMVIEW(__Pyx_memviewslice *memslice, int have_gil, int lineno)
{
    int first_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (!memview || (PyObject *) memview == Py_None)
        return;
    if (__pyx_get_slice_count(memview) < 0)
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    first_time = __pyx_add_acquisition_count(memview) == 0;
    if (first_time) {
        if (have_gil) {
            Py_INCREF((PyObject *) memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_INCREF((PyObject *) memview);
            PyGILState_Release(_gilstate);
        }
    }
}
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *memslice,
                                             int have_gil, int lineno) {
    int last_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (!memview ) {
        return;
    } else if ((PyObject *) memview == Py_None) {
        memslice->memview = NULL;
        return;
    }
    if (__pyx_get_slice_count(memview) <= 0)
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    last_time = __pyx_sub_acquisition_count(memview) == 1;
    memslice->data = NULL;
    if (last_time) {
        if (have_gil) {
            Py_CLEAR(memslice->memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_CLEAR(memslice->memview);
            PyGILState_Release(_gilstate);
        }
    } else {
        memslice->memview = NULL;
    }
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t q = a / b;
    Py_ssize_t r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_COMPILING_IN_CPYTHON
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
#else
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
#endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

#if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

static PyObject* __Pyx_patch_inspect(PyObject* module) {
#if defined(__Pyx_Generator_USED) && (!defined(CYTHON_PATCH_INSPECT) || CYTHON_PATCH_INSPECT)
    static int inspect_patched = 0;
    if (unlikely((!inspect_patched) && module)) {
        module = __Pyx_Coroutine_patch_module(
            module, ""
"old_types = getattr(_module.isgenerator, '_cython_generator_types', None)\n"
"if old_types is None or not isinstance(old_types, set):\n"
"    old_types = set()\n"
"    def cy_wrap(orig_func, type=type, cython_generator_types=old_types):\n"
"        def cy_isgenerator(obj): return type(obj) in cython_generator_types or orig_func(obj)\n"
"        cy_isgenerator._cython_generator_types = cython_generator_types\n"
"        return cy_isgenerator\n"
"    _module.isgenerator = cy_wrap(_module.isgenerator)\n"
"old_types.add(_cython_generator_type)\n"
        );
        inspect_patched = 1;
    }
#else
    if (0) return __Pyx_Coroutine_patch_module(module, NULL);
#endif
    return module;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_memoryview_type)) return __pyx_memoryview_getbuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) { __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view); return; }
    Py_DECREF(obj);
    view->obj = NULL;
}
#endif


          #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE DBR_TYPE __Pyx_PyInt_As_DBR_TYPE(PyObject *x) {
    const DBR_TYPE neg_one = (DBR_TYPE) -1, const_zero = (DBR_TYPE) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(DBR_TYPE) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(DBR_TYPE, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (DBR_TYPE) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (DBR_TYPE) 0;
                case  1: __PYX_VERIFY_RETURN_INT(DBR_TYPE, digit, digits[0])
                case 2:
                    if (8 * sizeof(DBR_TYPE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(DBR_TYPE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(DBR_TYPE) >= 2 * PyLong_SHIFT) {
                            return (DBR_TYPE) (((((DBR_TYPE)digits[1]) << PyLong_SHIFT) | (DBR_TYPE)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(DBR_TYPE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(DBR_TYPE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(DBR_TYPE) >= 3 * PyLong_SHIFT) {
                            return (DBR_TYPE) (((((((DBR_TYPE)digits[2]) << PyLong_SHIFT) | (DBR_TYPE)digits[1]) << PyLong_SHIFT) | (DBR_TYPE)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(DBR_TYPE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(DBR_TYPE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(DBR_TYPE) >= 4 * PyLong_SHIFT) {
                            return (DBR_TYPE) (((((((((DBR_TYPE)digits[3]) << PyLong_SHIFT) | (DBR_TYPE)digits[2]) << PyLong_SHIFT) | (DBR_TYPE)digits[1]) << PyLong_SHIFT) | (DBR_TYPE)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (DBR_TYPE) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(DBR_TYPE) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(DBR_TYPE, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(DBR_TYPE) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(DBR_TYPE, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (DBR_TYPE) 0;
                case -1: __PYX_VERIFY_RETURN_INT(DBR_TYPE, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(DBR_TYPE,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(DBR_TYPE) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(DBR_TYPE, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(DBR_TYPE) - 1 > 2 * PyLong_SHIFT) {
                            return (DBR_TYPE) (((DBR_TYPE)-1)*(((((DBR_TYPE)digits[1]) << PyLong_SHIFT) | (DBR_TYPE)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(DBR_TYPE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(DBR_TYPE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(DBR_TYPE) - 1 > 2 * PyLong_SHIFT) {
                            return (DBR_TYPE) ((((((DBR_TYPE)digits[1]) << PyLong_SHIFT) | (DBR_TYPE)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(DBR_TYPE) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(DBR_TYPE, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(DBR_TYPE) - 1 > 3 * PyLong_SHIFT) {
                            return (DBR_TYPE) (((DBR_TYPE)-1)*(((((((DBR_TYPE)digits[2]) << PyLong_SHIFT) | (DBR_TYPE)digits[1]) << PyLong_SHIFT) | (DBR_TYPE)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(DBR_TYPE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(DBR_TYPE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(DBR_TYPE) - 1 > 3 * PyLong_SHIFT) {
                            return (DBR_TYPE) ((((((((DBR_TYPE)digits[2]) << PyLong_SHIFT) | (DBR_TYPE)digits[1]) << PyLong_SHIFT) | (DBR_TYPE)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(DBR_TYPE) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(DBR_TYPE, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(DBR_TYPE) - 1 > 4 * PyLong_SHIFT) {
                            return (DBR_TYPE) (((DBR_TYPE)-1)*(((((((((DBR_TYPE)digits[3]) << PyLong_SHIFT) | (DBR_TYPE)digits[2]) << PyLong_SHIFT) | (DBR_TYPE)digits[1]) << PyLong_SHIFT) | (DBR_TYPE)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(DBR_TYPE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(DBR_TYPE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(DBR_TYPE) - 1 > 4 * PyLong_SHIFT) {
                            return (DBR_TYPE) ((((((((((DBR_TYPE)digits[3]) << PyLong_SHIFT) | (DBR_TYPE)digits[2]) << PyLong_SHIFT) | (DBR_TYPE)digits[1]) << PyLong_SHIFT) | (DBR_TYPE)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(DBR_TYPE) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(DBR_TYPE, long, PyLong_AsLong(x))
            } else if (sizeof(DBR_TYPE) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(DBR_TYPE, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            DBR_TYPE val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (DBR_TYPE) -1;
        }
    } else {
        DBR_TYPE val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (DBR_TYPE) -1;
        val = __Pyx_PyInt_As_DBR_TYPE(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to DBR_TYPE");
    return (DBR_TYPE) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to DBR_TYPE");
    return (DBR_TYPE) -1;
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value) {
    const unsigned long neg_one = (unsigned long) -1, const_zero = (unsigned long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(unsigned long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_short(unsigned short value) {
    const unsigned short neg_one = (unsigned short) -1, const_zero = (unsigned short) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned short) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned short) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned short) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(unsigned short) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned short) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned short),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_short(short value) {
    const short neg_one = (short) -1, const_zero = (short) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(short) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(short) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(short) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(short) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(short) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(short),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_DBR_TYPE(DBR_TYPE value) {
    const DBR_TYPE neg_one = (DBR_TYPE) -1, const_zero = (DBR_TYPE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(DBR_TYPE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(DBR_TYPE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(DBR_TYPE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(DBR_TYPE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(DBR_TYPE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(DBR_TYPE),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_CAFE_CFT_STATE(CAFE_CFT_STATE value) {
    const CAFE_CFT_STATE neg_one = (CAFE_CFT_STATE) -1, const_zero = (CAFE_CFT_STATE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(CAFE_CFT_STATE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(CAFE_CFT_STATE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(CAFE_CFT_STATE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(CAFE_CFT_STATE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(CAFE_CFT_STATE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(CAFE_CFT_STATE),
                                     little, !is_unsigned);
    }
}

static PyObject *__pyx_memview_get_int(const char *itemp) {
    return (PyObject *) __Pyx_PyInt_From_int(*(int *) itemp);
}
static int __pyx_memview_set_int(const char *itemp, PyObject *obj) {
    int value = __Pyx_PyInt_As_int(obj);
    if ((value == (int)-1) && PyErr_Occurred())
        return 0;
    *(int *) itemp = value;
    return 1;
}

static PyObject *__pyx_memview_get_double(const char *itemp) {
    return (PyObject *) PyFloat_FromDouble(*(double *) itemp);
}
static int __pyx_memview_set_double(const char *itemp, PyObject *obj) {
    double value = __pyx_PyFloat_AsDouble(obj);
    if ((value == (double)-1) && PyErr_Occurred())
        return 0;
    *(double *) itemp = value;
    return 1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_dbr_long_t(dbr_long_t value) {
    const dbr_long_t neg_one = (dbr_long_t) -1, const_zero = (dbr_long_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(dbr_long_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(dbr_long_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(dbr_long_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(dbr_long_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(dbr_long_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(dbr_long_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_char(unsigned char value) {
    const unsigned char neg_one = (unsigned char) -1, const_zero = (unsigned char) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned char) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned char) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned char) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(unsigned char) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned char) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned char),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

static CYTHON_INLINE dbr_long_t __Pyx_PyInt_As_dbr_long_t(PyObject *x) {
    const dbr_long_t neg_one = (dbr_long_t) -1, const_zero = (dbr_long_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(dbr_long_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(dbr_long_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (dbr_long_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (dbr_long_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(dbr_long_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(dbr_long_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(dbr_long_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(dbr_long_t) >= 2 * PyLong_SHIFT) {
                            return (dbr_long_t) (((((dbr_long_t)digits[1]) << PyLong_SHIFT) | (dbr_long_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(dbr_long_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(dbr_long_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(dbr_long_t) >= 3 * PyLong_SHIFT) {
                            return (dbr_long_t) (((((((dbr_long_t)digits[2]) << PyLong_SHIFT) | (dbr_long_t)digits[1]) << PyLong_SHIFT) | (dbr_long_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(dbr_long_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(dbr_long_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(dbr_long_t) >= 4 * PyLong_SHIFT) {
                            return (dbr_long_t) (((((((((dbr_long_t)digits[3]) << PyLong_SHIFT) | (dbr_long_t)digits[2]) << PyLong_SHIFT) | (dbr_long_t)digits[1]) << PyLong_SHIFT) | (dbr_long_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (dbr_long_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(dbr_long_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(dbr_long_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(dbr_long_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(dbr_long_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (dbr_long_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(dbr_long_t, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(dbr_long_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(dbr_long_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(dbr_long_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(dbr_long_t) - 1 > 2 * PyLong_SHIFT) {
                            return (dbr_long_t) (((dbr_long_t)-1)*(((((dbr_long_t)digits[1]) << PyLong_SHIFT) | (dbr_long_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(dbr_long_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(dbr_long_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(dbr_long_t) - 1 > 2 * PyLong_SHIFT) {
                            return (dbr_long_t) ((((((dbr_long_t)digits[1]) << PyLong_SHIFT) | (dbr_long_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(dbr_long_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(dbr_long_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(dbr_long_t) - 1 > 3 * PyLong_SHIFT) {
                            return (dbr_long_t) (((dbr_long_t)-1)*(((((((dbr_long_t)digits[2]) << PyLong_SHIFT) | (dbr_long_t)digits[1]) << PyLong_SHIFT) | (dbr_long_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(dbr_long_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(dbr_long_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(dbr_long_t) - 1 > 3 * PyLong_SHIFT) {
                            return (dbr_long_t) ((((((((dbr_long_t)digits[2]) << PyLong_SHIFT) | (dbr_long_t)digits[1]) << PyLong_SHIFT) | (dbr_long_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(dbr_long_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(dbr_long_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(dbr_long_t) - 1 > 4 * PyLong_SHIFT) {
                            return (dbr_long_t) (((dbr_long_t)-1)*(((((((((dbr_long_t)digits[3]) << PyLong_SHIFT) | (dbr_long_t)digits[2]) << PyLong_SHIFT) | (dbr_long_t)digits[1]) << PyLong_SHIFT) | (dbr_long_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(dbr_long_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(dbr_long_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(dbr_long_t) - 1 > 4 * PyLong_SHIFT) {
                            return (dbr_long_t) ((((((((((dbr_long_t)digits[3]) << PyLong_SHIFT) | (dbr_long_t)digits[2]) << PyLong_SHIFT) | (dbr_long_t)digits[1]) << PyLong_SHIFT) | (dbr_long_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(dbr_long_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(dbr_long_t, long, PyLong_AsLong(x))
            } else if (sizeof(dbr_long_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(dbr_long_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            dbr_long_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (dbr_long_t) -1;
        }
    } else {
        dbr_long_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (dbr_long_t) -1;
        val = __Pyx_PyInt_As_dbr_long_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to dbr_long_t");
    return (dbr_long_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to dbr_long_t");
    return (dbr_long_t) -1;
}

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

static int
__pyx_memviewslice_is_contig(const __Pyx_memviewslice *mvs,
                             char order, int ndim)
{
    int i, index, step, start;
    Py_ssize_t itemsize = mvs->memview->view.itemsize;
    if (order == 'F') {
        step = 1;
        start = 0;
    } else {
        step = -1;
        start = ndim - 1;
    }
    for (i = 0; i < ndim; i++) {
        index = start + step * i;
        if (mvs->suboffsets[index] >= 0 || mvs->strides[index] != itemsize)
            return 0;
        itemsize *= mvs->shape[index];
    }
    return 1;
}

static void
__pyx_get_array_memory_extents(__Pyx_memviewslice *slice,
                               void **out_start, void **out_end,
                               int ndim, size_t itemsize)
{
    char *start, *end;
    int i;
    start = end = slice->data;
    for (i = 0; i < ndim; i++) {
        Py_ssize_t stride = slice->strides[i];
        Py_ssize_t extent = slice->shape[i];
        if (extent == 0) {
            *out_start = *out_end = start;
            return;
        } else {
            if (stride > 0)
                end += stride * (extent - 1);
            else
                start += stride * (extent - 1);
        }
    }
    *out_start = start;
    *out_end = end + itemsize;
}
static int
__pyx_slices_overlap(__Pyx_memviewslice *slice1,
                     __Pyx_memviewslice *slice2,
                     int ndim, size_t itemsize)
{
    void *start1, *end1, *start2, *end2;
    __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);
    __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);
    return (start1 < end2) && (start2 < end1);
}

static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object)
{
    __Pyx_RefNannyDeclarations
    int i;
    __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };
    struct __pyx_memoryview_obj *from_memview = from_mvs->memview;
    Py_buffer *buf = &from_memview->view;
    PyObject *shape_tuple = NULL;
    PyObject *temp_int = NULL;
    struct __pyx_array_obj *array_obj = NULL;
    struct __pyx_memoryview_obj *memview_obj = NULL;
    __Pyx_RefNannySetupContext("__pyx_memoryview_copy_new_contig", 0);
    for (i = 0; i < ndim; i++) {
        if (from_mvs->suboffsets[i] >= 0) {
            PyErr_Format(PyExc_ValueError, "Cannot copy memoryview slice with "
                                           "indirect dimensions (axis %d)", i);
            goto fail;
        }
    }
    shape_tuple = PyTuple_New(ndim);
    if (unlikely(!shape_tuple)) {
        goto fail;
    }
    __Pyx_GOTREF(shape_tuple);
    for(i = 0; i < ndim; i++) {
        temp_int = PyInt_FromSsize_t(from_mvs->shape[i]);
        if(unlikely(!temp_int)) {
            goto fail;
        } else {
            PyTuple_SET_ITEM(shape_tuple, i, temp_int);
            temp_int = NULL;
        }
    }
    array_obj = __pyx_array_new(shape_tuple, sizeof_dtype, buf->format, (char *) mode, NULL);
    if (unlikely(!array_obj)) {
        goto fail;
    }
    __Pyx_GOTREF(array_obj);
    memview_obj = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                    (PyObject *) array_obj, contig_flag,
                                    dtype_is_object,
                                    from_mvs->memview->typeinfo);
    if (unlikely(!memview_obj))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview_obj, ndim, &new_mvs, 1) < 0))
        goto fail;
    if (unlikely(__pyx_memoryview_copy_contents(*from_mvs, new_mvs, ndim, ndim,
                                                dtype_is_object) < 0))
        goto fail;
    goto no_fail;
fail:
    __Pyx_XDECREF(new_mvs.memview);
    new_mvs.memview = NULL;
    new_mvs.data = NULL;
no_fail:
    __Pyx_XDECREF(shape_tuple);
    __Pyx_XDECREF(temp_int);
    __Pyx_XDECREF(array_obj);
    __Pyx_RefNannyFinishContext();
    return new_mvs;
}

static CYTHON_INLINE PyObject *
__pyx_capsule_create(void *p, CYTHON_UNUSED const char *sig)
{
    PyObject *cobj;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(p, sig, NULL);
#else
    cobj = PyCObject_FromVoidPtr(p, NULL);
#endif
    return cobj;
}

static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
    const char neg_one = (char) -1, const_zero = (char) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 2 * PyLong_SHIFT) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 3 * PyLong_SHIFT) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 4 * PyLong_SHIFT) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

static struct __pyx_typeinfo_string __Pyx_TypeInfoToFormat(__Pyx_TypeInfo *type) {
    struct __pyx_typeinfo_string result = { {0} };
    char *buf = (char *) result.string;
    size_t size = type->size;
    switch (type->typegroup) {
        case 'H':
            *buf = 'c';
            break;
        case 'I':
        case 'U':
            if (size == 1)
                *buf = (type->is_unsigned) ? 'B' : 'b';
            else if (size == 2)
                *buf = (type->is_unsigned) ? 'H' : 'h';
            else if (size == 4)
                *buf = (type->is_unsigned) ? 'I' : 'i';
            else if (size == 8)
                *buf = (type->is_unsigned) ? 'Q' : 'q';
            break;
        case 'P':
            *buf = 'P';
            break;
        case 'C':
         {
            __Pyx_TypeInfo complex_type = *type;
            complex_type.typegroup = 'R';
            complex_type.size /= 2;
            *buf++ = 'Z';
            *buf = __Pyx_TypeInfoToFormat(&complex_type).string[0];
            break;
         }
        case 'R':
            if (size == 4)
                *buf = 'f';
            else if (size == 8)
                *buf = 'd';
            else
                *buf = 'g';
            break;
    }
    return result;
}

static int
__pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b)
{
    int i;
    if (!a || !b)
        return 0;
    if (a == b)
        return 1;
    if (a->size != b->size || a->typegroup != b->typegroup ||
            a->is_unsigned != b->is_unsigned || a->ndim != b->ndim) {
        if (a->typegroup == 'H' || b->typegroup == 'H') {
            return a->size == b->size;
        } else {
            return 0;
        }
    }
    if (a->ndim) {
        for (i = 0; i < a->ndim; i++)
            if (a->arraysize[i] != b->arraysize[i])
                return 0;
    }
    if (a->typegroup == 'S') {
        if (a->flags != b->flags)
            return 0;
        if (a->fields || b->fields) {
            if (!(a->fields && b->fields))
                return 0;
            for (i = 0; a->fields[i].type && b->fields[i].type; i++) {
                __Pyx_StructField *field_a = a->fields + i;
                __Pyx_StructField *field_b = b->fields + i;
                if (field_a->offset != field_b->offset ||
                    !__pyx_typeinfo_cmp(field_a->type, field_b->type))
                    return 0;
            }
            return !a->fields[i].type && !b->fields[i].type;
        }
    }
    return 1;
}

static int
__pyx_check_strides(Py_buffer *buf, int dim, int ndim, int spec)
{
    if (buf->shape[dim] <= 1)
        return 1;
    if (buf->strides) {
        if (spec & __Pyx_MEMVIEW_CONTIG) {
            if (spec & (__Pyx_MEMVIEW_PTR|__Pyx_MEMVIEW_FULL)) {
                if (buf->strides[dim] != sizeof(void *)) {
                    PyErr_Format(PyExc_ValueError,
                                 "Buffer is not indirectly contiguous "
                                 "in dimension %d.", dim);
                    goto fail;
                }
            } else if (buf->strides[dim] != buf->itemsize) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
        if (spec & __Pyx_MEMVIEW_FOLLOW) {
            Py_ssize_t stride = buf->strides[dim];
            if (stride < 0)
                stride = -stride;
            if (stride < buf->itemsize) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
    } else {
        if (spec & __Pyx_MEMVIEW_CONTIG && dim != ndim - 1) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not contiguous in "
                         "dimension %d", dim);
            goto fail;
        } else if (spec & (__Pyx_MEMVIEW_PTR)) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not indirect in "
                         "dimension %d", dim);
            goto fail;
        } else if (buf->suboffsets) {
            PyErr_SetString(PyExc_ValueError,
                            "Buffer exposes suboffsets but no strides");
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_check_suboffsets(Py_buffer *buf, int dim, CYTHON_UNUSED int ndim, int spec)
{
    if (spec & __Pyx_MEMVIEW_DIRECT) {
        if (buf->suboffsets && buf->suboffsets[dim] >= 0) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer not compatible with direct access "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    if (spec & __Pyx_MEMVIEW_PTR) {
        if (!buf->suboffsets || (buf->suboffsets && buf->suboffsets[dim] < 0)) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer is not indirectly accessible "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_verify_contig(Py_buffer *buf, int ndim, int c_or_f_flag)
{
    int i;
    if (c_or_f_flag & __Pyx_IS_F_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = 0; i < ndim; i++) {
            if (stride * buf->itemsize != buf->strides[i] &&
                    buf->shape[i] > 1)
            {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not fortran contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    } else if (c_or_f_flag & __Pyx_IS_C_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = ndim - 1; i >- 1; i--) {
            if (stride * buf->itemsize != buf->strides[i] &&
                    buf->shape[i] > 1) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not C contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    }
    return 1;
fail:
    return 0;
}
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj)
{
    struct __pyx_memoryview_obj *memview, *new_memview;
    __Pyx_RefNannyDeclarations
    Py_buffer *buf;
    int i, spec = 0, retval = -1;
    __Pyx_BufFmt_Context ctx;
    int from_memoryview = __pyx_memoryview_check(original_obj);
    __Pyx_RefNannySetupContext("ValidateAndInit_memviewslice", 0);
    if (from_memoryview && __pyx_typeinfo_cmp(dtype, ((struct __pyx_memoryview_obj *)
                                                            original_obj)->typeinfo)) {
        memview = (struct __pyx_memoryview_obj *) original_obj;
        new_memview = NULL;
    } else {
        memview = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                            original_obj, buf_flags, 0, dtype);
        new_memview = memview;
        if (unlikely(!memview))
            goto fail;
    }
    buf = &memview->view;
    if (buf->ndim != ndim) {
        PyErr_Format(PyExc_ValueError,
                "Buffer has wrong number of dimensions (expected %d, got %d)",
                ndim, buf->ndim);
        goto fail;
    }
    if (new_memview) {
        __Pyx_BufFmt_Init(&ctx, stack, dtype);
        if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
    }
    if ((unsigned) buf->itemsize != dtype->size) {
        PyErr_Format(PyExc_ValueError,
                     "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "u byte%s) "
                     "does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "u byte%s)",
                     buf->itemsize,
                     (buf->itemsize > 1) ? "s" : "",
                     dtype->name,
                     dtype->size,
                     (dtype->size > 1) ? "s" : "");
        goto fail;
    }
    for (i = 0; i < ndim; i++) {
        spec = axes_specs[i];
        if (!__pyx_check_strides(buf, i, ndim, spec))
            goto fail;
        if (!__pyx_check_suboffsets(buf, i, ndim, spec))
            goto fail;
    }
    if (buf->strides && !__pyx_verify_contig(buf, ndim, c_or_f_flag))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview, ndim, memviewslice,
                                         new_memview != NULL) == -1)) {
        goto fail;
    }
    retval = 0;
    goto no_fail;
fail:
    Py_XDECREF(new_memview);
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}

static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dc_int(PyObject *obj) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_CONTIG) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, __Pyx_IS_C_CONTIG,
                                                 (PyBUF_C_CONTIGUOUS | PyBUF_FORMAT | PyBUF_WRITABLE), 1,
                                                 &__Pyx_TypeInfo_int, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dc_double(PyObject *obj) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_CONTIG) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, __Pyx_IS_C_CONTIG,
                                                 (PyBUF_C_CONTIGUOUS | PyBUF_FORMAT | PyBUF_WRITABLE), 1,
                                                 &__Pyx_TypeInfo_double, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
